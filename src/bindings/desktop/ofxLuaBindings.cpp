/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GLenum swig_types[0]
#define SWIGTYPE_p_GLsizei swig_types[1]
#define SWIGTYPE_p_GLuint swig_types[2]
#define SWIGTYPE_p_double swig_types[3]
#define SWIGTYPE_p_filebuf swig_types[4]
#define SWIGTYPE_p_float swig_types[5]
#define SWIGTYPE_p_fstream swig_types[6]
#define SWIGTYPE_p_int swig_types[7]
#define SWIGTYPE_p_istream swig_types[8]
#define SWIGTYPE_p_of3dGraphics swig_types[9]
#define SWIGTYPE_p_of3dPrimitive swig_types[10]
#define SWIGTYPE_p_ofAbstractImage swig_types[11]
#define SWIGTYPE_p_ofAppBaseWindow swig_types[12]
#define SWIGTYPE_p_ofBaseApp swig_types[13]
#define SWIGTYPE_p_ofBaseDraws swig_types[14]
#define SWIGTYPE_p_ofBaseFileSerializer swig_types[15]
#define SWIGTYPE_p_ofBaseGLRenderer swig_types[16]
#define SWIGTYPE_p_ofBaseHasPixels swig_types[17]
#define SWIGTYPE_p_ofBaseHasTexture swig_types[18]
#define SWIGTYPE_p_ofBaseHasTexturePlanes swig_types[19]
#define SWIGTYPE_p_ofBaseImage_T_float_t swig_types[20]
#define SWIGTYPE_p_ofBaseImage_T_unsigned_char_t swig_types[21]
#define SWIGTYPE_p_ofBaseImage_T_unsigned_short_t swig_types[22]
#define SWIGTYPE_p_ofBaseLoggerChannel swig_types[23]
#define SWIGTYPE_p_ofBaseMaterial swig_types[24]
#define SWIGTYPE_p_ofBaseRenderer swig_types[25]
#define SWIGTYPE_p_ofBaseSerializer swig_types[26]
#define SWIGTYPE_p_ofBaseSoundInput swig_types[27]
#define SWIGTYPE_p_ofBaseSoundOutput swig_types[28]
#define SWIGTYPE_p_ofBaseSoundPlayer swig_types[29]
#define SWIGTYPE_p_ofBaseURLFileLoader swig_types[30]
#define SWIGTYPE_p_ofBaseUpdates swig_types[31]
#define SWIGTYPE_p_ofBaseVideo swig_types[32]
#define SWIGTYPE_p_ofBaseVideoDraws swig_types[33]
#define SWIGTYPE_p_ofBaseVideoGrabber swig_types[34]
#define SWIGTYPE_p_ofBaseVideoPlayer swig_types[35]
#define SWIGTYPE_p_ofBoxPrimitive swig_types[36]
#define SWIGTYPE_p_ofBuffer swig_types[37]
#define SWIGTYPE_p_ofBufferObject swig_types[38]
#define SWIGTYPE_p_ofCamera swig_types[39]
#define SWIGTYPE_p_ofColor_T_float_t swig_types[40]
#define SWIGTYPE_p_ofColor_T_unsigned_char_t swig_types[41]
#define SWIGTYPE_p_ofColor_T_unsigned_short_t swig_types[42]
#define SWIGTYPE_p_ofConePrimitive swig_types[43]
#define SWIGTYPE_p_ofConsoleLoggerChannel swig_types[44]
#define SWIGTYPE_p_ofCoreEvents swig_types[45]
#define SWIGTYPE_p_ofCylinderPrimitive swig_types[46]
#define SWIGTYPE_p_ofDirectory swig_types[47]
#define SWIGTYPE_p_ofDragInfo swig_types[48]
#define SWIGTYPE_p_ofEasyCam swig_types[49]
#define SWIGTYPE_p_ofEventArgs swig_types[50]
#define SWIGTYPE_p_ofEventT_ofHttpResponse_t swig_types[51]
#define SWIGTYPE_p_ofFbo swig_types[52]
#define SWIGTYPE_p_ofFbo__Settings swig_types[53]
#define SWIGTYPE_p_ofFile swig_types[54]
#define SWIGTYPE_p_ofFileDialogResult swig_types[55]
#define SWIGTYPE_p_ofFileLoggerChannel swig_types[56]
#define SWIGTYPE_p_ofFilePath swig_types[57]
#define SWIGTYPE_p_ofGLProgrammableRenderer swig_types[58]
#define SWIGTYPE_p_ofHttpRequest swig_types[59]
#define SWIGTYPE_p_ofHttpResponse swig_types[60]
#define SWIGTYPE_p_ofIcoSpherePrimitive swig_types[61]
#define SWIGTYPE_p_ofImage_T_float_t swig_types[62]
#define SWIGTYPE_p_ofImage_T_unsigned_char_t swig_types[63]
#define SWIGTYPE_p_ofImage_T_unsigned_short_t swig_types[64]
#define SWIGTYPE_p_ofKeyEventArgs swig_types[65]
#define SWIGTYPE_p_ofLight swig_types[66]
#define SWIGTYPE_p_ofLog swig_types[67]
#define SWIGTYPE_p_ofLogError swig_types[68]
#define SWIGTYPE_p_ofLogFatalError swig_types[69]
#define SWIGTYPE_p_ofLogNotice swig_types[70]
#define SWIGTYPE_p_ofLogVerbose swig_types[71]
#define SWIGTYPE_p_ofLogWarning swig_types[72]
#define SWIGTYPE_p_ofMaterial swig_types[73]
#define SWIGTYPE_p_ofMaterial__Data swig_types[74]
#define SWIGTYPE_p_ofMatrix3x3 swig_types[75]
#define SWIGTYPE_p_ofMatrix4x4 swig_types[76]
#define SWIGTYPE_p_ofMatrixStack swig_types[77]
#define SWIGTYPE_p_ofMesh swig_types[78]
#define SWIGTYPE_p_ofMeshFace swig_types[79]
#define SWIGTYPE_p_ofMessage swig_types[80]
#define SWIGTYPE_p_ofMouseEventArgs swig_types[81]
#define SWIGTYPE_p_ofNode swig_types[82]
#define SWIGTYPE_p_ofParameterGroup swig_types[83]
#define SWIGTYPE_p_ofPath swig_types[84]
#define SWIGTYPE_p_ofPixels_T_float_t swig_types[85]
#define SWIGTYPE_p_ofPixels_T_unsigned_char_t swig_types[86]
#define SWIGTYPE_p_ofPixels_T_unsigned_short_t swig_types[87]
#define SWIGTYPE_p_ofPlanePrimitive swig_types[88]
#define SWIGTYPE_p_ofPolyRenderMode swig_types[89]
#define SWIGTYPE_p_ofPolyline swig_types[90]
#define SWIGTYPE_p_ofPrimitiveMode swig_types[91]
#define SWIGTYPE_p_ofQuaternion swig_types[92]
#define SWIGTYPE_p_ofRectangle swig_types[93]
#define SWIGTYPE_p_ofResizeEventArgs swig_types[94]
#define SWIGTYPE_p_ofSerialDeviceInfo swig_types[95]
#define SWIGTYPE_p_ofShader swig_types[96]
#define SWIGTYPE_p_ofSoundDevice swig_types[97]
#define SWIGTYPE_p_ofSoundPlayer swig_types[98]
#define SWIGTYPE_p_ofSoundStream swig_types[99]
#define SWIGTYPE_p_ofSpherePrimitive swig_types[100]
#define SWIGTYPE_p_ofStyle swig_types[101]
#define SWIGTYPE_p_ofTTFCharacter swig_types[102]
#define SWIGTYPE_p_ofTexture swig_types[103]
#define SWIGTYPE_p_ofTextureData swig_types[104]
#define SWIGTYPE_p_ofTouchEventArgs swig_types[105]
#define SWIGTYPE_p_ofTrueTypeFont swig_types[106]
#define SWIGTYPE_p_ofURLFileLoader swig_types[107]
#define SWIGTYPE_p_ofUTF8Iterator swig_types[108]
#define SWIGTYPE_p_ofVbo swig_types[109]
#define SWIGTYPE_p_ofVboMesh swig_types[110]
#define SWIGTYPE_p_ofVec2f swig_types[111]
#define SWIGTYPE_p_ofVec3f swig_types[112]
#define SWIGTYPE_p_ofVec4f swig_types[113]
#define SWIGTYPE_p_ofVideoGrabber swig_types[114]
#define SWIGTYPE_p_ofVideoPlayer swig_types[115]
#define SWIGTYPE_p_ofWindowSettings swig_types[116]
#define SWIGTYPE_p_ostream swig_types[117]
#define SWIGTYPE_p_shared_ptrT_ofAppBaseWindow_t swig_types[118]
#define SWIGTYPE_p_shared_ptrT_ofBaseApp_t swig_types[119]
#define SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t swig_types[120]
#define SWIGTYPE_p_shared_ptrT_ofBaseSoundPlayer_t swig_types[121]
#define SWIGTYPE_p_shared_ptrT_ofBaseSoundStream_t swig_types[122]
#define SWIGTYPE_p_shared_ptrT_ofBaseVideoGrabber_t swig_types[123]
#define SWIGTYPE_p_shared_ptrT_ofBaseVideoPlayer_t swig_types[124]
#define SWIGTYPE_p_shared_ptrT_ofMainLoop_t swig_types[125]
#define SWIGTYPE_p_std__filesystem__path swig_types[126]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[127]
#define SWIGTYPE_p_std__string swig_types[128]
#define SWIGTYPE_p_std__vectorT_char_t__const_iterator swig_types[129]
#define SWIGTYPE_p_std__vectorT_char_t__const_reverse_iterator swig_types[130]
#define SWIGTYPE_p_std__vectorT_char_t__iterator swig_types[131]
#define SWIGTYPE_p_std__vectorT_char_t__reverse_iterator swig_types[132]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[134]
#define SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t swig_types[135]
#define SWIGTYPE_p_std__vectorT_ofFile_t swig_types[136]
#define SWIGTYPE_p_std__vectorT_ofFile_t__const_iterator swig_types[137]
#define SWIGTYPE_p_std__vectorT_ofFile_t__const_reverse_iterator swig_types[138]
#define SWIGTYPE_p_std__vectorT_ofMeshFace_t swig_types[139]
#define SWIGTYPE_p_std__vectorT_ofPath__Command_t swig_types[140]
#define SWIGTYPE_p_std__vectorT_ofPolyline_t swig_types[141]
#define SWIGTYPE_p_std__vectorT_ofSoundDevice_t swig_types[142]
#define SWIGTYPE_p_std__vectorT_ofTTFCharacter_t swig_types[143]
#define SWIGTYPE_p_std__vectorT_ofTexture_t swig_types[144]
#define SWIGTYPE_p_std__vectorT_ofVec2f_t swig_types[145]
#define SWIGTYPE_p_std__vectorT_ofVec3f_t swig_types[146]
#define SWIGTYPE_p_std__vectorT_ofVec3f_t__const_iterator swig_types[147]
#define SWIGTYPE_p_std__vectorT_ofVec3f_t__const_reverse_iterator swig_types[148]
#define SWIGTYPE_p_std__vectorT_ofVec3f_t__iterator swig_types[149]
#define SWIGTYPE_p_std__vectorT_ofVec3f_t__reverse_iterator swig_types[150]
#define SWIGTYPE_p_std__vectorT_ofVideoDevice_t swig_types[151]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[152]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[153]
#define SWIGTYPE_p_std__vectorT_weak_ptrT_ofLight__Data_t_t swig_types[154]
#define SWIGTYPE_p_uint64_t swig_types[155]
#define SWIGTYPE_p_unsigned_char swig_types[156]
#define SWIGTYPE_p_unsigned_int swig_types[157]
#define SWIGTYPE_p_unsigned_short swig_types[158]
#define SWIGTYPE_p_utf8__iteratorT_std__string__const_iterator_t swig_types[159]
#define SWIGTYPE_p_utf8__iteratorT_std__string__const_reverse_iterator_t swig_types[160]
static swig_type_info *swig_types[162];
static swig_module_info swig_module = {swig_types, 161, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "of"
#define SWIG_init      luaopen_of
#define SWIG_init_user luaopen_of_user

#define SWIG_LUACODE   luaopen_of_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include "ofMain.h"
	#undef check


#include <stdio.h>


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR)
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			SWIG_Lua_pusherrstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			SWIG_Lua_pusherrstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(schar,signed char)
SWIG_DECLARE_TYPEMAP_ARR_FN(uchar,unsigned char)
SWIG_DECLARE_TYPEMAP_ARR_FN(int,int)
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int)
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short)
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short)
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long)
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long)
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float)
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double)

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		SWIG_Lua_pusherrstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		SWIG_Lua_pusherrstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>

SWIGINTERN int std_vector_Sl_int_Sg____getitem__(std::vector< int > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_int_Sg____setitem__(std::vector< int > *self,unsigned int idx,int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN float std_vector_Sl_float_Sg____getitem__(std::vector< float > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_float_Sg____setitem__(std::vector< float > *self,unsigned int idx,float val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN std::string std_vector_Sl_std_string_Sg____getitem__(std::vector< std::string > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector< std::string > *self,unsigned int idx,std::string val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

#define ofColor__Sl_unsigned_SS_char_Sg__r_get(self_) self_->r
#define ofColor__Sl_unsigned_SS_char_Sg__r_set(self_, val_) self_->r = val_
  

#define ofColor__Sl_unsigned_SS_char_Sg__g_get(self_) self_->g
#define ofColor__Sl_unsigned_SS_char_Sg__g_set(self_, val_) self_->g = val_
  

#define ofColor__Sl_unsigned_SS_char_Sg__b_get(self_) self_->b
#define ofColor__Sl_unsigned_SS_char_Sg__b_set(self_, val_) self_->b = val_
  

#define ofColor__Sl_unsigned_SS_char_Sg__a_get(self_) self_->a
#define ofColor__Sl_unsigned_SS_char_Sg__a_set(self_, val_) self_->a = val_
  

#define ofColor__Sl_float_Sg__r_get(self_) self_->r
#define ofColor__Sl_float_Sg__r_set(self_, val_) self_->r = val_
  

#define ofColor__Sl_float_Sg__g_get(self_) self_->g
#define ofColor__Sl_float_Sg__g_set(self_, val_) self_->g = val_
  

#define ofColor__Sl_float_Sg__b_get(self_) self_->b
#define ofColor__Sl_float_Sg__b_set(self_, val_) self_->b = val_
  

#define ofColor__Sl_float_Sg__a_get(self_) self_->a
#define ofColor__Sl_float_Sg__a_set(self_, val_) self_->a = val_
  

#define ofColor__Sl_unsigned_SS_short_Sg__r_get(self_) self_->r
#define ofColor__Sl_unsigned_SS_short_Sg__r_set(self_, val_) self_->r = val_
  

#define ofColor__Sl_unsigned_SS_short_Sg__g_get(self_) self_->g
#define ofColor__Sl_unsigned_SS_short_Sg__g_set(self_, val_) self_->g = val_
  

#define ofColor__Sl_unsigned_SS_short_Sg__b_get(self_) self_->b
#define ofColor__Sl_unsigned_SS_short_Sg__b_set(self_, val_) self_->b = val_
  

#define ofColor__Sl_unsigned_SS_short_Sg__a_get(self_) self_->a
#define ofColor__Sl_unsigned_SS_short_Sg__a_set(self_, val_) self_->a = val_
  
SWIGINTERN unsigned char ofColor__Sl_unsigned_SS_char_Sg__getR(ofColor_< unsigned char > *self){return self->r;}
SWIGINTERN unsigned char ofColor__Sl_unsigned_SS_char_Sg__getG(ofColor_< unsigned char > *self){return self->g;}
SWIGINTERN unsigned char ofColor__Sl_unsigned_SS_char_Sg__getB(ofColor_< unsigned char > *self){return self->b;}
SWIGINTERN unsigned char ofColor__Sl_unsigned_SS_char_Sg__getA(ofColor_< unsigned char > *self){return self->a;}
SWIGINTERN void ofColor__Sl_unsigned_SS_char_Sg__setR(ofColor_< unsigned char > *self,unsigned char r){self->r = r;}
SWIGINTERN void ofColor__Sl_unsigned_SS_char_Sg__setG(ofColor_< unsigned char > *self,unsigned char g){self->g = g;}
SWIGINTERN void ofColor__Sl_unsigned_SS_char_Sg__setB(ofColor_< unsigned char > *self,unsigned char b){self->b = b;}
SWIGINTERN void ofColor__Sl_unsigned_SS_char_Sg__setA(ofColor_< unsigned char > *self,unsigned char a){self->a = a;}
SWIGINTERN char const *ofColor__Sl_unsigned_SS_char_Sg____str__(ofColor_< unsigned char > *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}
SWIGINTERN float ofColor__Sl_float_Sg__getR(ofColor_< float > *self){return self->r;}
SWIGINTERN float ofColor__Sl_float_Sg__getG(ofColor_< float > *self){return self->g;}
SWIGINTERN float ofColor__Sl_float_Sg__getB(ofColor_< float > *self){return self->b;}
SWIGINTERN float ofColor__Sl_float_Sg__getA(ofColor_< float > *self){return self->a;}
SWIGINTERN void ofColor__Sl_float_Sg__setR(ofColor_< float > *self,float r){self->r = r;}
SWIGINTERN void ofColor__Sl_float_Sg__setG(ofColor_< float > *self,float g){self->g = g;}
SWIGINTERN void ofColor__Sl_float_Sg__setB(ofColor_< float > *self,float b){self->b = b;}
SWIGINTERN void ofColor__Sl_float_Sg__setA(ofColor_< float > *self,float a){self->a = a;}
SWIGINTERN char const *ofColor__Sl_float_Sg____str__(ofColor_< float > *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}
SWIGINTERN unsigned short ofColor__Sl_unsigned_SS_short_Sg__getR(ofColor_< unsigned short > *self){return self->r;}
SWIGINTERN unsigned short ofColor__Sl_unsigned_SS_short_Sg__getG(ofColor_< unsigned short > *self){return self->g;}
SWIGINTERN unsigned short ofColor__Sl_unsigned_SS_short_Sg__getB(ofColor_< unsigned short > *self){return self->b;}
SWIGINTERN unsigned short ofColor__Sl_unsigned_SS_short_Sg__getA(ofColor_< unsigned short > *self){return self->a;}
SWIGINTERN void ofColor__Sl_unsigned_SS_short_Sg__setR(ofColor_< unsigned short > *self,unsigned short r){self->r = r;}
SWIGINTERN void ofColor__Sl_unsigned_SS_short_Sg__setG(ofColor_< unsigned short > *self,unsigned short g){self->g = g;}
SWIGINTERN void ofColor__Sl_unsigned_SS_short_Sg__setB(ofColor_< unsigned short > *self,unsigned short b){self->b = b;}
SWIGINTERN void ofColor__Sl_unsigned_SS_short_Sg__setA(ofColor_< unsigned short > *self,unsigned short a){self->a = a;}
SWIGINTERN char const *ofColor__Sl_unsigned_SS_short_Sg____str__(ofColor_< unsigned short > *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}

	void log(ofLogLevel level, const string & message) {
		ofLog(level, message);
	}

SWIGINTERN char const *ofRectangle___str__(ofRectangle *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}

#define ofRectangle_x_get(self_) self_->getX()
#define ofRectangle_x_set(self_, val_) self_->setX(val_)
  

#define ofRectangle_y_get(self_) self_->getY()
#define ofRectangle_y_set(self_, val_) self_->setY(val_)
  

#define ofTrueTypeFont_lineHeight_get(self_) self_->getLineHeight()
#define ofTrueTypeFont_lineHeight_set(self_, val_) self_->setLineHeight(val_)
  

#define ofTrueTypeFont_letterSpacing_get(self_) self_->getLetterSpacing()
#define ofTrueTypeFont_letterSpacing_set(self_, val_) self_->setLetterSpacing(val_)
  

#define ofTrueTypeFont_spaceSize_get(self_) self_->getSpaceSize()
#define ofTrueTypeFont_spaceSize_set(self_, val_) self_->setSpaceSize(val_)
  
SWIGINTERN char const *ofMatrix3x3___str__(ofMatrix3x3 *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}
SWIGINTERN char const *ofMatrix4x4___str__(ofMatrix4x4 *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}
SWIGINTERN char const *ofQuaternion___str__(ofQuaternion *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}
SWIGINTERN char const *ofVec2f___str__(ofVec2f *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}
SWIGINTERN char const *ofVec3f___str__(ofVec3f *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}
SWIGINTERN char const *ofVec4f___str__(ofVec4f *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("std::string::string",0,0) result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_string__SWIG_1(lua_State* L) { int SWIG_arg = 0; char *arg1 = (char *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);}  if (argc == 1) { int _v; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) {
      return _wrap_new_string__SWIG_1(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
  "  Possible C/C++ prototypes are:\n" "    std::string::string()\n" "    std::string::string(char const *)\n");
  lua_error(L);return 0; }
static int _wrap_string_size(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_length(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_empty(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; bool result;
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string); }  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_c_str(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_data(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_assign(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ; SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string); }  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_IntVector__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< int > *result = 0 ;
  SWIG_check_num_args("std::vector< int >::vector",0,0) result = (std::vector< int > *)new std::vector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_IntVector__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; std::vector< int > *result = 0 ;
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_IntVector__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ; SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"std::vector< int > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_IntVector",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_IntVector__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; int arg2 ;
  std::vector< int > *result = 0 ; SWIG_check_num_args("std::vector< int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::vector",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); result = (std::vector< int > *)new std::vector< int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_IntVector(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_IntVector__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_IntVector__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_IntVector__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IntVector'\n" "  Possible C/C++ prototypes are:\n"
  "    std::vector< int >::vector()\n" "    std::vector< int >::vector(unsigned int)\n"
  "    std::vector< int >::vector(std::vector< int > const &)\n" "    std::vector< int >::vector(unsigned int,int)\n");
  lua_error(L);return 0; }
static int _wrap_IntVector_size(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result; SWIG_check_num_args("std::vector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::size",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_size",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (unsigned int)((std::vector< int > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector_max_size(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result; SWIG_check_num_args("std::vector< int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::max_size",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_max_size",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (unsigned int)((std::vector< int > const *)arg1)->max_size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector_empty(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result; SWIG_check_num_args("std::vector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::empty",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_empty",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (bool)((std::vector< int > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector_clear(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SWIG_check_num_args("std::vector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::clear",1,"std::vector< int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_clear",1,SWIGTYPE_p_std__vectorT_int_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector_push_back(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ; SWIG_check_num_args("std::vector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::push_back",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::push_back",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_push_back",1,SWIGTYPE_p_std__vectorT_int_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector_pop_back(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SWIG_check_num_args("std::vector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::pop_back",1,"std::vector< int > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_pop_back",1,SWIGTYPE_p_std__vectorT_int_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector_front(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result; SWIG_check_num_args("std::vector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::front",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_front",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (int)((std::vector< int > const *)arg1)->front(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector_back(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result; SWIG_check_num_args("std::vector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::back",1,"std::vector< int > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_back",1,SWIGTYPE_p_std__vectorT_int_t); } 
  result = (int)((std::vector< int > const *)arg1)->back(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector___getitem(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ; int result; SWIG_check_num_args("std::vector< int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__getitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector___getitem",1,SWIGTYPE_p_std__vectorT_int_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = (int)std_vector_Sl_int_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_IntVector___setitem(lua_State* L) { int SWIG_arg = 0; std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ; int arg3 ; SWIG_check_num_args("std::vector< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__setitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::__setitem__",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector___setitem",1,SWIGTYPE_p_std__vectorT_int_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); try { std_vector_Sl_int_Sg____setitem__(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_IntVector(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_IntVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IntVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IntVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IntVector_methods[]= {
    { "size", _wrap_IntVector_size},
    { "max_size", _wrap_IntVector_max_size},
    { "empty", _wrap_IntVector_empty},
    { "clear", _wrap_IntVector_clear},
    { "push_back", _wrap_IntVector_push_back},
    { "pop_back", _wrap_IntVector_pop_back},
    { "front", _wrap_IntVector_front},
    { "back", _wrap_IntVector_back},
    { "__getitem", _wrap_IntVector___getitem},
    { "__setitem", _wrap_IntVector___setitem},
    {0,0}
};
static swig_lua_method swig_IntVector_meta[] = {
    { "__getitem", _wrap_IntVector___getitem},
    { "__setitem", _wrap_IntVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_IntVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IntVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IntVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IntVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IntVector_Sf_SwigStatic = {
    "IntVector",
    swig_IntVector_Sf_SwigStatic_methods,
    swig_IntVector_Sf_SwigStatic_attributes,
    swig_IntVector_Sf_SwigStatic_constants,
    swig_IntVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IntVector_bases[] = {0};
static const char *swig_IntVector_base_names[] = {0};
static swig_lua_class _wrap_class_IntVector = { "IntVector", "IntVector", &SWIGTYPE_p_std__vectorT_int_t,_proxy__wrap_new_IntVector, swig_delete_IntVector, swig_IntVector_methods, swig_IntVector_attributes, &swig_IntVector_Sf_SwigStatic, swig_IntVector_meta, swig_IntVector_bases, swig_IntVector_base_names };

static int _wrap_new_FloatVector__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< float > *result = 0 ;
  SWIG_check_num_args("std::vector< float >::vector",0,0) result = (std::vector< float > *)new std::vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_FloatVector__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_FloatVector__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_FloatVector__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; float arg2 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (std::vector< float > *)new std::vector< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_FloatVector(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_FloatVector__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_FloatVector__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_FloatVector__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_FloatVector__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatVector'\n" "  Possible C/C++ prototypes are:\n"
  "    std::vector< float >::vector()\n" "    std::vector< float >::vector(unsigned int)\n"
  "    std::vector< float >::vector(std::vector< float > const &)\n" "    std::vector< float >::vector(unsigned int,float)\n");
  lua_error(L);return 0; }
static int _wrap_FloatVector_size(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  unsigned int result; SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_size",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (unsigned int)((std::vector< float > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_max_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_max_size",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (unsigned int)((std::vector< float > const *)arg1)->max_size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_empty(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result; SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_empty",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (bool)((std::vector< float > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_clear(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_clear",1,SWIGTYPE_p_std__vectorT_float_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; float arg2 ;
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_push_back",1,SWIGTYPE_p_std__vectorT_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_pop_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_front(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float result; SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_front",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (float)((std::vector< float > const *)arg1)->front(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_back(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float result; SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_back",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (float)((std::vector< float > const *)arg1)->back(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int arg2 ; float result;
  SWIG_check_num_args("std::vector< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem__",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___getitem",1,SWIGTYPE_p_std__vectorT_float_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = (float)std_vector_Sl_float_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int arg2 ; float arg3 ;
  SWIG_check_num_args("std::vector< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem__",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem__",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___setitem",1,SWIGTYPE_p_std__vectorT_float_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); try { std_vector_Sl_float_Sg____setitem__(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_FloatVector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatVector_methods[]= {
    { "size", _wrap_FloatVector_size},
    { "max_size", _wrap_FloatVector_max_size},
    { "empty", _wrap_FloatVector_empty},
    { "clear", _wrap_FloatVector_clear},
    { "push_back", _wrap_FloatVector_push_back},
    { "pop_back", _wrap_FloatVector_pop_back},
    { "front", _wrap_FloatVector_front},
    { "back", _wrap_FloatVector_back},
    { "__getitem", _wrap_FloatVector___getitem},
    { "__setitem", _wrap_FloatVector___setitem},
    {0,0}
};
static swig_lua_method swig_FloatVector_meta[] = {
    { "__getitem", _wrap_FloatVector___getitem},
    { "__setitem", _wrap_FloatVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_FloatVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatVector_Sf_SwigStatic = {
    "FloatVector",
    swig_FloatVector_Sf_SwigStatic_methods,
    swig_FloatVector_Sf_SwigStatic_attributes,
    swig_FloatVector_Sf_SwigStatic_constants,
    swig_FloatVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatVector_bases[] = {0};
static const char *swig_FloatVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatVector = { "FloatVector", "FloatVector", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_FloatVector, swig_delete_FloatVector, swig_FloatVector_methods, swig_FloatVector_attributes, &swig_FloatVector_Sf_SwigStatic, swig_FloatVector_meta, swig_FloatVector_bases, swig_FloatVector_base_names };

static int _wrap_new_StringVector__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< std::string > *result = 0 ;
  SWIG_check_num_args("std::vector< std::string >::vector",0,0)
  result = (std::vector< std::string > *)new std::vector< std::string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_StringVector__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_StringVector__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"std::vector< std::string > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("new_StringVector",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_StringVector__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; std::string arg2 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("std::vector< std::string >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::vector",2,"std::string");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_StringVector(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_StringVector__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_StringVector__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_new_StringVector__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringVector'\n" "  Possible C/C++ prototypes are:\n"
  "    std::vector< std::string >::vector()\n" "    std::vector< std::string >::vector(unsigned int)\n"
  "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
  "    std::vector< std::string >::vector(unsigned int,std::string)\n"); lua_error(L);return 0; }
static int _wrap_StringVector_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< std::string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::size",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_size",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (unsigned int)((std::vector< std::string > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_max_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< std::string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::max_size",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_max_size",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (unsigned int)((std::vector< std::string > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_empty(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; bool result;
  SWIG_check_num_args("std::vector< std::string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::empty",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_empty",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (bool)((std::vector< std::string > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_clear(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  SWIG_check_num_args("std::vector< std::string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::clear",1,"std::vector< std::string > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_clear",1,SWIGTYPE_p_std__vectorT_std__string_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::string arg2 ;
  SWIG_check_num_args("std::vector< std::string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::push_back",1,"std::vector< std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::push_back",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_push_back",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_pop_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  SWIG_check_num_args("std::vector< std::string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::pop_back",1,"std::vector< std::string > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_pop_back",1,SWIGTYPE_p_std__vectorT_std__string_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_front(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::string result;
  SWIG_check_num_args("std::vector< std::string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::front",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_front",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = ((std::vector< std::string > const *)arg1)->front();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_StringVector_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::string result;
  SWIG_check_num_args("std::vector< std::string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::back",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_back",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = ((std::vector< std::string > const *)arg1)->back();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_StringVector___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; unsigned int arg2 ; std::string result;
  SWIG_check_num_args("std::vector< std::string >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__getitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector___getitem",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = std_vector_Sl_std_string_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; unsigned int arg2 ; std::string arg3 ;
  SWIG_check_num_args("std::vector< std::string >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__setitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__setitem__",2,"unsigned int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("std::vector< std::string >::__setitem__",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector___setitem",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); try { std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,arg3);} 
  catch(std::out_of_range &_e) { SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_StringVector(void *obj) {
std::vector< std::string > *arg1 = (std::vector< std::string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StringVector_methods[]= {
    { "size", _wrap_StringVector_size},
    { "max_size", _wrap_StringVector_max_size},
    { "empty", _wrap_StringVector_empty},
    { "clear", _wrap_StringVector_clear},
    { "push_back", _wrap_StringVector_push_back},
    { "pop_back", _wrap_StringVector_pop_back},
    { "front", _wrap_StringVector_front},
    { "back", _wrap_StringVector_back},
    { "__getitem", _wrap_StringVector___getitem},
    { "__setitem", _wrap_StringVector___setitem},
    {0,0}
};
static swig_lua_method swig_StringVector_meta[] = {
    { "__getitem", _wrap_StringVector___getitem},
    { "__setitem", _wrap_StringVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_StringVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringVector_Sf_SwigStatic = {
    "StringVector",
    swig_StringVector_Sf_SwigStatic_methods,
    swig_StringVector_Sf_SwigStatic_attributes,
    swig_StringVector_Sf_SwigStatic_constants,
    swig_StringVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringVector_bases[] = {0};
static const char *swig_StringVector_base_names[] = {0};
static swig_lua_class _wrap_class_StringVector = { "StringVector", "StringVector", &SWIGTYPE_p_std__vectorT_std__string_t,_proxy__wrap_new_StringVector, swig_delete_StringVector, swig_StringVector_methods, swig_StringVector_attributes, &swig_StringVector_Sf_SwigStatic, swig_StringVector_meta, swig_StringVector_bases, swig_StringVector_base_names };

static int _wrap_new_ofFbo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *result = 0 ; SWIG_check_num_args("ofFbo::ofFbo",0,0)
  result = (ofFbo *)new ofFbo(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFbo,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFbo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = 0 ; ofFbo *result = 0 ;
  SWIG_check_num_args("ofFbo::ofFbo",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofFbo::ofFbo",1,"ofFbo const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("new_ofFbo",1,SWIGTYPE_p_ofFbo); } 
  result = (ofFbo *)new ofFbo((ofFbo const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFbo,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFbo(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofFbo__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofFbo__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofFbo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::ofFbo()\n" "    ofFbo::ofFbo(ofFbo const &)\n"); lua_error(L);return 0; }
static int _wrap_ofFbo_allocate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; int arg5 ; SWIG_check_num_args("ofFbo::allocate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofFbo::allocate",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofFbo::allocate",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->allocate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_allocate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; SWIG_check_num_args("ofFbo::allocate",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofFbo::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_allocate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofFbo::allocate",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::allocate",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); (arg1)->allocate(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_allocate__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofFbo::Settings arg2 ;
  ofFbo::Settings *argp2 ; SWIG_check_num_args("ofFbo::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::allocate",2,"ofFbo::Settings");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofFbo__Settings,0))){
    SWIG_fail_ptr("ofFbo_allocate",2,SWIGTYPE_p_ofFbo__Settings); }  arg2 = *argp2; (arg1)->allocate(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_allocate__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::allocate",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  (arg1)->allocate(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_allocate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_allocate__SWIG_4(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFbo__Settings, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_allocate__SWIG_3(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFbo_allocate__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofFbo_allocate__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofFbo_allocate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFbo_allocate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::allocate(int,int,int,int)\n" "    ofFbo::allocate(int,int,int)\n" "    ofFbo::allocate(int,int)\n"
  "    ofFbo::allocate(ofFbo::Settings)\n" "    ofFbo::allocate()\n"); lua_error(L);return 0; }
static int _wrap_ofFbo_isAllocated(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; bool result;
  SWIG_check_num_args("ofFbo::isAllocated",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::isAllocated",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_isAllocated",1,SWIGTYPE_p_ofFbo); }  result = (bool)((ofFbo const *)arg1)->isAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_destroy(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::destroy",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::destroy",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_destroy",1,SWIGTYPE_p_ofFbo); } 
  (arg1)->destroy(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_clear(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::clear",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_clear",1,SWIGTYPE_p_ofFbo); } 
  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_draw",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofFbo_draw",2,SWIGTYPE_p_ofVec3f); } 
  ((ofFbo const *)arg1)->draw((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_draw__SWIG_0_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofRectangle *arg2 = 0 ;
  SWIG_check_num_args("draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_draw",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofFbo_draw",2,SWIGTYPE_p_ofRectangle); }  ((ofFbo const *)arg1)->draw((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_draw__SWIG_0_2(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("draw",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_draw",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofFbo_draw",2,SWIGTYPE_p_ofVec3f); } 
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ((ofFbo const *)arg1)->draw((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofFbo::draw",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::draw",1,"ofFbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::draw",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_draw",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ((ofFbo const *)arg1)->draw(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofFbo::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::draw",1,"ofFbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::draw",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofFbo::draw",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofFbo::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_draw",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ((ofFbo const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_draw(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_draw__SWIG_0_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_draw__SWIG_0_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFbo_draw__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofFbo_draw__SWIG_0_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofFbo_draw__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFbo_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw(ofPoint const &) const\n" "    draw(ofRectangle const &) const\n" "    draw(ofPoint const &,float,float) const\n"
  "    ofFbo::draw(float,float) const\n" "    ofFbo::draw(float,float,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofFbo_setAnchorPercent(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofFbo::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setAnchorPercent",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_setAnchorPercent",1,SWIGTYPE_p_ofFbo); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_setAnchorPoint(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofFbo::setAnchorPoint",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setAnchorPoint",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_setAnchorPoint",1,SWIGTYPE_p_ofFbo); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_resetAnchor(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::resetAnchor",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::resetAnchor",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_resetAnchor",1,SWIGTYPE_p_ofFbo); }  (arg1)->resetAnchor(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_setDefaultTextureIndex(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  SWIG_check_num_args("ofFbo::setDefaultTextureIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setDefaultTextureIndex",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::setDefaultTextureIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_setDefaultTextureIndex",1,SWIGTYPE_p_ofFbo); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDefaultTextureIndex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getDefaultTextureIndex(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int result;
  SWIG_check_num_args("ofFbo::getDefaultTextureIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getDefaultTextureIndex",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getDefaultTextureIndex",1,SWIGTYPE_p_ofFbo); } 
  result = (int)((ofFbo const *)arg1)->getDefaultTextureIndex(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getTextureReference__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTextureReference",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getTextureReference",1,SWIGTYPE_p_ofFbo); }  result = (ofTexture *) &(arg1)->getTextureReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_getTextureReference__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getTextureReference",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTextureReference",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::getTextureReference",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getTextureReference",1,SWIGTYPE_p_ofFbo); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofTexture *) &(arg1)->getTextureReference(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofFbo::getTexture",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTexture",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_getTexture",1,SWIGTYPE_p_ofFbo); }
   result = (ofTexture *) &(arg1)->getTexture(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTexture",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::getTexture",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_getTexture",1,SWIGTYPE_p_ofFbo); }
   arg2 = (int)lua_tonumber(L, 2); result = (ofTexture *) &(arg1)->getTexture(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_getDepthTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getDepthTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getDepthTexture",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getDepthTexture",1,SWIGTYPE_p_ofFbo); }  result = (ofTexture *) &(arg1)->getDepthTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_getTextureReference__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTextureReference",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getTextureReference",1,SWIGTYPE_p_ofFbo); } 
  result = (ofTexture *) &((ofFbo const *)arg1)->getTextureReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_getTextureReference__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getTextureReference",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTextureReference",1,"ofFbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::getTextureReference",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getTextureReference",1,SWIGTYPE_p_ofFbo); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofTexture *) &((ofFbo const *)arg1)->getTextureReference(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_getTextureReference(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofFbo_getTextureReference__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofFbo_getTextureReference__SWIG_2(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofFbo_getTextureReference__SWIG_1(L);}
       }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofFbo_getTextureReference__SWIG_3(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFbo_getTextureReference'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFbo::getTextureReference()\n" "    ofFbo::getTextureReference(int)\n"
  "    ofFbo::getTextureReference() const\n" "    ofFbo::getTextureReference(int) const\n"); lua_error(L);return 0; }
static int _wrap_ofFbo_getTexture__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofFbo::getTexture",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTexture",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_getTexture",1,SWIGTYPE_p_ofFbo); }
   result = (ofTexture *) &((ofFbo const *)arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_getTexture__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTexture",1,"ofFbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::getTexture",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_getTexture",1,SWIGTYPE_p_ofFbo); }
   arg2 = (int)lua_tonumber(L, 2); result = (ofTexture *) &((ofFbo const *)arg1)->getTexture(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_getTexture(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_getTexture__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_getTexture__SWIG_2(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofFbo_getTexture__SWIG_1(L);}  }  } 
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofFbo_getTexture__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFbo_getTexture'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::getTexture()\n" "    ofFbo::getTexture(int)\n" "    ofFbo::getTexture() const\n"
  "    ofFbo::getTexture(int) const\n"); lua_error(L);return 0; }
static int _wrap_ofFbo_getDepthTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getDepthTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getDepthTexture",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getDepthTexture",1,SWIGTYPE_p_ofFbo); } 
  result = (ofTexture *) &((ofFbo const *)arg1)->getDepthTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_getDepthTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_getDepthTexture__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_getDepthTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFbo_getDepthTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFbo::getDepthTexture()\n" "    ofFbo::getDepthTexture() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFbo_setUseTexture(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofFbo::setUseTexture",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setUseTexture",1,"ofFbo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFbo::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_setUseTexture",1,SWIGTYPE_p_ofFbo); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setUseTexture(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_isUsingTexture(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; bool result;
  SWIG_check_num_args("ofFbo::isUsingTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::isUsingTexture",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_isUsingTexture",1,SWIGTYPE_p_ofFbo); }  result = (bool)((ofFbo const *)arg1)->isUsingTexture();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_beginFbo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofFbo::begin",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::begin",1,"ofFbo const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFbo::begin",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_beginFbo",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (lua_toboolean(L, 2)!=0); ((ofFbo const *)arg1)->begin(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_beginFbo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::begin",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::begin",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_beginFbo",1,SWIGTYPE_p_ofFbo); } 
  ((ofFbo const *)arg1)->begin(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_beginFbo(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_beginFbo__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { return _wrap_ofFbo_beginFbo__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFbo_beginFbo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::begin(bool) const\n" "    ofFbo::begin() const\n"); lua_error(L);return 0; }
static int _wrap_ofFbo_endFbo(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::end",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::end",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_endFbo",1,SWIGTYPE_p_ofFbo); } 
  ((ofFbo const *)arg1)->end(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_readToPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofPixels *arg2 = 0 ;
  int arg3 ; SWIG_check_num_args("ofFbo::readToPixels",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofPixels &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::readToPixels",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  ((ofFbo const *)arg1)->readToPixels(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_readToPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofPixels *arg2 = 0 ;
  SWIG_check_num_args("ofFbo::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  ((ofFbo const *)arg1)->readToPixels(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_readToPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofShortPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofFbo::readToPixels",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofShortPixels &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::readToPixels",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  ((ofFbo const *)arg1)->readToPixels(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_readToPixels__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofShortPixels *arg2 = 0 ; SWIG_check_num_args("ofFbo::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofShortPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  ((ofFbo const *)arg1)->readToPixels(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_readToPixels__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofFloatPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofFbo::readToPixels",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofFloatPixels &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::readToPixels",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  ((ofFbo const *)arg1)->readToPixels(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_readToPixels__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofFloatPixels *arg2 = 0 ; SWIG_check_num_args("ofFbo::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofFloatPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_float_t); }  ((ofFbo const *)arg1)->readToPixels(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_readToPixels(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_readToPixels__SWIG_1(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_readToPixels__SWIG_3(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_readToPixels__SWIG_5(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFbo_readToPixels__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFbo_readToPixels__SWIG_4(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFbo_readToPixels__SWIG_2(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFbo_readToPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::readToPixels(ofPixels &,int) const\n" "    ofFbo::readToPixels(ofPixels &) const\n"
  "    ofFbo::readToPixels(ofShortPixels &,int) const\n" "    ofFbo::readToPixels(ofShortPixels &) const\n"
  "    ofFbo::readToPixels(ofFloatPixels &,int) const\n" "    ofFbo::readToPixels(ofFloatPixels &) const\n");
  lua_error(L);return 0; }
static int _wrap_ofFbo_getWidth(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float result;
  SWIG_check_num_args("ofFbo::getWidth",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getWidth",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_getWidth",1,SWIGTYPE_p_ofFbo); } 
  result = (float)((ofFbo const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getHeight(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float result;
  SWIG_check_num_args("ofFbo::getHeight",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getHeight",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_getHeight",1,SWIGTYPE_p_ofFbo); }
   result = (float)((ofFbo const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_bind(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; SWIG_check_num_args("ofFbo::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::bind",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_bind",1,SWIGTYPE_p_ofFbo); } 
  ((ofFbo const *)arg1)->bind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_unbind(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::unbind",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::unbind",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_unbind",1,SWIGTYPE_p_ofFbo); } 
  ((ofFbo const *)arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_setPreviousFramebufferBinding(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  GLuint *arg2 = 0 ; SWIG_check_num_args("ofFbo::setPreviousFramebufferBinding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setPreviousFramebufferBinding",1,"ofFbo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::setPreviousFramebufferBinding",2,"GLuint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_setPreviousFramebufferBinding",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("ofFbo_setPreviousFramebufferBinding",2,SWIGTYPE_p_GLuint); } 
  ((ofFbo const *)arg1)->setPreviousFramebufferBinding((GLuint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getPreviousFramebufferBinding(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  GLuint *result = 0 ; SWIG_check_num_args("ofFbo::getPreviousFramebufferBinding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getPreviousFramebufferBinding",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getPreviousFramebufferBinding",1,SWIGTYPE_p_ofFbo); } 
  result = (GLuint *) &((ofFbo const *)arg1)->getPreviousFramebufferBinding();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GLuint,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_flagDirty(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::flagDirty",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::flagDirty",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_flagDirty",1,SWIGTYPE_p_ofFbo); }
   ((ofFbo const *)arg1)->flagDirty(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_updateTexture(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  SWIG_check_num_args("ofFbo::updateTexture",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::updateTexture",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::updateTexture",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_updateTexture",1,SWIGTYPE_p_ofFbo); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->updateTexture(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_checkStatus(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; bool result;
  SWIG_check_num_args("ofFbo::checkStatus",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::checkStatus",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_checkStatus",1,SWIGTYPE_p_ofFbo); }  result = (bool)((ofFbo const *)arg1)->checkStatus();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_createAndAttachTexture(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLenum arg2 ;
  GLenum arg3 ; GLenum *argp2 ; GLenum *argp3 ; SWIG_check_num_args("ofFbo::createAndAttachTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::createAndAttachTexture",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::createAndAttachTexture",2,"GLenum");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofFbo::createAndAttachTexture",3,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachTexture",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachTexture",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachTexture",3,SWIGTYPE_p_GLenum); }  arg3 = *argp3;
  (arg1)->createAndAttachTexture(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_attachTexture(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofTexture *arg2 = 0 ;
  GLenum arg3 ; GLenum arg4 ; GLenum *argp3 ; GLenum *argp4 ; SWIG_check_num_args("ofFbo::attachTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::attachTexture",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::attachTexture",2,"ofTexture &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofFbo::attachTexture",3,"GLenum");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofFbo::attachTexture",4,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_attachTexture",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofFbo_attachTexture",2,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_attachTexture",3,SWIGTYPE_p_GLenum); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_attachTexture",4,SWIGTYPE_p_GLenum); }  arg4 = *argp4; (arg1)->attachTexture(*arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_createAndAttachRenderbuffer(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLenum arg2 ;
  GLenum arg3 ; GLenum *argp2 ; GLenum *argp3 ; GLuint result; SWIG_check_num_args("ofFbo::createAndAttachRenderbuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::createAndAttachRenderbuffer",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::createAndAttachRenderbuffer",2,"GLenum");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofFbo::createAndAttachRenderbuffer",3,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachRenderbuffer",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachRenderbuffer",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachRenderbuffer",3,SWIGTYPE_p_GLenum); }  arg3 = *argp3;
  result = (arg1)->createAndAttachRenderbuffer(arg2,arg3); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_createAndAttachDepthStencilTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  GLenum arg2 ; GLint arg3 ; GLenum arg4 ; GLenum *argp2 ; GLenum *argp4 ;
  SWIG_check_num_args("ofFbo::createAndAttachDepthStencilTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",2,"GLenum");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",3,"GLint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",4,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachDepthStencilTexture",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachDepthStencilTexture",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  arg3 = (GLint)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachDepthStencilTexture",4,SWIGTYPE_p_GLenum); }  arg4 = *argp4;
  (arg1)->createAndAttachDepthStencilTexture(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_createAndAttachDepthStencilTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  GLenum arg2 ; GLint arg3 ; GLenum arg4 ; GLenum arg5 ; GLenum arg6 ; GLenum *argp2 ; GLenum *argp4 ; GLenum *argp5 ;
  GLenum *argp6 ; SWIG_check_num_args("ofFbo::createAndAttachDepthStencilTexture",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",2,"GLenum");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",3,"GLint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",4,"GLenum");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",5,"GLenum");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",6,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachDepthStencilTexture",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachDepthStencilTexture",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  arg3 = (GLint)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachDepthStencilTexture",4,SWIGTYPE_p_GLenum); }  arg4 = *argp4;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachDepthStencilTexture",5,SWIGTYPE_p_GLenum); }  arg5 = *argp5;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofFbo_createAndAttachDepthStencilTexture",6,SWIGTYPE_p_GLenum); }  arg6 = *argp6;
  (arg1)->createAndAttachDepthStencilTexture(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_createAndAttachDepthStencilTexture(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ;
  argc = lua_gettop(L); if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_createAndAttachDepthStencilTexture__SWIG_0(L);}  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
                 else { _v = 1; }  }  if (_v) { return _wrap_ofFbo_createAndAttachDepthStencilTexture__SWIG_1(L);}  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFbo_createAndAttachDepthStencilTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFbo::createAndAttachDepthStencilTexture(GLenum,GLint,GLenum)\n"
  "    ofFbo::createAndAttachDepthStencilTexture(GLenum,GLint,GLenum,GLenum,GLenum)\n"); lua_error(L);return 0; }
static int _wrap_ofFbo_getNumTextures(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int result;
  SWIG_check_num_args("ofFbo::getNumTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getNumTextures",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getNumTextures",1,SWIGTYPE_p_ofFbo); }  result = (int)((ofFbo const *)arg1)->getNumTextures();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_setActiveDrawBuffer(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  SWIG_check_num_args("ofFbo::setActiveDrawBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setActiveDrawBuffer",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::setActiveDrawBuffer",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_setActiveDrawBuffer",1,SWIGTYPE_p_ofFbo); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setActiveDrawBuffer(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_setActiveDrawBuffers(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  std::vector< int > *arg2 = 0 ; SWIG_check_num_args("ofFbo::setActiveDrawBuffers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setActiveDrawBuffers",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::setActiveDrawBuffers",2,"std::vector< int > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_setActiveDrawBuffers",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("ofFbo_setActiveDrawBuffers",2,SWIGTYPE_p_std__vectorT_int_t); } 
  (arg1)->setActiveDrawBuffers((std::vector< int > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFbo_activateAllDrawBuffers(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::activateAllDrawBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::activateAllDrawBuffers",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_activateAllDrawBuffers",1,SWIGTYPE_p_ofFbo); }  (arg1)->activateAllDrawBuffers(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getFbo(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofFbo::getFbo",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getFbo",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("ofFbo_getFbo",1,SWIGTYPE_p_ofFbo); } 
  result = ((ofFbo const *)arg1)->getFbo(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_checkGLSupport(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofFbo::checkGLSupport",0,0) result = (bool)ofFbo::checkGLSupport();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_maxColorAttachments(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofFbo::maxColorAttachments",0,0) result = (int)ofFbo::maxColorAttachments();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_maxDrawBuffers(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofFbo::maxDrawBuffers",0,0) result = (int)ofFbo::maxDrawBuffers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_maxSamples(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofFbo::maxSamples",0,0)
  result = (int)ofFbo::maxSamples(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getDepthBuffer(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofFbo::getDepthBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getDepthBuffer",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getDepthBuffer",1,SWIGTYPE_p_ofFbo); }  result = ((ofFbo const *)arg1)->getDepthBuffer(); {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFbo_getStencilBuffer(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofFbo::getStencilBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getStencilBuffer",1,"ofFbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofFbo_getStencilBuffer",1,SWIGTYPE_p_ofFbo); }  result = ((ofFbo const *)arg1)->getStencilBuffer(); {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_ofFbo(void *obj) {
ofFbo *arg1 = (ofFbo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofFbo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofFbo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofFbo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofFbo_methods[]= {
    { "allocate", _wrap_ofFbo_allocate},
    { "isAllocated", _wrap_ofFbo_isAllocated},
    { "destroy", _wrap_ofFbo_destroy},
    { "clear", _wrap_ofFbo_clear},
    { "draw", _wrap_ofFbo_draw},
    { "setAnchorPercent", _wrap_ofFbo_setAnchorPercent},
    { "setAnchorPoint", _wrap_ofFbo_setAnchorPoint},
    { "resetAnchor", _wrap_ofFbo_resetAnchor},
    { "setDefaultTextureIndex", _wrap_ofFbo_setDefaultTextureIndex},
    { "getDefaultTextureIndex", _wrap_ofFbo_getDefaultTextureIndex},
    { "getTextureReference", _wrap_ofFbo_getTextureReference},
    { "getTexture", _wrap_ofFbo_getTexture},
    { "getDepthTexture", _wrap_ofFbo_getDepthTexture},
    { "setUseTexture", _wrap_ofFbo_setUseTexture},
    { "isUsingTexture", _wrap_ofFbo_isUsingTexture},
    { "beginFbo", _wrap_ofFbo_beginFbo},
    { "endFbo", _wrap_ofFbo_endFbo},
    { "readToPixels", _wrap_ofFbo_readToPixels},
    { "getWidth", _wrap_ofFbo_getWidth},
    { "getHeight", _wrap_ofFbo_getHeight},
    { "bind", _wrap_ofFbo_bind},
    { "unbind", _wrap_ofFbo_unbind},
    { "setPreviousFramebufferBinding", _wrap_ofFbo_setPreviousFramebufferBinding},
    { "getPreviousFramebufferBinding", _wrap_ofFbo_getPreviousFramebufferBinding},
    { "flagDirty", _wrap_ofFbo_flagDirty},
    { "updateTexture", _wrap_ofFbo_updateTexture},
    { "checkStatus", _wrap_ofFbo_checkStatus},
    { "createAndAttachTexture", _wrap_ofFbo_createAndAttachTexture},
    { "attachTexture", _wrap_ofFbo_attachTexture},
    { "createAndAttachRenderbuffer", _wrap_ofFbo_createAndAttachRenderbuffer},
    { "createAndAttachDepthStencilTexture", _wrap_ofFbo_createAndAttachDepthStencilTexture},
    { "getNumTextures", _wrap_ofFbo_getNumTextures},
    { "setActiveDrawBuffer", _wrap_ofFbo_setActiveDrawBuffer},
    { "setActiveDrawBuffers", _wrap_ofFbo_setActiveDrawBuffers},
    { "activateAllDrawBuffers", _wrap_ofFbo_activateAllDrawBuffers},
    { "getFbo", _wrap_ofFbo_getFbo},
    { "getDepthBuffer", _wrap_ofFbo_getDepthBuffer},
    { "getStencilBuffer", _wrap_ofFbo_getStencilBuffer},
    {0,0}
};
static swig_lua_method swig_ofFbo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofFbo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofFbo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofFbo_Sf_SwigStatic_methods[]= {
    { "checkGLSupport", _wrap_ofFbo_checkGLSupport},
    { "maxColorAttachments", _wrap_ofFbo_maxColorAttachments},
    { "maxDrawBuffers", _wrap_ofFbo_maxDrawBuffers},
    { "maxSamples", _wrap_ofFbo_maxSamples},
    {0,0}
};
static swig_lua_class* swig_ofFbo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofFbo_Sf_SwigStatic = {
    "ofFbo",
    swig_ofFbo_Sf_SwigStatic_methods,
    swig_ofFbo_Sf_SwigStatic_attributes,
    swig_ofFbo_Sf_SwigStatic_constants,
    swig_ofFbo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofFbo_bases[] = {0};
static const char *swig_ofFbo_base_names[] = {0};
static swig_lua_class _wrap_class_ofFbo = { "ofFbo", "ofFbo", &SWIGTYPE_p_ofFbo,_proxy__wrap_new_ofFbo, swig_delete_ofFbo, swig_ofFbo_methods, swig_ofFbo_attributes, &swig_ofFbo_Sf_SwigStatic, swig_ofFbo_meta, swig_ofFbo_bases, swig_ofFbo_base_names };

static int _wrap_ofGetUsingArbTex(lua_State* L) { int SWIG_arg = 0; bool result; SWIG_check_num_args("ofGetUsingArbTex",0,0)
  result = (bool)ofGetUsingArbTex(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableArbTex(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableArbTex",0,0) ofEnableArbTex();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableArbTex(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableArbTex",0,0) ofDisableArbTex();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetUsingNormalizedTexCoords(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofGetUsingNormalizedTexCoords",0,0) result = (bool)ofGetUsingNormalizedTexCoords();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableNormalizedTexCoords(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofEnableNormalizedTexCoords",0,0) ofEnableNormalizedTexCoords(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableNormalizedTexCoords(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofDisableNormalizedTexCoords",0,0) ofDisableNormalizedTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofTextureData(lua_State* L) { int SWIG_arg = 0; ofTextureData *result = 0 ;
  SWIG_check_num_args("ofTextureData::ofTextureData",0,0) result = (ofTextureData *)new ofTextureData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTextureData,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTextureData_textureID_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  unsigned int arg2 ; SWIG_check_num_args("ofTextureData::textureID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureID",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::textureID",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_textureID_set",1,SWIGTYPE_p_ofTextureData); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->textureID = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_textureID_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  unsigned int result; SWIG_check_num_args("ofTextureData::textureID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureID",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_textureID_get",1,SWIGTYPE_p_ofTextureData); }  result = (unsigned int) ((arg1)->textureID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_textureTarget_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  int arg2 ; SWIG_check_num_args("ofTextureData::textureTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureTarget",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::textureTarget",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_textureTarget_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->textureTarget = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_textureTarget_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  int result; SWIG_check_num_args("ofTextureData::textureTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureTarget",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_textureTarget_get",1,SWIGTYPE_p_ofTextureData); }  result = (int) ((arg1)->textureTarget);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_glTypeInternal_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  int arg2 ; SWIG_check_num_args("ofTextureData::glTypeInternal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::glTypeInternal",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::glTypeInternal",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_glTypeInternal_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->glTypeInternal = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_glTypeInternal_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  int result; SWIG_check_num_args("ofTextureData::glTypeInternal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::glTypeInternal",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_glTypeInternal_get",1,SWIGTYPE_p_ofTextureData); }  result = (int) ((arg1)->glTypeInternal);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_tex_t_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::tex_t",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_t",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::tex_t",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_tex_t_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tex_t = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_tex_t_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::tex_t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_t",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_tex_t_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->tex_t);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_tex_u_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::tex_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_u",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::tex_u",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_tex_u_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tex_u = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_tex_u_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::tex_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_u",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_tex_u_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->tex_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_tex_w_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::tex_w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_w",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::tex_w",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_tex_w_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tex_w = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_tex_w_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::tex_w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_w",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_tex_w_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->tex_w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_tex_h_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::tex_h",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_h",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::tex_h",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_tex_h_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tex_h = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_tex_h_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::tex_h",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_h",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_tex_h_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->tex_h);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_width_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::width",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::width",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_width_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_width_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::width",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_width_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_height_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::height",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::height",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_height_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_height_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::height",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_height_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_bFlipTexture_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofTextureData::bFlipTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bFlipTexture",1,"ofTextureData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofTextureData::bFlipTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_bFlipTexture_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bFlipTexture = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_bFlipTexture_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool result; SWIG_check_num_args("ofTextureData::bFlipTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bFlipTexture",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_bFlipTexture_get",1,SWIGTYPE_p_ofTextureData); }  result = (bool) ((arg1)->bFlipTexture);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_compressionType_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  ofTexCompression arg2 ; SWIG_check_num_args("ofTextureData::compressionType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::compressionType",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::compressionType",2,"ofTexCompression");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_compressionType_set",1,SWIGTYPE_p_ofTextureData); } 
  arg2 = (ofTexCompression)(int)lua_tonumber(L, 2); if (arg1) (arg1)->compressionType = arg2; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_compressionType_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  ofTexCompression result; SWIG_check_num_args("ofTextureData::compressionType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::compressionType",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_compressionType_get",1,SWIGTYPE_p_ofTextureData); } 
  result = (ofTexCompression) ((arg1)->compressionType); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_bAllocated_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofTextureData::bAllocated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bAllocated",1,"ofTextureData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofTextureData::bAllocated",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_bAllocated_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bAllocated = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_bAllocated_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool result; SWIG_check_num_args("ofTextureData::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bAllocated",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_bAllocated_get",1,SWIGTYPE_p_ofTextureData); }  result = (bool) ((arg1)->bAllocated);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_minFilter_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  GLint arg2 ; SWIG_check_num_args("ofTextureData::minFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::minFilter",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::minFilter",2,"GLint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_minFilter_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (GLint)lua_tonumber(L, 2);
  if (arg1) (arg1)->minFilter = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_minFilter_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  GLint result; SWIG_check_num_args("ofTextureData::minFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::minFilter",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_minFilter_get",1,SWIGTYPE_p_ofTextureData); }  result = (GLint) ((arg1)->minFilter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_magFilter_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  GLint arg2 ; SWIG_check_num_args("ofTextureData::magFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::magFilter",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::magFilter",2,"GLint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_magFilter_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (GLint)lua_tonumber(L, 2);
  if (arg1) (arg1)->magFilter = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_magFilter_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  GLint result; SWIG_check_num_args("ofTextureData::magFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::magFilter",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_magFilter_get",1,SWIGTYPE_p_ofTextureData); }  result = (GLint) ((arg1)->magFilter);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_wrapModeHorizontal_set(lua_State* L) { int SWIG_arg = 0;
  ofTextureData *arg1 = (ofTextureData *) 0 ; GLint arg2 ; SWIG_check_num_args("ofTextureData::wrapModeHorizontal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::wrapModeHorizontal",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::wrapModeHorizontal",2,"GLint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_wrapModeHorizontal_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (GLint)lua_tonumber(L, 2);
  if (arg1) (arg1)->wrapModeHorizontal = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_wrapModeHorizontal_get(lua_State* L) { int SWIG_arg = 0;
  ofTextureData *arg1 = (ofTextureData *) 0 ; GLint result; SWIG_check_num_args("ofTextureData::wrapModeHorizontal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::wrapModeHorizontal",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_wrapModeHorizontal_get",1,SWIGTYPE_p_ofTextureData); } 
  result = (GLint) ((arg1)->wrapModeHorizontal); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_wrapModeVertical_set(lua_State* L) { int SWIG_arg = 0;
  ofTextureData *arg1 = (ofTextureData *) 0 ; GLint arg2 ; SWIG_check_num_args("ofTextureData::wrapModeVertical",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::wrapModeVertical",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::wrapModeVertical",2,"GLint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_wrapModeVertical_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (GLint)lua_tonumber(L, 2);
  if (arg1) (arg1)->wrapModeVertical = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTextureData_wrapModeVertical_get(lua_State* L) { int SWIG_arg = 0;
  ofTextureData *arg1 = (ofTextureData *) 0 ; GLint result; SWIG_check_num_args("ofTextureData::wrapModeVertical",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::wrapModeVertical",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTextureData_wrapModeVertical_get",1,SWIGTYPE_p_ofTextureData); } 
  result = (GLint) ((arg1)->wrapModeVertical); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofTextureData(void *obj) {
ofTextureData *arg1 = (ofTextureData *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofTextureData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofTextureData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofTextureData_attributes[] = {
    { "textureID", _wrap_ofTextureData_textureID_get, _wrap_ofTextureData_textureID_set },
    { "textureTarget", _wrap_ofTextureData_textureTarget_get, _wrap_ofTextureData_textureTarget_set },
    { "glTypeInternal", _wrap_ofTextureData_glTypeInternal_get, _wrap_ofTextureData_glTypeInternal_set },
    { "tex_t", _wrap_ofTextureData_tex_t_get, _wrap_ofTextureData_tex_t_set },
    { "tex_u", _wrap_ofTextureData_tex_u_get, _wrap_ofTextureData_tex_u_set },
    { "tex_w", _wrap_ofTextureData_tex_w_get, _wrap_ofTextureData_tex_w_set },
    { "tex_h", _wrap_ofTextureData_tex_h_get, _wrap_ofTextureData_tex_h_set },
    { "width", _wrap_ofTextureData_width_get, _wrap_ofTextureData_width_set },
    { "height", _wrap_ofTextureData_height_get, _wrap_ofTextureData_height_set },
    { "bFlipTexture", _wrap_ofTextureData_bFlipTexture_get, _wrap_ofTextureData_bFlipTexture_set },
    { "compressionType", _wrap_ofTextureData_compressionType_get, _wrap_ofTextureData_compressionType_set },
    { "bAllocated", _wrap_ofTextureData_bAllocated_get, _wrap_ofTextureData_bAllocated_set },
    { "minFilter", _wrap_ofTextureData_minFilter_get, _wrap_ofTextureData_minFilter_set },
    { "magFilter", _wrap_ofTextureData_magFilter_get, _wrap_ofTextureData_magFilter_set },
    { "wrapModeHorizontal", _wrap_ofTextureData_wrapModeHorizontal_get, _wrap_ofTextureData_wrapModeHorizontal_set },
    { "wrapModeVertical", _wrap_ofTextureData_wrapModeVertical_get, _wrap_ofTextureData_wrapModeVertical_set },
    {0,0,0}
};
static swig_lua_method swig_ofTextureData_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofTextureData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofTextureData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofTextureData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofTextureData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofTextureData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofTextureData_Sf_SwigStatic = {
    "ofTextureData",
    swig_ofTextureData_Sf_SwigStatic_methods,
    swig_ofTextureData_Sf_SwigStatic_attributes,
    swig_ofTextureData_Sf_SwigStatic_constants,
    swig_ofTextureData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofTextureData_bases[] = {0};
static const char *swig_ofTextureData_base_names[] = {0};
static swig_lua_class _wrap_class_ofTextureData = { "ofTextureData", "ofTextureData", &SWIGTYPE_p_ofTextureData,_proxy__wrap_new_ofTextureData, swig_delete_ofTextureData, swig_ofTextureData_methods, swig_ofTextureData_attributes, &swig_ofTextureData_Sf_SwigStatic, swig_ofTextureData_meta, swig_ofTextureData_bases, swig_ofTextureData_base_names };

static int _wrap_ofEnableTextureEdgeHack(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableTextureEdgeHack",0,0)
  ofEnableTextureEdgeHack(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableTextureEdgeHack(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableTextureEdgeHack",0,0)
  ofDisableTextureEdgeHack(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofIsTextureEdgeHackEnabled(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofIsTextureEdgeHackEnabled",0,0) result = (bool)ofIsTextureEdgeHackEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *result = 0 ;
  SWIG_check_num_args("ofTexture::ofTexture",0,0) result = (ofTexture *)new ofTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofTexture::ofTexture",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofTexture::ofTexture",1,"ofTexture const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("new_ofTexture",1,SWIGTYPE_p_ofTexture); }  result = (ofTexture *)new ofTexture((ofTexture const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofTexture__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_ofTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofTexture'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTexture::ofTexture()\n" "    ofTexture::ofTexture(ofTexture const &)\n"); lua_error(L);return 0; }
static int _wrap_ofTexture_allocate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *arg2 = 0 ; SWIG_check_num_args("ofTexture::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofTextureData const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTexture_allocate",2,SWIGTYPE_p_ofTextureData); }  (arg1)->allocate((ofTextureData const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *arg2 = 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofTexture::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofTextureData const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTexture_allocate",2,SWIGTYPE_p_ofTextureData); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->allocate((ofTextureData const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; SWIG_check_num_args("ofTexture::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofTexture::allocate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::allocate",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::allocate",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); (arg1)->allocate(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; bool arg5 ; SWIG_check_num_args("ofTexture::allocate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTexture::allocate",5,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->allocate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; bool arg5 ; int arg6 ; int arg7 ; SWIG_check_num_args("ofTexture::allocate",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTexture::allocate",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::allocate",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::allocate",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (int)lua_tonumber(L, 6); arg7 = (int)lua_tonumber(L, 7); (arg1)->allocate(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofTexture_allocate",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->allocate((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_7(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofTexture::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofPixels const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofTexture_allocate",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->allocate((ofPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_8(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofShortPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofTexture_allocate",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  (arg1)->allocate((ofShortPixels const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_9(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofTexture::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofShortPixels const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofTexture_allocate",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->allocate((ofShortPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_10(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofFloatPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofTexture_allocate",2,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->allocate((ofFloatPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate__SWIG_11(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofTexture::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofFloatPixels const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofTexture_allocate",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->allocate((ofFloatPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_allocate(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofTextureData, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_allocate__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_allocate__SWIG_6(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_allocate__SWIG_8(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_allocate__SWIG_10(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofTexture_allocate__SWIG_9(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofTexture_allocate__SWIG_7(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofTexture_allocate__SWIG_11(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofTextureData, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofTexture_allocate__SWIG_1(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofTexture_allocate__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_ofTexture_allocate__SWIG_4(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofTexture_allocate__SWIG_3(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofTexture_allocate__SWIG_5(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_allocate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTexture::allocate(ofTextureData const &)\n" "    ofTexture::allocate(ofTextureData const &,int,int)\n"
  "    ofTexture::allocate(int,int,int)\n" "    ofTexture::allocate(int,int,int,int,int)\n"
  "    ofTexture::allocate(int,int,int,bool)\n" "    ofTexture::allocate(int,int,int,bool,int,int)\n"
  "    ofTexture::allocate(ofPixels const &)\n" "    ofTexture::allocate(ofPixels const &,bool)\n"
  "    ofTexture::allocate(ofShortPixels const &)\n" "    ofTexture::allocate(ofShortPixels const &,bool)\n"
  "    ofTexture::allocate(ofFloatPixels const &)\n" "    ofTexture::allocate(ofFloatPixels const &,bool)\n");
  lua_error(L);return 0; }
static int _wrap_ofTexture_isAllocated(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; bool result;
  SWIG_check_num_args("ofTexture::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::isAllocated",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_isAllocated",1,SWIGTYPE_p_ofTexture); }  result = (bool)((ofTexture const *)arg1)->isAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_bAllocated(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; bool result;
  SWIG_check_num_args("ofTexture::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::bAllocated",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_bAllocated",1,SWIGTYPE_p_ofTexture); }  result = (bool)((ofTexture const *)arg1)->bAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_clear(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::clear",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_clear",1,SWIGTYPE_p_ofTexture); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_setUseExternalTextureID(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  GLuint arg2 ; GLuint *argp2 ; SWIG_check_num_args("ofTexture::setUseExternalTextureID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setUseExternalTextureID",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::setUseExternalTextureID",2,"GLuint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setUseExternalTextureID",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("ofTexture_setUseExternalTextureID",2,SWIGTYPE_p_GLuint); }  arg2 = *argp2;
  (arg1)->setUseExternalTextureID(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofTexture::loadData",5,5) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"unsigned char const *const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::loadData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::loadData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->loadData((unsigned char const *)arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofTexture::loadData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::loadData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::loadData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->loadData((unsigned short const *)arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofTexture::loadData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::loadData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::loadData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->loadData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::loadData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->loadData((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::loadData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofShortPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  (arg1)->loadData((ofShortPixels const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::loadData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofFloatPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->loadData((ofFloatPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofTexture::loadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofPixels const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loadData((ofPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_7(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofTexture::loadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofShortPixels const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loadData((ofShortPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData__SWIG_8(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofTexture::loadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofFloatPixels const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofTexture_loadData",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loadData((ofFloatPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_loadData(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_loadData__SWIG_3(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_loadData__SWIG_4(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_loadData__SWIG_5(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofTexture_loadData__SWIG_6(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofTexture_loadData__SWIG_7(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofTexture_loadData__SWIG_8(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofTexture_loadData__SWIG_0(L);}  }  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofTexture_loadData__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofTexture_loadData__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_loadData'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTexture::loadData(unsigned char const *const,int,int,int)\n"
  "    ofTexture::loadData(unsigned short const *,int,int,int)\n" "    ofTexture::loadData(float const *,int,int,int)\n"
  "    ofTexture::loadData(ofPixels const &)\n" "    ofTexture::loadData(ofShortPixels const &)\n"
  "    ofTexture::loadData(ofFloatPixels const &)\n" "    ofTexture::loadData(ofPixels const &,int)\n"
  "    ofTexture::loadData(ofShortPixels const &,int)\n" "    ofTexture::loadData(ofFloatPixels const &,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofTexture_loadScreenData(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofTexture::loadScreenData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadScreenData",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::loadScreenData",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadScreenData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::loadScreenData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::loadScreenData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_loadScreenData",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->loadScreenData(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofTexture const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_draw",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_draw",2,SWIGTYPE_p_ofVec3f); }  ((ofTexture const *)arg1)->draw((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_draw__SWIG_0_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofTexture const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_draw",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofTexture_draw",2,SWIGTYPE_p_ofRectangle); }  ((ofTexture const *)arg1)->draw((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_draw__SWIG_0_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofTexture const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_draw",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_draw",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ((ofTexture const *)arg1)->draw((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTexture_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofTexture::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_draw",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofTexture const *)arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofTexture::draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_draw",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ((ofTexture const *)arg1)->draw(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_draw__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofTexture::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_draw",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofTexture const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_draw__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofTexture::draw",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::draw",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::draw",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_draw",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ((ofTexture const *)arg1)->draw(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_draw__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; ofPoint *arg5 = 0 ; SWIG_check_num_args("ofTexture::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::draw",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofTexture::draw",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofTexture::draw",4,"ofPoint const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofTexture::draw",5,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_draw",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_draw",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_draw",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_draw",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_draw",5,SWIGTYPE_p_ofVec3f); } 
  ((ofTexture const *)arg1)->draw((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,(ofPoint const &)*arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_draw(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_draw__SWIG_0_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_draw__SWIG_0_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofTexture_draw__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofTexture_draw__SWIG_0_2(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofTexture_draw__SWIG_2(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_draw__SWIG_5(L);}  }  }  }  }  }  if (argc == 5) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofTexture_draw__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofTexture_draw__SWIG_4(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw(ofPoint const &) const\n" "    draw(ofRectangle const &) const\n" "    draw(ofPoint const &,float,float) const\n"
  "    ofTexture::draw(float,float) const\n" "    ofTexture::draw(float,float,float) const\n"
  "    ofTexture::draw(float,float,float,float) const\n" "    ofTexture::draw(float,float,float,float,float) const\n"
  "    ofTexture::draw(ofPoint const &,ofPoint const &,ofPoint const &,ofPoint const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofTexture_drawSubsection__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
  SWIG_check_num_args("ofTexture::drawSubsection",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::drawSubsection",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::drawSubsection",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_drawSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  ((ofTexture const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_drawSubsection__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ;
  SWIG_check_num_args("ofTexture::drawSubsection",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::drawSubsection",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTexture::drawSubsection",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_drawSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  ((ofTexture const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_drawSubsection__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
  SWIG_check_num_args("ofTexture::drawSubsection",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::drawSubsection",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTexture::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofTexture::drawSubsection",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_drawSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); ((ofTexture const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_drawSubsection__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofTexture::drawSubsection",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::drawSubsection",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTexture::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofTexture::drawSubsection",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofTexture::drawSubsection",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_drawSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  ((ofTexture const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_drawSubsection(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ;
  argc = lua_gettop(L); if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofTexture_drawSubsection__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofTexture_drawSubsection__SWIG_1(L);}  }  }  }  }  }
         }  }  }  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_ofTexture_drawSubsection__SWIG_2(L);}  }  }  }  }  }  }  }  }  }  if (argc == 10) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofTexture_drawSubsection__SWIG_3(L);}  }  }  }  }
               }  }  }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_drawSubsection'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTexture::drawSubsection(float,float,float,float,float,float) const\n"
  "    ofTexture::drawSubsection(float,float,float,float,float,float,float) const\n"
  "    ofTexture::drawSubsection(float,float,float,float,float,float,float,float) const\n"
  "    ofTexture::drawSubsection(float,float,float,float,float,float,float,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofTexture_getMeshForSubsection__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  bool arg11 ; ofRectMode arg12 ; ofMesh result; SWIG_check_num_args("ofTexture::getMeshForSubsection",12,12)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getMeshForSubsection",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::getMeshForSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::getMeshForSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::getMeshForSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::getMeshForSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::getMeshForSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::getMeshForSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTexture::getMeshForSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofTexture::getMeshForSubsection",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofTexture::getMeshForSubsection",10,"float");
  if(!lua_isboolean(L,11)) SWIG_fail_arg("ofTexture::getMeshForSubsection",11,"bool");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofTexture::getMeshForSubsection",12,"ofRectMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getMeshForSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10); arg11 = (lua_toboolean(L, 11)!=0);
  arg12 = (ofRectMode)(int)lua_tonumber(L, 12);
  result = ((ofTexture const *)arg1)->getMeshForSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_getQuad(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; ofPoint *arg5 = 0 ; ofMesh result; SWIG_check_num_args("ofTexture::getQuad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getQuad",1,"ofTexture const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::getQuad",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofTexture::getQuad",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofTexture::getQuad",4,"ofPoint const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofTexture::getQuad",5,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getQuad",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_getQuad",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_getQuad",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_getQuad",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofTexture_getQuad",5,SWIGTYPE_p_ofVec3f); } 
  result = ((ofTexture const *)arg1)->getQuad((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,(ofPoint const &)*arg5);
  { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_getMeshForSubsection__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  ofMesh result; SWIG_check_num_args("ofTexture::getMeshForSubsection",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getMeshForSubsection",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::getMeshForSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::getMeshForSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::getMeshForSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::getMeshForSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::getMeshForSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::getMeshForSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTexture::getMeshForSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofTexture::getMeshForSubsection",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofTexture::getMeshForSubsection",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getMeshForSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  result = ((ofTexture const *)arg1)->getMeshForSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_getMeshForSubsection(lua_State* L) { int argc; int argv[13]={ 1,2,3,4,5,6,7,8,9,10,11,12,13} ;
  argc = lua_gettop(L); if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofTexture_getMeshForSubsection__SWIG_1(L);}  }  }
                   }  }  }  }  }  }  }  }  if (argc == 12) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isboolean(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { return _wrap_ofTexture_getMeshForSubsection__SWIG_0(L);}
                           }  }  }  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_getMeshForSubsection'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofTexture::getMeshForSubsection(float,float,float,float,float,float,float,float,float,bool,ofRectMode) const\n"
  "    ofTexture::getMeshForSubsection(float,float,float,float,float,float,float,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofTexture_bind__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  SWIG_check_num_args("ofTexture::bind",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::bind",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::bind",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_bind",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2);
  ((ofTexture const *)arg1)->bind(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_bind__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::bind",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::bind",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_bind",1,SWIGTYPE_p_ofTexture); }  ((ofTexture const *)arg1)->bind(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_bind(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_bind__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofTexture_bind__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_bind'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTexture::bind(int) const\n" "    ofTexture::bind() const\n"); lua_error(L);return 0; }
static int _wrap_ofTexture_unbind__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  SWIG_check_num_args("ofTexture::unbind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::unbind",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::unbind",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_unbind",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2);
  ((ofTexture const *)arg1)->unbind(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_unbind__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::unbind",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_unbind",1,SWIGTYPE_p_ofTexture); }  ((ofTexture const *)arg1)->unbind(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_unbind(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_unbind__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofTexture_unbind__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_unbind'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTexture::unbind(int) const\n" "    ofTexture::unbind() const\n");
  lua_error(L);return 0; }
static int _wrap_ofTexture_getAlphaMask(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofTexture::getAlphaMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getAlphaMask",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getAlphaMask",1,SWIGTYPE_p_ofTexture); } 
  result = (ofTexture *)((ofTexture const *)arg1)->getAlphaMask();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTexture_getHeight(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float result;
  SWIG_check_num_args("ofTexture::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getHeight",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getHeight",1,SWIGTYPE_p_ofTexture); }  result = (float)((ofTexture const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_getWidth(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float result;
  SWIG_check_num_args("ofTexture::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getWidth",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getWidth",1,SWIGTYPE_p_ofTexture); }  result = (float)((ofTexture const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_setAnchorPercent(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofTexture::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setAnchorPercent",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setAnchorPercent",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTexture_setAnchorPoint(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofTexture::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setAnchorPoint",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setAnchorPoint",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTexture_resetAnchor(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::resetAnchor",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_resetAnchor",1,SWIGTYPE_p_ofTexture); }  (arg1)->resetAnchor(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_getCoordFromPoint(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; ofPoint result; SWIG_check_num_args("ofTexture::getCoordFromPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getCoordFromPoint",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::getCoordFromPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::getCoordFromPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getCoordFromPoint",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = ((ofTexture const *)arg1)->getCoordFromPoint(arg2,arg3); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_getCoordFromPercent(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; ofPoint result; SWIG_check_num_args("ofTexture::getCoordFromPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getCoordFromPercent",1,"ofTexture const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::getCoordFromPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::getCoordFromPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getCoordFromPercent",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = ((ofTexture const *)arg1)->getCoordFromPercent(arg2,arg3); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_setAlphaMask(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTexture *arg2 = 0 ; SWIG_check_num_args("ofTexture::setAlphaMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setAlphaMask",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::setAlphaMask",2,"ofTexture &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setAlphaMask",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setAlphaMask",2,SWIGTYPE_p_ofTexture); }  (arg1)->setAlphaMask(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_disableAlphaMask(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::disableAlphaMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::disableAlphaMask",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_disableAlphaMask",1,SWIGTYPE_p_ofTexture); }  (arg1)->disableAlphaMask(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_setTextureWrap(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; GLint arg2 ;
  GLint arg3 ; SWIG_check_num_args("ofTexture::setTextureWrap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setTextureWrap",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::setTextureWrap",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::setTextureWrap",3,"GLint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setTextureWrap",1,SWIGTYPE_p_ofTexture); }  arg2 = (GLint)lua_tonumber(L, 2);
  arg3 = (GLint)lua_tonumber(L, 3); (arg1)->setTextureWrap(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTexture_setTextureMinMagFilter(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  GLint arg2 ; GLint arg3 ; SWIG_check_num_args("ofTexture::setTextureMinMagFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setTextureMinMagFilter",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::setTextureMinMagFilter",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::setTextureMinMagFilter",3,"GLint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setTextureMinMagFilter",1,SWIGTYPE_p_ofTexture); }  arg2 = (GLint)lua_tonumber(L, 2);
  arg3 = (GLint)lua_tonumber(L, 3); (arg1)->setTextureMinMagFilter(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_setTextureMatrix(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofTexture::setTextureMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setTextureMatrix",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::setTextureMatrix",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setTextureMatrix",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofTexture_setTextureMatrix",2,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->setTextureMatrix((ofMatrix4x4 const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_getTextureMatrix(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofTexture::getTextureMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getTextureMatrix",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getTextureMatrix",1,SWIGTYPE_p_ofTexture); } 
  result = (ofMatrix4x4 *) &((ofTexture const *)arg1)->getTextureMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTexture_isUsingTextureMatrix(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  bool result; SWIG_check_num_args("ofTexture::isUsingTextureMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::isUsingTextureMatrix",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_isUsingTextureMatrix",1,SWIGTYPE_p_ofTexture); } 
  result = (bool)((ofTexture const *)arg1)->isUsingTextureMatrix(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_disableTextureMatrix(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::disableTextureMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::disableTextureMatrix",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_disableTextureMatrix",1,SWIGTYPE_p_ofTexture); }  (arg1)->disableTextureMatrix(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_setCompression(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTexCompression arg2 ; SWIG_check_num_args("ofTexture::setCompression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setCompression",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::setCompression",2,"ofTexCompression");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setCompression",1,SWIGTYPE_p_ofTexture); }  arg2 = (ofTexCompression)(int)lua_tonumber(L, 2);
  (arg1)->setCompression(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_setRGToRGBASwizzles(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofTexture::setRGToRGBASwizzles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setRGToRGBASwizzles",1,"ofTexture *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofTexture::setRGToRGBASwizzles",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setRGToRGBASwizzles",1,SWIGTYPE_p_ofTexture); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRGToRGBASwizzles(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_setSwizzle(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; GLenum arg2 ;
  GLenum arg3 ; GLenum *argp2 ; GLenum *argp3 ; SWIG_check_num_args("ofTexture::setSwizzle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setSwizzle",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::setSwizzle",2,"GLenum");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofTexture::setSwizzle",3,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_setSwizzle",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofTexture_setSwizzle",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofTexture_setSwizzle",3,SWIGTYPE_p_GLenum); }  arg3 = *argp3; (arg1)->setSwizzle(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_readToPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::readToPixels",1,"ofTexture const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::readToPixels",2,"ofPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_readToPixels",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofTexture_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  ((ofTexture const *)arg1)->readToPixels(*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_readToPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::readToPixels",1,"ofTexture const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::readToPixels",2,"ofShortPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_readToPixels",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofTexture_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  ((ofTexture const *)arg1)->readToPixels(*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_readToPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::readToPixels",1,"ofTexture const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::readToPixels",2,"ofFloatPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_readToPixels",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofTexture_readToPixels",2,SWIGTYPE_p_ofPixels_T_float_t); }  ((ofTexture const *)arg1)->readToPixels(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_readToPixels(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_readToPixels__SWIG_0(L);}  }  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_readToPixels__SWIG_1(L);}  }  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_readToPixels__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_readToPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTexture::readToPixels(ofPixels &) const\n"
  "    ofTexture::readToPixels(ofShortPixels &) const\n" "    ofTexture::readToPixels(ofFloatPixels &) const\n");
  lua_error(L);return 0; }
static int _wrap_ofTexture_getTextureData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *result = 0 ; SWIG_check_num_args("ofTexture::getTextureData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getTextureData",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getTextureData",1,SWIGTYPE_p_ofTexture); }  result = (ofTextureData *) &(arg1)->getTextureData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTextureData,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTexture_getTextureData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *result = 0 ; SWIG_check_num_args("ofTexture::getTextureData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getTextureData",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_getTextureData",1,SWIGTYPE_p_ofTexture); } 
  result = (ofTextureData *) &((ofTexture const *)arg1)->getTextureData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTextureData,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTexture_getTextureData(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_getTextureData__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTexture_getTextureData__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTexture_getTextureData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTexture::getTextureData()\n" "    ofTexture::getTextureData() const\n");
  lua_error(L);return 0; }
static int _wrap_ofTexture_enableMipmap(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::enableMipmap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::enableMipmap",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_enableMipmap",1,SWIGTYPE_p_ofTexture); }  (arg1)->enableMipmap(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_disableMipmap(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::disableMipmap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::disableMipmap",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_disableMipmap",1,SWIGTYPE_p_ofTexture); }  (arg1)->disableMipmap(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_generateMipmap(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::generateMipmap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::generateMipmap",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_generateMipmap",1,SWIGTYPE_p_ofTexture); }  (arg1)->generateMipmap(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_texData_set(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *arg2 = (ofTextureData *) 0 ; SWIG_check_num_args("ofTexture::texData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::texData",1,"ofTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTexture::texData",2,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_texData_set",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("ofTexture_texData_set",2,SWIGTYPE_p_ofTextureData); }  if (arg1) (arg1)->texData = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTexture_texData_get(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *result = 0 ; SWIG_check_num_args("ofTexture::texData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::texData",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofTexture_texData_get",1,SWIGTYPE_p_ofTexture); }  result = (ofTextureData *)& ((arg1)->texData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTextureData,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_ofTexture(void *obj) {
ofTexture *arg1 = (ofTexture *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofTexture(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofTexture);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofTexture_attributes[] = {
    { "texData", _wrap_ofTexture_texData_get, _wrap_ofTexture_texData_set },
    {0,0,0}
};
static swig_lua_method swig_ofTexture_methods[]= {
    { "allocate", _wrap_ofTexture_allocate},
    { "isAllocated", _wrap_ofTexture_isAllocated},
    { "bAllocated", _wrap_ofTexture_bAllocated},
    { "clear", _wrap_ofTexture_clear},
    { "setUseExternalTextureID", _wrap_ofTexture_setUseExternalTextureID},
    { "loadData", _wrap_ofTexture_loadData},
    { "loadScreenData", _wrap_ofTexture_loadScreenData},
    { "draw", _wrap_ofTexture_draw},
    { "drawSubsection", _wrap_ofTexture_drawSubsection},
    { "getQuad", _wrap_ofTexture_getQuad},
    { "getMeshForSubsection", _wrap_ofTexture_getMeshForSubsection},
    { "bind", _wrap_ofTexture_bind},
    { "unbind", _wrap_ofTexture_unbind},
    { "getAlphaMask", _wrap_ofTexture_getAlphaMask},
    { "getHeight", _wrap_ofTexture_getHeight},
    { "getWidth", _wrap_ofTexture_getWidth},
    { "setAnchorPercent", _wrap_ofTexture_setAnchorPercent},
    { "setAnchorPoint", _wrap_ofTexture_setAnchorPoint},
    { "resetAnchor", _wrap_ofTexture_resetAnchor},
    { "getCoordFromPoint", _wrap_ofTexture_getCoordFromPoint},
    { "getCoordFromPercent", _wrap_ofTexture_getCoordFromPercent},
    { "setAlphaMask", _wrap_ofTexture_setAlphaMask},
    { "disableAlphaMask", _wrap_ofTexture_disableAlphaMask},
    { "setTextureWrap", _wrap_ofTexture_setTextureWrap},
    { "setTextureMinMagFilter", _wrap_ofTexture_setTextureMinMagFilter},
    { "setTextureMatrix", _wrap_ofTexture_setTextureMatrix},
    { "getTextureMatrix", _wrap_ofTexture_getTextureMatrix},
    { "isUsingTextureMatrix", _wrap_ofTexture_isUsingTextureMatrix},
    { "disableTextureMatrix", _wrap_ofTexture_disableTextureMatrix},
    { "setCompression", _wrap_ofTexture_setCompression},
    { "setRGToRGBASwizzles", _wrap_ofTexture_setRGToRGBASwizzles},
    { "setSwizzle", _wrap_ofTexture_setSwizzle},
    { "readToPixels", _wrap_ofTexture_readToPixels},
    { "getTextureData", _wrap_ofTexture_getTextureData},
    { "enableMipmap", _wrap_ofTexture_enableMipmap},
    { "disableMipmap", _wrap_ofTexture_disableMipmap},
    { "generateMipmap", _wrap_ofTexture_generateMipmap},
    {0,0}
};
static swig_lua_method swig_ofTexture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofTexture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofTexture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofTexture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofTexture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofTexture_Sf_SwigStatic = {
    "ofTexture",
    swig_ofTexture_Sf_SwigStatic_methods,
    swig_ofTexture_Sf_SwigStatic_attributes,
    swig_ofTexture_Sf_SwigStatic_constants,
    swig_ofTexture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofTexture_bases[] = {0};
static const char *swig_ofTexture_base_names[] = {0};
static swig_lua_class _wrap_class_ofTexture = { "ofTexture", "ofTexture", &SWIGTYPE_p_ofTexture,_proxy__wrap_new_ofTexture, swig_delete_ofTexture, swig_ofTexture_methods, swig_ofTexture_attributes, &swig_ofTexture_Sf_SwigStatic, swig_ofTexture_meta, swig_ofTexture_bases, swig_ofTexture_base_names };

static int _wrap_new_ofImage__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofImage_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",0,0)
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofImage__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned char > *arg1 = 0 ;
  ofImage_< unsigned char > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::ofImage_",1,"ofPixels_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_ofImage",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofPixels_< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofImage__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = 0 ;
  ofImage_< unsigned char > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::ofImage_",1,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("new_ofImage",1,SWIGTYPE_p_ofFile); } 
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofFile const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofImage__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  ofImage_< unsigned char > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::ofImage_",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofImage__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofImage_< unsigned char > *arg1 = 0 ;
  ofImage_< unsigned char > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::ofImage_",1,"ofImage_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_ofImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofImage_< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofImage__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofImage__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofImage__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofImage__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_new_ofImage__SWIG_3(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::ofImage_()\n" "    ofImage_< unsigned char >::ofImage_(ofPixels_< unsigned char > const &)\n"
  "    ofImage_< unsigned char >::ofImage_(ofFile const &)\n" "    ofImage_< unsigned char >::ofImage_(std::string const &)\n"
  "    ofImage_< unsigned char >::ofImage_(ofImage_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofImage_allocate(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofImageType arg4 ;
  SWIG_check_num_args("ofImage_< unsigned char >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::allocate",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::allocate",4,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_allocate",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofImageType)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_isAllocated(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::isAllocated",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_isAllocated",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (bool)((ofImage_< unsigned char > const *)arg1)->isAllocated(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_bAllocated(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::bAllocated",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_bAllocated",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (bool)(arg1)->bAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_clear(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::clear",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_clear",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_load__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::load",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_load",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->load(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_load__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::load",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::load",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_load",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofImage_load",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->load((ofBuffer const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_load__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::load",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::load",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_load",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofImage_load",2,SWIGTYPE_p_ofFile); } 
  result = (bool)(arg1)->load((ofFile const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_load(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_load__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_load__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofImage_load__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_load'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::load(std::string)\n" "    ofImage_< unsigned char >::load(ofBuffer const &)\n"
  "    ofImage_< unsigned char >::load(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_ofImage_loadImage__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->loadImage(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_loadImage__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofImage_loadImage",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->loadImage((ofBuffer const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_loadImage__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofImage_loadImage",2,SWIGTYPE_p_ofFile); }  result = (bool)(arg1)->loadImage((ofFile const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_loadImage(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_loadImage__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_loadImage__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofImage_loadImage__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_loadImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::loadImage(std::string)\n" "    ofImage_< unsigned char >::loadImage(ofBuffer const &)\n"
  "    ofImage_< unsigned char >::loadImage(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_ofImage_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPoint *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofImage_draw",2,SWIGTYPE_p_ofVec3f); }
   ((ofImage_< unsigned char > const *)arg1)->draw((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_draw__SWIG_0_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofRectangle *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofImage_draw",2,SWIGTYPE_p_ofRectangle); } 
  ((ofImage_< unsigned char > const *)arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_draw__SWIG_0_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPoint *arg2 = 0 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("draw",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofImage_draw",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ((ofImage_< unsigned char > const *)arg1)->draw((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::draw",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofImage_< unsigned char > const *)arg1)->draw(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofImage_< unsigned char >::draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::draw",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ((ofImage_< unsigned char > const *)arg1)->draw(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_draw__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofImage_< unsigned char >::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::draw",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofImage_< unsigned char > const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_draw__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; SWIG_check_num_args("ofImage_< unsigned char >::draw",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::draw",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::draw",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::draw",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ((ofImage_< unsigned char > const *)arg1)->draw(arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_draw(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_draw__SWIG_0_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_draw__SWIG_0_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofImage_draw__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofImage_draw__SWIG_0_2(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofImage_draw__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofImage_draw__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofImage_draw__SWIG_4(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw(ofPoint const &) const\n" "    draw(ofRectangle const &) const\n" "    draw(ofPoint const &,float,float) const\n"
  "    ofImage_< unsigned char >::draw(float,float) const\n" "    ofImage_< unsigned char >::draw(float,float,float) const\n"
  "    ofImage_< unsigned char >::draw(float,float,float,float) const\n"
  "    ofImage_< unsigned char >::draw(float,float,float,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofImage_drawSubsection__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; SWIG_check_num_args("ofImage_< unsigned char >::drawSubsection",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  ((ofImage_< unsigned char > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_drawSubsection__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofImage_< unsigned char >::drawSubsection",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  ((ofImage_< unsigned char > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_drawSubsection__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofImage_< unsigned char >::drawSubsection",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  ((ofImage_< unsigned char > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_drawSubsection__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofImage_< unsigned char >::drawSubsection",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  ((ofImage_< unsigned char > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_drawSubsection(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ;
  argc = lua_gettop(L); if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofImage_drawSubsection__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofImage_drawSubsection__SWIG_1(L);}  }  }  }  }  }  }
       }  }  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_ofImage_drawSubsection__SWIG_2(L);}  }  }  }  }  }  }  }  }  }  if (argc == 10) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofImage_drawSubsection__SWIG_3(L);}  }  }  }  }
               }  }  }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_drawSubsection'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::drawSubsection(float,float,float,float,float,float) const\n"
  "    ofImage_< unsigned char >::drawSubsection(float,float,float,float,float,float,float) const\n"
  "    ofImage_< unsigned char >::drawSubsection(float,float,float,float,float,float,float,float) const\n"
  "    ofImage_< unsigned char >::drawSubsection(float,float,float,float,float,float,float,float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_ofImage_update(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::update",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_update",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->update(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_setUseTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setUseTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setUseTexture",1,"ofImage_< unsigned char > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setUseTexture",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseTexture(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_isUsingTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::isUsingTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::isUsingTexture",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_isUsingTexture",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (bool)((ofImage_< unsigned char > const *)arg1)->isUsingTexture(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getTexture",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getTexture",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (ofTexture *) &(arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_getTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getTexture",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getTexture",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofTexture *) &((ofImage_< unsigned char > const *)arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_getTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_getTexture__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_getTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_getTexture'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::getTexture()\n" "    ofImage_< unsigned char >::getTexture() const\n");
  lua_error(L);return 0; }
static int _wrap_ofImage_getTextureReference__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getTextureReference",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getTextureReference",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofTexture *) &(arg1)->getTextureReference(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getTextureReference__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getTextureReference",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getTextureReference",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofTexture *) &((ofImage_< unsigned char > const *)arg1)->getTextureReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_getTextureReference(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_getTextureReference__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_getTextureReference__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_getTextureReference'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned char >::getTextureReference()\n"
  "    ofImage_< unsigned char >::getTextureReference() const\n"); lua_error(L);return 0; }
static int _wrap_ofImage_bind__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::bind",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::bind",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_bind",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  ((ofImage_< unsigned char > const *)arg1)->bind(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_bind__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; SWIG_check_num_args("ofImage_< unsigned char >::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::bind",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_bind",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  ((ofImage_< unsigned char > const *)arg1)->bind();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_bind(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_bind__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofImage_bind__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_bind'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::bind(int) const\n" "    ofImage_< unsigned char >::bind() const\n"); lua_error(L);return 0; }
static int _wrap_ofImage_unbind__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::unbind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::unbind",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::unbind",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_unbind",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  ((ofImage_< unsigned char > const *)arg1)->unbind(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_unbind__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::unbind",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_unbind",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  ((ofImage_< unsigned char > const *)arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_unbind(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_unbind__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofImage_unbind__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_unbind'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::unbind(int) const\n" "    ofImage_< unsigned char >::unbind() const\n");
  lua_error(L);return 0; }
static int _wrap_ofImage_setCompression(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofTexCompression arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setCompression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setCompression",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setCompression",2,"ofTexCompression");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setCompression",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  arg2 = (ofTexCompression)(int)lua_tonumber(L, 2); (arg1)->setCompression(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPixels_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getPixels",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char > *) &(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPixels_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getPixels",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char > *) &((ofImage_< unsigned char > const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_getPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::getPixels()\n" "    ofImage_< unsigned char >::getPixels() const\n"); lua_error(L);return 0; }
static int _wrap_ofImage_getPixelsRef__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPixels_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getPixelsRef",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getPixelsRef",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char > *) &(arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getPixelsRef__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPixels_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getPixelsRef",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getPixelsRef",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char > *) &((ofImage_< unsigned char > const *)arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getPixelsRef(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_getPixelsRef__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_getPixelsRef__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_getPixelsRef'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned char >::getPixelsRef()\n"
  "    ofImage_< unsigned char >::getPixelsRef() const\n"); lua_error(L);return 0; }
static int _wrap_ofImage_getColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofImage_< unsigned char >::getColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getColor",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::getColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::getColor",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofImage_< unsigned char > const *)arg1)->getColor(arg2,arg3); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofImage_< unsigned char >::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getColor",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::getColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofImage_< unsigned char > const *)arg1)->getColor(arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getColor(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofImage_getColor__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofImage_getColor__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_getColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::getColor(int,int) const\n" "    ofImage_< unsigned char >::getColor(int) const\n");
  lua_error(L);return 0; }
static int _wrap_ofImage_getHeight(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofImage_< unsigned char >::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getHeight",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getHeight",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (float)((ofImage_< unsigned char > const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_getWidth(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofImage_< unsigned char >::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getWidth",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getWidth",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (float)((ofImage_< unsigned char > const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ;
  ofColor_< unsigned char > *arg4 = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",4,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setColor",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor(arg2,arg3,(ofColor_< unsigned char > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; ofColor_< unsigned char > *arg3 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",3,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setColor",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor(arg2,(ofColor_< unsigned char > const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor((ofColor_< unsigned char > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_setColor__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_setColor__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_setColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::setColor(int,int,ofColor_< unsigned char > const &)\n"
  "    ofImage_< unsigned char >::setColor(int,ofColor_< unsigned char > const &)\n"
  "    ofImage_< unsigned char >::setColor(ofColor_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofImage_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofImageType arg5 ; bool arg6 ; SWIG_check_num_args("ofImage_< unsigned char >::setFromPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",1,"ofImage_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",5,"ofImageType");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofImageType arg5 ; SWIG_check_num_args("ofImage_< unsigned char >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",1,"ofImage_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",5,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_setFromPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",2,"ofPixels_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setFromPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  (arg1)->setFromPixels((ofPixels_< unsigned char > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_setFromPixels(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofImage_setFromPixels__SWIG_2(L);}  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofImage_setFromPixels__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_ofImage_setFromPixels__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::setFromPixels(unsigned char const *,int,int,ofImageType,bool)\n"
  "    ofImage_< unsigned char >::setFromPixels(unsigned char const *,int,int,ofImageType)\n"
  "    ofImage_< unsigned char >::setFromPixels(ofPixels_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofImage_grabScreen(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofImage_< unsigned char >::grabScreen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_grabScreen",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->grabScreen(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_setImageType(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofImageType arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setImageType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setImageType",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setImageType",2,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setImageType",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  arg2 = (ofImageType)(int)lua_tonumber(L, 2); (arg1)->setImageType(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_getImageType(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofImageType result;
  SWIG_check_num_args("ofImage_< unsigned char >::getImageType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getImageType",1,"ofImage_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_getImageType",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofImageType)((ofImage_< unsigned char > const *)arg1)->getImageType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_resize(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::resize",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_resize",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->resize(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_crop(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofImage_< unsigned char >::crop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::crop",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::crop",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::crop",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::crop",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::crop",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_crop",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->crop(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_cropFrom(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofImage_< unsigned char > *arg2 = 0 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofImage_< unsigned char >::cropFrom",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",2,"ofImage_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_cropFrom",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_cropFrom",2,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->cropFrom(*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_rotate90(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::rotate90",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::rotate90",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_rotate90",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_mirror(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::mirror",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::mirror",1,"ofImage_< unsigned char > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_mirror",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_setAnchorPercent(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPercent",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setAnchorPercent",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_setAnchorPoint(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPoint",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_setAnchorPoint",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofImage_resetAnchor(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::resetAnchor",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_resetAnchor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->resetAnchor(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_save__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::save",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::save",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3); (arg1)->save(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_save__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::save",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::save",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->save(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_save__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::save",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::save",2,"ofBuffer &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofImage_save",2,SWIGTYPE_p_ofBuffer); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->save(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_save__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::save",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::save",2,"ofBuffer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofImage_save",2,SWIGTYPE_p_ofBuffer); }  (arg1)->save(*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_save__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::save",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::save",2,"ofFile const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofImage_save",2,SWIGTYPE_p_ofFile); } 
  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3); (arg1)->save((ofFile const &)*arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_save__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::save",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::save",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofImage_save",2,SWIGTYPE_p_ofFile); } 
  (arg1)->save((ofFile const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_save(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_save__SWIG_3(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_save__SWIG_5(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofImage_save__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofImage_save__SWIG_4(L);}  }  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofImage_save__SWIG_2(L);}  }  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofImage_save__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_save'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::save(std::string,ofImageQualityType)\n" "    ofImage_< unsigned char >::save(std::string)\n"
  "    ofImage_< unsigned char >::save(ofBuffer &,ofImageQualityType)\n" "    ofImage_< unsigned char >::save(ofBuffer &)\n"
  "    ofImage_< unsigned char >::save(ofFile const &,ofImageQualityType)\n"
  "    ofImage_< unsigned char >::save(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_ofImage_saveImage__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_saveImage__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->saveImage(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_saveImage__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"ofBuffer &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofImage_saveImage",2,SWIGTYPE_p_ofBuffer); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_saveImage__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"ofBuffer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofImage_saveImage",2,SWIGTYPE_p_ofBuffer); }  (arg1)->saveImage(*arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_saveImage__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"ofFile const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofImage_saveImage",2,SWIGTYPE_p_ofFile); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage((ofFile const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_saveImage__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofImage_saveImage",2,SWIGTYPE_p_ofFile); }  (arg1)->saveImage((ofFile const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofImage_saveImage(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_saveImage__SWIG_3(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofImage_saveImage__SWIG_5(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofImage_saveImage__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofImage_saveImage__SWIG_4(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofImage_saveImage__SWIG_2(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofImage_saveImage__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofImage_saveImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::saveImage(std::string,ofImageQualityType)\n"
  "    ofImage_< unsigned char >::saveImage(std::string)\n"
  "    ofImage_< unsigned char >::saveImage(ofBuffer &,ofImageQualityType)\n"
  "    ofImage_< unsigned char >::saveImage(ofBuffer &)\n"
  "    ofImage_< unsigned char >::saveImage(ofFile const &,ofImageQualityType)\n"
  "    ofImage_< unsigned char >::saveImage(ofFile const &)\n"); lua_error(L);return 0; }
static void swig_delete_ofImage(void *obj) {
ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofImage_methods[]= {
    { "allocate", _wrap_ofImage_allocate},
    { "isAllocated", _wrap_ofImage_isAllocated},
    { "bAllocated", _wrap_ofImage_bAllocated},
    { "clear", _wrap_ofImage_clear},
    { "load", _wrap_ofImage_load},
    { "loadImage", _wrap_ofImage_loadImage},
    { "draw", _wrap_ofImage_draw},
    { "drawSubsection", _wrap_ofImage_drawSubsection},
    { "update", _wrap_ofImage_update},
    { "setUseTexture", _wrap_ofImage_setUseTexture},
    { "isUsingTexture", _wrap_ofImage_isUsingTexture},
    { "getTexture", _wrap_ofImage_getTexture},
    { "getTextureReference", _wrap_ofImage_getTextureReference},
    { "bind", _wrap_ofImage_bind},
    { "unbind", _wrap_ofImage_unbind},
    { "setCompression", _wrap_ofImage_setCompression},
    { "getPixels", _wrap_ofImage_getPixels},
    { "getPixelsRef", _wrap_ofImage_getPixelsRef},
    { "getColor", _wrap_ofImage_getColor},
    { "getHeight", _wrap_ofImage_getHeight},
    { "getWidth", _wrap_ofImage_getWidth},
    { "setColor", _wrap_ofImage_setColor},
    { "setFromPixels", _wrap_ofImage_setFromPixels},
    { "grabScreen", _wrap_ofImage_grabScreen},
    { "setImageType", _wrap_ofImage_setImageType},
    { "getImageType", _wrap_ofImage_getImageType},
    { "resize", _wrap_ofImage_resize},
    { "crop", _wrap_ofImage_crop},
    { "cropFrom", _wrap_ofImage_cropFrom},
    { "rotate90", _wrap_ofImage_rotate90},
    { "mirror", _wrap_ofImage_mirror},
    { "setAnchorPercent", _wrap_ofImage_setAnchorPercent},
    { "setAnchorPoint", _wrap_ofImage_setAnchorPoint},
    { "resetAnchor", _wrap_ofImage_resetAnchor},
    { "save", _wrap_ofImage_save},
    { "saveImage", _wrap_ofImage_saveImage},
    {0,0}
};
static swig_lua_method swig_ofImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofImage_Sf_SwigStatic = {
    "ofImage",
    swig_ofImage_Sf_SwigStatic_methods,
    swig_ofImage_Sf_SwigStatic_attributes,
    swig_ofImage_Sf_SwigStatic_constants,
    swig_ofImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofImage_bases[] = {0};
static const char *swig_ofImage_base_names[] = {0};
static swig_lua_class _wrap_class_ofImage = { "ofImage", "ofImage", &SWIGTYPE_p_ofImage_T_unsigned_char_t,_proxy__wrap_new_ofImage, swig_delete_ofImage, swig_ofImage_methods, swig_ofImage_attributes, &swig_ofImage_Sf_SwigStatic, swig_ofImage_meta, swig_ofImage_bases, swig_ofImage_base_names };

static int _wrap_new_ofFloatImage__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::ofImage_",0,0) result = (ofImage_< float > *)new ofImage_< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatImage__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = 0 ;
  ofImage_< float > *result = 0 ; SWIG_check_num_args("ofImage_< float >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< float >::ofImage_",1,"ofPixels_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("new_ofFloatImage",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofImage_< float > *)new ofImage_< float >((ofPixels_< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatImage__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = 0 ; ofImage_< float > *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< float >::ofImage_",1,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("new_ofFloatImage",1,SWIGTYPE_p_ofFile); } 
  result = (ofImage_< float > *)new ofImage_< float >((ofFile const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatImage__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  ofImage_< float > *result = 0 ; SWIG_check_num_args("ofImage_< float >::ofImage_",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofImage_< float >::ofImage_",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (ofImage_< float > *)new ofImage_< float >((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatImage__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = 0 ;
  ofImage_< float > *result = 0 ; SWIG_check_num_args("ofImage_< float >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< float >::ofImage_",1,"ofImage_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("new_ofFloatImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofImage_< float > *)new ofImage_< float >((ofImage_< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofFloatImage__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofFloatImage__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofFloatImage__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofFloatImage__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_new_ofFloatImage__SWIG_3(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofFloatImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< float >::ofImage_()\n" "    ofImage_< float >::ofImage_(ofPixels_< float > const &)\n"
  "    ofImage_< float >::ofImage_(ofFile const &)\n" "    ofImage_< float >::ofImage_(std::string const &)\n"
  "    ofImage_< float >::ofImage_(ofImage_< float > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_allocate(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ; int arg3 ; ofImageType arg4 ; SWIG_check_num_args("ofImage_< float >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::allocate",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::allocate",4,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_allocate",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofImageType)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_isAllocated(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  bool result; SWIG_check_num_args("ofImage_< float >::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::isAllocated",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_isAllocated",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (bool)((ofImage_< float > const *)arg1)->isAllocated(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_bAllocated(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  bool result; SWIG_check_num_args("ofImage_< float >::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::bAllocated",1,"ofImage_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_bAllocated",1,SWIGTYPE_p_ofImage_T_float_t); }  result = (bool)(arg1)->bAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_clear(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  SWIG_check_num_args("ofImage_< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::clear",1,"ofImage_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_clear",1,SWIGTYPE_p_ofImage_T_float_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_load__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofImage_< float >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::load",1,"ofImage_< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< float >::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_load",1,SWIGTYPE_p_ofImage_T_float_t); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->load(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_load__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofBuffer *arg2 = 0 ; bool result; SWIG_check_num_args("ofImage_< float >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::load",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::load",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_load",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofFloatImage_load",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->load((ofBuffer const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_load__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofFile *arg2 = 0 ; bool result; SWIG_check_num_args("ofImage_< float >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::load",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::load",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_load",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFloatImage_load",2,SWIGTYPE_p_ofFile); }  result = (bool)(arg1)->load((ofFile const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_load(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_load__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_load__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatImage_load__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_load'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< float >::load(std::string)\n" "    ofImage_< float >::load(ofBuffer const &)\n"
  "    ofImage_< float >::load(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_loadImage__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofImage_< float >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::loadImage",1,"ofImage_< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< float >::loadImage",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_loadImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->loadImage(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_loadImage__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofBuffer *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< float >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::loadImage",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::loadImage",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_loadImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofFloatImage_loadImage",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->loadImage((ofBuffer const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_loadImage__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< float >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::loadImage",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::loadImage",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_loadImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFloatImage_loadImage",2,SWIGTYPE_p_ofFile); }  result = (bool)(arg1)->loadImage((ofFile const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_loadImage(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_loadImage__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_loadImage__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatImage_loadImage__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_loadImage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::loadImage(std::string)\n"
  "    ofImage_< float >::loadImage(ofBuffer const &)\n" "    ofImage_< float >::loadImage(ofFile const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatImage_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofPoint *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_draw",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofFloatImage_draw",2,SWIGTYPE_p_ofVec3f); }  ((ofImage_< float > const *)arg1)->draw((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_draw__SWIG_0_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofRectangle *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_draw",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofFloatImage_draw",2,SWIGTYPE_p_ofRectangle); } 
  ((ofImage_< float > const *)arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_draw__SWIG_0_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofPoint *arg2 = 0 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("draw",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_draw",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofFloatImage_draw",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ((ofImage_< float > const *)arg1)->draw((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofImage_< float >::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::draw",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_draw",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofImage_< float > const *)arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofImage_< float >::draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::draw",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_draw",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ((ofImage_< float > const *)arg1)->draw(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_draw__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofImage_< float >::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::draw",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_draw",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofImage_< float > const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_draw__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofImage_< float >::draw",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::draw",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::draw",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< float >::draw",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_draw",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ((ofImage_< float > const *)arg1)->draw(arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_draw(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_draw__SWIG_0_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_draw__SWIG_0_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatImage_draw__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofFloatImage_draw__SWIG_0_2(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofFloatImage_draw__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofFloatImage_draw__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofFloatImage_draw__SWIG_4(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw(ofPoint const &) const\n" "    draw(ofRectangle const &) const\n" "    draw(ofPoint const &,float,float) const\n"
  "    ofImage_< float >::draw(float,float) const\n" "    ofImage_< float >::draw(float,float,float) const\n"
  "    ofImage_< float >::draw(float,float,float,float) const\n"
  "    ofImage_< float >::draw(float,float,float,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_drawSubsection__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
  float arg7 ; SWIG_check_num_args("ofImage_< float >::drawSubsection",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::drawSubsection",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< float >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< float >::drawSubsection",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  ((ofImage_< float > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_drawSubsection__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
  float arg7 ; float arg8 ; SWIG_check_num_args("ofImage_< float >::drawSubsection",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::drawSubsection",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< float >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< float >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< float >::drawSubsection",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  ((ofImage_< float > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_drawSubsection__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
  float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofImage_< float >::drawSubsection",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::drawSubsection",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< float >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< float >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< float >::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofImage_< float >::drawSubsection",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); ((ofImage_< float > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_drawSubsection__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
  float arg7 ; float arg8 ; float arg9 ; float arg10 ; SWIG_check_num_args("ofImage_< float >::drawSubsection",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::drawSubsection",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< float >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< float >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< float >::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofImage_< float >::drawSubsection",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofImage_< float >::drawSubsection",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  ((ofImage_< float > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_drawSubsection(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ;
  argc = lua_gettop(L); if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofFloatImage_drawSubsection__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofFloatImage_drawSubsection__SWIG_1(L);}  }  }  }  }
           }  }  }  }  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_ofFloatImage_drawSubsection__SWIG_2(L);}  }  }  }  }  }  }  }  }  }  if (argc == 10) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofFloatImage_drawSubsection__SWIG_3(L);}  }  }  }
                 }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_drawSubsection'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::drawSubsection(float,float,float,float,float,float) const\n"
  "    ofImage_< float >::drawSubsection(float,float,float,float,float,float,float) const\n"
  "    ofImage_< float >::drawSubsection(float,float,float,float,float,float,float,float) const\n"
  "    ofImage_< float >::drawSubsection(float,float,float,float,float,float,float,float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatImage_update(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  SWIG_check_num_args("ofImage_< float >::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::update",1,"ofImage_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_update",1,SWIGTYPE_p_ofImage_T_float_t); }  (arg1)->update(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_setUseTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; bool arg2 ; SWIG_check_num_args("ofImage_< float >::setUseTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setUseTexture",1,"ofImage_< float > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofImage_< float >::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setUseTexture",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseTexture(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_isUsingTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; bool result; SWIG_check_num_args("ofImage_< float >::isUsingTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::isUsingTexture",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_isUsingTexture",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (bool)((ofImage_< float > const *)arg1)->isUsingTexture(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getTexture",1,"ofImage_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getTexture",1,SWIGTYPE_p_ofImage_T_float_t); }  result = (ofTexture *) &(arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_getTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getTexture",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getTexture",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofTexture *) &((ofImage_< float > const *)arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_getTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_getTexture__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_getTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_getTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::getTexture()\n" "    ofImage_< float >::getTexture() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatImage_getTextureReference__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getTextureReference",1,"ofImage_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getTextureReference",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofTexture *) &(arg1)->getTextureReference(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getTextureReference__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getTextureReference",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getTextureReference",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofTexture *) &((ofImage_< float > const *)arg1)->getTextureReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_getTextureReference(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_getTextureReference__SWIG_0(L);}  } 
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_getTextureReference__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_getTextureReference'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::getTextureReference()\n"
  "    ofImage_< float >::getTextureReference() const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_bind__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ; SWIG_check_num_args("ofImage_< float >::bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::bind",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::bind",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_bind",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  ((ofImage_< float > const *)arg1)->bind(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_bind__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  SWIG_check_num_args("ofImage_< float >::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::bind",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_bind",1,SWIGTYPE_p_ofImage_T_float_t); }  ((ofImage_< float > const *)arg1)->bind();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_bind(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_bind__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatImage_bind__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_bind'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< float >::bind(int) const\n" "    ofImage_< float >::bind() const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_unbind__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; int arg2 ; SWIG_check_num_args("ofImage_< float >::unbind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::unbind",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::unbind",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_unbind",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  ((ofImage_< float > const *)arg1)->unbind(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_unbind__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; SWIG_check_num_args("ofImage_< float >::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::unbind",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_unbind",1,SWIGTYPE_p_ofImage_T_float_t); }  ((ofImage_< float > const *)arg1)->unbind();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_unbind(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_unbind__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatImage_unbind__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_unbind'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::unbind(int) const\n" "    ofImage_< float >::unbind() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatImage_setCompression(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofTexCompression arg2 ;
  SWIG_check_num_args("ofImage_< float >::setCompression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setCompression",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::setCompression",2,"ofTexCompression");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setCompression",1,SWIGTYPE_p_ofImage_T_float_t); } 
  arg2 = (ofTexCompression)(int)lua_tonumber(L, 2); (arg1)->setCompression(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofPixels_< float > *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getPixels",1,"ofImage_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getPixels",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofPixels_< float > *) &(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofPixels_< float > *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getPixels",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getPixels",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofPixels_< float > *) &((ofImage_< float > const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_getPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::getPixels()\n" "    ofImage_< float >::getPixels() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatImage_getPixelsRef__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofPixels_< float > *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getPixelsRef",1,"ofImage_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getPixelsRef",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofPixels_< float > *) &(arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getPixelsRef__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofPixels_< float > *result = 0 ;
  SWIG_check_num_args("ofImage_< float >::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getPixelsRef",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getPixelsRef",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofPixels_< float > *) &((ofImage_< float > const *)arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getPixelsRef(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_getPixelsRef__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_getPixelsRef__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_getPixelsRef'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::getPixelsRef()\n"
  "    ofImage_< float >::getPixelsRef() const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_getColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; int arg2 ; int arg3 ; ofColor_< float > result;
  SWIG_check_num_args("ofImage_< float >::getColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getColor",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::getColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::getColor",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getColor",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofImage_< float > const *)arg1)->getColor(arg2,arg3); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; int arg2 ; ofColor_< float > result;
  SWIG_check_num_args("ofImage_< float >::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getColor",1,"ofImage_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::getColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getColor",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofImage_< float > const *)arg1)->getColor(arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getColor(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatImage_getColor__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatImage_getColor__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_getColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::getColor(int,int) const\n"
  "    ofImage_< float >::getColor(int) const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_getHeight(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float result; SWIG_check_num_args("ofImage_< float >::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getHeight",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getHeight",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (float)((ofImage_< float > const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getWidth(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  float result; SWIG_check_num_args("ofImage_< float >::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getWidth",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getWidth",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (float)((ofImage_< float > const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; int arg2 ; int arg3 ; ofColor_< float > *arg4 = 0 ;
  SWIG_check_num_args("ofImage_< float >::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setColor",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::setColor",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofImage_< float >::setColor",4,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setColor",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setColor",4,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setColor(arg2,arg3,(ofColor_< float > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; int arg2 ; ofColor_< float > *arg3 = 0 ;
  SWIG_check_num_args("ofImage_< float >::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setColor",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofImage_< float >::setColor",3,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setColor",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setColor",3,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setColor(arg2,(ofColor_< float > const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofColor_< float > *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< float >::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setColor",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::setColor",2,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setColor",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setColor",2,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setColor((ofColor_< float > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_setColor__SWIG_2(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_setColor__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_setColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::setColor(int,int,ofColor_< float > const &)\n"
  "    ofImage_< float >::setColor(int,ofColor_< float > const &)\n"
  "    ofImage_< float >::setColor(ofColor_< float > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; ofImageType arg5 ;
  bool arg6 ; SWIG_check_num_args("ofImage_< float >::setFromPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setFromPixels",1,"ofImage_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofImage_< float >::setFromPixels",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::setFromPixels",5,"ofImageType");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofImage_< float >::setFromPixels",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatImage_setFromPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; ofImageType arg5 ;
  SWIG_check_num_args("ofImage_< float >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setFromPixels",1,"ofImage_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofImage_< float >::setFromPixels",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::setFromPixels",5,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatImage_setFromPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_setFromPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofPixels_< float > *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< float >::setFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setFromPixels",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::setFromPixels",2,"ofPixels_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setFromPixels",2,SWIGTYPE_p_ofPixels_T_float_t); } 
  (arg1)->setFromPixels((ofPixels_< float > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_setFromPixels(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_setFromPixels__SWIG_2(L);}  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofFloatImage_setFromPixels__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_ofFloatImage_setFromPixels__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::setFromPixels(float const *,int,int,ofImageType,bool)\n"
  "    ofImage_< float >::setFromPixels(float const *,int,int,ofImageType)\n"
  "    ofImage_< float >::setFromPixels(ofPixels_< float > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatImage_grabScreen(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofImage_< float >::grabScreen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::grabScreen",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::grabScreen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::grabScreen",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::grabScreen",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::grabScreen",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_grabScreen",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->grabScreen(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_setImageType(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofImageType arg2 ; SWIG_check_num_args("ofImage_< float >::setImageType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setImageType",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::setImageType",2,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setImageType",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (ofImageType)(int)lua_tonumber(L, 2);
  (arg1)->setImageType(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_getImageType(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofImageType result; SWIG_check_num_args("ofImage_< float >::getImageType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::getImageType",1,"ofImage_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_getImageType",1,SWIGTYPE_p_ofImage_T_float_t); } 
  result = (ofImageType)((ofImage_< float > const *)arg1)->getImageType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_resize(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ; int arg3 ; SWIG_check_num_args("ofImage_< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::resize",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_resize",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->resize(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_crop(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofImage_< float >::crop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::crop",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::crop",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::crop",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::crop",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::crop",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_crop",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->crop(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_cropFrom(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofImage_< float > *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
  SWIG_check_num_args("ofImage_< float >::cropFrom",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::cropFrom",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::cropFrom",2,"ofImage_< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::cropFrom",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< float >::cropFrom",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< float >::cropFrom",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< float >::cropFrom",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_cropFrom",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_cropFrom",2,SWIGTYPE_p_ofImage_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->cropFrom(*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_rotate90(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  int arg2 ; SWIG_check_num_args("ofImage_< float >::rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::rotate90",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::rotate90",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_rotate90",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_mirror(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  bool arg2 ; bool arg3 ; SWIG_check_num_args("ofImage_< float >::mirror",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::mirror",1,"ofImage_< float > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofImage_< float >::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofImage_< float >::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_mirror",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_setAnchorPercent(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< float >::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setAnchorPercent",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setAnchorPercent",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_setAnchorPoint(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< float >::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::setAnchorPoint",1,"ofImage_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< float >::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_setAnchorPoint",1,SWIGTYPE_p_ofImage_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatImage_resetAnchor(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  SWIG_check_num_args("ofImage_< float >::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::resetAnchor",1,"ofImage_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_resetAnchor",1,SWIGTYPE_p_ofImage_T_float_t); }  (arg1)->resetAnchor(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_save__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  std::string arg2 ; ofImageQualityType arg3 ; SWIG_check_num_args("ofImage_< float >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::save",1,"ofImage_< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< float >::save",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_save",1,SWIGTYPE_p_ofImage_T_float_t); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3); (arg1)->save(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_save__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  std::string arg2 ; SWIG_check_num_args("ofImage_< float >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::save",1,"ofImage_< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< float >::save",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_save",1,SWIGTYPE_p_ofImage_T_float_t); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->save(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_save__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofBuffer *arg2 = 0 ; ofImageQualityType arg3 ; SWIG_check_num_args("ofImage_< float >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::save",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::save",2,"ofBuffer &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_save",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofFloatImage_save",2,SWIGTYPE_p_ofBuffer); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->save(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_save__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofBuffer *arg2 = 0 ; SWIG_check_num_args("ofImage_< float >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::save",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::save",2,"ofBuffer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_save",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofFloatImage_save",2,SWIGTYPE_p_ofBuffer); }  (arg1)->save(*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_save__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofFile *arg2 = 0 ; ofImageQualityType arg3 ; SWIG_check_num_args("ofImage_< float >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::save",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::save",2,"ofFile const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_save",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFloatImage_save",2,SWIGTYPE_p_ofFile); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->save((ofFile const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_save__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofImage_< float > *arg1 = (ofImage_< float > *) 0 ;
  ofFile *arg2 = 0 ; SWIG_check_num_args("ofImage_< float >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::save",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::save",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_save",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFloatImage_save",2,SWIGTYPE_p_ofFile); }  (arg1)->save((ofFile const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_save(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_save__SWIG_3(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_save__SWIG_5(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatImage_save__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofFloatImage_save__SWIG_4(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofFloatImage_save__SWIG_2(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatImage_save__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_save'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< float >::save(std::string,ofImageQualityType)\n" "    ofImage_< float >::save(std::string)\n"
  "    ofImage_< float >::save(ofBuffer &,ofImageQualityType)\n" "    ofImage_< float >::save(ofBuffer &)\n"
  "    ofImage_< float >::save(ofFile const &,ofImageQualityType)\n" "    ofImage_< float >::save(ofFile const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatImage_saveImage__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; std::string arg2 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< float >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::saveImage",1,"ofImage_< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< float >::saveImage",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_saveImage__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; std::string arg2 ; SWIG_check_num_args("ofImage_< float >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::saveImage",1,"ofImage_< float > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< float >::saveImage",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->saveImage(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_saveImage__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofBuffer *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< float >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::saveImage",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::saveImage",2,"ofBuffer &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",2,SWIGTYPE_p_ofBuffer); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_saveImage__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofBuffer *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< float >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::saveImage",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::saveImage",2,"ofBuffer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",2,SWIGTYPE_p_ofBuffer); }  (arg1)->saveImage(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_saveImage__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofFile *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< float >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::saveImage",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::saveImage",2,"ofFile const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< float >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",2,SWIGTYPE_p_ofFile); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage((ofFile const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_saveImage__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  ofImage_< float > *arg1 = (ofImage_< float > *) 0 ; ofFile *arg2 = 0 ; SWIG_check_num_args("ofImage_< float >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< float >::saveImage",1,"ofImage_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< float >::saveImage",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_float_t,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",1,SWIGTYPE_p_ofImage_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFloatImage_saveImage",2,SWIGTYPE_p_ofFile); }  (arg1)->saveImage((ofFile const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatImage_saveImage(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_saveImage__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofFloatImage_saveImage__SWIG_5(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatImage_saveImage__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFloatImage_saveImage__SWIG_4(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFloatImage_saveImage__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatImage_saveImage__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatImage_saveImage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< float >::saveImage(std::string,ofImageQualityType)\n"
  "    ofImage_< float >::saveImage(std::string)\n" "    ofImage_< float >::saveImage(ofBuffer &,ofImageQualityType)\n"
  "    ofImage_< float >::saveImage(ofBuffer &)\n" "    ofImage_< float >::saveImage(ofFile const &,ofImageQualityType)\n"
  "    ofImage_< float >::saveImage(ofFile const &)\n"); lua_error(L);return 0; }
static void swig_delete_ofFloatImage(void *obj) {
ofImage_< float > *arg1 = (ofImage_< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofFloatImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofFloatImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofFloatImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofFloatImage_methods[]= {
    { "allocate", _wrap_ofFloatImage_allocate},
    { "isAllocated", _wrap_ofFloatImage_isAllocated},
    { "bAllocated", _wrap_ofFloatImage_bAllocated},
    { "clear", _wrap_ofFloatImage_clear},
    { "load", _wrap_ofFloatImage_load},
    { "loadImage", _wrap_ofFloatImage_loadImage},
    { "draw", _wrap_ofFloatImage_draw},
    { "drawSubsection", _wrap_ofFloatImage_drawSubsection},
    { "update", _wrap_ofFloatImage_update},
    { "setUseTexture", _wrap_ofFloatImage_setUseTexture},
    { "isUsingTexture", _wrap_ofFloatImage_isUsingTexture},
    { "getTexture", _wrap_ofFloatImage_getTexture},
    { "getTextureReference", _wrap_ofFloatImage_getTextureReference},
    { "bind", _wrap_ofFloatImage_bind},
    { "unbind", _wrap_ofFloatImage_unbind},
    { "setCompression", _wrap_ofFloatImage_setCompression},
    { "getPixels", _wrap_ofFloatImage_getPixels},
    { "getPixelsRef", _wrap_ofFloatImage_getPixelsRef},
    { "getColor", _wrap_ofFloatImage_getColor},
    { "getHeight", _wrap_ofFloatImage_getHeight},
    { "getWidth", _wrap_ofFloatImage_getWidth},
    { "setColor", _wrap_ofFloatImage_setColor},
    { "setFromPixels", _wrap_ofFloatImage_setFromPixels},
    { "grabScreen", _wrap_ofFloatImage_grabScreen},
    { "setImageType", _wrap_ofFloatImage_setImageType},
    { "getImageType", _wrap_ofFloatImage_getImageType},
    { "resize", _wrap_ofFloatImage_resize},
    { "crop", _wrap_ofFloatImage_crop},
    { "cropFrom", _wrap_ofFloatImage_cropFrom},
    { "rotate90", _wrap_ofFloatImage_rotate90},
    { "mirror", _wrap_ofFloatImage_mirror},
    { "setAnchorPercent", _wrap_ofFloatImage_setAnchorPercent},
    { "setAnchorPoint", _wrap_ofFloatImage_setAnchorPoint},
    { "resetAnchor", _wrap_ofFloatImage_resetAnchor},
    { "save", _wrap_ofFloatImage_save},
    { "saveImage", _wrap_ofFloatImage_saveImage},
    {0,0}
};
static swig_lua_method swig_ofFloatImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofFloatImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofFloatImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofFloatImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofFloatImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofFloatImage_Sf_SwigStatic = {
    "ofFloatImage",
    swig_ofFloatImage_Sf_SwigStatic_methods,
    swig_ofFloatImage_Sf_SwigStatic_attributes,
    swig_ofFloatImage_Sf_SwigStatic_constants,
    swig_ofFloatImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofFloatImage_bases[] = {0};
static const char *swig_ofFloatImage_base_names[] = {0};
static swig_lua_class _wrap_class_ofFloatImage = { "ofFloatImage", "ofFloatImage", &SWIGTYPE_p_ofImage_T_float_t,_proxy__wrap_new_ofFloatImage, swig_delete_ofFloatImage, swig_ofFloatImage_methods, swig_ofFloatImage_attributes, &swig_ofFloatImage_Sf_SwigStatic, swig_ofFloatImage_meta, swig_ofFloatImage_bases, swig_ofFloatImage_base_names };

static int _wrap_new_ofShortImage__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofImage_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::ofImage_",0,0)
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortImage__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned short > *arg1 = 0 ;
  ofImage_< unsigned short > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned short >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::ofImage_",1,"ofPixels_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("new_ofShortImage",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >((ofPixels_< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortImage__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = 0 ;
  ofImage_< unsigned short > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned short >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::ofImage_",1,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("new_ofShortImage",1,SWIGTYPE_p_ofFile); } 
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >((ofFile const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortImage__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  ofImage_< unsigned short > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned short >::ofImage_",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::ofImage_",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortImage__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofImage_< unsigned short > *arg1 = 0 ;
  ofImage_< unsigned short > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned short >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::ofImage_",1,"ofImage_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("new_ofShortImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofImage_< unsigned short > *)new ofImage_< unsigned short >((ofImage_< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofShortImage__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofShortImage__SWIG_1(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofShortImage__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofShortImage__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_new_ofShortImage__SWIG_3(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofShortImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned short >::ofImage_()\n"
  "    ofImage_< unsigned short >::ofImage_(ofPixels_< unsigned short > const &)\n"
  "    ofImage_< unsigned short >::ofImage_(ofFile const &)\n" "    ofImage_< unsigned short >::ofImage_(std::string const &)\n"
  "    ofImage_< unsigned short >::ofImage_(ofImage_< unsigned short > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_allocate(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ; int arg3 ; ofImageType arg4 ;
  SWIG_check_num_args("ofImage_< unsigned short >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::allocate",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::allocate",4,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_allocate",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofImageType)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_isAllocated(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::isAllocated",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_isAllocated",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (bool)((ofImage_< unsigned short > const *)arg1)->isAllocated(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_bAllocated(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::bAllocated",1,"ofImage_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_bAllocated",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  result = (bool)(arg1)->bAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_clear(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::clear",1,"ofImage_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_clear",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_load__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::load",1,"ofImage_< unsigned short > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_load",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->load(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_load__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofBuffer *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::load",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::load",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_load",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofShortImage_load",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->load((ofBuffer const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_load__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::load",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::load",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_load",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofShortImage_load",2,SWIGTYPE_p_ofFile); }  result = (bool)(arg1)->load((ofFile const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_load(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_load__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_load__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofShortImage_load__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_load'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned short >::load(std::string)\n" "    ofImage_< unsigned short >::load(ofBuffer const &)\n"
  "    ofImage_< unsigned short >::load(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_loadImage__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::loadImage",1,"ofImage_< unsigned short > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::loadImage",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->loadImage(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_loadImage__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofBuffer *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::loadImage",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::loadImage",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofShortImage_loadImage",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->loadImage((ofBuffer const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_loadImage__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::loadImage",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::loadImage",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofShortImage_loadImage",2,SWIGTYPE_p_ofFile); }  result = (bool)(arg1)->loadImage((ofFile const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_loadImage(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_loadImage__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_loadImage__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofShortImage_loadImage__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_loadImage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::loadImage(std::string)\n"
  "    ofImage_< unsigned short >::loadImage(ofBuffer const &)\n"
  "    ofImage_< unsigned short >::loadImage(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofPoint *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofShortImage_draw",2,SWIGTYPE_p_ofVec3f); } 
  ((ofImage_< unsigned short > const *)arg1)->draw((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_draw__SWIG_0_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofRectangle *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofShortImage_draw",2,SWIGTYPE_p_ofRectangle); } 
  ((ofImage_< unsigned short > const *)arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_draw__SWIG_0_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofPoint *arg2 = 0 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("draw",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofShortImage_draw",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ((ofImage_< unsigned short > const *)arg1)->draw((ofPoint const &)*arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::draw",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofImage_< unsigned short > const *)arg1)->draw(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofImage_< unsigned short >::draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::draw",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ((ofImage_< unsigned short > const *)arg1)->draw(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_draw__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofImage_< unsigned short >::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::draw",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofImage_< unsigned short > const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_draw__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; SWIG_check_num_args("ofImage_< unsigned short >::draw",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::draw",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::draw",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned short >::draw",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_draw",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ((ofImage_< unsigned short > const *)arg1)->draw(arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_draw(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_draw__SWIG_0_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_draw__SWIG_0_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortImage_draw__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofShortImage_draw__SWIG_0_2(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShortImage_draw__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofShortImage_draw__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofShortImage_draw__SWIG_4(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw(ofPoint const &) const\n" "    draw(ofRectangle const &) const\n" "    draw(ofPoint const &,float,float) const\n"
  "    ofImage_< unsigned short >::draw(float,float) const\n" "    ofImage_< unsigned short >::draw(float,float,float) const\n"
  "    ofImage_< unsigned short >::draw(float,float,float,float) const\n"
  "    ofImage_< unsigned short >::draw(float,float,float,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_drawSubsection__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; SWIG_check_num_args("ofImage_< unsigned short >::drawSubsection",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  ((ofImage_< unsigned short > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_drawSubsection__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofImage_< unsigned short >::drawSubsection",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  ((ofImage_< unsigned short > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_drawSubsection__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofImage_< unsigned short >::drawSubsection",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  ((ofImage_< unsigned short > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_drawSubsection__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofImage_< unsigned short >::drawSubsection",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofImage_< unsigned short >::drawSubsection",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  ((ofImage_< unsigned short > const *)arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_drawSubsection(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ;
  argc = lua_gettop(L); if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofShortImage_drawSubsection__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofShortImage_drawSubsection__SWIG_1(L);}  }  }  }  }
           }  }  }  }  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_ofShortImage_drawSubsection__SWIG_2(L);}  }  }  }  }  }  }  }  }  }  if (argc == 10) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofShortImage_drawSubsection__SWIG_3(L);}  }  }  }
                 }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_drawSubsection'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned short >::drawSubsection(float,float,float,float,float,float) const\n"
  "    ofImage_< unsigned short >::drawSubsection(float,float,float,float,float,float,float) const\n"
  "    ofImage_< unsigned short >::drawSubsection(float,float,float,float,float,float,float,float) const\n"
  "    ofImage_< unsigned short >::drawSubsection(float,float,float,float,float,float,float,float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_ofShortImage_update(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::update",1,"ofImage_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_update",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  (arg1)->update(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_setUseTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofImage_< unsigned short >::setUseTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setUseTexture",1,"ofImage_< unsigned short > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setUseTexture",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseTexture(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_isUsingTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned short >::isUsingTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::isUsingTexture",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_isUsingTexture",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (bool)((ofImage_< unsigned short > const *)arg1)->isUsingTexture(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getTexture",1,"ofImage_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getTexture",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofTexture *) &(arg1)->getTexture(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getTexture",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getTexture",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofTexture *) &((ofImage_< unsigned short > const *)arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_getTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_getTexture__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_getTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_getTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::getTexture()\n"
  "    ofImage_< unsigned short >::getTexture() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_getTextureReference__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getTextureReference",1,"ofImage_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getTextureReference",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofTexture *) &(arg1)->getTextureReference(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getTextureReference__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getTextureReference",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getTextureReference",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofTexture *) &((ofImage_< unsigned short > const *)arg1)->getTextureReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_getTextureReference(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_getTextureReference__SWIG_0(L);}  } 
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_getTextureReference__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_getTextureReference'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::getTextureReference()\n"
  "    ofImage_< unsigned short >::getTextureReference() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_bind__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned short >::bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::bind",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::bind",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_bind",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  ((ofImage_< unsigned short > const *)arg1)->bind(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_bind__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::bind",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_bind",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  ((ofImage_< unsigned short > const *)arg1)->bind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_bind(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_bind__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortImage_bind__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_bind'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned short >::bind(int) const\n" "    ofImage_< unsigned short >::bind() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_unbind__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned short >::unbind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::unbind",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::unbind",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_unbind",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  ((ofImage_< unsigned short > const *)arg1)->unbind(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_unbind__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::unbind",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_unbind",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  ((ofImage_< unsigned short > const *)arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_unbind(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_unbind__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortImage_unbind__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_unbind'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::unbind(int) const\n"
  "    ofImage_< unsigned short >::unbind() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_setCompression(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofTexCompression arg2 ;
  SWIG_check_num_args("ofImage_< unsigned short >::setCompression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setCompression",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setCompression",2,"ofTexCompression");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setCompression",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  arg2 = (ofTexCompression)(int)lua_tonumber(L, 2); (arg1)->setCompression(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofPixels_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getPixels",1,"ofImage_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getPixels",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short > *) &(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofPixels_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getPixels",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getPixels",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short > *) &((ofImage_< unsigned short > const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_getPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::getPixels()\n"
  "    ofImage_< unsigned short >::getPixels() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_getPixelsRef__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofPixels_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getPixelsRef",1,"ofImage_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getPixelsRef",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short > *) &(arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getPixelsRef__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofPixels_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getPixelsRef",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getPixelsRef",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short > *) &((ofImage_< unsigned short > const *)arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getPixelsRef(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_getPixelsRef__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_getPixelsRef__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_getPixelsRef'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::getPixelsRef()\n"
  "    ofImage_< unsigned short >::getPixelsRef() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_getColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ; int arg3 ; ofColor_< unsigned short > result;
  SWIG_check_num_args("ofImage_< unsigned short >::getColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getColor",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::getColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::getColor",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getColor",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofImage_< unsigned short > const *)arg1)->getColor(arg2,arg3); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ; ofColor_< unsigned short > result;
  SWIG_check_num_args("ofImage_< unsigned short >::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getColor",1,"ofImage_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::getColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getColor",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofImage_< unsigned short > const *)arg1)->getColor(arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getColor(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortImage_getColor__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortImage_getColor__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_getColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::getColor(int,int) const\n"
  "    ofImage_< unsigned short >::getColor(int) const\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_getHeight(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float result;
  SWIG_check_num_args("ofImage_< unsigned short >::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getHeight",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getHeight",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (float)((ofImage_< unsigned short > const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_getWidth(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float result;
  SWIG_check_num_args("ofImage_< unsigned short >::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getWidth",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getWidth",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (float)((ofImage_< unsigned short > const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ; int arg3 ;
  ofColor_< unsigned short > *arg4 = 0 ; SWIG_check_num_args("ofImage_< unsigned short >::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",4,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setColor",4,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  (arg1)->setColor(arg2,arg3,(ofColor_< unsigned short > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ; ofColor_< unsigned short > *arg3 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",3,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setColor",3,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  (arg1)->setColor(arg2,(ofColor_< unsigned short > const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setColor",2,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setColor",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  (arg1)->setColor((ofColor_< unsigned short > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_setColor__SWIG_2(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_setColor__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_setColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::setColor(int,int,ofColor_< unsigned short > const &)\n"
  "    ofImage_< unsigned short >::setColor(int,ofColor_< unsigned short > const &)\n"
  "    ofImage_< unsigned short >::setColor(ofColor_< unsigned short > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ; int arg3 ;
  int arg4 ; ofImageType arg5 ; bool arg6 ; SWIG_check_num_args("ofImage_< unsigned short >::setFromPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",1,"ofImage_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",5,"ofImageType");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortImage_setFromPixels",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ; int arg3 ;
  int arg4 ; ofImageType arg5 ; SWIG_check_num_args("ofImage_< unsigned short >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",1,"ofImage_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",5,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortImage_setFromPixels",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_setFromPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::setFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setFromPixels",2,"ofPixels_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setFromPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  (arg1)->setFromPixels((ofPixels_< unsigned short > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_setFromPixels(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_setFromPixels__SWIG_2(L);}  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofShortImage_setFromPixels__SWIG_1(L);}  }  }  }  }
     }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_ofShortImage_setFromPixels__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned short >::setFromPixels(unsigned short const *,int,int,ofImageType,bool)\n"
  "    ofImage_< unsigned short >::setFromPixels(unsigned short const *,int,int,ofImageType)\n"
  "    ofImage_< unsigned short >::setFromPixels(ofPixels_< unsigned short > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_grabScreen(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofImage_< unsigned short >::grabScreen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::grabScreen",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::grabScreen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::grabScreen",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::grabScreen",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::grabScreen",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_grabScreen",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->grabScreen(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_setImageType(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofImageType arg2 ;
  SWIG_check_num_args("ofImage_< unsigned short >::setImageType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setImageType",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setImageType",2,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setImageType",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  arg2 = (ofImageType)(int)lua_tonumber(L, 2); (arg1)->setImageType(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_getImageType(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofImageType result;
  SWIG_check_num_args("ofImage_< unsigned short >::getImageType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::getImageType",1,"ofImage_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_getImageType",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  result = (ofImageType)((ofImage_< unsigned short > const *)arg1)->getImageType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_resize(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::resize",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_resize",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->resize(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_crop(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofImage_< unsigned short >::crop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::crop",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::crop",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::crop",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::crop",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::crop",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_crop",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->crop(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_cropFrom(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofImage_< unsigned short > *arg2 = 0 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofImage_< unsigned short >::cropFrom",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::cropFrom",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::cropFrom",2,"ofImage_< unsigned short > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::cropFrom",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned short >::cropFrom",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned short >::cropFrom",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned short >::cropFrom",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_cropFrom",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_cropFrom",2,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->cropFrom(*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_rotate90(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned short >::rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::rotate90",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::rotate90",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_rotate90",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_mirror(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::mirror",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::mirror",1,"ofImage_< unsigned short > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_mirror",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_setAnchorPercent(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setAnchorPercent",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setAnchorPercent",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_setAnchorPoint(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::setAnchorPoint",1,"ofImage_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_setAnchorPoint",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_resetAnchor(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::resetAnchor",1,"ofImage_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_resetAnchor",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); }  (arg1)->resetAnchor();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_save__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; std::string arg2 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::save",1,"ofImage_< unsigned short > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::save",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->save(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_save__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofImage_< unsigned short >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::save",1,"ofImage_< unsigned short > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::save",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->save(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortImage_save__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofBuffer *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::save",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::save",2,"ofBuffer &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofShortImage_save",2,SWIGTYPE_p_ofBuffer); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->save(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_save__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofBuffer *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::save",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::save",2,"ofBuffer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofShortImage_save",2,SWIGTYPE_p_ofBuffer); }  (arg1)->save(*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_save__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofFile *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::save",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::save",2,"ofFile const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::save",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofShortImage_save",2,SWIGTYPE_p_ofFile); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->save((ofFile const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_save__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofFile *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::save",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::save",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_save",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofShortImage_save",2,SWIGTYPE_p_ofFile); }  (arg1)->save((ofFile const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_save(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_save__SWIG_3(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_save__SWIG_5(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofShortImage_save__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofShortImage_save__SWIG_4(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofShortImage_save__SWIG_2(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortImage_save__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_save'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned short >::save(std::string,ofImageQualityType)\n" "    ofImage_< unsigned short >::save(std::string)\n"
  "    ofImage_< unsigned short >::save(ofBuffer &,ofImageQualityType)\n" "    ofImage_< unsigned short >::save(ofBuffer &)\n"
  "    ofImage_< unsigned short >::save(ofFile const &,ofImageQualityType)\n"
  "    ofImage_< unsigned short >::save(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortImage_saveImage__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; std::string arg2 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",1,"ofImage_< unsigned short > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_saveImage__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofImage_< unsigned short >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",1,"ofImage_< unsigned short > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->saveImage(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_saveImage__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofBuffer *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",2,"ofBuffer &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",2,SWIGTYPE_p_ofBuffer); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_saveImage__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofBuffer *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",2,"ofBuffer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",2,SWIGTYPE_p_ofBuffer); }  (arg1)->saveImage(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_saveImage__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofFile *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned short >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",2,"ofFile const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",2,SWIGTYPE_p_ofFile); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage((ofFile const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_saveImage__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) 0 ; ofFile *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned short >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",1,"ofImage_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned short >::saveImage",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofShortImage_saveImage",2,SWIGTYPE_p_ofFile); }  (arg1)->saveImage((ofFile const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortImage_saveImage(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_saveImage__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofShortImage_saveImage__SWIG_5(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofShortImage_saveImage__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofShortImage_saveImage__SWIG_4(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofShortImage_saveImage__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortImage_saveImage__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortImage_saveImage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned short >::saveImage(std::string,ofImageQualityType)\n"
  "    ofImage_< unsigned short >::saveImage(std::string)\n"
  "    ofImage_< unsigned short >::saveImage(ofBuffer &,ofImageQualityType)\n"
  "    ofImage_< unsigned short >::saveImage(ofBuffer &)\n"
  "    ofImage_< unsigned short >::saveImage(ofFile const &,ofImageQualityType)\n"
  "    ofImage_< unsigned short >::saveImage(ofFile const &)\n"); lua_error(L);return 0; }
static void swig_delete_ofShortImage(void *obj) {
ofImage_< unsigned short > *arg1 = (ofImage_< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofShortImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofShortImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofShortImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofShortImage_methods[]= {
    { "allocate", _wrap_ofShortImage_allocate},
    { "isAllocated", _wrap_ofShortImage_isAllocated},
    { "bAllocated", _wrap_ofShortImage_bAllocated},
    { "clear", _wrap_ofShortImage_clear},
    { "load", _wrap_ofShortImage_load},
    { "loadImage", _wrap_ofShortImage_loadImage},
    { "draw", _wrap_ofShortImage_draw},
    { "drawSubsection", _wrap_ofShortImage_drawSubsection},
    { "update", _wrap_ofShortImage_update},
    { "setUseTexture", _wrap_ofShortImage_setUseTexture},
    { "isUsingTexture", _wrap_ofShortImage_isUsingTexture},
    { "getTexture", _wrap_ofShortImage_getTexture},
    { "getTextureReference", _wrap_ofShortImage_getTextureReference},
    { "bind", _wrap_ofShortImage_bind},
    { "unbind", _wrap_ofShortImage_unbind},
    { "setCompression", _wrap_ofShortImage_setCompression},
    { "getPixels", _wrap_ofShortImage_getPixels},
    { "getPixelsRef", _wrap_ofShortImage_getPixelsRef},
    { "getColor", _wrap_ofShortImage_getColor},
    { "getHeight", _wrap_ofShortImage_getHeight},
    { "getWidth", _wrap_ofShortImage_getWidth},
    { "setColor", _wrap_ofShortImage_setColor},
    { "setFromPixels", _wrap_ofShortImage_setFromPixels},
    { "grabScreen", _wrap_ofShortImage_grabScreen},
    { "setImageType", _wrap_ofShortImage_setImageType},
    { "getImageType", _wrap_ofShortImage_getImageType},
    { "resize", _wrap_ofShortImage_resize},
    { "crop", _wrap_ofShortImage_crop},
    { "cropFrom", _wrap_ofShortImage_cropFrom},
    { "rotate90", _wrap_ofShortImage_rotate90},
    { "mirror", _wrap_ofShortImage_mirror},
    { "setAnchorPercent", _wrap_ofShortImage_setAnchorPercent},
    { "setAnchorPoint", _wrap_ofShortImage_setAnchorPoint},
    { "resetAnchor", _wrap_ofShortImage_resetAnchor},
    { "save", _wrap_ofShortImage_save},
    { "saveImage", _wrap_ofShortImage_saveImage},
    {0,0}
};
static swig_lua_method swig_ofShortImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofShortImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofShortImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofShortImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofShortImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofShortImage_Sf_SwigStatic = {
    "ofShortImage",
    swig_ofShortImage_Sf_SwigStatic_methods,
    swig_ofShortImage_Sf_SwigStatic_attributes,
    swig_ofShortImage_Sf_SwigStatic_constants,
    swig_ofShortImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofShortImage_bases[] = {0};
static const char *swig_ofShortImage_base_names[] = {0};
static swig_lua_class _wrap_class_ofShortImage = { "ofShortImage", "ofShortImage", &SWIGTYPE_p_ofImage_T_unsigned_short_t,_proxy__wrap_new_ofShortImage, swig_delete_ofShortImage, swig_ofShortImage_methods, swig_ofShortImage_attributes, &swig_ofShortImage_Sf_SwigStatic, swig_ofShortImage_meta, swig_ofShortImage_bases, swig_ofShortImage_base_names };

static int _wrap_ofSoundStreamSetup__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  ofBaseApp *arg3 = (ofBaseApp *) 0 ; SWIG_check_num_args("ofSoundStreamSetup",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSoundStreamSetup",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStreamSetup",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofSoundStreamSetup",3,"ofBaseApp *"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofBaseApp,0))){
    SWIG_fail_ptr("ofSoundStreamSetup",3,SWIGTYPE_p_ofBaseApp); }  ofSoundStreamSetup(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStreamSetup__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSoundStreamSetup",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSoundStreamSetup",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStreamSetup",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSoundStreamSetup(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSoundStreamSetup__SWIG_2(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ; int arg4 ;
  int arg5 ; SWIG_check_num_args("ofSoundStreamSetup",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSoundStreamSetup",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStreamSetup",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSoundStreamSetup",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStreamSetup",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSoundStreamSetup",5,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); ofSoundStreamSetup(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStreamSetup__SWIG_3(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  ofBaseApp *arg3 = (ofBaseApp *) 0 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofSoundStreamSetup",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSoundStreamSetup",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStreamSetup",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofSoundStreamSetup",3,"ofBaseApp *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStreamSetup",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSoundStreamSetup",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofSoundStreamSetup",6,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofBaseApp,0))){
    SWIG_fail_ptr("ofSoundStreamSetup",3,SWIGTYPE_p_ofBaseApp); }  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6); ofSoundStreamSetup(arg1,arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStreamSetup(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofSoundStreamSetup__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofBaseApp, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofSoundStreamSetup__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofSoundStreamSetup__SWIG_2(L);}  }  }  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofBaseApp, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); } 
            if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofSoundStreamSetup__SWIG_3(L);}  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSoundStreamSetup'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSoundStreamSetup(int,int,ofBaseApp *)\n" "    ofSoundStreamSetup(int,int)\n"
  "    ofSoundStreamSetup(int,int,int,int,int)\n" "    ofSoundStreamSetup(int,int,ofBaseApp *,int,int,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofSoundStreamStop(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSoundStreamStop",0,0)
  ofSoundStreamStop(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStreamStart(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSoundStreamStart",0,0)
  ofSoundStreamStart(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStreamClose(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSoundStreamClose",0,0)
  ofSoundStreamClose(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStreamListDevices(lua_State* L) { int SWIG_arg = 0;
  SwigValueWrapper< std::vector< ofSoundDevice > > result; SWIG_check_num_args("ofSoundStreamListDevices",0,0)
  result = ofSoundStreamListDevices(); {
    std::vector< ofSoundDevice > * resultptr = new std::vector< ofSoundDevice >((const std::vector< ofSoundDevice > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofSoundDevice_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofSoundStream(lua_State* L) { int SWIG_arg = 0; ofSoundStream *result = 0 ;
  SWIG_check_num_args("ofSoundStream::ofSoundStream",0,0) result = (ofSoundStream *)new ofSoundStream();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSoundStream,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSoundStream_setSoundStream(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  shared_ptr< ofBaseSoundStream > arg2 ; shared_ptr< ofBaseSoundStream > *argp2 ;
  SWIG_check_num_args("ofSoundStream::setSoundStream",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setSoundStream",1,"ofSoundStream *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSoundStream::setSoundStream",2,"shared_ptr< ofBaseSoundStream >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setSoundStream",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_shared_ptrT_ofBaseSoundStream_t,0))){
    SWIG_fail_ptr("ofSoundStream_setSoundStream",2,SWIGTYPE_p_shared_ptrT_ofBaseSoundStream_t); }  arg2 = *argp2;
  (arg1)->setSoundStream(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getSoundStream(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  shared_ptr< ofBaseSoundStream > result; SWIG_check_num_args("ofSoundStream::getSoundStream",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getSoundStream",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getSoundStream",1,SWIGTYPE_p_ofSoundStream); }  result = (arg1)->getSoundStream(); {
    shared_ptr< ofBaseSoundStream > * resultptr = new shared_ptr< ofBaseSoundStream >((const shared_ptr< ofBaseSoundStream > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_ofBaseSoundStream_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_printDeviceList(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SWIG_check_num_args("ofSoundStream::printDeviceList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::printDeviceList",1,"ofSoundStream const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_printDeviceList",1,SWIGTYPE_p_ofSoundStream); } 
  ((ofSoundStream const *)arg1)->printDeviceList(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getDeviceList(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SwigValueWrapper< std::vector< ofSoundDevice > > result; SWIG_check_num_args("ofSoundStream::getDeviceList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getDeviceList",1,"ofSoundStream const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getDeviceList",1,SWIGTYPE_p_ofSoundStream); } 
  result = ((ofSoundStream const *)arg1)->getDeviceList(); {
    std::vector< ofSoundDevice > * resultptr = new std::vector< ofSoundDevice >((const std::vector< ofSoundDevice > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofSoundDevice_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getMatchingDevices__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofSoundStream *arg1 = (ofSoundStream *) 0 ; std::string *arg2 = 0 ; unsigned int arg3 ; unsigned int arg4 ;
  std::string temp2 ; SwigValueWrapper< std::vector< ofSoundDevice > > result;
  SWIG_check_num_args("ofSoundStream::getMatchingDevices",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",1,"ofSoundStream const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",4,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getMatchingDevices",1,SWIGTYPE_p_ofSoundStream); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (unsigned int)lua_tonumber(L, 4);
  result = ((ofSoundStream const *)arg1)->getMatchingDevices((std::string const &)*arg2,arg3,arg4); {
    std::vector< ofSoundDevice > * resultptr = new std::vector< ofSoundDevice >((const std::vector< ofSoundDevice > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofSoundDevice_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getMatchingDevices__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofSoundStream *arg1 = (ofSoundStream *) 0 ; std::string *arg2 = 0 ; unsigned int arg3 ; std::string temp2 ;
  SwigValueWrapper< std::vector< ofSoundDevice > > result; SWIG_check_num_args("ofSoundStream::getMatchingDevices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",1,"ofSoundStream const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getMatchingDevices",1,SWIGTYPE_p_ofSoundStream); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  result = ((ofSoundStream const *)arg1)->getMatchingDevices((std::string const &)*arg2,arg3); {
    std::vector< ofSoundDevice > * resultptr = new std::vector< ofSoundDevice >((const std::vector< ofSoundDevice > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofSoundDevice_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getMatchingDevices__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofSoundStream *arg1 = (ofSoundStream *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  SwigValueWrapper< std::vector< ofSoundDevice > > result; SWIG_check_num_args("ofSoundStream::getMatchingDevices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",1,"ofSoundStream const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundStream::getMatchingDevices",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getMatchingDevices",1,SWIGTYPE_p_ofSoundStream); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((ofSoundStream const *)arg1)->getMatchingDevices((std::string const &)*arg2); {
    std::vector< ofSoundDevice > * resultptr = new std::vector< ofSoundDevice >((const std::vector< ofSoundDevice > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofSoundDevice_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getMatchingDevices(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofSoundStream_getMatchingDevices__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofSoundStream_getMatchingDevices__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofSoundStream_getMatchingDevices__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSoundStream_getMatchingDevices'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofSoundStream::getMatchingDevices(std::string const &,unsigned int,unsigned int) const\n"
  "    ofSoundStream::getMatchingDevices(std::string const &,unsigned int) const\n"
  "    ofSoundStream::getMatchingDevices(std::string const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofSoundStream_setDeviceID(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int arg2 ; SWIG_check_num_args("ofSoundStream::setDeviceID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setDeviceID",1,"ofSoundStream *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStream::setDeviceID",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setDeviceID",1,SWIGTYPE_p_ofSoundStream); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDeviceID(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_setDevice(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofSoundDevice *arg2 = 0 ; SWIG_check_num_args("ofSoundStream::setDevice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setDevice",1,"ofSoundStream *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSoundStream::setDevice",2,"ofSoundDevice const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setDevice",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofSoundDevice,0))){
    SWIG_fail_ptr("ofSoundStream_setDevice",2,SWIGTYPE_p_ofSoundDevice); }  (arg1)->setDevice((ofSoundDevice const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofBaseApp *arg2 = (ofBaseApp *) 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; int arg7 ; bool result;
  SWIG_check_num_args("ofSoundStream::setup",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setup",1,"ofSoundStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofSoundStream::setup",2,"ofBaseApp *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSoundStream::setup",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStream::setup",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSoundStream::setup",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofSoundStream::setup",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofSoundStream::setup",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setup",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseApp,0))){
    SWIG_fail_ptr("ofSoundStream_setup",2,SWIGTYPE_p_ofBaseApp); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7); result = (bool)(arg1)->setup(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int arg2 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; bool result; SWIG_check_num_args("ofSoundStream::setup",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setup",1,"ofSoundStream *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStream::setup",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSoundStream::setup",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStream::setup",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSoundStream::setup",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofSoundStream::setup",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setup",1,SWIGTYPE_p_ofSoundStream); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); result = (bool)(arg1)->setup(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_setup(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofSoundStream_setup__SWIG_1(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseApp, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_ofSoundStream_setup__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSoundStream_setup'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSoundStream::setup(ofBaseApp *,int,int,int,int,int)\n"
  "    ofSoundStream::setup(int,int,int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofSoundStream_setInput__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofBaseSoundInput *arg2 = (ofBaseSoundInput *) 0 ; SWIG_check_num_args("ofSoundStream::setInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setInput",1,"ofSoundStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofSoundStream::setInput",2,"ofBaseSoundInput *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setInput",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseSoundInput,0))){
    SWIG_fail_ptr("ofSoundStream_setInput",2,SWIGTYPE_p_ofBaseSoundInput); }  (arg1)->setInput(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_setInput__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofBaseSoundInput *arg2 = 0 ; SWIG_check_num_args("ofSoundStream::setInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setInput",1,"ofSoundStream *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSoundStream::setInput",2,"ofBaseSoundInput &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setInput",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseSoundInput,0))){
    SWIG_fail_ptr("ofSoundStream_setInput",2,SWIGTYPE_p_ofBaseSoundInput); }  (arg1)->setInput(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_setInput(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseSoundInput, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSoundStream_setInput__SWIG_0(L);}  }  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseSoundInput, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSoundStream_setInput__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSoundStream_setInput'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSoundStream::setInput(ofBaseSoundInput *)\n"
  "    ofSoundStream::setInput(ofBaseSoundInput &)\n"); lua_error(L);return 0; }
static int _wrap_ofSoundStream_setOutput__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofBaseSoundOutput *arg2 = (ofBaseSoundOutput *) 0 ; SWIG_check_num_args("ofSoundStream::setOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setOutput",1,"ofSoundStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofSoundStream::setOutput",2,"ofBaseSoundOutput *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setOutput",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseSoundOutput,0))){
    SWIG_fail_ptr("ofSoundStream_setOutput",2,SWIGTYPE_p_ofBaseSoundOutput); }  (arg1)->setOutput(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_setOutput__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofBaseSoundOutput *arg2 = 0 ; SWIG_check_num_args("ofSoundStream::setOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setOutput",1,"ofSoundStream *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSoundStream::setOutput",2,"ofBaseSoundOutput &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_setOutput",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseSoundOutput,0))){
    SWIG_fail_ptr("ofSoundStream_setOutput",2,SWIGTYPE_p_ofBaseSoundOutput); }  (arg1)->setOutput(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_setOutput(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseSoundOutput, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSoundStream_setOutput__SWIG_0(L);}  }  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseSoundOutput, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSoundStream_setOutput__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSoundStream_setOutput'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSoundStream::setOutput(ofBaseSoundOutput *)\n"
  "    ofSoundStream::setOutput(ofBaseSoundOutput &)\n"); lua_error(L);return 0; }
static int _wrap_ofSoundStream_start(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SWIG_check_num_args("ofSoundStream::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::start",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_start",1,SWIGTYPE_p_ofSoundStream); }  (arg1)->start(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_stop(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SWIG_check_num_args("ofSoundStream::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::stop",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_stop",1,SWIGTYPE_p_ofSoundStream); }  (arg1)->stop(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_close(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SWIG_check_num_args("ofSoundStream::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::close",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_close",1,SWIGTYPE_p_ofSoundStream); }  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getTickCount(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  unsigned long long result; SWIG_check_num_args("ofSoundStream::getTickCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getTickCount",1,"ofSoundStream const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getTickCount",1,SWIGTYPE_p_ofSoundStream); } 
  result = (unsigned long long)((ofSoundStream const *)arg1)->getTickCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getNumInputChannels(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int result; SWIG_check_num_args("ofSoundStream::getNumInputChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getNumInputChannels",1,"ofSoundStream const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getNumInputChannels",1,SWIGTYPE_p_ofSoundStream); } 
  result = (int)((ofSoundStream const *)arg1)->getNumInputChannels(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getNumOutputChannels(lua_State* L) { int SWIG_arg = 0;
  ofSoundStream *arg1 = (ofSoundStream *) 0 ; int result; SWIG_check_num_args("ofSoundStream::getNumOutputChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getNumOutputChannels",1,"ofSoundStream const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getNumOutputChannels",1,SWIGTYPE_p_ofSoundStream); } 
  result = (int)((ofSoundStream const *)arg1)->getNumOutputChannels(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getSampleRate(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int result; SWIG_check_num_args("ofSoundStream::getSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getSampleRate",1,"ofSoundStream const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getSampleRate",1,SWIGTYPE_p_ofSoundStream); } 
  result = (int)((ofSoundStream const *)arg1)->getSampleRate(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_getBufferSize(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int result; SWIG_check_num_args("ofSoundStream::getBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getBufferSize",1,"ofSoundStream const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_getBufferSize",1,SWIGTYPE_p_ofSoundStream); } 
  result = (int)((ofSoundStream const *)arg1)->getBufferSize(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundStream_listDevices(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SwigValueWrapper< std::vector< ofSoundDevice > > result; SWIG_check_num_args("ofSoundStream::listDevices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::listDevices",1,"ofSoundStream const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("ofSoundStream_listDevices",1,SWIGTYPE_p_ofSoundStream); } 
  result = ((ofSoundStream const *)arg1)->listDevices(); {
    std::vector< ofSoundDevice > * resultptr = new std::vector< ofSoundDevice >((const std::vector< ofSoundDevice > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofSoundDevice_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofSoundStream(void *obj) {
ofSoundStream *arg1 = (ofSoundStream *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofSoundStream(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofSoundStream);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofSoundStream_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofSoundStream_methods[]= {
    { "setSoundStream", _wrap_ofSoundStream_setSoundStream},
    { "getSoundStream", _wrap_ofSoundStream_getSoundStream},
    { "printDeviceList", _wrap_ofSoundStream_printDeviceList},
    { "getDeviceList", _wrap_ofSoundStream_getDeviceList},
    { "getMatchingDevices", _wrap_ofSoundStream_getMatchingDevices},
    { "setDeviceID", _wrap_ofSoundStream_setDeviceID},
    { "setDevice", _wrap_ofSoundStream_setDevice},
    { "setup", _wrap_ofSoundStream_setup},
    { "setInput", _wrap_ofSoundStream_setInput},
    { "setOutput", _wrap_ofSoundStream_setOutput},
    { "start", _wrap_ofSoundStream_start},
    { "stop", _wrap_ofSoundStream_stop},
    { "close", _wrap_ofSoundStream_close},
    { "getTickCount", _wrap_ofSoundStream_getTickCount},
    { "getNumInputChannels", _wrap_ofSoundStream_getNumInputChannels},
    { "getNumOutputChannels", _wrap_ofSoundStream_getNumOutputChannels},
    { "getSampleRate", _wrap_ofSoundStream_getSampleRate},
    { "getBufferSize", _wrap_ofSoundStream_getBufferSize},
    { "listDevices", _wrap_ofSoundStream_listDevices},
    {0,0}
};
static swig_lua_method swig_ofSoundStream_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofSoundStream_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofSoundStream_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofSoundStream_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofSoundStream_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofSoundStream_Sf_SwigStatic = {
    "ofSoundStream",
    swig_ofSoundStream_Sf_SwigStatic_methods,
    swig_ofSoundStream_Sf_SwigStatic_attributes,
    swig_ofSoundStream_Sf_SwigStatic_constants,
    swig_ofSoundStream_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofSoundStream_bases[] = {0};
static const char *swig_ofSoundStream_base_names[] = {0};
static swig_lua_class _wrap_class_ofSoundStream = { "ofSoundStream", "ofSoundStream", &SWIGTYPE_p_ofSoundStream,_proxy__wrap_new_ofSoundStream, swig_delete_ofSoundStream, swig_ofSoundStream_methods, swig_ofSoundStream_attributes, &swig_ofSoundStream_Sf_SwigStatic, swig_ofSoundStream_meta, swig_ofSoundStream_bases, swig_ofSoundStream_base_names };

static int _wrap_new_ofSoundPlayer(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *result = 0 ;
  SWIG_check_num_args("ofSoundPlayer::ofSoundPlayer",0,0) result = (ofSoundPlayer *)new ofSoundPlayer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSoundPlayer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSoundPlayer_setPlayer(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SwigValueWrapper< shared_ptr< ofBaseSoundPlayer > > arg2 ; shared_ptr< ofBaseSoundPlayer > *argp2 ;
  SWIG_check_num_args("ofSoundPlayer::setPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPlayer",1,"ofSoundPlayer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSoundPlayer::setPlayer",2,"shared_ptr< ofBaseSoundPlayer >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setPlayer",1,SWIGTYPE_p_ofSoundPlayer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_shared_ptrT_ofBaseSoundPlayer_t,0))){
    SWIG_fail_ptr("ofSoundPlayer_setPlayer",2,SWIGTYPE_p_shared_ptrT_ofBaseSoundPlayer_t); }  arg2 = *argp2;
  (arg1)->setPlayer(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_getPlayer(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SwigValueWrapper< shared_ptr< ofBaseSoundPlayer > > result; SWIG_check_num_args("ofSoundPlayer::getPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getPlayer",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_getPlayer",1,SWIGTYPE_p_ofSoundPlayer); }  result = (arg1)->getPlayer(); {
    shared_ptr< ofBaseSoundPlayer > * resultptr = new shared_ptr< ofBaseSoundPlayer >((const shared_ptr< ofBaseSoundPlayer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_ofBaseSoundPlayer_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_load__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  std::string arg2 ; bool arg3 ; bool result; SWIG_check_num_args("ofSoundPlayer::load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::load",1,"ofSoundPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundPlayer::load",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofSoundPlayer::load",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_load",1,SWIGTYPE_p_ofSoundPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->load(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_load__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofSoundPlayer::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::load",1,"ofSoundPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundPlayer::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_load",1,SWIGTYPE_p_ofSoundPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->load(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_load(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofSoundPlayer_load__SWIG_1(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofSoundPlayer_load__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSoundPlayer_load'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSoundPlayer::load(std::string,bool)\n" "    ofSoundPlayer::load(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofSoundPlayer_loadSound__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  std::string arg2 ; bool arg3 ; bool result; SWIG_check_num_args("ofSoundPlayer::loadSound",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::loadSound",1,"ofSoundPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundPlayer::loadSound",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofSoundPlayer::loadSound",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_loadSound",1,SWIGTYPE_p_ofSoundPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->loadSound(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_loadSound__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofSoundPlayer::loadSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::loadSound",1,"ofSoundPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundPlayer::loadSound",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_loadSound",1,SWIGTYPE_p_ofSoundPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->loadSound(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_loadSound(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofSoundPlayer_loadSound__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofSoundPlayer_loadSound__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSoundPlayer_loadSound'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSoundPlayer::loadSound(std::string,bool)\n"
  "    ofSoundPlayer::loadSound(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofSoundPlayer_unload(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SWIG_check_num_args("ofSoundPlayer::unload",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::unload",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_unload",1,SWIGTYPE_p_ofSoundPlayer); }  (arg1)->unload(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_unloadSound(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SWIG_check_num_args("ofSoundPlayer::unloadSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::unloadSound",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_unloadSound",1,SWIGTYPE_p_ofSoundPlayer); }  (arg1)->unloadSound(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_play(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SWIG_check_num_args("ofSoundPlayer::play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::play",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_play",1,SWIGTYPE_p_ofSoundPlayer); }  (arg1)->play(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_stop(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SWIG_check_num_args("ofSoundPlayer::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::stop",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_stop",1,SWIGTYPE_p_ofSoundPlayer); }  (arg1)->stop(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_setVolume(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ; SWIG_check_num_args("ofSoundPlayer::setVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setVolume",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setVolume",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setVolume",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setVolume(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_setPan(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ; float arg2 ;
  SWIG_check_num_args("ofSoundPlayer::setPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPan",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setPan",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setPan",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setPan(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_setSpeed(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ; SWIG_check_num_args("ofSoundPlayer::setSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setSpeed",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setSpeed",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setSpeed",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpeed(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_setPaused(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofSoundPlayer::setPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPaused",1,"ofSoundPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSoundPlayer::setPaused",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setPaused",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setPaused(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_setLoop(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofSoundPlayer::setLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setLoop",1,"ofSoundPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSoundPlayer::setLoop",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setLoop",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setLoop(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_setMultiPlay(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofSoundPlayer::setMultiPlay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setMultiPlay",1,"ofSoundPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSoundPlayer::setMultiPlay",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setMultiPlay",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setMultiPlay(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_setPosition(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ; SWIG_check_num_args("ofSoundPlayer::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPosition",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setPosition",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setPosition",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setPosition(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_setPositionMS(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  int arg2 ; SWIG_check_num_args("ofSoundPlayer::setPositionMS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPositionMS",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setPositionMS",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_setPositionMS",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPositionMS(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_getPositionMS(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  int result; SWIG_check_num_args("ofSoundPlayer::getPositionMS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getPositionMS",1,"ofSoundPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_getPositionMS",1,SWIGTYPE_p_ofSoundPlayer); } 
  result = (int)((ofSoundPlayer const *)arg1)->getPositionMS(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_getPosition(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float result; SWIG_check_num_args("ofSoundPlayer::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getPosition",1,"ofSoundPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_getPosition",1,SWIGTYPE_p_ofSoundPlayer); } 
  result = (float)((ofSoundPlayer const *)arg1)->getPosition(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_isPlaying(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofSoundPlayer::isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::isPlaying",1,"ofSoundPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_isPlaying",1,SWIGTYPE_p_ofSoundPlayer); } 
  result = (bool)((ofSoundPlayer const *)arg1)->isPlaying(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_getIsPlaying(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofSoundPlayer::getIsPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getIsPlaying",1,"ofSoundPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_getIsPlaying",1,SWIGTYPE_p_ofSoundPlayer); } 
  result = (bool)((ofSoundPlayer const *)arg1)->getIsPlaying(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_getSpeed(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float result; SWIG_check_num_args("ofSoundPlayer::getSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getSpeed",1,"ofSoundPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_getSpeed",1,SWIGTYPE_p_ofSoundPlayer); } 
  result = (float)((ofSoundPlayer const *)arg1)->getSpeed(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_getPan(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float result; SWIG_check_num_args("ofSoundPlayer::getPan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getPan",1,"ofSoundPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_getPan",1,SWIGTYPE_p_ofSoundPlayer); } 
  result = (float)((ofSoundPlayer const *)arg1)->getPan(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_getVolume(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float result; SWIG_check_num_args("ofSoundPlayer::getVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getVolume",1,"ofSoundPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_getVolume",1,SWIGTYPE_p_ofSoundPlayer); } 
  result = (float)((ofSoundPlayer const *)arg1)->getVolume(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSoundPlayer_isLoaded(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofSoundPlayer::isLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::isLoaded",1,"ofSoundPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("ofSoundPlayer_isLoaded",1,SWIGTYPE_p_ofSoundPlayer); } 
  result = (bool)((ofSoundPlayer const *)arg1)->isLoaded(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofSoundPlayer(void *obj) {
ofSoundPlayer *arg1 = (ofSoundPlayer *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofSoundPlayer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofSoundPlayer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofSoundPlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofSoundPlayer_methods[]= {
    { "setPlayer", _wrap_ofSoundPlayer_setPlayer},
    { "getPlayer", _wrap_ofSoundPlayer_getPlayer},
    { "load", _wrap_ofSoundPlayer_load},
    { "loadSound", _wrap_ofSoundPlayer_loadSound},
    { "unload", _wrap_ofSoundPlayer_unload},
    { "unloadSound", _wrap_ofSoundPlayer_unloadSound},
    { "play", _wrap_ofSoundPlayer_play},
    { "stop", _wrap_ofSoundPlayer_stop},
    { "setVolume", _wrap_ofSoundPlayer_setVolume},
    { "setPan", _wrap_ofSoundPlayer_setPan},
    { "setSpeed", _wrap_ofSoundPlayer_setSpeed},
    { "setPaused", _wrap_ofSoundPlayer_setPaused},
    { "setLoop", _wrap_ofSoundPlayer_setLoop},
    { "setMultiPlay", _wrap_ofSoundPlayer_setMultiPlay},
    { "setPosition", _wrap_ofSoundPlayer_setPosition},
    { "setPositionMS", _wrap_ofSoundPlayer_setPositionMS},
    { "getPositionMS", _wrap_ofSoundPlayer_getPositionMS},
    { "getPosition", _wrap_ofSoundPlayer_getPosition},
    { "isPlaying", _wrap_ofSoundPlayer_isPlaying},
    { "getIsPlaying", _wrap_ofSoundPlayer_getIsPlaying},
    { "getSpeed", _wrap_ofSoundPlayer_getSpeed},
    { "getPan", _wrap_ofSoundPlayer_getPan},
    { "getVolume", _wrap_ofSoundPlayer_getVolume},
    { "isLoaded", _wrap_ofSoundPlayer_isLoaded},
    {0,0}
};
static swig_lua_method swig_ofSoundPlayer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofSoundPlayer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofSoundPlayer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofSoundPlayer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofSoundPlayer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofSoundPlayer_Sf_SwigStatic = {
    "ofSoundPlayer",
    swig_ofSoundPlayer_Sf_SwigStatic_methods,
    swig_ofSoundPlayer_Sf_SwigStatic_attributes,
    swig_ofSoundPlayer_Sf_SwigStatic_constants,
    swig_ofSoundPlayer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofSoundPlayer_bases[] = {0};
static const char *swig_ofSoundPlayer_base_names[] = {0};
static swig_lua_class _wrap_class_ofSoundPlayer = { "ofSoundPlayer", "ofSoundPlayer", &SWIGTYPE_p_ofSoundPlayer,_proxy__wrap_new_ofSoundPlayer, swig_delete_ofSoundPlayer, swig_ofSoundPlayer_methods, swig_ofSoundPlayer_attributes, &swig_ofSoundPlayer_Sf_SwigStatic, swig_ofSoundPlayer_meta, swig_ofSoundPlayer_bases, swig_ofSoundPlayer_base_names };

static int _wrap_new_ofColor__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",0,0)
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofColor__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofColor__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofColor__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofColor__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofColor__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *arg1 = 0 ; float arg2 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"ofColor_< unsigned char > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_ofColor",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >((ofColor_< unsigned char > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofColor__SWIG_0(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_new_ofColor__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ofColor__SWIG_5(L);}  }  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_ofColor__SWIG_3(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_ofColor__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofColor__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::ofColor_()\n" "    ofColor_< unsigned char >::ofColor_(float,float,float,float)\n"
  "    ofColor_< unsigned char >::ofColor_(float,float,float)\n" "    ofColor_< unsigned char >::ofColor_(float,float)\n"
  "    ofColor_< unsigned char >::ofColor_(float)\n"
  "    ofColor_< unsigned char >::ofColor_(ofColor_< unsigned char > const &,float)\n"); lua_error(L);return 0; }
static int _wrap_ofColor_fromHsb__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::fromHsb",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3,arg4); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_fromHsb__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::fromHsb",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_fromHsb(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofColor_fromHsb__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofColor_fromHsb__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor_fromHsb'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::fromHsb(float,float,float,float)\n"
  "    ofColor_< unsigned char >::fromHsb(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofColor_fromHex__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; float arg2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::fromHex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::fromHex",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::fromHex",2,"float"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1,arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_fromHex__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofColor_< unsigned char >::fromHex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::fromHex",1,"int"); arg1 = (int)lua_tonumber(L, 1);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_fromHex(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofColor_fromHex__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofColor_fromHex__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor_fromHex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::fromHex(int,float)\n" "    ofColor_< unsigned char >::fromHex(int)\n");
  lua_error(L);return 0; }
static int _wrap_ofColor_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofColor_< unsigned char >::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_set__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofColor_set__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_set__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_set",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->set((ofColor_< unsigned char > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofColor_set__SWIG_4(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofColor_set__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofColor_set__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofColor_set__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofColor_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::set(float,float,float,float)\n" "    ofColor_< unsigned char >::set(float,float,float)\n"
  "    ofColor_< unsigned char >::set(float,float)\n" "    ofColor_< unsigned char >::set(float)\n"
  "    ofColor_< unsigned char >::set(ofColor_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofColor_setHex__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; int arg2 ; float arg3 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setHex",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setHex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofColor_setHex__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setHex",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setHex(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofColor_setHex__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofColor_setHex__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor_setHex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::setHex(int,float)\n" "    ofColor_< unsigned char >::setHex(int)\n"); lua_error(L);return 0; }
static int _wrap_ofColor_setHue(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHue",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHue",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setHue",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHue(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setHueAngle(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHueAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHueAngle",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHueAngle",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setHueAngle",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHueAngle(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setSaturation(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setSaturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setSaturation",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setSaturation",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setSaturation",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSaturation(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setBrightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setBrightness",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setBrightness",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setBrightness",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setBrightness(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setHsb__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHsb",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setHsb",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setHsb(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setHsb__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHsb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setHsb",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setHsb(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setHsb(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofColor_setHsb__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofColor_setHsb__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor_setHsb'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::setHsb(float,float,float,float)\n"
  "    ofColor_< unsigned char >::setHsb(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofColor_clamp(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::clamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::clamp",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_clamp",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (ofColor_< unsigned char > *) &(arg1)->clamp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_invert(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::invert",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_invert",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (ofColor_< unsigned char > *) &(arg1)->invert();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_normalize(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::normalize",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_normalize",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (ofColor_< unsigned char > *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lerp(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ; float arg3 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::lerp",1,"ofColor_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::lerp",2,"ofColor_< unsigned char > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::lerp",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_lerp",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_lerp",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofColor_< unsigned char > *) &(arg1)->lerp((ofColor_< unsigned char > const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getClamped(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofColor_< unsigned char >::getClamped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getClamped",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getClamped",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->getClamped(); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getInverted(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofColor_< unsigned char >::getInverted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getInverted",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getInverted",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->getInverted(); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getNormalized(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofColor_< unsigned char >::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getNormalized",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getNormalized",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->getNormalized(); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getLerped(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ; float arg3 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::getLerped",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getLerped",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::getLerped",2,"ofColor_< unsigned char > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::getLerped",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getLerped",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getLerped",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofColor_< unsigned char > const *)arg1)->getLerped((ofColor_< unsigned char > const &)*arg2,arg3); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getHex(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofColor_< unsigned char >::getHex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getHex",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getHex",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (int)((ofColor_< unsigned char > const *)arg1)->getHex(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getHue(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getHue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getHue",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getHue",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getHue(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getHueAngle(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getHueAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getHueAngle",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getHueAngle",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getHueAngle(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getSaturation(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getSaturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getSaturation",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getSaturation",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getSaturation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getBrightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getBrightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getBrightness",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getBrightness",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getBrightness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getLightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getLightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getLightness",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getLightness",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getLightness(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getHsb(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::getHsb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getHsb",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::getHsb",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::getHsb",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::getHsb",4,"float &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getHsb",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("ofColor_getHsb",2,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("ofColor_getHsb",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("ofColor_getHsb",4,SWIGTYPE_p_float); } 
  ((ofColor_< unsigned char > const *)arg1)->getHsb(*arg2,*arg3,*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofColor_limit(lua_State* L) { int SWIG_arg = 0; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::limit",0,0)
  result = (float)ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR limit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___eq(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofColor_< unsigned char >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator ==",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator ==",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___eq",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___eq",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (bool)((ofColor_< unsigned char > const *)arg1)->operator ==((ofColor_< unsigned char > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___add__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator +",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator +",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___add",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___add",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->operator +((ofColor_< unsigned char > const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___add__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator +",1,"ofColor_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator +",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___add",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned char > const *)arg1)->operator +((float const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofColor___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofColor___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::operator +(ofColor_< unsigned char > const &) const\n"
  "    ofColor_< unsigned char >::operator +(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofColor___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator -",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator -",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___sub",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___sub",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->operator -((ofColor_< unsigned char > const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator -",1,"ofColor_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator -",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___sub",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned char > const *)arg1)->operator -((float const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofColor___sub__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofColor___sub__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::operator -(ofColor_< unsigned char > const &) const\n"
  "    ofColor_< unsigned char >::operator -(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofColor___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator *",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator *",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___mul",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___mul",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->operator *((ofColor_< unsigned char > const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator *",1,"ofColor_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator *",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___mul",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned char > const *)arg1)->operator *((float const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofColor___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofColor___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::operator *(ofColor_< unsigned char > const &) const\n"
  "    ofColor_< unsigned char >::operator *(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofColor___div__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator /",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator /",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___div",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___div",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->operator /((ofColor_< unsigned char > const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___div__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator /",1,"ofColor_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator /",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___div",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned char > const *)arg1)->operator /((float const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofColor___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofColor___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofColor___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::operator /(ofColor_< unsigned char > const &) const\n"
  "    ofColor_< unsigned char >::operator /(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofColor_white_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::white",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::white;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_gray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::gray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_black_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::black",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::black;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_red_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::red",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::red;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_green_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::green",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::green;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_blue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::blue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_cyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::cyan",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_magenta_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::magenta",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::magenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_yellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::yellow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::yellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_aliceBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::aliceBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aliceBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_antiqueWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::antiqueWhite",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::antiqueWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_aqua_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::aqua",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aqua;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_aquamarine_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::aquamarine",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aquamarine;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_azure_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::azure",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::azure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_beige_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::beige",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::beige;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_bisque_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::bisque",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::bisque;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_blanchedAlmond_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::blanchedAlmond",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blanchedAlmond;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_blueViolet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::blueViolet",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blueViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_brown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::brown",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::brown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_burlyWood_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::burlyWood",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::burlyWood;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_cadetBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::cadetBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cadetBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_chartreuse_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::chartreuse",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::chartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_chocolate_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::chocolate",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::chocolate;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_coral_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::coral",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::coral;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_cornflowerBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::cornflowerBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cornflowerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_cornsilk_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::cornsilk",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cornsilk;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_crimson_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::crimson",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::crimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkCyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkCyan",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkGoldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkGoldenRod",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGoldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkKhaki_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkKhaki",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkKhaki;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkMagenta_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkMagenta",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkOliveGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkOliveGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkOliveGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkorange_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkorange",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkorange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkOrchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkOrchid",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkOrchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkSalmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSalmon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSalmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSeaGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkSlateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSlateBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkSlateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSlateGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkSlateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSlateGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkTurquoise",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_darkViolet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkViolet",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_deepPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::deepPink",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::deepPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_deepSkyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::deepSkyBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::deepSkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_dimGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::dimGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dimGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_dimGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::dimGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dimGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_dodgerBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::dodgerBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dodgerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_fireBrick_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::fireBrick",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::fireBrick;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_floralWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::floralWhite",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::floralWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_forestGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::forestGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::forestGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_fuchsia_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::fuchsia",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::fuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_gainsboro_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::gainsboro",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gainsboro;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_ghostWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::ghostWhite",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::ghostWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_gold_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::gold",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gold;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_goldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::goldenRod",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::goldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_grey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::grey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::grey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_greenYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::greenYellow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::greenYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_honeyDew_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::honeyDew",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::honeyDew;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_hotPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::hotPink",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::hotPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_indianRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::indianRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::indianRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_indigo_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::indigo",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::indigo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_ivory_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::ivory",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::ivory;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_khaki_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::khaki",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::khaki;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lavender_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lavender",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lavender;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lavenderBlush_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lavenderBlush",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lavenderBlush;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lawnGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lawnGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lawnGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lemonChiffon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lemonChiffon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lemonChiffon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightCoral_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightCoral",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightCoral;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightCyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightCyan",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightGoldenRodYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightGoldenRodYellow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGoldenRodYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightPink",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightSalmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSalmon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSalmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSeaGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightSkyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSkyBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightSlateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSlateGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSlateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightSlateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSlateGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSlateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightSteelBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSteelBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSteelBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lightYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightYellow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_lime_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lime",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_limeGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::limeGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::limeGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_linen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::linen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::linen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_maroon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::maroon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::maroon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumAquaMarine_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumAquaMarine",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumAquaMarine;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumOrchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumOrchid",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumOrchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumPurple_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumPurple",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumSeaGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumSlateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumSlateBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSlateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumSpringGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumSpringGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSpringGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumTurquoise",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mediumVioletRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumVioletRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumVioletRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_midnightBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::midnightBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::midnightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mintCream_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mintCream",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mintCream;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_mistyRose_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mistyRose",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mistyRose;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_moccasin_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::moccasin",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::moccasin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_navajoWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::navajoWhite",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::navajoWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_navy_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::navy",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::navy;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_oldLace_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::oldLace",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::oldLace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_olive_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::olive",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::olive;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_oliveDrab_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::oliveDrab",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::oliveDrab;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_orange_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::orange",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_orangeRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::orangeRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orangeRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_orchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::orchid",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_paleGoldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::paleGoldenRod",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleGoldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_paleGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::paleGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_paleTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::paleTurquoise",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_paleVioletRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::paleVioletRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleVioletRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_papayaWhip_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::papayaWhip",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::papayaWhip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_peachPuff_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::peachPuff",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::peachPuff;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_peru_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::peru",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::peru;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_pink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::pink",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::pink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_plum_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::plum",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::plum;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_powderBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::powderBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::powderBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_purple_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::purple",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::purple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_rosyBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::rosyBrown",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::rosyBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_royalBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::royalBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::royalBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_saddleBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::saddleBrown",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::saddleBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_salmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::salmon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::salmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_sandyBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::sandyBrown",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::sandyBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_seaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::seaGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::seaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_seaShell_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::seaShell",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::seaShell;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_sienna_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::sienna",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::sienna;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_silver_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::silver",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::silver;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_skyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::skyBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::skyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_slateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::slateBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_slateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::slateGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_slateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::slateGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_snow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::snow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::snow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_springGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::springGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::springGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_steelBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::steelBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::steelBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_blueSteel_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::blueSteel",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blueSteel;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_tan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::tan",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::tan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_teal_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::teal",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::teal;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_thistle_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::thistle",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::thistle;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_tomato_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::tomato",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::tomato;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_turquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::turquoise",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::turquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_violet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::violet",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::violet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_wheat_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::wheat",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::wheat;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_whiteSmoke_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::whiteSmoke",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::whiteSmoke;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_yellowGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::yellowGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::yellowGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getR(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::getR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getR",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getR",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__getR(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getG(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::getG",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getG",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getG",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__getG(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getB(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::getB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getB",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getB",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__getB(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_getA(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::getA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getA",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_getA",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__getA(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setR(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setR",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setR",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setR",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__setR(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setG(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setG",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setG",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setG",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__setG(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setB(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setB",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setB",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setB",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__setB(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_setA(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setA",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setA",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_setA",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__setA(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor___tostring(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; char *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::__str__",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor___tostring",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (char *)ofColor__Sl_unsigned_SS_char_Sg____str__(arg1); lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_r_set(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::r",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::r",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_r_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__r_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_r_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::r",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_r_get",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__r_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_g_set(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::g",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::g",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_g_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__g_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_g_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::g",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_g_get",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__g_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_b_set(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::b",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::b",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_b_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__b_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_b_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::b",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_b_get",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__b_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_a_set(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::a",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::a",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_a_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__a_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofColor_a_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::a",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofColor_a_get",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__a_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofColor(void *obj) {
ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofColor_attributes[] = {
    { "r", _wrap_ofColor_r_get, _wrap_ofColor_r_set },
    { "g", _wrap_ofColor_g_get, _wrap_ofColor_g_set },
    { "b", _wrap_ofColor_b_get, _wrap_ofColor_b_set },
    { "a", _wrap_ofColor_a_get, _wrap_ofColor_a_set },
    {0,0,0}
};
static swig_lua_method swig_ofColor_methods[]= {
    { "set", _wrap_ofColor_set},
    { "setHex", _wrap_ofColor_setHex},
    { "setHue", _wrap_ofColor_setHue},
    { "setHueAngle", _wrap_ofColor_setHueAngle},
    { "setSaturation", _wrap_ofColor_setSaturation},
    { "setBrightness", _wrap_ofColor_setBrightness},
    { "setHsb", _wrap_ofColor_setHsb},
    { "clamp", _wrap_ofColor_clamp},
    { "invert", _wrap_ofColor_invert},
    { "normalize", _wrap_ofColor_normalize},
    { "lerp", _wrap_ofColor_lerp},
    { "getClamped", _wrap_ofColor_getClamped},
    { "getInverted", _wrap_ofColor_getInverted},
    { "getNormalized", _wrap_ofColor_getNormalized},
    { "getLerped", _wrap_ofColor_getLerped},
    { "getHex", _wrap_ofColor_getHex},
    { "getHue", _wrap_ofColor_getHue},
    { "getHueAngle", _wrap_ofColor_getHueAngle},
    { "getSaturation", _wrap_ofColor_getSaturation},
    { "getBrightness", _wrap_ofColor_getBrightness},
    { "getLightness", _wrap_ofColor_getLightness},
    { "getHsb", _wrap_ofColor_getHsb},
    { "__eq", _wrap_ofColor___eq},
    { "__add", _wrap_ofColor___add},
    { "__sub", _wrap_ofColor___sub},
    { "__mul", _wrap_ofColor___mul},
    { "__div", _wrap_ofColor___div},
    { "getR", _wrap_ofColor_getR},
    { "getG", _wrap_ofColor_getG},
    { "getB", _wrap_ofColor_getB},
    { "getA", _wrap_ofColor_getA},
    { "setR", _wrap_ofColor_setR},
    { "setG", _wrap_ofColor_setG},
    { "setB", _wrap_ofColor_setB},
    { "setA", _wrap_ofColor_setA},
    { "__tostring", _wrap_ofColor___tostring},
    {0,0}
};
static swig_lua_method swig_ofColor_meta[] = {
    { "__eq", _wrap_ofColor___eq},
    { "__add", _wrap_ofColor___add},
    { "__sub", _wrap_ofColor___sub},
    { "__mul", _wrap_ofColor___mul},
    { "__div", _wrap_ofColor___div},
    { "__tostring", _wrap_ofColor___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofColor_Sf_SwigStatic_attributes[] = {
    { "white", _wrap_ofColor_white_get, SWIG_Lua_set_immutable },
    { "gray", _wrap_ofColor_gray_get, SWIG_Lua_set_immutable },
    { "black", _wrap_ofColor_black_get, SWIG_Lua_set_immutable },
    { "red", _wrap_ofColor_red_get, SWIG_Lua_set_immutable },
    { "green", _wrap_ofColor_green_get, SWIG_Lua_set_immutable },
    { "blue", _wrap_ofColor_blue_get, SWIG_Lua_set_immutable },
    { "cyan", _wrap_ofColor_cyan_get, SWIG_Lua_set_immutable },
    { "magenta", _wrap_ofColor_magenta_get, SWIG_Lua_set_immutable },
    { "yellow", _wrap_ofColor_yellow_get, SWIG_Lua_set_immutable },
    { "aliceBlue", _wrap_ofColor_aliceBlue_get, SWIG_Lua_set_immutable },
    { "antiqueWhite", _wrap_ofColor_antiqueWhite_get, SWIG_Lua_set_immutable },
    { "aqua", _wrap_ofColor_aqua_get, SWIG_Lua_set_immutable },
    { "aquamarine", _wrap_ofColor_aquamarine_get, SWIG_Lua_set_immutable },
    { "azure", _wrap_ofColor_azure_get, SWIG_Lua_set_immutable },
    { "beige", _wrap_ofColor_beige_get, SWIG_Lua_set_immutable },
    { "bisque", _wrap_ofColor_bisque_get, SWIG_Lua_set_immutable },
    { "blanchedAlmond", _wrap_ofColor_blanchedAlmond_get, SWIG_Lua_set_immutable },
    { "blueViolet", _wrap_ofColor_blueViolet_get, SWIG_Lua_set_immutable },
    { "brown", _wrap_ofColor_brown_get, SWIG_Lua_set_immutable },
    { "burlyWood", _wrap_ofColor_burlyWood_get, SWIG_Lua_set_immutable },
    { "cadetBlue", _wrap_ofColor_cadetBlue_get, SWIG_Lua_set_immutable },
    { "chartreuse", _wrap_ofColor_chartreuse_get, SWIG_Lua_set_immutable },
    { "chocolate", _wrap_ofColor_chocolate_get, SWIG_Lua_set_immutable },
    { "coral", _wrap_ofColor_coral_get, SWIG_Lua_set_immutable },
    { "cornflowerBlue", _wrap_ofColor_cornflowerBlue_get, SWIG_Lua_set_immutable },
    { "cornsilk", _wrap_ofColor_cornsilk_get, SWIG_Lua_set_immutable },
    { "crimson", _wrap_ofColor_crimson_get, SWIG_Lua_set_immutable },
    { "darkBlue", _wrap_ofColor_darkBlue_get, SWIG_Lua_set_immutable },
    { "darkCyan", _wrap_ofColor_darkCyan_get, SWIG_Lua_set_immutable },
    { "darkGoldenRod", _wrap_ofColor_darkGoldenRod_get, SWIG_Lua_set_immutable },
    { "darkGray", _wrap_ofColor_darkGray_get, SWIG_Lua_set_immutable },
    { "darkGrey", _wrap_ofColor_darkGrey_get, SWIG_Lua_set_immutable },
    { "darkGreen", _wrap_ofColor_darkGreen_get, SWIG_Lua_set_immutable },
    { "darkKhaki", _wrap_ofColor_darkKhaki_get, SWIG_Lua_set_immutable },
    { "darkMagenta", _wrap_ofColor_darkMagenta_get, SWIG_Lua_set_immutable },
    { "darkOliveGreen", _wrap_ofColor_darkOliveGreen_get, SWIG_Lua_set_immutable },
    { "darkorange", _wrap_ofColor_darkorange_get, SWIG_Lua_set_immutable },
    { "darkOrchid", _wrap_ofColor_darkOrchid_get, SWIG_Lua_set_immutable },
    { "darkRed", _wrap_ofColor_darkRed_get, SWIG_Lua_set_immutable },
    { "darkSalmon", _wrap_ofColor_darkSalmon_get, SWIG_Lua_set_immutable },
    { "darkSeaGreen", _wrap_ofColor_darkSeaGreen_get, SWIG_Lua_set_immutable },
    { "darkSlateBlue", _wrap_ofColor_darkSlateBlue_get, SWIG_Lua_set_immutable },
    { "darkSlateGray", _wrap_ofColor_darkSlateGray_get, SWIG_Lua_set_immutable },
    { "darkSlateGrey", _wrap_ofColor_darkSlateGrey_get, SWIG_Lua_set_immutable },
    { "darkTurquoise", _wrap_ofColor_darkTurquoise_get, SWIG_Lua_set_immutable },
    { "darkViolet", _wrap_ofColor_darkViolet_get, SWIG_Lua_set_immutable },
    { "deepPink", _wrap_ofColor_deepPink_get, SWIG_Lua_set_immutable },
    { "deepSkyBlue", _wrap_ofColor_deepSkyBlue_get, SWIG_Lua_set_immutable },
    { "dimGray", _wrap_ofColor_dimGray_get, SWIG_Lua_set_immutable },
    { "dimGrey", _wrap_ofColor_dimGrey_get, SWIG_Lua_set_immutable },
    { "dodgerBlue", _wrap_ofColor_dodgerBlue_get, SWIG_Lua_set_immutable },
    { "fireBrick", _wrap_ofColor_fireBrick_get, SWIG_Lua_set_immutable },
    { "floralWhite", _wrap_ofColor_floralWhite_get, SWIG_Lua_set_immutable },
    { "forestGreen", _wrap_ofColor_forestGreen_get, SWIG_Lua_set_immutable },
    { "fuchsia", _wrap_ofColor_fuchsia_get, SWIG_Lua_set_immutable },
    { "gainsboro", _wrap_ofColor_gainsboro_get, SWIG_Lua_set_immutable },
    { "ghostWhite", _wrap_ofColor_ghostWhite_get, SWIG_Lua_set_immutable },
    { "gold", _wrap_ofColor_gold_get, SWIG_Lua_set_immutable },
    { "goldenRod", _wrap_ofColor_goldenRod_get, SWIG_Lua_set_immutable },
    { "grey", _wrap_ofColor_grey_get, SWIG_Lua_set_immutable },
    { "greenYellow", _wrap_ofColor_greenYellow_get, SWIG_Lua_set_immutable },
    { "honeyDew", _wrap_ofColor_honeyDew_get, SWIG_Lua_set_immutable },
    { "hotPink", _wrap_ofColor_hotPink_get, SWIG_Lua_set_immutable },
    { "indianRed", _wrap_ofColor_indianRed_get, SWIG_Lua_set_immutable },
    { "indigo", _wrap_ofColor_indigo_get, SWIG_Lua_set_immutable },
    { "ivory", _wrap_ofColor_ivory_get, SWIG_Lua_set_immutable },
    { "khaki", _wrap_ofColor_khaki_get, SWIG_Lua_set_immutable },
    { "lavender", _wrap_ofColor_lavender_get, SWIG_Lua_set_immutable },
    { "lavenderBlush", _wrap_ofColor_lavenderBlush_get, SWIG_Lua_set_immutable },
    { "lawnGreen", _wrap_ofColor_lawnGreen_get, SWIG_Lua_set_immutable },
    { "lemonChiffon", _wrap_ofColor_lemonChiffon_get, SWIG_Lua_set_immutable },
    { "lightBlue", _wrap_ofColor_lightBlue_get, SWIG_Lua_set_immutable },
    { "lightCoral", _wrap_ofColor_lightCoral_get, SWIG_Lua_set_immutable },
    { "lightCyan", _wrap_ofColor_lightCyan_get, SWIG_Lua_set_immutable },
    { "lightGoldenRodYellow", _wrap_ofColor_lightGoldenRodYellow_get, SWIG_Lua_set_immutable },
    { "lightGray", _wrap_ofColor_lightGray_get, SWIG_Lua_set_immutable },
    { "lightGrey", _wrap_ofColor_lightGrey_get, SWIG_Lua_set_immutable },
    { "lightGreen", _wrap_ofColor_lightGreen_get, SWIG_Lua_set_immutable },
    { "lightPink", _wrap_ofColor_lightPink_get, SWIG_Lua_set_immutable },
    { "lightSalmon", _wrap_ofColor_lightSalmon_get, SWIG_Lua_set_immutable },
    { "lightSeaGreen", _wrap_ofColor_lightSeaGreen_get, SWIG_Lua_set_immutable },
    { "lightSkyBlue", _wrap_ofColor_lightSkyBlue_get, SWIG_Lua_set_immutable },
    { "lightSlateGray", _wrap_ofColor_lightSlateGray_get, SWIG_Lua_set_immutable },
    { "lightSlateGrey", _wrap_ofColor_lightSlateGrey_get, SWIG_Lua_set_immutable },
    { "lightSteelBlue", _wrap_ofColor_lightSteelBlue_get, SWIG_Lua_set_immutable },
    { "lightYellow", _wrap_ofColor_lightYellow_get, SWIG_Lua_set_immutable },
    { "lime", _wrap_ofColor_lime_get, SWIG_Lua_set_immutable },
    { "limeGreen", _wrap_ofColor_limeGreen_get, SWIG_Lua_set_immutable },
    { "linen", _wrap_ofColor_linen_get, SWIG_Lua_set_immutable },
    { "maroon", _wrap_ofColor_maroon_get, SWIG_Lua_set_immutable },
    { "mediumAquaMarine", _wrap_ofColor_mediumAquaMarine_get, SWIG_Lua_set_immutable },
    { "mediumBlue", _wrap_ofColor_mediumBlue_get, SWIG_Lua_set_immutable },
    { "mediumOrchid", _wrap_ofColor_mediumOrchid_get, SWIG_Lua_set_immutable },
    { "mediumPurple", _wrap_ofColor_mediumPurple_get, SWIG_Lua_set_immutable },
    { "mediumSeaGreen", _wrap_ofColor_mediumSeaGreen_get, SWIG_Lua_set_immutable },
    { "mediumSlateBlue", _wrap_ofColor_mediumSlateBlue_get, SWIG_Lua_set_immutable },
    { "mediumSpringGreen", _wrap_ofColor_mediumSpringGreen_get, SWIG_Lua_set_immutable },
    { "mediumTurquoise", _wrap_ofColor_mediumTurquoise_get, SWIG_Lua_set_immutable },
    { "mediumVioletRed", _wrap_ofColor_mediumVioletRed_get, SWIG_Lua_set_immutable },
    { "midnightBlue", _wrap_ofColor_midnightBlue_get, SWIG_Lua_set_immutable },
    { "mintCream", _wrap_ofColor_mintCream_get, SWIG_Lua_set_immutable },
    { "mistyRose", _wrap_ofColor_mistyRose_get, SWIG_Lua_set_immutable },
    { "moccasin", _wrap_ofColor_moccasin_get, SWIG_Lua_set_immutable },
    { "navajoWhite", _wrap_ofColor_navajoWhite_get, SWIG_Lua_set_immutable },
    { "navy", _wrap_ofColor_navy_get, SWIG_Lua_set_immutable },
    { "oldLace", _wrap_ofColor_oldLace_get, SWIG_Lua_set_immutable },
    { "olive", _wrap_ofColor_olive_get, SWIG_Lua_set_immutable },
    { "oliveDrab", _wrap_ofColor_oliveDrab_get, SWIG_Lua_set_immutable },
    { "orange", _wrap_ofColor_orange_get, SWIG_Lua_set_immutable },
    { "orangeRed", _wrap_ofColor_orangeRed_get, SWIG_Lua_set_immutable },
    { "orchid", _wrap_ofColor_orchid_get, SWIG_Lua_set_immutable },
    { "paleGoldenRod", _wrap_ofColor_paleGoldenRod_get, SWIG_Lua_set_immutable },
    { "paleGreen", _wrap_ofColor_paleGreen_get, SWIG_Lua_set_immutable },
    { "paleTurquoise", _wrap_ofColor_paleTurquoise_get, SWIG_Lua_set_immutable },
    { "paleVioletRed", _wrap_ofColor_paleVioletRed_get, SWIG_Lua_set_immutable },
    { "papayaWhip", _wrap_ofColor_papayaWhip_get, SWIG_Lua_set_immutable },
    { "peachPuff", _wrap_ofColor_peachPuff_get, SWIG_Lua_set_immutable },
    { "peru", _wrap_ofColor_peru_get, SWIG_Lua_set_immutable },
    { "pink", _wrap_ofColor_pink_get, SWIG_Lua_set_immutable },
    { "plum", _wrap_ofColor_plum_get, SWIG_Lua_set_immutable },
    { "powderBlue", _wrap_ofColor_powderBlue_get, SWIG_Lua_set_immutable },
    { "purple", _wrap_ofColor_purple_get, SWIG_Lua_set_immutable },
    { "rosyBrown", _wrap_ofColor_rosyBrown_get, SWIG_Lua_set_immutable },
    { "royalBlue", _wrap_ofColor_royalBlue_get, SWIG_Lua_set_immutable },
    { "saddleBrown", _wrap_ofColor_saddleBrown_get, SWIG_Lua_set_immutable },
    { "salmon", _wrap_ofColor_salmon_get, SWIG_Lua_set_immutable },
    { "sandyBrown", _wrap_ofColor_sandyBrown_get, SWIG_Lua_set_immutable },
    { "seaGreen", _wrap_ofColor_seaGreen_get, SWIG_Lua_set_immutable },
    { "seaShell", _wrap_ofColor_seaShell_get, SWIG_Lua_set_immutable },
    { "sienna", _wrap_ofColor_sienna_get, SWIG_Lua_set_immutable },
    { "silver", _wrap_ofColor_silver_get, SWIG_Lua_set_immutable },
    { "skyBlue", _wrap_ofColor_skyBlue_get, SWIG_Lua_set_immutable },
    { "slateBlue", _wrap_ofColor_slateBlue_get, SWIG_Lua_set_immutable },
    { "slateGray", _wrap_ofColor_slateGray_get, SWIG_Lua_set_immutable },
    { "slateGrey", _wrap_ofColor_slateGrey_get, SWIG_Lua_set_immutable },
    { "snow", _wrap_ofColor_snow_get, SWIG_Lua_set_immutable },
    { "springGreen", _wrap_ofColor_springGreen_get, SWIG_Lua_set_immutable },
    { "steelBlue", _wrap_ofColor_steelBlue_get, SWIG_Lua_set_immutable },
    { "blueSteel", _wrap_ofColor_blueSteel_get, SWIG_Lua_set_immutable },
    { "tan", _wrap_ofColor_tan_get, SWIG_Lua_set_immutable },
    { "teal", _wrap_ofColor_teal_get, SWIG_Lua_set_immutable },
    { "thistle", _wrap_ofColor_thistle_get, SWIG_Lua_set_immutable },
    { "tomato", _wrap_ofColor_tomato_get, SWIG_Lua_set_immutable },
    { "turquoise", _wrap_ofColor_turquoise_get, SWIG_Lua_set_immutable },
    { "violet", _wrap_ofColor_violet_get, SWIG_Lua_set_immutable },
    { "wheat", _wrap_ofColor_wheat_get, SWIG_Lua_set_immutable },
    { "whiteSmoke", _wrap_ofColor_whiteSmoke_get, SWIG_Lua_set_immutable },
    { "yellowGreen", _wrap_ofColor_yellowGreen_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_ofColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofColor_Sf_SwigStatic_methods[]= {
    { "fromHsb", _wrap_ofColor_fromHsb},
    { "fromHex", _wrap_ofColor_fromHex},
    { "limit", _wrap_ofColor_limit},
    {0,0}
};
static swig_lua_class* swig_ofColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofColor_Sf_SwigStatic = {
    "ofColor",
    swig_ofColor_Sf_SwigStatic_methods,
    swig_ofColor_Sf_SwigStatic_attributes,
    swig_ofColor_Sf_SwigStatic_constants,
    swig_ofColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofColor_bases[] = {0};
static const char *swig_ofColor_base_names[] = {0};
static swig_lua_class _wrap_class_ofColor = { "ofColor", "ofColor", &SWIGTYPE_p_ofColor_T_unsigned_char_t,_proxy__wrap_new_ofColor, swig_delete_ofColor, swig_ofColor_methods, swig_ofColor_attributes, &swig_ofColor_Sf_SwigStatic, swig_ofColor_meta, swig_ofColor_bases, swig_ofColor_base_names };

static int _wrap_new_ofFloatColor__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::ofColor_",0,0) result = (ofColor_< float > *)new ofColor_< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatColor__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofColor_< float > *result = 0 ; SWIG_check_num_args("ofColor_< float >::ofColor_",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< float >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::ofColor_",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::ofColor_",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< float >::ofColor_",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofColor_< float > *)new ofColor_< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatColor__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofColor_< float > *result = 0 ; SWIG_check_num_args("ofColor_< float >::ofColor_",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< float >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::ofColor_",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::ofColor_",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (ofColor_< float > *)new ofColor_< float >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatColor__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  ofColor_< float > *result = 0 ; SWIG_check_num_args("ofColor_< float >::ofColor_",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< float >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::ofColor_",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofColor_< float > *)new ofColor_< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatColor__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::ofColor_",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< float >::ofColor_",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (ofColor_< float > *)new ofColor_< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatColor__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = 0 ; float arg2 ;
  ofColor_< float > *result = 0 ; SWIG_check_num_args("ofColor_< float >::ofColor_",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofColor_< float >::ofColor_",1,"ofColor_< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::ofColor_",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("new_ofFloatColor",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofColor_< float > *)new ofColor_< float >((ofColor_< float > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofFloatColor__SWIG_0(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_new_ofFloatColor__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ofFloatColor__SWIG_5(L);}  }  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_ofFloatColor__SWIG_3(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_ofFloatColor__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofFloatColor__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofFloatColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< float >::ofColor_()\n" "    ofColor_< float >::ofColor_(float,float,float,float)\n"
  "    ofColor_< float >::ofColor_(float,float,float)\n" "    ofColor_< float >::ofColor_(float,float)\n"
  "    ofColor_< float >::ofColor_(float)\n" "    ofColor_< float >::ofColor_(ofColor_< float > const &,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatColor_fromHsb__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; ofColor_< float > result; SWIG_check_num_args("ofColor_< float >::fromHsb",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< float >::fromHsb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::fromHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::fromHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< float >::fromHsb",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3,arg4); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_fromHsb__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofColor_< float > result; SWIG_check_num_args("ofColor_< float >::fromHsb",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< float >::fromHsb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::fromHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::fromHsb",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_fromHsb(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofFloatColor_fromHsb__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofFloatColor_fromHsb__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor_fromHsb'\n"
  "  Possible C/C++ prototypes are:\n" "    ofColor_< float >::fromHsb(float,float,float,float)\n"
  "    ofColor_< float >::fromHsb(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatColor_fromHex__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; float arg2 ;
  ofColor_< float > result; SWIG_check_num_args("ofColor_< float >::fromHex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< float >::fromHex",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::fromHex",2,"float"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1,arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_fromHex__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::fromHex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< float >::fromHex",1,"int"); arg1 = (int)lua_tonumber(L, 1);
  result = ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_fromHex(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofFloatColor_fromHex__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatColor_fromHex__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor_fromHex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofColor_< float >::fromHex(int,float)\n" "    ofColor_< float >::fromHex(int)\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatColor_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofColor_< float >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::set",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< float >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofColor_< float >::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_set",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofColor_< float >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::set",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< float >::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_set",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofColor_< float >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::set",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_set",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatColor_set__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::set",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_set",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_set__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *arg2 = 0 ; SWIG_check_num_args("ofColor_< float >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::set",1,"ofColor_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::set",2,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_set",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_set",2,SWIGTYPE_p_ofColor_T_float_t); }  (arg1)->set((ofColor_< float > const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatColor_set__SWIG_4(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatColor_set__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatColor_set__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofFloatColor_set__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofFloatColor_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< float >::set(float,float,float,float)\n" "    ofColor_< float >::set(float,float,float)\n"
  "    ofColor_< float >::set(float,float)\n" "    ofColor_< float >::set(float)\n"
  "    ofColor_< float >::set(ofColor_< float > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatColor_setHex__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; int arg2 ; float arg3 ;
  SWIG_check_num_args("ofColor_< float >::setHex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setHex",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setHex",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::setHex",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setHex",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setHex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatColor_setHex__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; int arg2 ; SWIG_check_num_args("ofColor_< float >::setHex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setHex",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setHex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setHex",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setHex(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatColor_setHex__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatColor_setHex__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor_setHex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofColor_< float >::setHex(int,float)\n" "    ofColor_< float >::setHex(int)\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatColor_setHue(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::setHue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setHue",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setHue",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setHue",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHue(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setHueAngle(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::setHueAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setHueAngle",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setHueAngle",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setHueAngle",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHueAngle(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setSaturation(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float arg2 ; SWIG_check_num_args("ofColor_< float >::setSaturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setSaturation",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setSaturation",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setSaturation",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSaturation(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setBrightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float arg2 ; SWIG_check_num_args("ofColor_< float >::setBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setBrightness",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setBrightness",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setBrightness",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setBrightness(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setHsb__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofColor_< float >::setHsb",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setHsb",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::setHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< float >::setHsb",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofColor_< float >::setHsb",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setHsb",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setHsb(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setHsb__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofColor_< float >::setHsb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setHsb",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::setHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< float >::setHsb",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setHsb",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setHsb(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setHsb(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofFloatColor_setHsb__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofFloatColor_setHsb__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor_setHsb'\n"
  "  Possible C/C++ prototypes are:\n" "    ofColor_< float >::setHsb(float,float,float,float)\n"
  "    ofColor_< float >::setHsb(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatColor_clamp(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *result = 0 ; SWIG_check_num_args("ofColor_< float >::clamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::clamp",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_clamp",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (ofColor_< float > *) &(arg1)->clamp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_invert(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *result = 0 ; SWIG_check_num_args("ofColor_< float >::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::invert",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_invert",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (ofColor_< float > *) &(arg1)->invert();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_normalize(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *result = 0 ; SWIG_check_num_args("ofColor_< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::normalize",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_normalize",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (ofColor_< float > *) &(arg1)->normalize(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lerp(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *arg2 = 0 ; float arg3 ; ofColor_< float > *result = 0 ; SWIG_check_num_args("ofColor_< float >::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::lerp",1,"ofColor_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::lerp",2,"ofColor_< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::lerp",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_lerp",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_lerp",2,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofColor_< float > *) &(arg1)->lerp((ofColor_< float > const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getClamped(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > result; SWIG_check_num_args("ofColor_< float >::getClamped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getClamped",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getClamped",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = ((ofColor_< float > const *)arg1)->getClamped(); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getInverted(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > result; SWIG_check_num_args("ofColor_< float >::getInverted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getInverted",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getInverted",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = ((ofColor_< float > const *)arg1)->getInverted(); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getNormalized(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getNormalized",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getNormalized",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = ((ofColor_< float > const *)arg1)->getNormalized(); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getLerped(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *arg2 = 0 ; float arg3 ; ofColor_< float > result; SWIG_check_num_args("ofColor_< float >::getLerped",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getLerped",1,"ofColor_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::getLerped",2,"ofColor_< float > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< float >::getLerped",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getLerped",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getLerped",2,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofColor_< float > const *)arg1)->getLerped((ofColor_< float > const &)*arg2,arg3); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getHex(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  int result; SWIG_check_num_args("ofColor_< float >::getHex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getHex",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getHex",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (int)((ofColor_< float > const *)arg1)->getHex(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getHue(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::getHue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getHue",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getHue",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (float)((ofColor_< float > const *)arg1)->getHue(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getHueAngle(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::getHueAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getHueAngle",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getHueAngle",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (float)((ofColor_< float > const *)arg1)->getHueAngle(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getSaturation(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float result; SWIG_check_num_args("ofColor_< float >::getSaturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getSaturation",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getSaturation",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (float)((ofColor_< float > const *)arg1)->getSaturation(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getBrightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float result; SWIG_check_num_args("ofColor_< float >::getBrightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getBrightness",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getBrightness",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (float)((ofColor_< float > const *)arg1)->getBrightness(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getLightness(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::getLightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getLightness",1,"ofColor_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getLightness",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (float)((ofColor_< float > const *)arg1)->getLightness(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getHsb(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ; SWIG_check_num_args("ofColor_< float >::getHsb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getHsb",1,"ofColor_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::getHsb",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofColor_< float >::getHsb",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofColor_< float >::getHsb",4,"float &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getHsb",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatColor_getHsb",2,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatColor_getHsb",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatColor_getHsb",4,SWIGTYPE_p_float); }  ((ofColor_< float > const *)arg1)->getHsb(*arg2,*arg3,*arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_limit(lua_State* L) { int SWIG_arg = 0; float result;
  SWIG_check_num_args("ofColor_< float >::limit",0,0) result = (float)ofColor_< float >::SWIGTEMPLATEDISAMBIGUATOR limit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___eq(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  ofColor_< float > *arg2 = 0 ; bool result; SWIG_check_num_args("ofColor_< float >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator ==",1,"ofColor_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::operator ==",2,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___eq",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___eq",2,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (bool)((ofColor_< float > const *)arg1)->operator ==((ofColor_< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___add__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; ofColor_< float > *arg2 = 0 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator +",1,"ofColor_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::operator +",2,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___add",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___add",2,SWIGTYPE_p_ofColor_T_float_t); } 
  result = ((ofColor_< float > const *)arg1)->operator +((ofColor_< float > const &)*arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___add__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float *arg2 = 0 ; float temp2 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator +",1,"ofColor_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::operator +",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___add",1,SWIGTYPE_p_ofColor_T_float_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< float > const *)arg1)->operator +((float const &)*arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatColor___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatColor___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< float >::operator +(ofColor_< float > const &) const\n"
  "    ofColor_< float >::operator +(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatColor___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; ofColor_< float > *arg2 = 0 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator -",1,"ofColor_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::operator -",2,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___sub",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___sub",2,SWIGTYPE_p_ofColor_T_float_t); } 
  result = ((ofColor_< float > const *)arg1)->operator -((ofColor_< float > const &)*arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float *arg2 = 0 ; float temp2 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator -",1,"ofColor_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::operator -",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___sub",1,SWIGTYPE_p_ofColor_T_float_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< float > const *)arg1)->operator -((float const &)*arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatColor___sub__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatColor___sub__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< float >::operator -(ofColor_< float > const &) const\n"
  "    ofColor_< float >::operator -(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatColor___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; ofColor_< float > *arg2 = 0 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator *",1,"ofColor_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::operator *",2,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___mul",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___mul",2,SWIGTYPE_p_ofColor_T_float_t); } 
  result = ((ofColor_< float > const *)arg1)->operator *((ofColor_< float > const &)*arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float *arg2 = 0 ; float temp2 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator *",1,"ofColor_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::operator *",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___mul",1,SWIGTYPE_p_ofColor_T_float_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< float > const *)arg1)->operator *((float const &)*arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatColor___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatColor___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< float >::operator *(ofColor_< float > const &) const\n"
  "    ofColor_< float >::operator *(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatColor___div__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; ofColor_< float > *arg2 = 0 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator /",1,"ofColor_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< float >::operator /",2,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___div",1,SWIGTYPE_p_ofColor_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___div",2,SWIGTYPE_p_ofColor_T_float_t); } 
  result = ((ofColor_< float > const *)arg1)->operator /((ofColor_< float > const &)*arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___div__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< float > *arg1 = (ofColor_< float > *) 0 ; float *arg2 = 0 ; float temp2 ; ofColor_< float > result;
  SWIG_check_num_args("ofColor_< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::operator /",1,"ofColor_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::operator /",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___div",1,SWIGTYPE_p_ofColor_T_float_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< float > const *)arg1)->operator /((float const &)*arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatColor___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatColor___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatColor___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< float >::operator /(ofColor_< float > const &) const\n"
  "    ofColor_< float >::operator /(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatColor_white_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::white",0,0) result = (ofColor_< float > *)&ofColor_< float >::white;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_gray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::gray",0,0) result = (ofColor_< float > *)&ofColor_< float >::gray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_black_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::black",0,0) result = (ofColor_< float > *)&ofColor_< float >::black;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_red_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::red",0,0) result = (ofColor_< float > *)&ofColor_< float >::red;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_green_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::green",0,0) result = (ofColor_< float > *)&ofColor_< float >::green;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_blue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::blue",0,0) result = (ofColor_< float > *)&ofColor_< float >::blue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_cyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::cyan",0,0) result = (ofColor_< float > *)&ofColor_< float >::cyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_magenta_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::magenta",0,0) result = (ofColor_< float > *)&ofColor_< float >::magenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_yellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::yellow",0,0) result = (ofColor_< float > *)&ofColor_< float >::yellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_aliceBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::aliceBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::aliceBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_antiqueWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::antiqueWhite",0,0) result = (ofColor_< float > *)&ofColor_< float >::antiqueWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_aqua_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::aqua",0,0) result = (ofColor_< float > *)&ofColor_< float >::aqua;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_aquamarine_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::aquamarine",0,0) result = (ofColor_< float > *)&ofColor_< float >::aquamarine;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_azure_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::azure",0,0) result = (ofColor_< float > *)&ofColor_< float >::azure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_beige_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::beige",0,0) result = (ofColor_< float > *)&ofColor_< float >::beige;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_bisque_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::bisque",0,0) result = (ofColor_< float > *)&ofColor_< float >::bisque;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_blanchedAlmond_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::blanchedAlmond",0,0) result = (ofColor_< float > *)&ofColor_< float >::blanchedAlmond;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_blueViolet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::blueViolet",0,0) result = (ofColor_< float > *)&ofColor_< float >::blueViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_brown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::brown",0,0) result = (ofColor_< float > *)&ofColor_< float >::brown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_burlyWood_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::burlyWood",0,0) result = (ofColor_< float > *)&ofColor_< float >::burlyWood;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_cadetBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::cadetBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::cadetBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_chartreuse_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::chartreuse",0,0) result = (ofColor_< float > *)&ofColor_< float >::chartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_chocolate_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::chocolate",0,0) result = (ofColor_< float > *)&ofColor_< float >::chocolate;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_coral_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::coral",0,0) result = (ofColor_< float > *)&ofColor_< float >::coral;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_cornflowerBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::cornflowerBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::cornflowerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_cornsilk_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::cornsilk",0,0) result = (ofColor_< float > *)&ofColor_< float >::cornsilk;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_crimson_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::crimson",0,0) result = (ofColor_< float > *)&ofColor_< float >::crimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkCyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkCyan",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkGoldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkGoldenRod",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkGoldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkGray",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkGrey",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkKhaki_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkKhaki",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkKhaki;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkMagenta_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkMagenta",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkOliveGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkOliveGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkOliveGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkorange_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkorange",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkorange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkOrchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkOrchid",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkOrchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkRed",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkSalmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkSalmon",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkSalmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkSeaGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkSlateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkSlateBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkSlateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkSlateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkSlateGray",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkSlateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkSlateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkSlateGrey",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkSlateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkTurquoise",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_darkViolet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::darkViolet",0,0) result = (ofColor_< float > *)&ofColor_< float >::darkViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_deepPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::deepPink",0,0) result = (ofColor_< float > *)&ofColor_< float >::deepPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_deepSkyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::deepSkyBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::deepSkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_dimGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::dimGray",0,0) result = (ofColor_< float > *)&ofColor_< float >::dimGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_dimGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::dimGrey",0,0) result = (ofColor_< float > *)&ofColor_< float >::dimGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_dodgerBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::dodgerBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::dodgerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_fireBrick_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::fireBrick",0,0) result = (ofColor_< float > *)&ofColor_< float >::fireBrick;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_floralWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::floralWhite",0,0) result = (ofColor_< float > *)&ofColor_< float >::floralWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_forestGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::forestGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::forestGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_fuchsia_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::fuchsia",0,0) result = (ofColor_< float > *)&ofColor_< float >::fuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_gainsboro_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::gainsboro",0,0) result = (ofColor_< float > *)&ofColor_< float >::gainsboro;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_ghostWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::ghostWhite",0,0) result = (ofColor_< float > *)&ofColor_< float >::ghostWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_gold_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::gold",0,0) result = (ofColor_< float > *)&ofColor_< float >::gold;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_goldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::goldenRod",0,0) result = (ofColor_< float > *)&ofColor_< float >::goldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_grey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::grey",0,0) result = (ofColor_< float > *)&ofColor_< float >::grey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_greenYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::greenYellow",0,0) result = (ofColor_< float > *)&ofColor_< float >::greenYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_honeyDew_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::honeyDew",0,0) result = (ofColor_< float > *)&ofColor_< float >::honeyDew;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_hotPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::hotPink",0,0) result = (ofColor_< float > *)&ofColor_< float >::hotPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_indianRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::indianRed",0,0) result = (ofColor_< float > *)&ofColor_< float >::indianRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_indigo_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::indigo",0,0) result = (ofColor_< float > *)&ofColor_< float >::indigo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_ivory_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::ivory",0,0) result = (ofColor_< float > *)&ofColor_< float >::ivory;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_khaki_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::khaki",0,0) result = (ofColor_< float > *)&ofColor_< float >::khaki;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lavender_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lavender",0,0) result = (ofColor_< float > *)&ofColor_< float >::lavender;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lavenderBlush_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lavenderBlush",0,0) result = (ofColor_< float > *)&ofColor_< float >::lavenderBlush;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lawnGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lawnGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::lawnGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lemonChiffon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lemonChiffon",0,0) result = (ofColor_< float > *)&ofColor_< float >::lemonChiffon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightCoral_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightCoral",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightCoral;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightCyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightCyan",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightGoldenRodYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightGoldenRodYellow",0,0)
  result = (ofColor_< float > *)&ofColor_< float >::lightGoldenRodYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightGray",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightGrey",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightPink",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightSalmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightSalmon",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightSalmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightSeaGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightSkyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightSkyBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightSkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightSlateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightSlateGray",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightSlateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightSlateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightSlateGrey",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightSlateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightSteelBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightSteelBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightSteelBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lightYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lightYellow",0,0) result = (ofColor_< float > *)&ofColor_< float >::lightYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_lime_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::lime",0,0) result = (ofColor_< float > *)&ofColor_< float >::lime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_limeGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::limeGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::limeGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_linen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::linen",0,0) result = (ofColor_< float > *)&ofColor_< float >::linen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_maroon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::maroon",0,0) result = (ofColor_< float > *)&ofColor_< float >::maroon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumAquaMarine_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumAquaMarine",0,0)
  result = (ofColor_< float > *)&ofColor_< float >::mediumAquaMarine;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::mediumBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumOrchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumOrchid",0,0) result = (ofColor_< float > *)&ofColor_< float >::mediumOrchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumPurple_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumPurple",0,0) result = (ofColor_< float > *)&ofColor_< float >::mediumPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumSeaGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::mediumSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumSlateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumSlateBlue",0,0)
  result = (ofColor_< float > *)&ofColor_< float >::mediumSlateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumSpringGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumSpringGreen",0,0)
  result = (ofColor_< float > *)&ofColor_< float >::mediumSpringGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumTurquoise",0,0)
  result = (ofColor_< float > *)&ofColor_< float >::mediumTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mediumVioletRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mediumVioletRed",0,0)
  result = (ofColor_< float > *)&ofColor_< float >::mediumVioletRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_midnightBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::midnightBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::midnightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mintCream_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mintCream",0,0) result = (ofColor_< float > *)&ofColor_< float >::mintCream;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_mistyRose_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::mistyRose",0,0) result = (ofColor_< float > *)&ofColor_< float >::mistyRose;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_moccasin_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::moccasin",0,0) result = (ofColor_< float > *)&ofColor_< float >::moccasin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_navajoWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::navajoWhite",0,0) result = (ofColor_< float > *)&ofColor_< float >::navajoWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_navy_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::navy",0,0) result = (ofColor_< float > *)&ofColor_< float >::navy;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_oldLace_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::oldLace",0,0) result = (ofColor_< float > *)&ofColor_< float >::oldLace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_olive_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::olive",0,0) result = (ofColor_< float > *)&ofColor_< float >::olive;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_oliveDrab_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::oliveDrab",0,0) result = (ofColor_< float > *)&ofColor_< float >::oliveDrab;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_orange_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::orange",0,0) result = (ofColor_< float > *)&ofColor_< float >::orange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_orangeRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::orangeRed",0,0) result = (ofColor_< float > *)&ofColor_< float >::orangeRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_orchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::orchid",0,0) result = (ofColor_< float > *)&ofColor_< float >::orchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_paleGoldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::paleGoldenRod",0,0) result = (ofColor_< float > *)&ofColor_< float >::paleGoldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_paleGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::paleGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::paleGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_paleTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::paleTurquoise",0,0) result = (ofColor_< float > *)&ofColor_< float >::paleTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_paleVioletRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::paleVioletRed",0,0) result = (ofColor_< float > *)&ofColor_< float >::paleVioletRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_papayaWhip_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::papayaWhip",0,0) result = (ofColor_< float > *)&ofColor_< float >::papayaWhip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_peachPuff_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::peachPuff",0,0) result = (ofColor_< float > *)&ofColor_< float >::peachPuff;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_peru_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::peru",0,0) result = (ofColor_< float > *)&ofColor_< float >::peru;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_pink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::pink",0,0) result = (ofColor_< float > *)&ofColor_< float >::pink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_plum_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::plum",0,0) result = (ofColor_< float > *)&ofColor_< float >::plum;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_powderBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::powderBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::powderBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_purple_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::purple",0,0) result = (ofColor_< float > *)&ofColor_< float >::purple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_rosyBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::rosyBrown",0,0) result = (ofColor_< float > *)&ofColor_< float >::rosyBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_royalBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::royalBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::royalBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_saddleBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::saddleBrown",0,0) result = (ofColor_< float > *)&ofColor_< float >::saddleBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_salmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::salmon",0,0) result = (ofColor_< float > *)&ofColor_< float >::salmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_sandyBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::sandyBrown",0,0) result = (ofColor_< float > *)&ofColor_< float >::sandyBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_seaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::seaGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::seaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_seaShell_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::seaShell",0,0) result = (ofColor_< float > *)&ofColor_< float >::seaShell;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_sienna_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::sienna",0,0) result = (ofColor_< float > *)&ofColor_< float >::sienna;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_silver_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::silver",0,0) result = (ofColor_< float > *)&ofColor_< float >::silver;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_skyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::skyBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::skyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_slateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::slateBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::slateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_slateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::slateGray",0,0) result = (ofColor_< float > *)&ofColor_< float >::slateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_slateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::slateGrey",0,0) result = (ofColor_< float > *)&ofColor_< float >::slateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_snow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::snow",0,0) result = (ofColor_< float > *)&ofColor_< float >::snow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_springGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::springGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::springGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_steelBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::steelBlue",0,0) result = (ofColor_< float > *)&ofColor_< float >::steelBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_blueSteel_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::blueSteel",0,0) result = (ofColor_< float > *)&ofColor_< float >::blueSteel;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_tan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::tan",0,0) result = (ofColor_< float > *)&ofColor_< float >::tan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_teal_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::teal",0,0) result = (ofColor_< float > *)&ofColor_< float >::teal;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_thistle_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::thistle",0,0) result = (ofColor_< float > *)&ofColor_< float >::thistle;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_tomato_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::tomato",0,0) result = (ofColor_< float > *)&ofColor_< float >::tomato;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_turquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::turquoise",0,0) result = (ofColor_< float > *)&ofColor_< float >::turquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_violet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::violet",0,0) result = (ofColor_< float > *)&ofColor_< float >::violet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_wheat_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::wheat",0,0) result = (ofColor_< float > *)&ofColor_< float >::wheat;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_whiteSmoke_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::whiteSmoke",0,0) result = (ofColor_< float > *)&ofColor_< float >::whiteSmoke;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_yellowGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *result = 0 ;
  SWIG_check_num_args("ofColor_< float >::yellowGreen",0,0) result = (ofColor_< float > *)&ofColor_< float >::yellowGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getR(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::getR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getR",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getR",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (float)ofColor__Sl_float_Sg__getR(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getG(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::getG",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getG",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getG",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (float)ofColor__Sl_float_Sg__getG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getB(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::getB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getB",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getB",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (float)ofColor__Sl_float_Sg__getB(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_getA(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::getA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::getA",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_getA",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (float)ofColor__Sl_float_Sg__getA(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setR(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::setR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setR",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setR",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setR",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  ofColor__Sl_float_Sg__setR(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setG(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::setG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setG",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setG",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setG",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  ofColor__Sl_float_Sg__setG(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setB(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::setB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setB",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setB",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setB",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  ofColor__Sl_float_Sg__setB(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_setA(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::setA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::setA",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::setA",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_setA",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  ofColor__Sl_float_Sg__setA(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor___tostring(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  char *result = 0 ; SWIG_check_num_args("ofColor_< float >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::__str__",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor___tostring",1,SWIGTYPE_p_ofColor_T_float_t); } 
  result = (char *)ofColor__Sl_float_Sg____str__(arg1); lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_r_set(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::r",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::r",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_r_set",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  ofColor__Sl_float_Sg__r_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_r_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::r",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_r_get",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (float)ofColor__Sl_float_Sg__r_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_g_set(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::g",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::g",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_g_set",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  ofColor__Sl_float_Sg__g_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_g_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::g",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_g_get",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (float)ofColor__Sl_float_Sg__g_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_b_set(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::b",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::b",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_b_set",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  ofColor__Sl_float_Sg__b_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_b_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::b",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_b_get",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (float)ofColor__Sl_float_Sg__b_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_a_set(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float arg2 ; SWIG_check_num_args("ofColor_< float >::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::a",1,"ofColor_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< float >::a",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_a_set",1,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  ofColor__Sl_float_Sg__a_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatColor_a_get(lua_State* L) { int SWIG_arg = 0; ofColor_< float > *arg1 = (ofColor_< float > *) 0 ;
  float result; SWIG_check_num_args("ofColor_< float >::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< float >::a",1,"ofColor_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatColor_a_get",1,SWIGTYPE_p_ofColor_T_float_t); }  result = (float)ofColor__Sl_float_Sg__a_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofFloatColor(void *obj) {
ofColor_< float > *arg1 = (ofColor_< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofFloatColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofFloatColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofFloatColor_attributes[] = {
    { "r", _wrap_ofFloatColor_r_get, _wrap_ofFloatColor_r_set },
    { "g", _wrap_ofFloatColor_g_get, _wrap_ofFloatColor_g_set },
    { "b", _wrap_ofFloatColor_b_get, _wrap_ofFloatColor_b_set },
    { "a", _wrap_ofFloatColor_a_get, _wrap_ofFloatColor_a_set },
    {0,0,0}
};
static swig_lua_method swig_ofFloatColor_methods[]= {
    { "set", _wrap_ofFloatColor_set},
    { "setHex", _wrap_ofFloatColor_setHex},
    { "setHue", _wrap_ofFloatColor_setHue},
    { "setHueAngle", _wrap_ofFloatColor_setHueAngle},
    { "setSaturation", _wrap_ofFloatColor_setSaturation},
    { "setBrightness", _wrap_ofFloatColor_setBrightness},
    { "setHsb", _wrap_ofFloatColor_setHsb},
    { "clamp", _wrap_ofFloatColor_clamp},
    { "invert", _wrap_ofFloatColor_invert},
    { "normalize", _wrap_ofFloatColor_normalize},
    { "lerp", _wrap_ofFloatColor_lerp},
    { "getClamped", _wrap_ofFloatColor_getClamped},
    { "getInverted", _wrap_ofFloatColor_getInverted},
    { "getNormalized", _wrap_ofFloatColor_getNormalized},
    { "getLerped", _wrap_ofFloatColor_getLerped},
    { "getHex", _wrap_ofFloatColor_getHex},
    { "getHue", _wrap_ofFloatColor_getHue},
    { "getHueAngle", _wrap_ofFloatColor_getHueAngle},
    { "getSaturation", _wrap_ofFloatColor_getSaturation},
    { "getBrightness", _wrap_ofFloatColor_getBrightness},
    { "getLightness", _wrap_ofFloatColor_getLightness},
    { "getHsb", _wrap_ofFloatColor_getHsb},
    { "__eq", _wrap_ofFloatColor___eq},
    { "__add", _wrap_ofFloatColor___add},
    { "__sub", _wrap_ofFloatColor___sub},
    { "__mul", _wrap_ofFloatColor___mul},
    { "__div", _wrap_ofFloatColor___div},
    { "getR", _wrap_ofFloatColor_getR},
    { "getG", _wrap_ofFloatColor_getG},
    { "getB", _wrap_ofFloatColor_getB},
    { "getA", _wrap_ofFloatColor_getA},
    { "setR", _wrap_ofFloatColor_setR},
    { "setG", _wrap_ofFloatColor_setG},
    { "setB", _wrap_ofFloatColor_setB},
    { "setA", _wrap_ofFloatColor_setA},
    { "__tostring", _wrap_ofFloatColor___tostring},
    {0,0}
};
static swig_lua_method swig_ofFloatColor_meta[] = {
    { "__eq", _wrap_ofFloatColor___eq},
    { "__add", _wrap_ofFloatColor___add},
    { "__sub", _wrap_ofFloatColor___sub},
    { "__mul", _wrap_ofFloatColor___mul},
    { "__div", _wrap_ofFloatColor___div},
    { "__tostring", _wrap_ofFloatColor___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofFloatColor_Sf_SwigStatic_attributes[] = {
    { "white", _wrap_ofFloatColor_white_get, SWIG_Lua_set_immutable },
    { "gray", _wrap_ofFloatColor_gray_get, SWIG_Lua_set_immutable },
    { "black", _wrap_ofFloatColor_black_get, SWIG_Lua_set_immutable },
    { "red", _wrap_ofFloatColor_red_get, SWIG_Lua_set_immutable },
    { "green", _wrap_ofFloatColor_green_get, SWIG_Lua_set_immutable },
    { "blue", _wrap_ofFloatColor_blue_get, SWIG_Lua_set_immutable },
    { "cyan", _wrap_ofFloatColor_cyan_get, SWIG_Lua_set_immutable },
    { "magenta", _wrap_ofFloatColor_magenta_get, SWIG_Lua_set_immutable },
    { "yellow", _wrap_ofFloatColor_yellow_get, SWIG_Lua_set_immutable },
    { "aliceBlue", _wrap_ofFloatColor_aliceBlue_get, SWIG_Lua_set_immutable },
    { "antiqueWhite", _wrap_ofFloatColor_antiqueWhite_get, SWIG_Lua_set_immutable },
    { "aqua", _wrap_ofFloatColor_aqua_get, SWIG_Lua_set_immutable },
    { "aquamarine", _wrap_ofFloatColor_aquamarine_get, SWIG_Lua_set_immutable },
    { "azure", _wrap_ofFloatColor_azure_get, SWIG_Lua_set_immutable },
    { "beige", _wrap_ofFloatColor_beige_get, SWIG_Lua_set_immutable },
    { "bisque", _wrap_ofFloatColor_bisque_get, SWIG_Lua_set_immutable },
    { "blanchedAlmond", _wrap_ofFloatColor_blanchedAlmond_get, SWIG_Lua_set_immutable },
    { "blueViolet", _wrap_ofFloatColor_blueViolet_get, SWIG_Lua_set_immutable },
    { "brown", _wrap_ofFloatColor_brown_get, SWIG_Lua_set_immutable },
    { "burlyWood", _wrap_ofFloatColor_burlyWood_get, SWIG_Lua_set_immutable },
    { "cadetBlue", _wrap_ofFloatColor_cadetBlue_get, SWIG_Lua_set_immutable },
    { "chartreuse", _wrap_ofFloatColor_chartreuse_get, SWIG_Lua_set_immutable },
    { "chocolate", _wrap_ofFloatColor_chocolate_get, SWIG_Lua_set_immutable },
    { "coral", _wrap_ofFloatColor_coral_get, SWIG_Lua_set_immutable },
    { "cornflowerBlue", _wrap_ofFloatColor_cornflowerBlue_get, SWIG_Lua_set_immutable },
    { "cornsilk", _wrap_ofFloatColor_cornsilk_get, SWIG_Lua_set_immutable },
    { "crimson", _wrap_ofFloatColor_crimson_get, SWIG_Lua_set_immutable },
    { "darkBlue", _wrap_ofFloatColor_darkBlue_get, SWIG_Lua_set_immutable },
    { "darkCyan", _wrap_ofFloatColor_darkCyan_get, SWIG_Lua_set_immutable },
    { "darkGoldenRod", _wrap_ofFloatColor_darkGoldenRod_get, SWIG_Lua_set_immutable },
    { "darkGray", _wrap_ofFloatColor_darkGray_get, SWIG_Lua_set_immutable },
    { "darkGrey", _wrap_ofFloatColor_darkGrey_get, SWIG_Lua_set_immutable },
    { "darkGreen", _wrap_ofFloatColor_darkGreen_get, SWIG_Lua_set_immutable },
    { "darkKhaki", _wrap_ofFloatColor_darkKhaki_get, SWIG_Lua_set_immutable },
    { "darkMagenta", _wrap_ofFloatColor_darkMagenta_get, SWIG_Lua_set_immutable },
    { "darkOliveGreen", _wrap_ofFloatColor_darkOliveGreen_get, SWIG_Lua_set_immutable },
    { "darkorange", _wrap_ofFloatColor_darkorange_get, SWIG_Lua_set_immutable },
    { "darkOrchid", _wrap_ofFloatColor_darkOrchid_get, SWIG_Lua_set_immutable },
    { "darkRed", _wrap_ofFloatColor_darkRed_get, SWIG_Lua_set_immutable },
    { "darkSalmon", _wrap_ofFloatColor_darkSalmon_get, SWIG_Lua_set_immutable },
    { "darkSeaGreen", _wrap_ofFloatColor_darkSeaGreen_get, SWIG_Lua_set_immutable },
    { "darkSlateBlue", _wrap_ofFloatColor_darkSlateBlue_get, SWIG_Lua_set_immutable },
    { "darkSlateGray", _wrap_ofFloatColor_darkSlateGray_get, SWIG_Lua_set_immutable },
    { "darkSlateGrey", _wrap_ofFloatColor_darkSlateGrey_get, SWIG_Lua_set_immutable },
    { "darkTurquoise", _wrap_ofFloatColor_darkTurquoise_get, SWIG_Lua_set_immutable },
    { "darkViolet", _wrap_ofFloatColor_darkViolet_get, SWIG_Lua_set_immutable },
    { "deepPink", _wrap_ofFloatColor_deepPink_get, SWIG_Lua_set_immutable },
    { "deepSkyBlue", _wrap_ofFloatColor_deepSkyBlue_get, SWIG_Lua_set_immutable },
    { "dimGray", _wrap_ofFloatColor_dimGray_get, SWIG_Lua_set_immutable },
    { "dimGrey", _wrap_ofFloatColor_dimGrey_get, SWIG_Lua_set_immutable },
    { "dodgerBlue", _wrap_ofFloatColor_dodgerBlue_get, SWIG_Lua_set_immutable },
    { "fireBrick", _wrap_ofFloatColor_fireBrick_get, SWIG_Lua_set_immutable },
    { "floralWhite", _wrap_ofFloatColor_floralWhite_get, SWIG_Lua_set_immutable },
    { "forestGreen", _wrap_ofFloatColor_forestGreen_get, SWIG_Lua_set_immutable },
    { "fuchsia", _wrap_ofFloatColor_fuchsia_get, SWIG_Lua_set_immutable },
    { "gainsboro", _wrap_ofFloatColor_gainsboro_get, SWIG_Lua_set_immutable },
    { "ghostWhite", _wrap_ofFloatColor_ghostWhite_get, SWIG_Lua_set_immutable },
    { "gold", _wrap_ofFloatColor_gold_get, SWIG_Lua_set_immutable },
    { "goldenRod", _wrap_ofFloatColor_goldenRod_get, SWIG_Lua_set_immutable },
    { "grey", _wrap_ofFloatColor_grey_get, SWIG_Lua_set_immutable },
    { "greenYellow", _wrap_ofFloatColor_greenYellow_get, SWIG_Lua_set_immutable },
    { "honeyDew", _wrap_ofFloatColor_honeyDew_get, SWIG_Lua_set_immutable },
    { "hotPink", _wrap_ofFloatColor_hotPink_get, SWIG_Lua_set_immutable },
    { "indianRed", _wrap_ofFloatColor_indianRed_get, SWIG_Lua_set_immutable },
    { "indigo", _wrap_ofFloatColor_indigo_get, SWIG_Lua_set_immutable },
    { "ivory", _wrap_ofFloatColor_ivory_get, SWIG_Lua_set_immutable },
    { "khaki", _wrap_ofFloatColor_khaki_get, SWIG_Lua_set_immutable },
    { "lavender", _wrap_ofFloatColor_lavender_get, SWIG_Lua_set_immutable },
    { "lavenderBlush", _wrap_ofFloatColor_lavenderBlush_get, SWIG_Lua_set_immutable },
    { "lawnGreen", _wrap_ofFloatColor_lawnGreen_get, SWIG_Lua_set_immutable },
    { "lemonChiffon", _wrap_ofFloatColor_lemonChiffon_get, SWIG_Lua_set_immutable },
    { "lightBlue", _wrap_ofFloatColor_lightBlue_get, SWIG_Lua_set_immutable },
    { "lightCoral", _wrap_ofFloatColor_lightCoral_get, SWIG_Lua_set_immutable },
    { "lightCyan", _wrap_ofFloatColor_lightCyan_get, SWIG_Lua_set_immutable },
    { "lightGoldenRodYellow", _wrap_ofFloatColor_lightGoldenRodYellow_get, SWIG_Lua_set_immutable },
    { "lightGray", _wrap_ofFloatColor_lightGray_get, SWIG_Lua_set_immutable },
    { "lightGrey", _wrap_ofFloatColor_lightGrey_get, SWIG_Lua_set_immutable },
    { "lightGreen", _wrap_ofFloatColor_lightGreen_get, SWIG_Lua_set_immutable },
    { "lightPink", _wrap_ofFloatColor_lightPink_get, SWIG_Lua_set_immutable },
    { "lightSalmon", _wrap_ofFloatColor_lightSalmon_get, SWIG_Lua_set_immutable },
    { "lightSeaGreen", _wrap_ofFloatColor_lightSeaGreen_get, SWIG_Lua_set_immutable },
    { "lightSkyBlue", _wrap_ofFloatColor_lightSkyBlue_get, SWIG_Lua_set_immutable },
    { "lightSlateGray", _wrap_ofFloatColor_lightSlateGray_get, SWIG_Lua_set_immutable },
    { "lightSlateGrey", _wrap_ofFloatColor_lightSlateGrey_get, SWIG_Lua_set_immutable },
    { "lightSteelBlue", _wrap_ofFloatColor_lightSteelBlue_get, SWIG_Lua_set_immutable },
    { "lightYellow", _wrap_ofFloatColor_lightYellow_get, SWIG_Lua_set_immutable },
    { "lime", _wrap_ofFloatColor_lime_get, SWIG_Lua_set_immutable },
    { "limeGreen", _wrap_ofFloatColor_limeGreen_get, SWIG_Lua_set_immutable },
    { "linen", _wrap_ofFloatColor_linen_get, SWIG_Lua_set_immutable },
    { "maroon", _wrap_ofFloatColor_maroon_get, SWIG_Lua_set_immutable },
    { "mediumAquaMarine", _wrap_ofFloatColor_mediumAquaMarine_get, SWIG_Lua_set_immutable },
    { "mediumBlue", _wrap_ofFloatColor_mediumBlue_get, SWIG_Lua_set_immutable },
    { "mediumOrchid", _wrap_ofFloatColor_mediumOrchid_get, SWIG_Lua_set_immutable },
    { "mediumPurple", _wrap_ofFloatColor_mediumPurple_get, SWIG_Lua_set_immutable },
    { "mediumSeaGreen", _wrap_ofFloatColor_mediumSeaGreen_get, SWIG_Lua_set_immutable },
    { "mediumSlateBlue", _wrap_ofFloatColor_mediumSlateBlue_get, SWIG_Lua_set_immutable },
    { "mediumSpringGreen", _wrap_ofFloatColor_mediumSpringGreen_get, SWIG_Lua_set_immutable },
    { "mediumTurquoise", _wrap_ofFloatColor_mediumTurquoise_get, SWIG_Lua_set_immutable },
    { "mediumVioletRed", _wrap_ofFloatColor_mediumVioletRed_get, SWIG_Lua_set_immutable },
    { "midnightBlue", _wrap_ofFloatColor_midnightBlue_get, SWIG_Lua_set_immutable },
    { "mintCream", _wrap_ofFloatColor_mintCream_get, SWIG_Lua_set_immutable },
    { "mistyRose", _wrap_ofFloatColor_mistyRose_get, SWIG_Lua_set_immutable },
    { "moccasin", _wrap_ofFloatColor_moccasin_get, SWIG_Lua_set_immutable },
    { "navajoWhite", _wrap_ofFloatColor_navajoWhite_get, SWIG_Lua_set_immutable },
    { "navy", _wrap_ofFloatColor_navy_get, SWIG_Lua_set_immutable },
    { "oldLace", _wrap_ofFloatColor_oldLace_get, SWIG_Lua_set_immutable },
    { "olive", _wrap_ofFloatColor_olive_get, SWIG_Lua_set_immutable },
    { "oliveDrab", _wrap_ofFloatColor_oliveDrab_get, SWIG_Lua_set_immutable },
    { "orange", _wrap_ofFloatColor_orange_get, SWIG_Lua_set_immutable },
    { "orangeRed", _wrap_ofFloatColor_orangeRed_get, SWIG_Lua_set_immutable },
    { "orchid", _wrap_ofFloatColor_orchid_get, SWIG_Lua_set_immutable },
    { "paleGoldenRod", _wrap_ofFloatColor_paleGoldenRod_get, SWIG_Lua_set_immutable },
    { "paleGreen", _wrap_ofFloatColor_paleGreen_get, SWIG_Lua_set_immutable },
    { "paleTurquoise", _wrap_ofFloatColor_paleTurquoise_get, SWIG_Lua_set_immutable },
    { "paleVioletRed", _wrap_ofFloatColor_paleVioletRed_get, SWIG_Lua_set_immutable },
    { "papayaWhip", _wrap_ofFloatColor_papayaWhip_get, SWIG_Lua_set_immutable },
    { "peachPuff", _wrap_ofFloatColor_peachPuff_get, SWIG_Lua_set_immutable },
    { "peru", _wrap_ofFloatColor_peru_get, SWIG_Lua_set_immutable },
    { "pink", _wrap_ofFloatColor_pink_get, SWIG_Lua_set_immutable },
    { "plum", _wrap_ofFloatColor_plum_get, SWIG_Lua_set_immutable },
    { "powderBlue", _wrap_ofFloatColor_powderBlue_get, SWIG_Lua_set_immutable },
    { "purple", _wrap_ofFloatColor_purple_get, SWIG_Lua_set_immutable },
    { "rosyBrown", _wrap_ofFloatColor_rosyBrown_get, SWIG_Lua_set_immutable },
    { "royalBlue", _wrap_ofFloatColor_royalBlue_get, SWIG_Lua_set_immutable },
    { "saddleBrown", _wrap_ofFloatColor_saddleBrown_get, SWIG_Lua_set_immutable },
    { "salmon", _wrap_ofFloatColor_salmon_get, SWIG_Lua_set_immutable },
    { "sandyBrown", _wrap_ofFloatColor_sandyBrown_get, SWIG_Lua_set_immutable },
    { "seaGreen", _wrap_ofFloatColor_seaGreen_get, SWIG_Lua_set_immutable },
    { "seaShell", _wrap_ofFloatColor_seaShell_get, SWIG_Lua_set_immutable },
    { "sienna", _wrap_ofFloatColor_sienna_get, SWIG_Lua_set_immutable },
    { "silver", _wrap_ofFloatColor_silver_get, SWIG_Lua_set_immutable },
    { "skyBlue", _wrap_ofFloatColor_skyBlue_get, SWIG_Lua_set_immutable },
    { "slateBlue", _wrap_ofFloatColor_slateBlue_get, SWIG_Lua_set_immutable },
    { "slateGray", _wrap_ofFloatColor_slateGray_get, SWIG_Lua_set_immutable },
    { "slateGrey", _wrap_ofFloatColor_slateGrey_get, SWIG_Lua_set_immutable },
    { "snow", _wrap_ofFloatColor_snow_get, SWIG_Lua_set_immutable },
    { "springGreen", _wrap_ofFloatColor_springGreen_get, SWIG_Lua_set_immutable },
    { "steelBlue", _wrap_ofFloatColor_steelBlue_get, SWIG_Lua_set_immutable },
    { "blueSteel", _wrap_ofFloatColor_blueSteel_get, SWIG_Lua_set_immutable },
    { "tan", _wrap_ofFloatColor_tan_get, SWIG_Lua_set_immutable },
    { "teal", _wrap_ofFloatColor_teal_get, SWIG_Lua_set_immutable },
    { "thistle", _wrap_ofFloatColor_thistle_get, SWIG_Lua_set_immutable },
    { "tomato", _wrap_ofFloatColor_tomato_get, SWIG_Lua_set_immutable },
    { "turquoise", _wrap_ofFloatColor_turquoise_get, SWIG_Lua_set_immutable },
    { "violet", _wrap_ofFloatColor_violet_get, SWIG_Lua_set_immutable },
    { "wheat", _wrap_ofFloatColor_wheat_get, SWIG_Lua_set_immutable },
    { "whiteSmoke", _wrap_ofFloatColor_whiteSmoke_get, SWIG_Lua_set_immutable },
    { "yellowGreen", _wrap_ofFloatColor_yellowGreen_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_ofFloatColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofFloatColor_Sf_SwigStatic_methods[]= {
    { "fromHsb", _wrap_ofFloatColor_fromHsb},
    { "fromHex", _wrap_ofFloatColor_fromHex},
    { "limit", _wrap_ofFloatColor_limit},
    {0,0}
};
static swig_lua_class* swig_ofFloatColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofFloatColor_Sf_SwigStatic = {
    "ofFloatColor",
    swig_ofFloatColor_Sf_SwigStatic_methods,
    swig_ofFloatColor_Sf_SwigStatic_attributes,
    swig_ofFloatColor_Sf_SwigStatic_constants,
    swig_ofFloatColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofFloatColor_bases[] = {0};
static const char *swig_ofFloatColor_base_names[] = {0};
static swig_lua_class _wrap_class_ofFloatColor = { "ofFloatColor", "ofFloatColor", &SWIGTYPE_p_ofColor_T_float_t,_proxy__wrap_new_ofFloatColor, swig_delete_ofFloatColor, swig_ofFloatColor_methods, swig_ofFloatColor_attributes, &swig_ofFloatColor_Sf_SwigStatic, swig_ofFloatColor_meta, swig_ofFloatColor_bases, swig_ofFloatColor_base_names };

static int _wrap_new_ofShortColor__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::ofColor_",0,0)
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortColor__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofColor_< unsigned short > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned short >::ofColor_",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortColor__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofColor_< unsigned short > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned short >::ofColor_",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortColor__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  ofColor_< unsigned short > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned short >::ofColor_",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortColor__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  ofColor_< unsigned short > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned short >::ofColor_",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortColor__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *arg1 = 0 ; float arg2 ;
  ofColor_< unsigned short > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned short >::ofColor_",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",1,"ofColor_< unsigned short > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::ofColor_",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("new_ofShortColor",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofColor_< unsigned short > *)new ofColor_< unsigned short >((ofColor_< unsigned short > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofShortColor__SWIG_0(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_new_ofShortColor__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ofShortColor__SWIG_5(L);}  }  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_ofShortColor__SWIG_3(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_ofShortColor__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofShortColor__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofShortColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned short >::ofColor_()\n" "    ofColor_< unsigned short >::ofColor_(float,float,float,float)\n"
  "    ofColor_< unsigned short >::ofColor_(float,float,float)\n" "    ofColor_< unsigned short >::ofColor_(float,float)\n"
  "    ofColor_< unsigned short >::ofColor_(float)\n"
  "    ofColor_< unsigned short >::ofColor_(ofColor_< unsigned short > const &,float)\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor_fromHsb__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::fromHsb",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::fromHsb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::fromHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::fromHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned short >::fromHsb",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3,arg4); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_fromHsb__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::fromHsb",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::fromHsb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::fromHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::fromHsb",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_fromHsb(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofShortColor_fromHsb__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShortColor_fromHsb__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor_fromHsb'\n"
  "  Possible C/C++ prototypes are:\n" "    ofColor_< unsigned short >::fromHsb(float,float,float,float)\n"
  "    ofColor_< unsigned short >::fromHsb(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor_fromHex__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; float arg2 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::fromHex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::fromHex",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::fromHex",2,"float"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1,arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_fromHex__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; ofColor_< unsigned short > result;
  SWIG_check_num_args("ofColor_< unsigned short >::fromHex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::fromHex",1,"int"); arg1 = (int)lua_tonumber(L, 1);
  result = ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_fromHex(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofShortColor_fromHex__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortColor_fromHex__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor_fromHex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofColor_< unsigned short >::fromHex(int,float)\n"
  "    ofColor_< unsigned short >::fromHex(int)\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofColor_< unsigned short >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::set",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned short >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofColor_< unsigned short >::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofColor_< unsigned short >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::set",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned short >::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_set__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofColor_< unsigned short >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::set",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortColor_set__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::set",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_set__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::set",1,"ofColor_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::set",2,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_set",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  (arg1)->set((ofColor_< unsigned short > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortColor_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortColor_set__SWIG_4(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortColor_set__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortColor_set__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShortColor_set__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofShortColor_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned short >::set(float,float,float,float)\n" "    ofColor_< unsigned short >::set(float,float,float)\n"
  "    ofColor_< unsigned short >::set(float,float)\n" "    ofColor_< unsigned short >::set(float)\n"
  "    ofColor_< unsigned short >::set(ofColor_< unsigned short > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor_setHex__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; int arg2 ; float arg3 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setHex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setHex",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setHex",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::setHex",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setHex",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setHex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortColor_setHex__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setHex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setHex",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setHex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setHex",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setHex(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortColor_setHex__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortColor_setHex__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor_setHex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofColor_< unsigned short >::setHex(int,float)\n"
  "    ofColor_< unsigned short >::setHex(int)\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor_setHue(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setHue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setHue",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setHue",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setHue",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHue(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setHueAngle(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setHueAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setHueAngle",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setHueAngle",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setHueAngle",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHueAngle(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setSaturation(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setSaturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setSaturation",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setSaturation",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setSaturation",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSaturation(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setBrightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setBrightness",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setBrightness",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setBrightness",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setBrightness(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setHsb__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setHsb",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setHsb",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setHsb(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setHsb__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setHsb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned short >::setHsb",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setHsb",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setHsb(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setHsb(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShortColor_setHsb__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofShortColor_setHsb__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor_setHsb'\n"
  "  Possible C/C++ prototypes are:\n" "    ofColor_< unsigned short >::setHsb(float,float,float,float)\n"
  "    ofColor_< unsigned short >::setHsb(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor_clamp(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::clamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::clamp",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_clamp",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (ofColor_< unsigned short > *) &(arg1)->clamp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_invert(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::invert",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_invert",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (ofColor_< unsigned short > *) &(arg1)->invert();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_normalize(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::normalize",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_normalize",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (ofColor_< unsigned short > *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lerp(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ; float arg3 ;
  ofColor_< unsigned short > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned short >::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::lerp",1,"ofColor_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::lerp",2,"ofColor_< unsigned short > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::lerp",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_lerp",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_lerp",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofColor_< unsigned short > *) &(arg1)->lerp((ofColor_< unsigned short > const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getClamped(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > result;
  SWIG_check_num_args("ofColor_< unsigned short >::getClamped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getClamped",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getClamped",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = ((ofColor_< unsigned short > const *)arg1)->getClamped(); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getInverted(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > result;
  SWIG_check_num_args("ofColor_< unsigned short >::getInverted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getInverted",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getInverted",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = ((ofColor_< unsigned short > const *)arg1)->getInverted(); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getNormalized(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > result;
  SWIG_check_num_args("ofColor_< unsigned short >::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getNormalized",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getNormalized",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = ((ofColor_< unsigned short > const *)arg1)->getNormalized(); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getLerped(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ; float arg3 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::getLerped",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getLerped",1,"ofColor_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::getLerped",2,"ofColor_< unsigned short > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::getLerped",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getLerped",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getLerped",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofColor_< unsigned short > const *)arg1)->getLerped((ofColor_< unsigned short > const &)*arg2,arg3); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getHex(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofColor_< unsigned short >::getHex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getHex",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getHex",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (int)((ofColor_< unsigned short > const *)arg1)->getHex(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getHue(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned short >::getHue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getHue",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getHue",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (float)((ofColor_< unsigned short > const *)arg1)->getHue(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getHueAngle(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned short >::getHueAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getHueAngle",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getHueAngle",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (float)((ofColor_< unsigned short > const *)arg1)->getHueAngle(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getSaturation(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned short >::getSaturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getSaturation",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getSaturation",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (float)((ofColor_< unsigned short > const *)arg1)->getSaturation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getBrightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned short >::getBrightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getBrightness",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getBrightness",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (float)((ofColor_< unsigned short > const *)arg1)->getBrightness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getLightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned short >::getLightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getLightness",1,"ofColor_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getLightness",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (float)((ofColor_< unsigned short > const *)arg1)->getLightness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getHsb(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::getHsb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getHsb",1,"ofColor_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::getHsb",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofColor_< unsigned short >::getHsb",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofColor_< unsigned short >::getHsb",4,"float &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getHsb",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShortColor_getHsb",2,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShortColor_getHsb",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShortColor_getHsb",4,SWIGTYPE_p_float); } 
  ((ofColor_< unsigned short > const *)arg1)->getHsb(*arg2,*arg3,*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortColor_limit(lua_State* L) { int SWIG_arg = 0; float result;
  SWIG_check_num_args("ofColor_< unsigned short >::limit",0,0)
  result = (float)ofColor_< unsigned short >::SWIGTEMPLATEDISAMBIGUATOR limit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___eq(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofColor_< unsigned short >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator ==",1,"ofColor_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator ==",2,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___eq",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___eq",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (bool)((ofColor_< unsigned short > const *)arg1)->operator ==((ofColor_< unsigned short > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___add__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator +",1,"ofColor_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator +",2,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___add",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___add",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = ((ofColor_< unsigned short > const *)arg1)->operator +((ofColor_< unsigned short > const &)*arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___add__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator +",1,"ofColor_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator +",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___add",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned short > const *)arg1)->operator +((float const &)*arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortColor___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortColor___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned short >::operator +(ofColor_< unsigned short > const &) const\n"
  "    ofColor_< unsigned short >::operator +(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator -",1,"ofColor_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator -",2,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___sub",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___sub",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = ((ofColor_< unsigned short > const *)arg1)->operator -((ofColor_< unsigned short > const &)*arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator -",1,"ofColor_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator -",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___sub",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned short > const *)arg1)->operator -((float const &)*arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortColor___sub__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortColor___sub__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned short >::operator -(ofColor_< unsigned short > const &) const\n"
  "    ofColor_< unsigned short >::operator -(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator *",1,"ofColor_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator *",2,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___mul",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___mul",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = ((ofColor_< unsigned short > const *)arg1)->operator *((ofColor_< unsigned short > const &)*arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator *",1,"ofColor_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator *",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___mul",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned short > const *)arg1)->operator *((float const &)*arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortColor___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortColor___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned short >::operator *(ofColor_< unsigned short > const &) const\n"
  "    ofColor_< unsigned short >::operator *(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor___div__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator /",1,"ofColor_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator /",2,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___div",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___div",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = ((ofColor_< unsigned short > const *)arg1)->operator /((ofColor_< unsigned short > const &)*arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___div__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofColor_< unsigned short >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::operator /",1,"ofColor_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::operator /",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___div",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned short > const *)arg1)->operator /((float const &)*arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortColor___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortColor___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortColor___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned short >::operator /(ofColor_< unsigned short > const &) const\n"
  "    ofColor_< unsigned short >::operator /(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShortColor_white_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::white",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::white;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_gray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::gray",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::gray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_black_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::black",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::black;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_red_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::red",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::red;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_green_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::green",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::green;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_blue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::blue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::blue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_cyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::cyan",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::cyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_magenta_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::magenta",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::magenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_yellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::yellow",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::yellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_aliceBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::aliceBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::aliceBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_antiqueWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::antiqueWhite",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::antiqueWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_aqua_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::aqua",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::aqua;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_aquamarine_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::aquamarine",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::aquamarine;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_azure_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::azure",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::azure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_beige_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::beige",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::beige;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_bisque_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::bisque",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::bisque;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_blanchedAlmond_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::blanchedAlmond",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::blanchedAlmond;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_blueViolet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::blueViolet",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::blueViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_brown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::brown",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::brown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_burlyWood_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::burlyWood",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::burlyWood;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_cadetBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::cadetBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::cadetBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_chartreuse_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::chartreuse",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::chartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_chocolate_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::chocolate",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::chocolate;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_coral_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::coral",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::coral;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_cornflowerBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::cornflowerBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::cornflowerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_cornsilk_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::cornsilk",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::cornsilk;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_crimson_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::crimson",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::crimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkCyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkCyan",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkGoldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkGoldenRod",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkGoldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkGray",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkGrey",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkKhaki_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkKhaki",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkKhaki;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkMagenta_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkMagenta",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkOliveGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkOliveGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkOliveGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkorange_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkorange",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkorange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkOrchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkOrchid",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkOrchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkRed",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkSalmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkSalmon",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSalmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkSeaGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkSlateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkSlateBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSlateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkSlateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkSlateGray",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSlateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkSlateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkSlateGrey",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkSlateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkTurquoise",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_darkViolet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::darkViolet",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::darkViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_deepPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::deepPink",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::deepPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_deepSkyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::deepSkyBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::deepSkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_dimGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::dimGray",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::dimGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_dimGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::dimGrey",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::dimGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_dodgerBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::dodgerBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::dodgerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_fireBrick_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::fireBrick",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::fireBrick;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_floralWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::floralWhite",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::floralWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_forestGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::forestGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::forestGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_fuchsia_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::fuchsia",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::fuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_gainsboro_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::gainsboro",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::gainsboro;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_ghostWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::ghostWhite",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::ghostWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_gold_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::gold",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::gold;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_goldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::goldenRod",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::goldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_grey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::grey",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::grey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_greenYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::greenYellow",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::greenYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_honeyDew_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::honeyDew",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::honeyDew;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_hotPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::hotPink",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::hotPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_indianRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::indianRed",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::indianRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_indigo_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::indigo",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::indigo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_ivory_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::ivory",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::ivory;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_khaki_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::khaki",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::khaki;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lavender_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lavender",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lavender;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lavenderBlush_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lavenderBlush",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lavenderBlush;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lawnGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lawnGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lawnGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lemonChiffon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lemonChiffon",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lemonChiffon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightCoral_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightCoral",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightCoral;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightCyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightCyan",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightGoldenRodYellow_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned short >::lightGoldenRodYellow",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightGoldenRodYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightGray",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightGrey",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightPink",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightSalmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightSalmon",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSalmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightSeaGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightSkyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightSkyBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightSlateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightSlateGray",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSlateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightSlateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightSlateGrey",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSlateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightSteelBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightSteelBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightSteelBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lightYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lightYellow",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lightYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_lime_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::lime",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::lime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_limeGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::limeGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::limeGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_linen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::linen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::linen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_maroon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::maroon",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::maroon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumAquaMarine_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumAquaMarine",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumAquaMarine;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumOrchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumOrchid",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumOrchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumPurple_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumPurple",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumSeaGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumSlateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumSlateBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumSlateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumSpringGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumSpringGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumSpringGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumTurquoise",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mediumVioletRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mediumVioletRed",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mediumVioletRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_midnightBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::midnightBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::midnightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mintCream_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mintCream",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mintCream;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_mistyRose_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::mistyRose",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::mistyRose;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_moccasin_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::moccasin",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::moccasin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_navajoWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::navajoWhite",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::navajoWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_navy_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::navy",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::navy;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_oldLace_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::oldLace",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::oldLace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_olive_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::olive",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::olive;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_oliveDrab_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::oliveDrab",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::oliveDrab;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_orange_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::orange",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::orange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_orangeRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::orangeRed",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::orangeRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_orchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::orchid",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::orchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_paleGoldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::paleGoldenRod",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::paleGoldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_paleGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::paleGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::paleGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_paleTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::paleTurquoise",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::paleTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_paleVioletRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::paleVioletRed",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::paleVioletRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_papayaWhip_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::papayaWhip",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::papayaWhip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_peachPuff_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::peachPuff",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::peachPuff;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_peru_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::peru",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::peru;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_pink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::pink",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::pink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_plum_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::plum",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::plum;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_powderBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::powderBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::powderBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_purple_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::purple",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::purple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_rosyBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::rosyBrown",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::rosyBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_royalBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::royalBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::royalBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_saddleBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::saddleBrown",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::saddleBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_salmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::salmon",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::salmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_sandyBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::sandyBrown",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::sandyBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_seaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::seaGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::seaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_seaShell_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::seaShell",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::seaShell;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_sienna_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::sienna",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::sienna;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_silver_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::silver",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::silver;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_skyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::skyBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::skyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_slateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::slateBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::slateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_slateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::slateGray",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::slateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_slateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::slateGrey",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::slateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_snow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::snow",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::snow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_springGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::springGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::springGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_steelBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::steelBlue",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::steelBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_blueSteel_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::blueSteel",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::blueSteel;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_tan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::tan",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::tan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_teal_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::teal",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::teal;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_thistle_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::thistle",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::thistle;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_tomato_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::tomato",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::tomato;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_turquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::turquoise",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::turquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_violet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::violet",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::violet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_wheat_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::wheat",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::wheat;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_whiteSmoke_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::whiteSmoke",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::whiteSmoke;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_yellowGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::yellowGreen",0,0)
  result = (ofColor_< unsigned short > *)&ofColor_< unsigned short >::yellowGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_short_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getR(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short result;
  SWIG_check_num_args("ofColor_< unsigned short >::getR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getR",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getR",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (unsigned short)ofColor__Sl_unsigned_SS_short_Sg__getR(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getG(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short result;
  SWIG_check_num_args("ofColor_< unsigned short >::getG",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getG",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getG",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (unsigned short)ofColor__Sl_unsigned_SS_short_Sg__getG(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getB(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short result;
  SWIG_check_num_args("ofColor_< unsigned short >::getB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getB",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getB",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (unsigned short)ofColor__Sl_unsigned_SS_short_Sg__getB(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_getA(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short result;
  SWIG_check_num_args("ofColor_< unsigned short >::getA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::getA",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_getA",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (unsigned short)ofColor__Sl_unsigned_SS_short_Sg__getA(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setR(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setR",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setR",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setR",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_short_Sg__setR(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setG(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setG",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setG",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setG",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_short_Sg__setG(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setB(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setB",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setB",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setB",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_short_Sg__setB(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_setA(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::setA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::setA",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::setA",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_setA",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_short_Sg__setA(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor___tostring(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; char *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned short >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::__str__",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor___tostring",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (char *)ofColor__Sl_unsigned_SS_short_Sg____str__(arg1); lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_r_set(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::r",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::r",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_r_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_short_Sg__r_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_r_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short result;
  SWIG_check_num_args("ofColor_< unsigned short >::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::r",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_r_get",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (unsigned short)ofColor__Sl_unsigned_SS_short_Sg__r_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_g_set(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::g",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::g",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_g_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_short_Sg__g_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_g_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short result;
  SWIG_check_num_args("ofColor_< unsigned short >::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::g",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_g_get",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (unsigned short)ofColor__Sl_unsigned_SS_short_Sg__g_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_b_set(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::b",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::b",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_b_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_short_Sg__b_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_b_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short result;
  SWIG_check_num_args("ofColor_< unsigned short >::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::b",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_b_get",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (unsigned short)ofColor__Sl_unsigned_SS_short_Sg__b_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_a_set(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofColor_< unsigned short >::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::a",1,"ofColor_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned short >::a",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_a_set",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_short_Sg__a_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortColor_a_get(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) 0 ; unsigned short result;
  SWIG_check_num_args("ofColor_< unsigned short >::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned short >::a",1,"ofColor_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortColor_a_get",1,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  result = (unsigned short)ofColor__Sl_unsigned_SS_short_Sg__a_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofShortColor(void *obj) {
ofColor_< unsigned short > *arg1 = (ofColor_< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofShortColor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofShortColor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofShortColor_attributes[] = {
    { "r", _wrap_ofShortColor_r_get, _wrap_ofShortColor_r_set },
    { "g", _wrap_ofShortColor_g_get, _wrap_ofShortColor_g_set },
    { "b", _wrap_ofShortColor_b_get, _wrap_ofShortColor_b_set },
    { "a", _wrap_ofShortColor_a_get, _wrap_ofShortColor_a_set },
    {0,0,0}
};
static swig_lua_method swig_ofShortColor_methods[]= {
    { "set", _wrap_ofShortColor_set},
    { "setHex", _wrap_ofShortColor_setHex},
    { "setHue", _wrap_ofShortColor_setHue},
    { "setHueAngle", _wrap_ofShortColor_setHueAngle},
    { "setSaturation", _wrap_ofShortColor_setSaturation},
    { "setBrightness", _wrap_ofShortColor_setBrightness},
    { "setHsb", _wrap_ofShortColor_setHsb},
    { "clamp", _wrap_ofShortColor_clamp},
    { "invert", _wrap_ofShortColor_invert},
    { "normalize", _wrap_ofShortColor_normalize},
    { "lerp", _wrap_ofShortColor_lerp},
    { "getClamped", _wrap_ofShortColor_getClamped},
    { "getInverted", _wrap_ofShortColor_getInverted},
    { "getNormalized", _wrap_ofShortColor_getNormalized},
    { "getLerped", _wrap_ofShortColor_getLerped},
    { "getHex", _wrap_ofShortColor_getHex},
    { "getHue", _wrap_ofShortColor_getHue},
    { "getHueAngle", _wrap_ofShortColor_getHueAngle},
    { "getSaturation", _wrap_ofShortColor_getSaturation},
    { "getBrightness", _wrap_ofShortColor_getBrightness},
    { "getLightness", _wrap_ofShortColor_getLightness},
    { "getHsb", _wrap_ofShortColor_getHsb},
    { "__eq", _wrap_ofShortColor___eq},
    { "__add", _wrap_ofShortColor___add},
    { "__sub", _wrap_ofShortColor___sub},
    { "__mul", _wrap_ofShortColor___mul},
    { "__div", _wrap_ofShortColor___div},
    { "getR", _wrap_ofShortColor_getR},
    { "getG", _wrap_ofShortColor_getG},
    { "getB", _wrap_ofShortColor_getB},
    { "getA", _wrap_ofShortColor_getA},
    { "setR", _wrap_ofShortColor_setR},
    { "setG", _wrap_ofShortColor_setG},
    { "setB", _wrap_ofShortColor_setB},
    { "setA", _wrap_ofShortColor_setA},
    { "__tostring", _wrap_ofShortColor___tostring},
    {0,0}
};
static swig_lua_method swig_ofShortColor_meta[] = {
    { "__eq", _wrap_ofShortColor___eq},
    { "__add", _wrap_ofShortColor___add},
    { "__sub", _wrap_ofShortColor___sub},
    { "__mul", _wrap_ofShortColor___mul},
    { "__div", _wrap_ofShortColor___div},
    { "__tostring", _wrap_ofShortColor___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofShortColor_Sf_SwigStatic_attributes[] = {
    { "white", _wrap_ofShortColor_white_get, SWIG_Lua_set_immutable },
    { "gray", _wrap_ofShortColor_gray_get, SWIG_Lua_set_immutable },
    { "black", _wrap_ofShortColor_black_get, SWIG_Lua_set_immutable },
    { "red", _wrap_ofShortColor_red_get, SWIG_Lua_set_immutable },
    { "green", _wrap_ofShortColor_green_get, SWIG_Lua_set_immutable },
    { "blue", _wrap_ofShortColor_blue_get, SWIG_Lua_set_immutable },
    { "cyan", _wrap_ofShortColor_cyan_get, SWIG_Lua_set_immutable },
    { "magenta", _wrap_ofShortColor_magenta_get, SWIG_Lua_set_immutable },
    { "yellow", _wrap_ofShortColor_yellow_get, SWIG_Lua_set_immutable },
    { "aliceBlue", _wrap_ofShortColor_aliceBlue_get, SWIG_Lua_set_immutable },
    { "antiqueWhite", _wrap_ofShortColor_antiqueWhite_get, SWIG_Lua_set_immutable },
    { "aqua", _wrap_ofShortColor_aqua_get, SWIG_Lua_set_immutable },
    { "aquamarine", _wrap_ofShortColor_aquamarine_get, SWIG_Lua_set_immutable },
    { "azure", _wrap_ofShortColor_azure_get, SWIG_Lua_set_immutable },
    { "beige", _wrap_ofShortColor_beige_get, SWIG_Lua_set_immutable },
    { "bisque", _wrap_ofShortColor_bisque_get, SWIG_Lua_set_immutable },
    { "blanchedAlmond", _wrap_ofShortColor_blanchedAlmond_get, SWIG_Lua_set_immutable },
    { "blueViolet", _wrap_ofShortColor_blueViolet_get, SWIG_Lua_set_immutable },
    { "brown", _wrap_ofShortColor_brown_get, SWIG_Lua_set_immutable },
    { "burlyWood", _wrap_ofShortColor_burlyWood_get, SWIG_Lua_set_immutable },
    { "cadetBlue", _wrap_ofShortColor_cadetBlue_get, SWIG_Lua_set_immutable },
    { "chartreuse", _wrap_ofShortColor_chartreuse_get, SWIG_Lua_set_immutable },
    { "chocolate", _wrap_ofShortColor_chocolate_get, SWIG_Lua_set_immutable },
    { "coral", _wrap_ofShortColor_coral_get, SWIG_Lua_set_immutable },
    { "cornflowerBlue", _wrap_ofShortColor_cornflowerBlue_get, SWIG_Lua_set_immutable },
    { "cornsilk", _wrap_ofShortColor_cornsilk_get, SWIG_Lua_set_immutable },
    { "crimson", _wrap_ofShortColor_crimson_get, SWIG_Lua_set_immutable },
    { "darkBlue", _wrap_ofShortColor_darkBlue_get, SWIG_Lua_set_immutable },
    { "darkCyan", _wrap_ofShortColor_darkCyan_get, SWIG_Lua_set_immutable },
    { "darkGoldenRod", _wrap_ofShortColor_darkGoldenRod_get, SWIG_Lua_set_immutable },
    { "darkGray", _wrap_ofShortColor_darkGray_get, SWIG_Lua_set_immutable },
    { "darkGrey", _wrap_ofShortColor_darkGrey_get, SWIG_Lua_set_immutable },
    { "darkGreen", _wrap_ofShortColor_darkGreen_get, SWIG_Lua_set_immutable },
    { "darkKhaki", _wrap_ofShortColor_darkKhaki_get, SWIG_Lua_set_immutable },
    { "darkMagenta", _wrap_ofShortColor_darkMagenta_get, SWIG_Lua_set_immutable },
    { "darkOliveGreen", _wrap_ofShortColor_darkOliveGreen_get, SWIG_Lua_set_immutable },
    { "darkorange", _wrap_ofShortColor_darkorange_get, SWIG_Lua_set_immutable },
    { "darkOrchid", _wrap_ofShortColor_darkOrchid_get, SWIG_Lua_set_immutable },
    { "darkRed", _wrap_ofShortColor_darkRed_get, SWIG_Lua_set_immutable },
    { "darkSalmon", _wrap_ofShortColor_darkSalmon_get, SWIG_Lua_set_immutable },
    { "darkSeaGreen", _wrap_ofShortColor_darkSeaGreen_get, SWIG_Lua_set_immutable },
    { "darkSlateBlue", _wrap_ofShortColor_darkSlateBlue_get, SWIG_Lua_set_immutable },
    { "darkSlateGray", _wrap_ofShortColor_darkSlateGray_get, SWIG_Lua_set_immutable },
    { "darkSlateGrey", _wrap_ofShortColor_darkSlateGrey_get, SWIG_Lua_set_immutable },
    { "darkTurquoise", _wrap_ofShortColor_darkTurquoise_get, SWIG_Lua_set_immutable },
    { "darkViolet", _wrap_ofShortColor_darkViolet_get, SWIG_Lua_set_immutable },
    { "deepPink", _wrap_ofShortColor_deepPink_get, SWIG_Lua_set_immutable },
    { "deepSkyBlue", _wrap_ofShortColor_deepSkyBlue_get, SWIG_Lua_set_immutable },
    { "dimGray", _wrap_ofShortColor_dimGray_get, SWIG_Lua_set_immutable },
    { "dimGrey", _wrap_ofShortColor_dimGrey_get, SWIG_Lua_set_immutable },
    { "dodgerBlue", _wrap_ofShortColor_dodgerBlue_get, SWIG_Lua_set_immutable },
    { "fireBrick", _wrap_ofShortColor_fireBrick_get, SWIG_Lua_set_immutable },
    { "floralWhite", _wrap_ofShortColor_floralWhite_get, SWIG_Lua_set_immutable },
    { "forestGreen", _wrap_ofShortColor_forestGreen_get, SWIG_Lua_set_immutable },
    { "fuchsia", _wrap_ofShortColor_fuchsia_get, SWIG_Lua_set_immutable },
    { "gainsboro", _wrap_ofShortColor_gainsboro_get, SWIG_Lua_set_immutable },
    { "ghostWhite", _wrap_ofShortColor_ghostWhite_get, SWIG_Lua_set_immutable },
    { "gold", _wrap_ofShortColor_gold_get, SWIG_Lua_set_immutable },
    { "goldenRod", _wrap_ofShortColor_goldenRod_get, SWIG_Lua_set_immutable },
    { "grey", _wrap_ofShortColor_grey_get, SWIG_Lua_set_immutable },
    { "greenYellow", _wrap_ofShortColor_greenYellow_get, SWIG_Lua_set_immutable },
    { "honeyDew", _wrap_ofShortColor_honeyDew_get, SWIG_Lua_set_immutable },
    { "hotPink", _wrap_ofShortColor_hotPink_get, SWIG_Lua_set_immutable },
    { "indianRed", _wrap_ofShortColor_indianRed_get, SWIG_Lua_set_immutable },
    { "indigo", _wrap_ofShortColor_indigo_get, SWIG_Lua_set_immutable },
    { "ivory", _wrap_ofShortColor_ivory_get, SWIG_Lua_set_immutable },
    { "khaki", _wrap_ofShortColor_khaki_get, SWIG_Lua_set_immutable },
    { "lavender", _wrap_ofShortColor_lavender_get, SWIG_Lua_set_immutable },
    { "lavenderBlush", _wrap_ofShortColor_lavenderBlush_get, SWIG_Lua_set_immutable },
    { "lawnGreen", _wrap_ofShortColor_lawnGreen_get, SWIG_Lua_set_immutable },
    { "lemonChiffon", _wrap_ofShortColor_lemonChiffon_get, SWIG_Lua_set_immutable },
    { "lightBlue", _wrap_ofShortColor_lightBlue_get, SWIG_Lua_set_immutable },
    { "lightCoral", _wrap_ofShortColor_lightCoral_get, SWIG_Lua_set_immutable },
    { "lightCyan", _wrap_ofShortColor_lightCyan_get, SWIG_Lua_set_immutable },
    { "lightGoldenRodYellow", _wrap_ofShortColor_lightGoldenRodYellow_get, SWIG_Lua_set_immutable },
    { "lightGray", _wrap_ofShortColor_lightGray_get, SWIG_Lua_set_immutable },
    { "lightGrey", _wrap_ofShortColor_lightGrey_get, SWIG_Lua_set_immutable },
    { "lightGreen", _wrap_ofShortColor_lightGreen_get, SWIG_Lua_set_immutable },
    { "lightPink", _wrap_ofShortColor_lightPink_get, SWIG_Lua_set_immutable },
    { "lightSalmon", _wrap_ofShortColor_lightSalmon_get, SWIG_Lua_set_immutable },
    { "lightSeaGreen", _wrap_ofShortColor_lightSeaGreen_get, SWIG_Lua_set_immutable },
    { "lightSkyBlue", _wrap_ofShortColor_lightSkyBlue_get, SWIG_Lua_set_immutable },
    { "lightSlateGray", _wrap_ofShortColor_lightSlateGray_get, SWIG_Lua_set_immutable },
    { "lightSlateGrey", _wrap_ofShortColor_lightSlateGrey_get, SWIG_Lua_set_immutable },
    { "lightSteelBlue", _wrap_ofShortColor_lightSteelBlue_get, SWIG_Lua_set_immutable },
    { "lightYellow", _wrap_ofShortColor_lightYellow_get, SWIG_Lua_set_immutable },
    { "lime", _wrap_ofShortColor_lime_get, SWIG_Lua_set_immutable },
    { "limeGreen", _wrap_ofShortColor_limeGreen_get, SWIG_Lua_set_immutable },
    { "linen", _wrap_ofShortColor_linen_get, SWIG_Lua_set_immutable },
    { "maroon", _wrap_ofShortColor_maroon_get, SWIG_Lua_set_immutable },
    { "mediumAquaMarine", _wrap_ofShortColor_mediumAquaMarine_get, SWIG_Lua_set_immutable },
    { "mediumBlue", _wrap_ofShortColor_mediumBlue_get, SWIG_Lua_set_immutable },
    { "mediumOrchid", _wrap_ofShortColor_mediumOrchid_get, SWIG_Lua_set_immutable },
    { "mediumPurple", _wrap_ofShortColor_mediumPurple_get, SWIG_Lua_set_immutable },
    { "mediumSeaGreen", _wrap_ofShortColor_mediumSeaGreen_get, SWIG_Lua_set_immutable },
    { "mediumSlateBlue", _wrap_ofShortColor_mediumSlateBlue_get, SWIG_Lua_set_immutable },
    { "mediumSpringGreen", _wrap_ofShortColor_mediumSpringGreen_get, SWIG_Lua_set_immutable },
    { "mediumTurquoise", _wrap_ofShortColor_mediumTurquoise_get, SWIG_Lua_set_immutable },
    { "mediumVioletRed", _wrap_ofShortColor_mediumVioletRed_get, SWIG_Lua_set_immutable },
    { "midnightBlue", _wrap_ofShortColor_midnightBlue_get, SWIG_Lua_set_immutable },
    { "mintCream", _wrap_ofShortColor_mintCream_get, SWIG_Lua_set_immutable },
    { "mistyRose", _wrap_ofShortColor_mistyRose_get, SWIG_Lua_set_immutable },
    { "moccasin", _wrap_ofShortColor_moccasin_get, SWIG_Lua_set_immutable },
    { "navajoWhite", _wrap_ofShortColor_navajoWhite_get, SWIG_Lua_set_immutable },
    { "navy", _wrap_ofShortColor_navy_get, SWIG_Lua_set_immutable },
    { "oldLace", _wrap_ofShortColor_oldLace_get, SWIG_Lua_set_immutable },
    { "olive", _wrap_ofShortColor_olive_get, SWIG_Lua_set_immutable },
    { "oliveDrab", _wrap_ofShortColor_oliveDrab_get, SWIG_Lua_set_immutable },
    { "orange", _wrap_ofShortColor_orange_get, SWIG_Lua_set_immutable },
    { "orangeRed", _wrap_ofShortColor_orangeRed_get, SWIG_Lua_set_immutable },
    { "orchid", _wrap_ofShortColor_orchid_get, SWIG_Lua_set_immutable },
    { "paleGoldenRod", _wrap_ofShortColor_paleGoldenRod_get, SWIG_Lua_set_immutable },
    { "paleGreen", _wrap_ofShortColor_paleGreen_get, SWIG_Lua_set_immutable },
    { "paleTurquoise", _wrap_ofShortColor_paleTurquoise_get, SWIG_Lua_set_immutable },
    { "paleVioletRed", _wrap_ofShortColor_paleVioletRed_get, SWIG_Lua_set_immutable },
    { "papayaWhip", _wrap_ofShortColor_papayaWhip_get, SWIG_Lua_set_immutable },
    { "peachPuff", _wrap_ofShortColor_peachPuff_get, SWIG_Lua_set_immutable },
    { "peru", _wrap_ofShortColor_peru_get, SWIG_Lua_set_immutable },
    { "pink", _wrap_ofShortColor_pink_get, SWIG_Lua_set_immutable },
    { "plum", _wrap_ofShortColor_plum_get, SWIG_Lua_set_immutable },
    { "powderBlue", _wrap_ofShortColor_powderBlue_get, SWIG_Lua_set_immutable },
    { "purple", _wrap_ofShortColor_purple_get, SWIG_Lua_set_immutable },
    { "rosyBrown", _wrap_ofShortColor_rosyBrown_get, SWIG_Lua_set_immutable },
    { "royalBlue", _wrap_ofShortColor_royalBlue_get, SWIG_Lua_set_immutable },
    { "saddleBrown", _wrap_ofShortColor_saddleBrown_get, SWIG_Lua_set_immutable },
    { "salmon", _wrap_ofShortColor_salmon_get, SWIG_Lua_set_immutable },
    { "sandyBrown", _wrap_ofShortColor_sandyBrown_get, SWIG_Lua_set_immutable },
    { "seaGreen", _wrap_ofShortColor_seaGreen_get, SWIG_Lua_set_immutable },
    { "seaShell", _wrap_ofShortColor_seaShell_get, SWIG_Lua_set_immutable },
    { "sienna", _wrap_ofShortColor_sienna_get, SWIG_Lua_set_immutable },
    { "silver", _wrap_ofShortColor_silver_get, SWIG_Lua_set_immutable },
    { "skyBlue", _wrap_ofShortColor_skyBlue_get, SWIG_Lua_set_immutable },
    { "slateBlue", _wrap_ofShortColor_slateBlue_get, SWIG_Lua_set_immutable },
    { "slateGray", _wrap_ofShortColor_slateGray_get, SWIG_Lua_set_immutable },
    { "slateGrey", _wrap_ofShortColor_slateGrey_get, SWIG_Lua_set_immutable },
    { "snow", _wrap_ofShortColor_snow_get, SWIG_Lua_set_immutable },
    { "springGreen", _wrap_ofShortColor_springGreen_get, SWIG_Lua_set_immutable },
    { "steelBlue", _wrap_ofShortColor_steelBlue_get, SWIG_Lua_set_immutable },
    { "blueSteel", _wrap_ofShortColor_blueSteel_get, SWIG_Lua_set_immutable },
    { "tan", _wrap_ofShortColor_tan_get, SWIG_Lua_set_immutable },
    { "teal", _wrap_ofShortColor_teal_get, SWIG_Lua_set_immutable },
    { "thistle", _wrap_ofShortColor_thistle_get, SWIG_Lua_set_immutable },
    { "tomato", _wrap_ofShortColor_tomato_get, SWIG_Lua_set_immutable },
    { "turquoise", _wrap_ofShortColor_turquoise_get, SWIG_Lua_set_immutable },
    { "violet", _wrap_ofShortColor_violet_get, SWIG_Lua_set_immutable },
    { "wheat", _wrap_ofShortColor_wheat_get, SWIG_Lua_set_immutable },
    { "whiteSmoke", _wrap_ofShortColor_whiteSmoke_get, SWIG_Lua_set_immutable },
    { "yellowGreen", _wrap_ofShortColor_yellowGreen_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_ofShortColor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofShortColor_Sf_SwigStatic_methods[]= {
    { "fromHsb", _wrap_ofShortColor_fromHsb},
    { "fromHex", _wrap_ofShortColor_fromHex},
    { "limit", _wrap_ofShortColor_limit},
    {0,0}
};
static swig_lua_class* swig_ofShortColor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofShortColor_Sf_SwigStatic = {
    "ofShortColor",
    swig_ofShortColor_Sf_SwigStatic_methods,
    swig_ofShortColor_Sf_SwigStatic_attributes,
    swig_ofShortColor_Sf_SwigStatic_constants,
    swig_ofShortColor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofShortColor_bases[] = {0};
static const char *swig_ofShortColor_base_names[] = {0};
static swig_lua_class _wrap_class_ofShortColor = { "ofShortColor", "ofShortColor", &SWIGTYPE_p_ofColor_T_unsigned_short_t,_proxy__wrap_new_ofShortColor, swig_delete_ofShortColor, swig_ofShortColor_methods, swig_ofShortColor_attributes, &swig_ofShortColor_Sf_SwigStatic, swig_ofShortColor_meta, swig_ofShortColor_bases, swig_ofShortColor_base_names };

static int _wrap_ofIsVFlipped(lua_State* L) { int SWIG_arg = 0; bool result; SWIG_check_num_args("ofIsVFlipped",0,0)
  result = (bool)ofIsVFlipped(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseHasTexturePlanes_getTexturePlanes__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofBaseHasTexturePlanes *arg1 = (ofBaseHasTexturePlanes *) 0 ; std::vector< ofTexture > *result = 0 ;
  SWIG_check_num_args("ofBaseHasTexturePlanes::getTexturePlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseHasTexturePlanes::getTexturePlanes",1,"ofBaseHasTexturePlanes *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseHasTexturePlanes,0))){
    SWIG_fail_ptr("ofBaseHasTexturePlanes_getTexturePlanes",1,SWIGTYPE_p_ofBaseHasTexturePlanes); } 
  result = (std::vector< ofTexture > *) &(arg1)->getTexturePlanes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofTexture_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseHasTexturePlanes_getTexturePlanes__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofBaseHasTexturePlanes *arg1 = (ofBaseHasTexturePlanes *) 0 ; std::vector< ofTexture > *result = 0 ;
  SWIG_check_num_args("ofBaseHasTexturePlanes::getTexturePlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseHasTexturePlanes::getTexturePlanes",1,"ofBaseHasTexturePlanes const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseHasTexturePlanes,0))){
    SWIG_fail_ptr("ofBaseHasTexturePlanes_getTexturePlanes",1,SWIGTYPE_p_ofBaseHasTexturePlanes); } 
  result = (std::vector< ofTexture > *) &((ofBaseHasTexturePlanes const *)arg1)->getTexturePlanes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofTexture_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseHasTexturePlanes_getTexturePlanes(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBaseHasTexturePlanes, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBaseHasTexturePlanes_getTexturePlanes__SWIG_0(L);}  } 
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBaseHasTexturePlanes, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBaseHasTexturePlanes_getTexturePlanes__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBaseHasTexturePlanes_getTexturePlanes'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBaseHasTexturePlanes::getTexturePlanes()\n"
  "    ofBaseHasTexturePlanes::getTexturePlanes() const\n"); lua_error(L);return 0; }
static void swig_delete_ofBaseHasTexturePlanes(void *obj) {
ofBaseHasTexturePlanes *arg1 = (ofBaseHasTexturePlanes *) obj;
delete arg1;
}
static swig_lua_attribute swig_ofBaseHasTexturePlanes_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofBaseHasTexturePlanes_methods[]= {
    { "getTexturePlanes", _wrap_ofBaseHasTexturePlanes_getTexturePlanes},
    {0,0}
};
static swig_lua_method swig_ofBaseHasTexturePlanes_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofBaseHasTexturePlanes_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofBaseHasTexturePlanes_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofBaseHasTexturePlanes_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofBaseHasTexturePlanes_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofBaseHasTexturePlanes_Sf_SwigStatic = {
    "ofBaseHasTexturePlanes",
    swig_ofBaseHasTexturePlanes_Sf_SwigStatic_methods,
    swig_ofBaseHasTexturePlanes_Sf_SwigStatic_attributes,
    swig_ofBaseHasTexturePlanes_Sf_SwigStatic_constants,
    swig_ofBaseHasTexturePlanes_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofBaseHasTexturePlanes_bases[] = {0};
static const char *swig_ofBaseHasTexturePlanes_base_names[] = {0};
static swig_lua_class _wrap_class_ofBaseHasTexturePlanes = { "ofBaseHasTexturePlanes", "ofBaseHasTexturePlanes", &SWIGTYPE_p_ofBaseHasTexturePlanes,0, swig_delete_ofBaseHasTexturePlanes, swig_ofBaseHasTexturePlanes_methods, swig_ofBaseHasTexturePlanes_attributes, &swig_ofBaseHasTexturePlanes_Sf_SwigStatic, swig_ofBaseHasTexturePlanes_meta, swig_ofBaseHasTexturePlanes_bases, swig_ofBaseHasTexturePlanes_base_names };

static int _wrap_ofBaseURLFileLoader_get(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; std::string arg2 ; ofHttpResponse result;
  SWIG_check_num_args("ofBaseURLFileLoader::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::get",1,"ofBaseURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofBaseURLFileLoader::get",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_get",1,SWIGTYPE_p_ofBaseURLFileLoader); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (arg1)->get(arg2); {
    ofHttpResponse * resultptr = new ofHttpResponse((const ofHttpResponse &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseURLFileLoader_getAsync__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; std::string arg2 ; std::string arg3 ; int result;
  SWIG_check_num_args("ofBaseURLFileLoader::getAsync",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::getAsync",1,"ofBaseURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofBaseURLFileLoader::getAsync",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofBaseURLFileLoader::getAsync",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_getAsync",1,SWIGTYPE_p_ofBaseURLFileLoader); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (int)(arg1)->getAsync(arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseURLFileLoader_getAsync__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; std::string arg2 ; int result;
  SWIG_check_num_args("ofBaseURLFileLoader::getAsync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::getAsync",1,"ofBaseURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofBaseURLFileLoader::getAsync",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_getAsync",1,SWIGTYPE_p_ofBaseURLFileLoader); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (int)(arg1)->getAsync(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseURLFileLoader_getAsync(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBaseURLFileLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofBaseURLFileLoader_getAsync__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBaseURLFileLoader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }
         if (_v) { return _wrap_ofBaseURLFileLoader_getAsync__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBaseURLFileLoader_getAsync'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBaseURLFileLoader::getAsync(std::string,std::string)\n"
  "    ofBaseURLFileLoader::getAsync(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofBaseURLFileLoader_saveTo(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; std::string arg2 ; std::string arg3 ; ofHttpResponse result;
  SWIG_check_num_args("ofBaseURLFileLoader::saveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::saveTo",1,"ofBaseURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofBaseURLFileLoader::saveTo",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofBaseURLFileLoader::saveTo",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_saveTo",1,SWIGTYPE_p_ofBaseURLFileLoader); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (arg1)->saveTo(arg2,arg3); { ofHttpResponse * resultptr = new ofHttpResponse((const ofHttpResponse &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseURLFileLoader_saveAsync(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; std::string arg2 ; std::string arg3 ; int result;
  SWIG_check_num_args("ofBaseURLFileLoader::saveAsync",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::saveAsync",1,"ofBaseURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofBaseURLFileLoader::saveAsync",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofBaseURLFileLoader::saveAsync",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_saveAsync",1,SWIGTYPE_p_ofBaseURLFileLoader); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (int)(arg1)->saveAsync(arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseURLFileLoader_remove(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; int arg2 ; SWIG_check_num_args("ofBaseURLFileLoader::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::remove",1,"ofBaseURLFileLoader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBaseURLFileLoader::remove",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_remove",1,SWIGTYPE_p_ofBaseURLFileLoader); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->remove(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseURLFileLoader_clear(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; SWIG_check_num_args("ofBaseURLFileLoader::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::clear",1,"ofBaseURLFileLoader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_clear",1,SWIGTYPE_p_ofBaseURLFileLoader); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseURLFileLoader_stop(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; SWIG_check_num_args("ofBaseURLFileLoader::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::stop",1,"ofBaseURLFileLoader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_stop",1,SWIGTYPE_p_ofBaseURLFileLoader); }  (arg1)->stop(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseURLFileLoader_handleRequest(lua_State* L) { int SWIG_arg = 0;
  ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) 0 ; ofHttpRequest arg2 ; ofHttpRequest *argp2 ; ofHttpResponse result;
  SWIG_check_num_args("ofBaseURLFileLoader::handleRequest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseURLFileLoader::handleRequest",1,"ofBaseURLFileLoader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBaseURLFileLoader::handleRequest",2,"ofHttpRequest");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseURLFileLoader,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_handleRequest",1,SWIGTYPE_p_ofBaseURLFileLoader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofBaseURLFileLoader_handleRequest",2,SWIGTYPE_p_ofHttpRequest); }  arg2 = *argp2;
  result = (arg1)->handleRequest(arg2); { ofHttpResponse * resultptr = new ofHttpResponse((const ofHttpResponse &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_ofBaseURLFileLoader(void *obj) {
ofBaseURLFileLoader *arg1 = (ofBaseURLFileLoader *) obj;
delete arg1;
}
static swig_lua_attribute swig_ofBaseURLFileLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofBaseURLFileLoader_methods[]= {
    { "get", _wrap_ofBaseURLFileLoader_get},
    { "getAsync", _wrap_ofBaseURLFileLoader_getAsync},
    { "saveTo", _wrap_ofBaseURLFileLoader_saveTo},
    { "saveAsync", _wrap_ofBaseURLFileLoader_saveAsync},
    { "remove", _wrap_ofBaseURLFileLoader_remove},
    { "clear", _wrap_ofBaseURLFileLoader_clear},
    { "stop", _wrap_ofBaseURLFileLoader_stop},
    { "handleRequest", _wrap_ofBaseURLFileLoader_handleRequest},
    {0,0}
};
static swig_lua_method swig_ofBaseURLFileLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofBaseURLFileLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofBaseURLFileLoader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofBaseURLFileLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofBaseURLFileLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofBaseURLFileLoader_Sf_SwigStatic = {
    "ofBaseURLFileLoader",
    swig_ofBaseURLFileLoader_Sf_SwigStatic_methods,
    swig_ofBaseURLFileLoader_Sf_SwigStatic_attributes,
    swig_ofBaseURLFileLoader_Sf_SwigStatic_constants,
    swig_ofBaseURLFileLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofBaseURLFileLoader_bases[] = {0};
static const char *swig_ofBaseURLFileLoader_base_names[] = {0};
static swig_lua_class _wrap_class_ofBaseURLFileLoader = { "ofBaseURLFileLoader", "ofBaseURLFileLoader", &SWIGTYPE_p_ofBaseURLFileLoader,0, swig_delete_ofBaseURLFileLoader, swig_ofBaseURLFileLoader_methods, swig_ofBaseURLFileLoader_attributes, &swig_ofBaseURLFileLoader_Sf_SwigStatic, swig_ofBaseURLFileLoader_meta, swig_ofBaseURLFileLoader_bases, swig_ofBaseURLFileLoader_base_names };

static int _wrap_ofBaseMaterial_getDiffuseColor(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  ofFloatColor result; SWIG_check_num_args("ofBaseMaterial::getDiffuseColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::getDiffuseColor",1,"ofBaseMaterial const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_getDiffuseColor",1,SWIGTYPE_p_ofBaseMaterial); } 
  result = ((ofBaseMaterial const *)arg1)->getDiffuseColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_getAmbientColor(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  ofFloatColor result; SWIG_check_num_args("ofBaseMaterial::getAmbientColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::getAmbientColor",1,"ofBaseMaterial const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_getAmbientColor",1,SWIGTYPE_p_ofBaseMaterial); } 
  result = ((ofBaseMaterial const *)arg1)->getAmbientColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_getSpecularColor(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  ofFloatColor result; SWIG_check_num_args("ofBaseMaterial::getSpecularColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::getSpecularColor",1,"ofBaseMaterial const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_getSpecularColor",1,SWIGTYPE_p_ofBaseMaterial); } 
  result = ((ofBaseMaterial const *)arg1)->getSpecularColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_getEmissiveColor(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  ofFloatColor result; SWIG_check_num_args("ofBaseMaterial::getEmissiveColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::getEmissiveColor",1,"ofBaseMaterial const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_getEmissiveColor",1,SWIGTYPE_p_ofBaseMaterial); } 
  result = ((ofBaseMaterial const *)arg1)->getEmissiveColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_getShininess(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  float result; SWIG_check_num_args("ofBaseMaterial::getShininess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::getShininess",1,"ofBaseMaterial const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_getShininess",1,SWIGTYPE_p_ofBaseMaterial); } 
  result = (float)((ofBaseMaterial const *)arg1)->getShininess(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_begin(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  SWIG_check_num_args("ofBaseMaterial::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::begin",1,"ofBaseMaterial const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_begin",1,SWIGTYPE_p_ofBaseMaterial); }  ((ofBaseMaterial const *)arg1)->begin();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_c_end(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  SWIG_check_num_args("ofBaseMaterial::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::end",1,"ofBaseMaterial const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_c_end",1,SWIGTYPE_p_ofBaseMaterial); }  ((ofBaseMaterial const *)arg1)->end();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_getShader(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  int arg2 ; ofGLProgrammableRenderer *arg3 = 0 ; ofShader *result = 0 ; SWIG_check_num_args("ofBaseMaterial::getShader",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::getShader",1,"ofBaseMaterial const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBaseMaterial::getShader",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBaseMaterial::getShader",3,"ofGLProgrammableRenderer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_getShader",1,SWIGTYPE_p_ofBaseMaterial); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofGLProgrammableRenderer,0))){
    SWIG_fail_ptr("ofBaseMaterial_getShader",3,SWIGTYPE_p_ofGLProgrammableRenderer); } 
  result = (ofShader *) &((ofBaseMaterial const *)arg1)->getShader(arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofShader,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBaseMaterial_uploadMatrices(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  ofShader *arg2 = 0 ; ofGLProgrammableRenderer *arg3 = 0 ; SWIG_check_num_args("ofBaseMaterial::uploadMatrices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::uploadMatrices",1,"ofBaseMaterial const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBaseMaterial::uploadMatrices",2,"ofShader const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBaseMaterial::uploadMatrices",3,"ofGLProgrammableRenderer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_uploadMatrices",1,SWIGTYPE_p_ofBaseMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofBaseMaterial_uploadMatrices",2,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofGLProgrammableRenderer,0))){
    SWIG_fail_ptr("ofBaseMaterial_uploadMatrices",3,SWIGTYPE_p_ofGLProgrammableRenderer); } 
  ((ofBaseMaterial const *)arg1)->uploadMatrices((ofShader const &)*arg2,*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_updateMaterial(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  ofShader *arg2 = 0 ; ofGLProgrammableRenderer *arg3 = 0 ; SWIG_check_num_args("ofBaseMaterial::updateMaterial",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::updateMaterial",1,"ofBaseMaterial const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBaseMaterial::updateMaterial",2,"ofShader const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBaseMaterial::updateMaterial",3,"ofGLProgrammableRenderer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_updateMaterial",1,SWIGTYPE_p_ofBaseMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofBaseMaterial_updateMaterial",2,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofGLProgrammableRenderer,0))){
    SWIG_fail_ptr("ofBaseMaterial_updateMaterial",3,SWIGTYPE_p_ofGLProgrammableRenderer); } 
  ((ofBaseMaterial const *)arg1)->updateMaterial((ofShader const &)*arg2,*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseMaterial_updateLights(lua_State* L) { int SWIG_arg = 0; ofBaseMaterial *arg1 = (ofBaseMaterial *) 0 ;
  ofShader *arg2 = 0 ; ofGLProgrammableRenderer *arg3 = 0 ; SWIG_check_num_args("ofBaseMaterial::updateLights",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseMaterial::updateLights",1,"ofBaseMaterial const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBaseMaterial::updateLights",2,"ofShader const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBaseMaterial::updateLights",3,"ofGLProgrammableRenderer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseMaterial,0))){
    SWIG_fail_ptr("ofBaseMaterial_updateLights",1,SWIGTYPE_p_ofBaseMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofBaseMaterial_updateLights",2,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofGLProgrammableRenderer,0))){
    SWIG_fail_ptr("ofBaseMaterial_updateLights",3,SWIGTYPE_p_ofGLProgrammableRenderer); } 
  ((ofBaseMaterial const *)arg1)->updateLights((ofShader const &)*arg2,*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_ofBaseMaterial(void *obj) {
ofBaseMaterial *arg1 = (ofBaseMaterial *) obj;
delete arg1;
}
static swig_lua_attribute swig_ofBaseMaterial_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofBaseMaterial_methods[]= {
    { "getDiffuseColor", _wrap_ofBaseMaterial_getDiffuseColor},
    { "getAmbientColor", _wrap_ofBaseMaterial_getAmbientColor},
    { "getSpecularColor", _wrap_ofBaseMaterial_getSpecularColor},
    { "getEmissiveColor", _wrap_ofBaseMaterial_getEmissiveColor},
    { "getShininess", _wrap_ofBaseMaterial_getShininess},
    { "begin", _wrap_ofBaseMaterial_begin},
    { "c_end", _wrap_ofBaseMaterial_c_end},
    { "getShader", _wrap_ofBaseMaterial_getShader},
    { "uploadMatrices", _wrap_ofBaseMaterial_uploadMatrices},
    { "updateMaterial", _wrap_ofBaseMaterial_updateMaterial},
    { "updateLights", _wrap_ofBaseMaterial_updateLights},
    {0,0}
};
static swig_lua_method swig_ofBaseMaterial_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofBaseMaterial_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofBaseMaterial_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofBaseMaterial_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofBaseMaterial_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofBaseMaterial_Sf_SwigStatic = {
    "ofBaseMaterial",
    swig_ofBaseMaterial_Sf_SwigStatic_methods,
    swig_ofBaseMaterial_Sf_SwigStatic_attributes,
    swig_ofBaseMaterial_Sf_SwigStatic_constants,
    swig_ofBaseMaterial_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofBaseMaterial_bases[] = {0};
static const char *swig_ofBaseMaterial_base_names[] = {0};
static swig_lua_class _wrap_class_ofBaseMaterial = { "ofBaseMaterial", "ofBaseMaterial", &SWIGTYPE_p_ofBaseMaterial,0, swig_delete_ofBaseMaterial, swig_ofBaseMaterial_methods, swig_ofBaseMaterial_attributes, &swig_ofBaseMaterial_Sf_SwigStatic, swig_ofBaseMaterial_meta, swig_ofBaseMaterial_bases, swig_ofBaseMaterial_base_names };

static int _wrap_new_ofSerialDeviceInfo__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ;
  int arg3 ; ofSerialDeviceInfo *result = 0 ; SWIG_check_num_args("ofSerialDeviceInfo::ofSerialDeviceInfo",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSerialDeviceInfo::ofSerialDeviceInfo",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSerialDeviceInfo::ofSerialDeviceInfo",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSerialDeviceInfo::ofSerialDeviceInfo",3,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); result = (ofSerialDeviceInfo *)new ofSerialDeviceInfo(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSerialDeviceInfo,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofSerialDeviceInfo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofSerialDeviceInfo *result = 0 ;
  SWIG_check_num_args("ofSerialDeviceInfo::ofSerialDeviceInfo",0,0) result = (ofSerialDeviceInfo *)new ofSerialDeviceInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSerialDeviceInfo,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofSerialDeviceInfo(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofSerialDeviceInfo__SWIG_1(L);}  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_new_ofSerialDeviceInfo__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofSerialDeviceInfo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSerialDeviceInfo::ofSerialDeviceInfo(std::string,std::string,int)\n"
  "    ofSerialDeviceInfo::ofSerialDeviceInfo()\n"); lua_error(L);return 0; }
static int _wrap_ofSerialDeviceInfo_getDevicePath(lua_State* L) { int SWIG_arg = 0;
  ofSerialDeviceInfo *arg1 = (ofSerialDeviceInfo *) 0 ; std::string result;
  SWIG_check_num_args("ofSerialDeviceInfo::getDevicePath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSerialDeviceInfo::getDevicePath",1,"ofSerialDeviceInfo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSerialDeviceInfo,0))){
    SWIG_fail_ptr("ofSerialDeviceInfo_getDevicePath",1,SWIGTYPE_p_ofSerialDeviceInfo); }  result = (arg1)->getDevicePath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSerialDeviceInfo_getDeviceName(lua_State* L) { int SWIG_arg = 0;
  ofSerialDeviceInfo *arg1 = (ofSerialDeviceInfo *) 0 ; std::string result;
  SWIG_check_num_args("ofSerialDeviceInfo::getDeviceName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSerialDeviceInfo::getDeviceName",1,"ofSerialDeviceInfo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSerialDeviceInfo,0))){
    SWIG_fail_ptr("ofSerialDeviceInfo_getDeviceName",1,SWIGTYPE_p_ofSerialDeviceInfo); }  result = (arg1)->getDeviceName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSerialDeviceInfo_getDeviceID(lua_State* L) { int SWIG_arg = 0;
  ofSerialDeviceInfo *arg1 = (ofSerialDeviceInfo *) 0 ; int result; SWIG_check_num_args("ofSerialDeviceInfo::getDeviceID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSerialDeviceInfo::getDeviceID",1,"ofSerialDeviceInfo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSerialDeviceInfo,0))){
    SWIG_fail_ptr("ofSerialDeviceInfo_getDeviceID",1,SWIGTYPE_p_ofSerialDeviceInfo); }  result = (int)(arg1)->getDeviceID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofSerialDeviceInfo(void *obj) {
ofSerialDeviceInfo *arg1 = (ofSerialDeviceInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofSerialDeviceInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofSerialDeviceInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofSerialDeviceInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofSerialDeviceInfo_methods[]= {
    { "getDevicePath", _wrap_ofSerialDeviceInfo_getDevicePath},
    { "getDeviceName", _wrap_ofSerialDeviceInfo_getDeviceName},
    { "getDeviceID", _wrap_ofSerialDeviceInfo_getDeviceID},
    {0,0}
};
static swig_lua_method swig_ofSerialDeviceInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofSerialDeviceInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofSerialDeviceInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofSerialDeviceInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofSerialDeviceInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofSerialDeviceInfo_Sf_SwigStatic = {
    "ofSerialDeviceInfo",
    swig_ofSerialDeviceInfo_Sf_SwigStatic_methods,
    swig_ofSerialDeviceInfo_Sf_SwigStatic_attributes,
    swig_ofSerialDeviceInfo_Sf_SwigStatic_constants,
    swig_ofSerialDeviceInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofSerialDeviceInfo_bases[] = {0};
static const char *swig_ofSerialDeviceInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ofSerialDeviceInfo = { "ofSerialDeviceInfo", "ofSerialDeviceInfo", &SWIGTYPE_p_ofSerialDeviceInfo,_proxy__wrap_new_ofSerialDeviceInfo, swig_delete_ofSerialDeviceInfo, swig_ofSerialDeviceInfo_methods, swig_ofSerialDeviceInfo_attributes, &swig_ofSerialDeviceInfo_Sf_SwigStatic, swig_ofSerialDeviceInfo_meta, swig_ofSerialDeviceInfo_bases, swig_ofSerialDeviceInfo_base_names };

static int _wrap_new_ofStyle(lua_State* L) { int SWIG_arg = 0; ofStyle *result = 0 ; SWIG_check_num_args("ofStyle::ofStyle",0,0)
  result = (ofStyle *)new ofStyle(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofStyle,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_color_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofColor *arg2 = (ofColor *) 0 ; SWIG_check_num_args("ofStyle::color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::color",1,"ofStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofStyle::color",2,"ofColor *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_color_set",1,SWIGTYPE_p_ofStyle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofStyle_color_set",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  if (arg1) (arg1)->color = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_color_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofColor *result = 0 ;
  SWIG_check_num_args("ofStyle::color",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::color",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_color_get",1,SWIGTYPE_p_ofStyle); }  result = (ofColor *)& ((arg1)->color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_bgColor_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofColor *arg2 = (ofColor *) 0 ; SWIG_check_num_args("ofStyle::bgColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::bgColor",1,"ofStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofStyle::bgColor",2,"ofColor *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_bgColor_set",1,SWIGTYPE_p_ofStyle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofStyle_bgColor_set",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  if (arg1) (arg1)->bgColor = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_bgColor_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofColor *result = 0 ;
  SWIG_check_num_args("ofStyle::bgColor",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::bgColor",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_bgColor_get",1,SWIGTYPE_p_ofStyle); }  result = (ofColor *)& ((arg1)->bgColor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_polyMode_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofPolyWindingMode arg2 ;
  SWIG_check_num_args("ofStyle::polyMode",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::polyMode",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::polyMode",2,"ofPolyWindingMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_polyMode_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (ofPolyWindingMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->polyMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_polyMode_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofPolyWindingMode result; SWIG_check_num_args("ofStyle::polyMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::polyMode",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_polyMode_get",1,SWIGTYPE_p_ofStyle); }  result = (ofPolyWindingMode) ((arg1)->polyMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofStyle_rectMode_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofRectMode arg2 ;
  SWIG_check_num_args("ofStyle::rectMode",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::rectMode",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::rectMode",2,"ofRectMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_rectMode_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (ofRectMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rectMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_rectMode_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofRectMode result;
  SWIG_check_num_args("ofStyle::rectMode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::rectMode",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_rectMode_get",1,SWIGTYPE_p_ofStyle); }  result = (ofRectMode) ((arg1)->rectMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofStyle_bFill_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofStyle::bFill",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::bFill",1,"ofStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofStyle::bFill",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_bFill_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->bFill = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_bFill_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; bool result;
  SWIG_check_num_args("ofStyle::bFill",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::bFill",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_bFill_get",1,SWIGTYPE_p_ofStyle); }  result = (bool) ((arg1)->bFill);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_drawBitmapMode_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofDrawBitmapMode arg2 ; SWIG_check_num_args("ofStyle::drawBitmapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::drawBitmapMode",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::drawBitmapMode",2,"ofDrawBitmapMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_drawBitmapMode_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (ofDrawBitmapMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->drawBitmapMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_drawBitmapMode_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofDrawBitmapMode result; SWIG_check_num_args("ofStyle::drawBitmapMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::drawBitmapMode",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_drawBitmapMode_get",1,SWIGTYPE_p_ofStyle); }  result = (ofDrawBitmapMode) ((arg1)->drawBitmapMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofStyle_blendingMode_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofBlendMode arg2 ;
  SWIG_check_num_args("ofStyle::blendingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::blendingMode",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::blendingMode",2,"ofBlendMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_blendingMode_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (ofBlendMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->blendingMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_blendingMode_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofBlendMode result;
  SWIG_check_num_args("ofStyle::blendingMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::blendingMode",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_blendingMode_get",1,SWIGTYPE_p_ofStyle); }  result = (ofBlendMode) ((arg1)->blendingMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofStyle_smoothing_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofStyle::smoothing",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::smoothing",1,"ofStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofStyle::smoothing",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_smoothing_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->smoothing = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_smoothing_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; bool result;
  SWIG_check_num_args("ofStyle::smoothing",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::smoothing",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_smoothing_get",1,SWIGTYPE_p_ofStyle); }  result = (bool) ((arg1)->smoothing);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_circleResolution_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int arg2 ;
  SWIG_check_num_args("ofStyle::circleResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::circleResolution",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::circleResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_circleResolution_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->circleResolution = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_circleResolution_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int result;
  SWIG_check_num_args("ofStyle::circleResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::circleResolution",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_circleResolution_get",1,SWIGTYPE_p_ofStyle); }  result = (int) ((arg1)->circleResolution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_sphereResolution_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int arg2 ;
  SWIG_check_num_args("ofStyle::sphereResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::sphereResolution",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::sphereResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_sphereResolution_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sphereResolution = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_sphereResolution_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int result;
  SWIG_check_num_args("ofStyle::sphereResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::sphereResolution",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_sphereResolution_get",1,SWIGTYPE_p_ofStyle); }  result = (int) ((arg1)->sphereResolution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_curveResolution_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int arg2 ;
  SWIG_check_num_args("ofStyle::curveResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::curveResolution",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::curveResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_curveResolution_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->curveResolution = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_curveResolution_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int result;
  SWIG_check_num_args("ofStyle::curveResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::curveResolution",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_curveResolution_get",1,SWIGTYPE_p_ofStyle); }  result = (int) ((arg1)->curveResolution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_lineWidth_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofStyle::lineWidth",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::lineWidth",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::lineWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_lineWidth_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lineWidth = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStyle_lineWidth_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; float result;
  SWIG_check_num_args("ofStyle::lineWidth",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::lineWidth",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("ofStyle_lineWidth_get",1,SWIGTYPE_p_ofStyle); }  result = (float) ((arg1)->lineWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofStyle(void *obj) {
ofStyle *arg1 = (ofStyle *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofStyle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofStyle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofStyle_attributes[] = {
    { "color", _wrap_ofStyle_color_get, _wrap_ofStyle_color_set },
    { "bgColor", _wrap_ofStyle_bgColor_get, _wrap_ofStyle_bgColor_set },
    { "polyMode", _wrap_ofStyle_polyMode_get, _wrap_ofStyle_polyMode_set },
    { "rectMode", _wrap_ofStyle_rectMode_get, _wrap_ofStyle_rectMode_set },
    { "bFill", _wrap_ofStyle_bFill_get, _wrap_ofStyle_bFill_set },
    { "drawBitmapMode", _wrap_ofStyle_drawBitmapMode_get, _wrap_ofStyle_drawBitmapMode_set },
    { "blendingMode", _wrap_ofStyle_blendingMode_get, _wrap_ofStyle_blendingMode_set },
    { "smoothing", _wrap_ofStyle_smoothing_get, _wrap_ofStyle_smoothing_set },
    { "circleResolution", _wrap_ofStyle_circleResolution_get, _wrap_ofStyle_circleResolution_set },
    { "sphereResolution", _wrap_ofStyle_sphereResolution_get, _wrap_ofStyle_sphereResolution_set },
    { "curveResolution", _wrap_ofStyle_curveResolution_get, _wrap_ofStyle_curveResolution_set },
    { "lineWidth", _wrap_ofStyle_lineWidth_get, _wrap_ofStyle_lineWidth_set },
    {0,0,0}
};
static swig_lua_method swig_ofStyle_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofStyle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofStyle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofStyle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofStyle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofStyle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofStyle_Sf_SwigStatic = {
    "ofStyle",
    swig_ofStyle_Sf_SwigStatic_methods,
    swig_ofStyle_Sf_SwigStatic_attributes,
    swig_ofStyle_Sf_SwigStatic_constants,
    swig_ofStyle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofStyle_bases[] = {0};
static const char *swig_ofStyle_base_names[] = {0};
static swig_lua_class _wrap_class_ofStyle = { "ofStyle", "ofStyle", &SWIGTYPE_p_ofStyle,_proxy__wrap_new_ofStyle, swig_delete_ofStyle, swig_ofStyle_methods, swig_ofStyle_attributes, &swig_ofStyle_Sf_SwigStatic, swig_ofStyle_meta, swig_ofStyle_bases, swig_ofStyle_base_names };

static int _wrap_ofResetElapsedTimeCounter(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofResetElapsedTimeCounter",0,0) ofResetElapsedTimeCounter(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetElapsedTimef(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofGetElapsedTimef",0,0)
  result = (float)ofGetElapsedTimef(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetElapsedTimeMillis(lua_State* L) { int SWIG_arg = 0; uint64_t result;
  SWIG_check_num_args("ofGetElapsedTimeMillis",0,0) result = ofGetElapsedTimeMillis(); {
    uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetElapsedTimeMicros(lua_State* L) { int SWIG_arg = 0; uint64_t result;
  SWIG_check_num_args("ofGetElapsedTimeMicros",0,0) result = ofGetElapsedTimeMicros(); {
    uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetFrameNum(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetFrameNum",0,0)
  result = (int)ofGetFrameNum(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetSeconds(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetSeconds",0,0)
  result = (int)ofGetSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetMinutes(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetMinutes",0,0)
  result = (int)ofGetMinutes(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetHours(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetHours",0,0)
  result = (int)ofGetHours(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetUnixTime(lua_State* L) { int SWIG_arg = 0; unsigned int result; SWIG_check_num_args("ofGetUnixTime",0,0)
  result = (unsigned int)ofGetUnixTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetSystemTime(lua_State* L) { int SWIG_arg = 0; uint64_t result; SWIG_check_num_args("ofGetSystemTime",0,0)
  result = ofGetSystemTime(); { uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetSystemTimeMicros(lua_State* L) { int SWIG_arg = 0; uint64_t result;
  SWIG_check_num_args("ofGetSystemTimeMicros",0,0) result = ofGetSystemTimeMicros(); {
    uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSleepMillis(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSleepMillis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSleepMillis",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSleepMillis(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetTimestampString__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofGetTimestampString",0,0) result = ofGetTimestampString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetTimestampString__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofGetTimestampString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofGetTimestampString",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofGetTimestampString((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetTimestampString(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofGetTimestampString__SWIG_0(L);}  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      return _wrap_ofGetTimestampString__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofGetTimestampString'\n"
  "  Possible C/C++ prototypes are:\n" "    ofGetTimestampString()\n" "    ofGetTimestampString(std::string const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofGetYear(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetYear",0,0)
  result = (int)ofGetYear(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetMonth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetMonth",0,0)
  result = (int)ofGetMonth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetDay(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetDay",0,0)
  result = (int)ofGetDay(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWeekday(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWeekday",0,0)
  result = (int)ofGetWeekday(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableDataPath(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableDataPath",0,0)
  ofEnableDataPath(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableDataPath(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableDataPath",0,0)
  ofDisableDataPath(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToDataPath__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; bool arg2 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofToDataPath",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofToDataPath",1,"std::string const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofToDataPath",2,"bool"); temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0); result = ofToDataPath((std::string const &)*arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofToDataPath__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofToDataPath",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofToDataPath",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofToDataPath((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofToDataPath(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofToDataPath__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofToDataPath__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofToDataPath'\n" "  Possible C/C++ prototypes are:\n"
  "    ofToDataPath(std::string const &,bool)\n" "    ofToDataPath(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ofSetWorkingDirectoryToDefault(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofSetWorkingDirectoryToDefault",0,0) ofSetWorkingDirectoryToDefault(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetDataPathRoot(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  SWIG_check_num_args("ofSetDataPathRoot",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSetDataPathRoot",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; ofSetDataPathRoot((std::string const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSplitString__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  bool arg3 ; bool arg4 ; std::string temp1 ; std::string temp2 ; std::vector< std::string > result;
  SWIG_check_num_args("ofSplitString",4,4) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSplitString",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSplitString",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofSplitString",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofSplitString",4,"bool"); temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0); result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4); {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSplitString__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  bool arg3 ; std::string temp1 ; std::string temp2 ; std::vector< std::string > result;
  SWIG_check_num_args("ofSplitString",3,3) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSplitString",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSplitString",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofSplitString",3,"bool"); temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (lua_toboolean(L, 3)!=0);
  result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2,arg3); {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSplitString__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; std::vector< std::string > result; SWIG_check_num_args("ofSplitString",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSplitString",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSplitString",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2); {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSplitString(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofSplitString__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { {
        _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofSplitString__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofSplitString__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSplitString'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSplitString(std::string const &,std::string const &,bool,bool)\n"
  "    ofSplitString(std::string const &,std::string const &,bool)\n"
  "    ofSplitString(std::string const &,std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ofJoinString(lua_State* L) { int SWIG_arg = 0; std::vector< std::string > *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; std::string result; SWIG_check_num_args("ofJoinString",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofJoinString",1,"std::vector< std::string > const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofJoinString",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("ofJoinString",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ofJoinString((std::vector< std::string > const &)*arg1,(std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofStringReplace(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string temp2 ; std::string temp3 ; SWIG_check_num_args("ofStringReplace",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofStringReplace",1,"std::string &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofStringReplace",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofStringReplace",3,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ofStringReplace",1,SWIGTYPE_p_std__string); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  ofStringReplace(*arg1,(std::string const &)*arg2,(std::string const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofIsStringInString(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; bool result; SWIG_check_num_args("ofIsStringInString",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofIsStringInString",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofIsStringInString",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)ofIsStringInString((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStringTimesInString(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; int result; SWIG_check_num_args("ofStringTimesInString",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofStringTimesInString",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofStringTimesInString",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)ofStringTimesInString((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToLower__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; std::string result; SWIG_check_num_args("ofToLower",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofToLower",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofToLower",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ofToLower((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofToLower__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofToLower",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofToLower",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofToLower((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofToLower(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofToLower__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofToLower__SWIG_0(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofToLower'\n"
  "  Possible C/C++ prototypes are:\n" "    ofToLower(std::string const &,std::string const &)\n"
  "    ofToLower(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ofToUpper__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; std::string result; SWIG_check_num_args("ofToUpper",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofToUpper",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofToUpper",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ofToUpper((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofToUpper__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofToUpper",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofToUpper",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofToUpper((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofToUpper(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofToUpper__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofToUpper__SWIG_0(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofToUpper'\n"
  "  Possible C/C++ prototypes are:\n" "    ofToUpper(std::string const &,std::string const &)\n"
  "    ofToUpper(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ofTrimFront__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; std::string result; SWIG_check_num_args("ofTrimFront",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofTrimFront",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrimFront",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ofTrimFront((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrimFront__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofTrimFront",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofTrimFront",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofTrimFront((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrimFront(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofTrimFront__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofTrimFront__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrimFront'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTrimFront(std::string const &,std::string const &)\n" "    ofTrimFront(std::string const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofTrimBack__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; std::string result; SWIG_check_num_args("ofTrimBack",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofTrimBack",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrimBack",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ofTrimBack((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrimBack__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofTrimBack",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofTrimBack",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofTrimBack((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrimBack(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofTrimBack__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofTrimBack__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrimBack'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTrimBack(std::string const &,std::string const &)\n" "    ofTrimBack(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ofTrim__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; std::string result; SWIG_check_num_args("ofTrim",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofTrim",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrim",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ofTrim((std::string const &)*arg1,(std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrim__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofTrim",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofTrim",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofTrim((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrim(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofTrim__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofTrim__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrim'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTrim(std::string const &,std::string const &)\n" "    ofTrim(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ofAppendUTF8(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; int arg2 ;
  SWIG_check_num_args("ofAppendUTF8",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofAppendUTF8",1,"std::string &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofAppendUTF8",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ofAppendUTF8",1,SWIGTYPE_p_std__string); }  arg2 = (int)lua_tonumber(L, 2); ofAppendUTF8(*arg1,arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToInt(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; int result;
  SWIG_check_num_args("ofToInt",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToInt",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (int)ofToInt((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToFloat(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; float result;
  SWIG_check_num_args("ofToFloat",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToFloat",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (float)ofToFloat((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToDouble(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; double result;
  SWIG_check_num_args("ofToDouble",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToDouble",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (double)ofToDouble((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToBool(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; bool result;
  SWIG_check_num_args("ofToBool",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToBool",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (bool)ofToBool((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToHex(lua_State* L) { int SWIG_arg = 0; char *arg1 = (char *) 0 ; std::string result;
  SWIG_check_num_args("ofToHex",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ofToHex",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1); result = ofToHex((char const *)arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofHexToInt(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; int result;
  SWIG_check_num_args("ofHexToInt",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofHexToInt",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (int)ofHexToInt((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHexToChar(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; char result;
  SWIG_check_num_args("ofHexToChar",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofHexToChar",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (char)ofHexToChar((std::string const &)*arg1);
  lua_pushlstring(L, &result, 1); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHexToFloat(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; float result;
  SWIG_check_num_args("ofHexToFloat",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofHexToFloat",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (float)ofHexToFloat((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHexToString(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; std::string result;
  SWIG_check_num_args("ofHexToString",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofHexToString",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofHexToString((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofToChar(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; char result;
  SWIG_check_num_args("ofToChar",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToChar",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (char)ofToChar((std::string const &)*arg1);
  lua_pushlstring(L, &result, 1); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToBinary(lua_State* L) { int SWIG_arg = 0; char *arg1 = (char *) 0 ; std::string result;
  SWIG_check_num_args("ofToBinary",1,1) if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ofToBinary",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1); result = ofToBinary((char const *)arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBinaryToInt(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; int result;
  SWIG_check_num_args("ofBinaryToInt",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofBinaryToInt",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (int)ofBinaryToInt((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBinaryToChar(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; char result;
  SWIG_check_num_args("ofBinaryToChar",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofBinaryToChar",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (char)ofBinaryToChar((std::string const &)*arg1);
  lua_pushlstring(L, &result, 1); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBinaryToFloat(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; float result;
  SWIG_check_num_args("ofBinaryToFloat",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofBinaryToFloat",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (float)ofBinaryToFloat((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBinaryToString(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  std::string result; SWIG_check_num_args("ofBinaryToString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBinaryToString",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofBinaryToString((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetVersionInfo(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofGetVersionInfo",0,0) result = ofGetVersionInfo();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetVersionMajor(lua_State* L) { int SWIG_arg = 0; unsigned int result;
  SWIG_check_num_args("ofGetVersionMajor",0,0) result = (unsigned int)ofGetVersionMajor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetVersionMinor(lua_State* L) { int SWIG_arg = 0; unsigned int result;
  SWIG_check_num_args("ofGetVersionMinor",0,0) result = (unsigned int)ofGetVersionMinor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetVersionPatch(lua_State* L) { int SWIG_arg = 0; unsigned int result;
  SWIG_check_num_args("ofGetVersionPatch",0,0) result = (unsigned int)ofGetVersionPatch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetVersionPreRelease(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofGetVersionPreRelease",0,0) result = ofGetVersionPreRelease();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSaveScreen(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  SWIG_check_num_args("ofSaveScreen",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSaveScreen",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; ofSaveScreen((std::string const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSaveFrame__SWIG_0(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSaveFrame",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSaveFrame",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofSaveFrame(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSaveFrame__SWIG_1(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSaveFrame",0,0) ofSaveFrame();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSaveFrame(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofSaveFrame__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isboolean(L,argv[0]); }  if (_v) {
      return _wrap_ofSaveFrame__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSaveFrame'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSaveFrame(bool)\n" "    ofSaveFrame()\n"); lua_error(L);return 0; }
static int _wrap_ofSaveViewport(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  SWIG_check_num_args("ofSaveViewport",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSaveViewport",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; ofSaveViewport((std::string const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSystem(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; std::string result;
  SWIG_check_num_args("ofSystem",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystem",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofSystem((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetTargetPlatform(lua_State* L) { int SWIG_arg = 0; ofTargetPlatform result;
  SWIG_check_num_args("ofGetTargetPlatform",0,0) result = (ofTargetPlatform)ofGetTargetPlatform();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofUTF8Iterator(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  ofUTF8Iterator *result = 0 ; SWIG_check_num_args("ofUTF8Iterator::ofUTF8Iterator",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofUTF8Iterator::ofUTF8Iterator",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (ofUTF8Iterator *)new ofUTF8Iterator((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofUTF8Iterator,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofUTF8Iterator_begin(lua_State* L) { int SWIG_arg = 0; ofUTF8Iterator *arg1 = (ofUTF8Iterator *) 0 ;
  utf8::iterator< std::string::const_iterator > result; SWIG_check_num_args("ofUTF8Iterator::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofUTF8Iterator::begin",1,"ofUTF8Iterator const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofUTF8Iterator,0))){
    SWIG_fail_ptr("ofUTF8Iterator_begin",1,SWIGTYPE_p_ofUTF8Iterator); }  result = ((ofUTF8Iterator const *)arg1)->begin(); {
    utf8::iterator< std::string::const_iterator > * resultptr = new utf8::iterator< std::string::const_iterator >((const utf8::iterator< std::string::const_iterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_utf8__iteratorT_std__string__const_iterator_t,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofUTF8Iterator_c_end(lua_State* L) { int SWIG_arg = 0; ofUTF8Iterator *arg1 = (ofUTF8Iterator *) 0 ;
  utf8::iterator< std::string::const_iterator > result; SWIG_check_num_args("ofUTF8Iterator::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofUTF8Iterator::end",1,"ofUTF8Iterator const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofUTF8Iterator,0))){
    SWIG_fail_ptr("ofUTF8Iterator_c_end",1,SWIGTYPE_p_ofUTF8Iterator); }  result = ((ofUTF8Iterator const *)arg1)->end(); {
    utf8::iterator< std::string::const_iterator > * resultptr = new utf8::iterator< std::string::const_iterator >((const utf8::iterator< std::string::const_iterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_utf8__iteratorT_std__string__const_iterator_t,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofUTF8Iterator_rbegin(lua_State* L) { int SWIG_arg = 0; ofUTF8Iterator *arg1 = (ofUTF8Iterator *) 0 ;
  utf8::iterator< std::string::const_reverse_iterator > result; SWIG_check_num_args("ofUTF8Iterator::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofUTF8Iterator::rbegin",1,"ofUTF8Iterator const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofUTF8Iterator,0))){
    SWIG_fail_ptr("ofUTF8Iterator_rbegin",1,SWIGTYPE_p_ofUTF8Iterator); }  result = ((ofUTF8Iterator const *)arg1)->rbegin(); {
    utf8::iterator< std::string::const_reverse_iterator > * resultptr = new utf8::iterator< std::string::const_reverse_iterator >((const utf8::iterator< std::string::const_reverse_iterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_utf8__iteratorT_std__string__const_reverse_iterator_t,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofUTF8Iterator_rend(lua_State* L) { int SWIG_arg = 0; ofUTF8Iterator *arg1 = (ofUTF8Iterator *) 0 ;
  utf8::iterator< std::string::const_reverse_iterator > result; SWIG_check_num_args("ofUTF8Iterator::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofUTF8Iterator::rend",1,"ofUTF8Iterator const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofUTF8Iterator,0))){
    SWIG_fail_ptr("ofUTF8Iterator_rend",1,SWIGTYPE_p_ofUTF8Iterator); }  result = ((ofUTF8Iterator const *)arg1)->rend(); {
    utf8::iterator< std::string::const_reverse_iterator > * resultptr = new utf8::iterator< std::string::const_reverse_iterator >((const utf8::iterator< std::string::const_reverse_iterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_utf8__iteratorT_std__string__const_reverse_iterator_t,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofUTF8Iterator(void *obj) {
ofUTF8Iterator *arg1 = (ofUTF8Iterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofUTF8Iterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofUTF8Iterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofUTF8Iterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofUTF8Iterator_methods[]= {
    { "begin", _wrap_ofUTF8Iterator_begin},
    { "c_end", _wrap_ofUTF8Iterator_c_end},
    { "rbegin", _wrap_ofUTF8Iterator_rbegin},
    { "rend", _wrap_ofUTF8Iterator_rend},
    {0,0}
};
static swig_lua_method swig_ofUTF8Iterator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofUTF8Iterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofUTF8Iterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofUTF8Iterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofUTF8Iterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofUTF8Iterator_Sf_SwigStatic = {
    "ofUTF8Iterator",
    swig_ofUTF8Iterator_Sf_SwigStatic_methods,
    swig_ofUTF8Iterator_Sf_SwigStatic_attributes,
    swig_ofUTF8Iterator_Sf_SwigStatic_constants,
    swig_ofUTF8Iterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofUTF8Iterator_bases[] = {0};
static const char *swig_ofUTF8Iterator_base_names[] = {0};
static swig_lua_class _wrap_class_ofUTF8Iterator = { "ofUTF8Iterator", "ofUTF8Iterator", &SWIGTYPE_p_ofUTF8Iterator,_proxy__wrap_new_ofUTF8Iterator, swig_delete_ofUTF8Iterator, swig_ofUTF8Iterator_methods, swig_ofUTF8Iterator_attributes, &swig_ofUTF8Iterator_Sf_SwigStatic, swig_ofUTF8Iterator_meta, swig_ofUTF8Iterator_bases, swig_ofUTF8Iterator_base_names };

static int _wrap_new_ofBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *result = 0 ;
  SWIG_check_num_args("ofBuffer::ofBuffer",0,0) result = (ofBuffer *)new ofBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBuffer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; char *arg1 = (char *) 0 ; unsigned int arg2 ;
  ofBuffer *result = 0 ; SWIG_check_num_args("ofBuffer::ofBuffer",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ofBuffer::ofBuffer",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBuffer::ofBuffer",2,"unsigned int"); arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (ofBuffer *)new ofBuffer((char const *)arg1,arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBuffer,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofBuffer__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  ofBuffer *result = 0 ; SWIG_check_num_args("ofBuffer::ofBuffer",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBuffer::ofBuffer",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = (ofBuffer *)new ofBuffer((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBuffer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofBuffer__SWIG_3(lua_State* L) { int SWIG_arg = 0; istream *arg1 = 0 ; ofBuffer *result = 0 ;
  SWIG_check_num_args("ofBuffer::ofBuffer",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBuffer::ofBuffer",1,"istream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_istream,0))){ SWIG_fail_ptr("new_ofBuffer",1,SWIGTYPE_p_istream); }
   result = (ofBuffer *)new ofBuffer(*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBuffer,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofBuffer(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofBuffer__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_istream, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofBuffer__SWIG_3(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_new_ofBuffer__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ofBuffer__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofBuffer'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBuffer::ofBuffer()\n" "    ofBuffer::ofBuffer(char const *,unsigned int)\n"
  "    ofBuffer::ofBuffer(std::string const &)\n" "    ofBuffer::ofBuffer(istream &)\n"); lua_error(L);return 0; }
static int _wrap_ofBuffer_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  char *arg2 = (char *) 0 ; unsigned int arg3 ; SWIG_check_num_args("ofBuffer::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::set",1,"ofBuffer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofBuffer::set",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBuffer::set",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_set",1,SWIGTYPE_p_ofBuffer); }  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->set((char const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("ofBuffer::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::set",1,"ofBuffer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofBuffer::set",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_set",1,SWIGTYPE_p_ofBuffer); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->set((std::string const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; istream *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofBuffer::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::set",1,"ofBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBuffer::set",2,"istream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_set",1,SWIGTYPE_p_ofBuffer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_istream,0))){ SWIG_fail_ptr("ofBuffer_set",2,SWIGTYPE_p_istream); }
   result = (bool)(arg1)->set(*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_set(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_istream, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_set__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofBuffer_set__SWIG_1(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_ofBuffer_set__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBuffer_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBuffer::set(char const *,unsigned int)\n" "    ofBuffer::set(std::string const &)\n" "    ofBuffer::set(istream &)\n");
  lua_error(L);return 0; }
static int _wrap_ofBuffer_append__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("ofBuffer::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::append",1,"ofBuffer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofBuffer::append",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_append",1,SWIGTYPE_p_ofBuffer); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->append((std::string const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_append__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  char *arg2 = (char *) 0 ; unsigned int arg3 ; SWIG_check_num_args("ofBuffer::append",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::append",1,"ofBuffer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofBuffer::append",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBuffer::append",3,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_append",1,SWIGTYPE_p_ofBuffer); }  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned int)lua_tonumber(L, 3);
  (arg1)->append((char const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_append(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofBuffer_append__SWIG_0(L);}  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = SWIG_lua_isnilstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_ofBuffer_append__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBuffer_append'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBuffer::append(std::string const &)\n" "    ofBuffer::append(char const *,unsigned int)\n"); lua_error(L);return 0; }
static int _wrap_ofBuffer_writeTo(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; ostream *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofBuffer::writeTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::writeTo",1,"ofBuffer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBuffer::writeTo",2,"ostream &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_writeTo",1,SWIGTYPE_p_ofBuffer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ostream,0))){
    SWIG_fail_ptr("ofBuffer_writeTo",2,SWIGTYPE_p_ostream); }  result = (bool)((ofBuffer const *)arg1)->writeTo(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_clear(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SWIG_check_num_args("ofBuffer::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::clear",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_clear",1,SWIGTYPE_p_ofBuffer); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_allocate(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; long arg2 ;
  SWIG_check_num_args("ofBuffer::allocate",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::allocate",1,"ofBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBuffer::allocate",2,"long");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_allocate",1,SWIGTYPE_p_ofBuffer); }  arg2 = (long)lua_tonumber(L, 2); (arg1)->allocate(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_getData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; char *result = 0 ;
  SWIG_check_num_args("ofBuffer::getData",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::getData",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_getData",1,SWIGTYPE_p_ofBuffer); }  result = (char *)(arg1)->getData();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_getData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; char *result = 0 ;
  SWIG_check_num_args("ofBuffer::getData",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::getData",1,"ofBuffer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_getData",1,SWIGTYPE_p_ofBuffer); }  result = (char *)((ofBuffer const *)arg1)->getData();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_getData(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_getData__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_getData__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBuffer_getData'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBuffer::getData()\n" "    ofBuffer::getData() const\n"); lua_error(L);return 0; }
static int _wrap_ofBuffer_getBinaryBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  char *result = 0 ; SWIG_check_num_args("ofBuffer::getBinaryBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::getBinaryBuffer",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_getBinaryBuffer",1,SWIGTYPE_p_ofBuffer); }  result = (char *)(arg1)->getBinaryBuffer();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_getBinaryBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  char *result = 0 ; SWIG_check_num_args("ofBuffer::getBinaryBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::getBinaryBuffer",1,"ofBuffer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_getBinaryBuffer",1,SWIGTYPE_p_ofBuffer); } 
  result = (char *)((ofBuffer const *)arg1)->getBinaryBuffer(); lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_getBinaryBuffer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_getBinaryBuffer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_getBinaryBuffer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBuffer_getBinaryBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBuffer::getBinaryBuffer()\n" "    ofBuffer::getBinaryBuffer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofBuffer_getText(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; std::string result;
  SWIG_check_num_args("ofBuffer::getText",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::getText",1,"ofBuffer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_getText",1,SWIGTYPE_p_ofBuffer); }  result = ((ofBuffer const *)arg1)->getText();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBuffer_size(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; long result;
  SWIG_check_num_args("ofBuffer::size",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::size",1,"ofBuffer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_size",1,SWIGTYPE_p_ofBuffer); }  result = (long)((ofBuffer const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_setIOBufferSize(lua_State* L) { int SWIG_arg = 0; size_t arg1 ;
  SWIG_check_num_args("ofBuffer::setIOBufferSize",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBuffer::setIOBufferSize",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (size_t)lua_tonumber(L, 1);
  ofBuffer::setIOBufferSize(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_getNextLine(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; std::string result;
  SWIG_check_num_args("ofBuffer::getNextLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::getNextLine",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_getNextLine",1,SWIGTYPE_p_ofBuffer); }  result = (arg1)->getNextLine();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBuffer_getFirstLine(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; std::string result;
  SWIG_check_num_args("ofBuffer::getFirstLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::getFirstLine",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_getFirstLine",1,SWIGTYPE_p_ofBuffer); }  result = (arg1)->getFirstLine();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBuffer_isLastLine(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ; bool result;
  SWIG_check_num_args("ofBuffer::isLastLine",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::isLastLine",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_isLastLine",1,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->isLastLine();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_resetLineReader(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SWIG_check_num_args("ofBuffer::resetLineReader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::resetLineReader",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_resetLineReader",1,SWIGTYPE_p_ofBuffer); }  (arg1)->resetLineReader(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_begin__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SwigValueWrapper< std::vector< char >::iterator > result; SWIG_check_num_args("ofBuffer::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::begin",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_begin",1,SWIGTYPE_p_ofBuffer); }  result = (arg1)->begin(); {
    std::vector< char >::iterator * resultptr = new std::vector< char >::iterator((const std::vector< char >::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t__iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_c_end__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SwigValueWrapper< std::vector< char >::iterator > result; SWIG_check_num_args("ofBuffer::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::end",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_c_end",1,SWIGTYPE_p_ofBuffer); }  result = (arg1)->end(); {
    std::vector< char >::iterator * resultptr = new std::vector< char >::iterator((const std::vector< char >::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t__iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_begin__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SwigValueWrapper< std::vector< char >::const_iterator > result; SWIG_check_num_args("ofBuffer::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::begin",1,"ofBuffer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_begin",1,SWIGTYPE_p_ofBuffer); }  result = ((ofBuffer const *)arg1)->begin(); {
    std::vector< char >::const_iterator * resultptr = new std::vector< char >::const_iterator((const std::vector< char >::const_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t__const_iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_begin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_begin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_begin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBuffer_begin'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBuffer::begin()\n" "    ofBuffer::begin() const\n"); lua_error(L);return 0; }
static int _wrap_ofBuffer_c_end__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SwigValueWrapper< std::vector< char >::const_iterator > result; SWIG_check_num_args("ofBuffer::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::end",1,"ofBuffer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_c_end",1,SWIGTYPE_p_ofBuffer); }  result = ((ofBuffer const *)arg1)->end(); {
    std::vector< char >::const_iterator * resultptr = new std::vector< char >::const_iterator((const std::vector< char >::const_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t__const_iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_c_end(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_c_end__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_c_end__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBuffer_c_end'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBuffer::end()\n" "    ofBuffer::end() const\n"); lua_error(L);return 0; }
static int _wrap_ofBuffer_rbegin__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SwigValueWrapper< std::vector< char >::reverse_iterator > result; SWIG_check_num_args("ofBuffer::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::rbegin",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_rbegin",1,SWIGTYPE_p_ofBuffer); }  result = (arg1)->rbegin(); {
    std::vector< char >::reverse_iterator * resultptr = new std::vector< char >::reverse_iterator((const std::vector< char >::reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t__reverse_iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_rend__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SwigValueWrapper< std::vector< char >::reverse_iterator > result; SWIG_check_num_args("ofBuffer::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::rend",1,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_rend",1,SWIGTYPE_p_ofBuffer); }  result = (arg1)->rend(); {
    std::vector< char >::reverse_iterator * resultptr = new std::vector< char >::reverse_iterator((const std::vector< char >::reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t__reverse_iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_rbegin__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SwigValueWrapper< std::vector< char >::const_reverse_iterator > result; SWIG_check_num_args("ofBuffer::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::rbegin",1,"ofBuffer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_rbegin",1,SWIGTYPE_p_ofBuffer); }  result = ((ofBuffer const *)arg1)->rbegin(); {
    std::vector< char >::const_reverse_iterator * resultptr = new std::vector< char >::const_reverse_iterator((const std::vector< char >::const_reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t__const_reverse_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_rbegin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_rbegin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_rbegin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBuffer_rbegin'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBuffer::rbegin()\n" "    ofBuffer::rbegin() const\n"); lua_error(L);return 0; }
static int _wrap_ofBuffer_rend__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBuffer *arg1 = (ofBuffer *) 0 ;
  SwigValueWrapper< std::vector< char >::const_reverse_iterator > result; SWIG_check_num_args("ofBuffer::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBuffer::rend",1,"ofBuffer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBuffer_rend",1,SWIGTYPE_p_ofBuffer); }  result = ((ofBuffer const *)arg1)->rend(); {
    std::vector< char >::const_reverse_iterator * resultptr = new std::vector< char >::const_reverse_iterator((const std::vector< char >::const_reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_t__const_reverse_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBuffer_rend(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_rend__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBuffer_rend__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBuffer_rend'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBuffer::rend()\n" "    ofBuffer::rend() const\n"); lua_error(L);return 0; }
static void swig_delete_ofBuffer(void *obj) {
ofBuffer *arg1 = (ofBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofBuffer_methods[]= {
    { "set", _wrap_ofBuffer_set},
    { "append", _wrap_ofBuffer_append},
    { "writeTo", _wrap_ofBuffer_writeTo},
    { "clear", _wrap_ofBuffer_clear},
    { "allocate", _wrap_ofBuffer_allocate},
    { "getData", _wrap_ofBuffer_getData},
    { "getBinaryBuffer", _wrap_ofBuffer_getBinaryBuffer},
    { "getText", _wrap_ofBuffer_getText},
    { "size", _wrap_ofBuffer_size},
    { "getNextLine", _wrap_ofBuffer_getNextLine},
    { "getFirstLine", _wrap_ofBuffer_getFirstLine},
    { "isLastLine", _wrap_ofBuffer_isLastLine},
    { "resetLineReader", _wrap_ofBuffer_resetLineReader},
    { "begin", _wrap_ofBuffer_begin},
    { "c_end", _wrap_ofBuffer_c_end},
    { "rbegin", _wrap_ofBuffer_rbegin},
    { "rend", _wrap_ofBuffer_rend},
    {0,0}
};
static swig_lua_method swig_ofBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofBuffer_Sf_SwigStatic_methods[]= {
    { "setIOBufferSize", _wrap_ofBuffer_setIOBufferSize},
    {0,0}
};
static swig_lua_class* swig_ofBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofBuffer_Sf_SwigStatic = {
    "ofBuffer",
    swig_ofBuffer_Sf_SwigStatic_methods,
    swig_ofBuffer_Sf_SwigStatic_attributes,
    swig_ofBuffer_Sf_SwigStatic_constants,
    swig_ofBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofBuffer_bases[] = {0};
static const char *swig_ofBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_ofBuffer = { "ofBuffer", "ofBuffer", &SWIGTYPE_p_ofBuffer,_proxy__wrap_new_ofBuffer, swig_delete_ofBuffer, swig_ofBuffer_methods, swig_ofBuffer_attributes, &swig_ofBuffer_Sf_SwigStatic, swig_ofBuffer_meta, swig_ofBuffer_bases, swig_ofBuffer_base_names };

static int _wrap_ofBufferFromFile__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; bool arg2 ;
  std::string temp1 ; ofBuffer result; SWIG_check_num_args("ofBufferFromFile",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBufferFromFile",1,"std::string const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBufferFromFile",2,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; arg2 = (lua_toboolean(L, 2)!=0);
  result = ofBufferFromFile((std::string const &)*arg1,arg2); { ofBuffer * resultptr = new ofBuffer((const ofBuffer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofBuffer,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBufferFromFile__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  ofBuffer result; SWIG_check_num_args("ofBufferFromFile",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBufferFromFile",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofBufferFromFile((std::string const &)*arg1); {
    ofBuffer * resultptr = new ofBuffer((const ofBuffer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofBuffer,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBufferFromFile(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofBufferFromFile__SWIG_1(L);}  }  if (argc == 2) { int _v;
    { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofBufferFromFile__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBufferFromFile'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBufferFromFile(std::string const &,bool)\n" "    ofBufferFromFile(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ofBufferToFile__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; ofBuffer *arg2 = 0 ;
  bool arg3 ; std::string temp1 ; bool result; SWIG_check_num_args("ofBufferToFile",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBufferToFile",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBufferToFile",2,"ofBuffer &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofBufferToFile",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBufferToFile",2,SWIGTYPE_p_ofBuffer); }  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ofBufferToFile((std::string const &)*arg1,*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBufferToFile__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; ofBuffer *arg2 = 0 ;
  std::string temp1 ; bool result; SWIG_check_num_args("ofBufferToFile",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBufferToFile",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBufferToFile",2,"ofBuffer &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofBufferToFile",2,SWIGTYPE_p_ofBuffer); }  result = (bool)ofBufferToFile((std::string const &)*arg1,*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBufferToFile(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofBufferToFile__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { return _wrap_ofBufferToFile__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBufferToFile'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBufferToFile(std::string const &,ofBuffer &,bool)\n"
  "    ofBufferToFile(std::string const &,ofBuffer &)\n"); lua_error(L);return 0; }
static int _wrap_ofFilePath_getFileExt(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::getFileExt",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getFileExt",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::getFileExt(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_removeExt(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::removeExt",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::removeExt",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::removeExt(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_addLeadingSlash(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::addLeadingSlash",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::addLeadingSlash",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::addLeadingSlash(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_addTrailingSlash(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::addTrailingSlash",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::addTrailingSlash",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::addTrailingSlash(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_removeTrailingSlash(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::removeTrailingSlash",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::removeTrailingSlash",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::removeTrailingSlash(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getPathForDirectory(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::getPathForDirectory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getPathForDirectory",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::getPathForDirectory(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getAbsolutePath__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  std::string result; SWIG_check_num_args("ofFilePath::getAbsolutePath",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getAbsolutePath",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFilePath::getAbsolutePath",2,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0);
  result = ofFilePath::getAbsolutePath(arg1,arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFilePath_getAbsolutePath__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::getAbsolutePath",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getAbsolutePath",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::getAbsolutePath(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getAbsolutePath(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofFilePath_getAbsolutePath__SWIG_1(L);}  } 
  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFilePath_getAbsolutePath__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFilePath_getAbsolutePath'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFilePath::getAbsolutePath(std::string,bool)\n"
  "    ofFilePath::getAbsolutePath(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofFilePath_isAbsolute(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool result;
  SWIG_check_num_args("ofFilePath::isAbsolute",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::isAbsolute",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = (bool)ofFilePath::isAbsolute(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFilePath_getFileName__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  std::string result; SWIG_check_num_args("ofFilePath::getFileName",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getFileName",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFilePath::getFileName",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); result = ofFilePath::getFileName(arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getFileName__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::getFileName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getFileName",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::getFileName(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getFileName(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofFilePath_getFileName__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFilePath_getFileName__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFilePath_getFileName'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFilePath::getFileName(std::string,bool)\n"
  "    ofFilePath::getFileName(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofFilePath_getBaseName(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofFilePath::getBaseName",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getBaseName",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::getBaseName(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getEnclosingDirectory__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  std::string result; SWIG_check_num_args("ofFilePath::getEnclosingDirectory",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getEnclosingDirectory",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFilePath::getEnclosingDirectory",2,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0);
  result = ofFilePath::getEnclosingDirectory(arg1,arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFilePath_getEnclosingDirectory__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  std::string result; SWIG_check_num_args("ofFilePath::getEnclosingDirectory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::getEnclosingDirectory",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofFilePath::getEnclosingDirectory(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getEnclosingDirectory(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      return _wrap_ofFilePath_getEnclosingDirectory__SWIG_1(L);}  }  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { return _wrap_ofFilePath_getEnclosingDirectory__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFilePath_getEnclosingDirectory'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFilePath::getEnclosingDirectory(std::string,bool)\n"
  "    ofFilePath::getEnclosingDirectory(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofFilePath_createEnclosingDirectory__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  bool arg3 ; bool result; SWIG_check_num_args("ofFilePath::createEnclosingDirectory",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::createEnclosingDirectory",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFilePath::createEnclosingDirectory",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFilePath::createEnclosingDirectory",3,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ofFilePath::createEnclosingDirectory(arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFilePath_createEnclosingDirectory__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  bool result; SWIG_check_num_args("ofFilePath::createEnclosingDirectory",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::createEnclosingDirectory",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFilePath::createEnclosingDirectory",2,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ofFilePath::createEnclosingDirectory(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFilePath_createEnclosingDirectory__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool result;
  SWIG_check_num_args("ofFilePath::createEnclosingDirectory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::createEnclosingDirectory",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = (bool)ofFilePath::createEnclosingDirectory(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFilePath_createEnclosingDirectory(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      return _wrap_ofFilePath_createEnclosingDirectory__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFilePath_createEnclosingDirectory__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_ofFilePath_createEnclosingDirectory__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFilePath_createEnclosingDirectory'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFilePath::createEnclosingDirectory(std::string,bool,bool)\n"
  "    ofFilePath::createEnclosingDirectory(std::string,bool)\n" "    ofFilePath::createEnclosingDirectory(std::string)\n");
  lua_error(L);return 0; }
static int _wrap_ofFilePath_getCurrentWorkingDirectory(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofFilePath::getCurrentWorkingDirectory",0,0) result = ofFilePath::getCurrentWorkingDirectory();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_join(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; std::string result;
  SWIG_check_num_args("ofFilePath::join",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofFilePath::join",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFilePath::join",2,"std::string"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = ofFilePath::join(arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getCurrentExePath(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofFilePath::getCurrentExePath",0,0) result = ofFilePath::getCurrentExePath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getCurrentExeDir(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofFilePath::getCurrentExeDir",0,0) result = ofFilePath::getCurrentExeDir();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFilePath_getUserHomeDir(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofFilePath::getUserHomeDir",0,0) result = ofFilePath::getUserHomeDir();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofFilePath(lua_State* L) { int SWIG_arg = 0; ofFilePath *result = 0 ;
  SWIG_check_num_args("ofFilePath::ofFilePath",0,0) result = (ofFilePath *)new ofFilePath();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFilePath,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_ofFilePath(void *obj) {
ofFilePath *arg1 = (ofFilePath *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofFilePath(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofFilePath);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofFilePath_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofFilePath_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofFilePath_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofFilePath_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofFilePath_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofFilePath_Sf_SwigStatic_methods[]= {
    { "getFileExt", _wrap_ofFilePath_getFileExt},
    { "removeExt", _wrap_ofFilePath_removeExt},
    { "addLeadingSlash", _wrap_ofFilePath_addLeadingSlash},
    { "addTrailingSlash", _wrap_ofFilePath_addTrailingSlash},
    { "removeTrailingSlash", _wrap_ofFilePath_removeTrailingSlash},
    { "getPathForDirectory", _wrap_ofFilePath_getPathForDirectory},
    { "getAbsolutePath", _wrap_ofFilePath_getAbsolutePath},
    { "isAbsolute", _wrap_ofFilePath_isAbsolute},
    { "getFileName", _wrap_ofFilePath_getFileName},
    { "getBaseName", _wrap_ofFilePath_getBaseName},
    { "getEnclosingDirectory", _wrap_ofFilePath_getEnclosingDirectory},
    { "createEnclosingDirectory", _wrap_ofFilePath_createEnclosingDirectory},
    { "getCurrentWorkingDirectory", _wrap_ofFilePath_getCurrentWorkingDirectory},
    { "join", _wrap_ofFilePath_join},
    { "getCurrentExePath", _wrap_ofFilePath_getCurrentExePath},
    { "getCurrentExeDir", _wrap_ofFilePath_getCurrentExeDir},
    { "getUserHomeDir", _wrap_ofFilePath_getUserHomeDir},
    {0,0}
};
static swig_lua_class* swig_ofFilePath_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofFilePath_Sf_SwigStatic = {
    "ofFilePath",
    swig_ofFilePath_Sf_SwigStatic_methods,
    swig_ofFilePath_Sf_SwigStatic_attributes,
    swig_ofFilePath_Sf_SwigStatic_constants,
    swig_ofFilePath_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofFilePath_bases[] = {0};
static const char *swig_ofFilePath_base_names[] = {0};
static swig_lua_class _wrap_class_ofFilePath = { "ofFilePath", "ofFilePath", &SWIGTYPE_p_ofFilePath,_proxy__wrap_new_ofFilePath, swig_delete_ofFilePath, swig_ofFilePath_methods, swig_ofFilePath_attributes, &swig_ofFilePath_Sf_SwigStatic, swig_ofFilePath_meta, swig_ofFilePath_bases, swig_ofFilePath_base_names };

static int _wrap_new_ofFile__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *result = 0 ;
  SWIG_check_num_args("ofFile::ofFile",0,0) result = (ofFile *)new ofFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFile,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofFile__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::filesystem::path *arg1 = 0 ; ofFile::Mode arg2 ;
  bool arg3 ; ofFile *result = 0 ; SWIG_check_num_args("ofFile::ofFile",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofFile::ofFile",1,"std::filesystem::path const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFile::ofFile",2,"ofFile::Mode");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::ofFile",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("new_ofFile",1,SWIGTYPE_p_std__filesystem__path); }  arg2 = (ofFile::Mode)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); result = (ofFile *)new ofFile((std::filesystem::path const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFile,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofFile__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::filesystem::path *arg1 = 0 ; ofFile::Mode arg2 ;
  ofFile *result = 0 ; SWIG_check_num_args("ofFile::ofFile",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofFile::ofFile",1,"std::filesystem::path const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFile::ofFile",2,"ofFile::Mode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("new_ofFile",1,SWIGTYPE_p_std__filesystem__path); }  arg2 = (ofFile::Mode)(int)lua_tonumber(L, 2);
  result = (ofFile *)new ofFile((std::filesystem::path const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFile,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofFile__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::filesystem::path *arg1 = 0 ; ofFile *result = 0 ;
  SWIG_check_num_args("ofFile::ofFile",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofFile::ofFile",1,"std::filesystem::path const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("new_ofFile",1,SWIGTYPE_p_std__filesystem__path); } 
  result = (ofFile *)new ofFile((std::filesystem::path const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFile,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofFile__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = 0 ; ofFile *result = 0 ;
  SWIG_check_num_args("ofFile::ofFile",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofFile::ofFile",1,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("new_ofFile",1,SWIGTYPE_p_ofFile); } 
  result = (ofFile *)new ofFile((ofFile const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFile,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFile(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofFile__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__filesystem__path, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofFile__SWIG_3(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofFile__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__filesystem__path, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ofFile__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__filesystem__path, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_new_ofFile__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofFile'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::ofFile()\n" "    ofFile::ofFile(std::filesystem::path const &,ofFile::Mode,bool)\n"
  "    ofFile::ofFile(std::filesystem::path const &,ofFile::Mode)\n" "    ofFile::ofFile(std::filesystem::path const &)\n"
  "    ofFile::ofFile(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_ofFile_open__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ;
  std::filesystem::path *arg2 = 0 ; ofFile::Mode arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofFile::open",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::open",1,"ofFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFile::open",2,"std::filesystem::path const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFile::open",3,"ofFile::Mode");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofFile::open",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_open",1,SWIGTYPE_p_ofFile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("ofFile_open",2,SWIGTYPE_p_std__filesystem__path); }  arg3 = (ofFile::Mode)(int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->open((std::filesystem::path const &)*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_open__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ;
  std::filesystem::path *arg2 = 0 ; ofFile::Mode arg3 ; bool result; SWIG_check_num_args("ofFile::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::open",1,"ofFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFile::open",2,"std::filesystem::path const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFile::open",3,"ofFile::Mode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_open",1,SWIGTYPE_p_ofFile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("ofFile_open",2,SWIGTYPE_p_std__filesystem__path); }  arg3 = (ofFile::Mode)(int)lua_tonumber(L, 3);
  result = (bool)(arg1)->open((std::filesystem::path const &)*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_open__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ;
  std::filesystem::path *arg2 = 0 ; bool result; SWIG_check_num_args("ofFile::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::open",1,"ofFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFile::open",2,"std::filesystem::path const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_open",1,SWIGTYPE_p_ofFile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("ofFile_open",2,SWIGTYPE_p_std__filesystem__path); } 
  result = (bool)(arg1)->open((std::filesystem::path const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_open(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__filesystem__path, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFile_open__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__filesystem__path, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFile_open__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__filesystem__path, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofFile_open__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_open'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::open(std::filesystem::path const &,ofFile::Mode,bool)\n"
  "    ofFile::open(std::filesystem::path const &,ofFile::Mode)\n" "    ofFile::open(std::filesystem::path const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofFile_changeMode__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; ofFile::Mode arg2 ;
  bool arg3 ; bool result; SWIG_check_num_args("ofFile::changeMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::changeMode",1,"ofFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFile::changeMode",2,"ofFile::Mode");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::changeMode",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_changeMode",1,SWIGTYPE_p_ofFile); }  arg2 = (ofFile::Mode)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->changeMode(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_changeMode__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; ofFile::Mode arg2 ;
  bool result; SWIG_check_num_args("ofFile::changeMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::changeMode",1,"ofFile *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFile::changeMode",2,"ofFile::Mode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_changeMode",1,SWIGTYPE_p_ofFile); }  arg2 = (ofFile::Mode)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->changeMode(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_changeMode(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_changeMode__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofFile_changeMode__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_changeMode'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::changeMode(ofFile::Mode,bool)\n" "    ofFile::changeMode(ofFile::Mode)\n"); lua_error(L);return 0; }
static int _wrap_ofFile_close(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ;
  SWIG_check_num_args("ofFile::close",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::close",1,"ofFile *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_close",1,SWIGTYPE_p_ofFile); } 
  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_create(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::create",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::create",1,"ofFile *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_create",1,SWIGTYPE_p_ofFile); }
   result = (bool)(arg1)->create(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_exists(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::exists",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::exists",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_exists",1,SWIGTYPE_p_ofFile); }
   result = (bool)((ofFile const *)arg1)->exists(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_path(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string result;
  SWIG_check_num_args("ofFile::path",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::path",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_path",1,SWIGTYPE_p_ofFile); } 
  result = ((ofFile const *)arg1)->path(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_getExtension(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string result;
  SWIG_check_num_args("ofFile::getExtension",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::getExtension",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_getExtension",1,SWIGTYPE_p_ofFile); }  result = ((ofFile const *)arg1)->getExtension();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFile_getFileName(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string result;
  SWIG_check_num_args("ofFile::getFileName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::getFileName",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_getFileName",1,SWIGTYPE_p_ofFile); }  result = ((ofFile const *)arg1)->getFileName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFile_getBaseName(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string result;
  SWIG_check_num_args("ofFile::getBaseName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::getBaseName",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_getBaseName",1,SWIGTYPE_p_ofFile); }  result = ((ofFile const *)arg1)->getBaseName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFile_getEnclosingDirectory(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ;
  std::string result; SWIG_check_num_args("ofFile::getEnclosingDirectory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::getEnclosingDirectory",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_getEnclosingDirectory",1,SWIGTYPE_p_ofFile); } 
  result = ((ofFile const *)arg1)->getEnclosingDirectory(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_getAbsolutePath(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string result;
  SWIG_check_num_args("ofFile::getAbsolutePath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::getAbsolutePath",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_getAbsolutePath",1,SWIGTYPE_p_ofFile); }  result = ((ofFile const *)arg1)->getAbsolutePath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFile_canRead(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::canRead",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::canRead",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_canRead",1,SWIGTYPE_p_ofFile); }
   result = (bool)((ofFile const *)arg1)->canRead(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_canWrite(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::canWrite",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::canWrite",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_canWrite",1,SWIGTYPE_p_ofFile); }  result = (bool)((ofFile const *)arg1)->canWrite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_canExecute(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::canExecute",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::canExecute",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_canExecute",1,SWIGTYPE_p_ofFile); }  result = (bool)((ofFile const *)arg1)->canExecute();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_isFile(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::isFile",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::isFile",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_isFile",1,SWIGTYPE_p_ofFile); }
   result = (bool)((ofFile const *)arg1)->isFile(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_isLink(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::isLink",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::isLink",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_isLink",1,SWIGTYPE_p_ofFile); }
   result = (bool)((ofFile const *)arg1)->isLink(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_isDirectory(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::isDirectory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::isDirectory",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_isDirectory",1,SWIGTYPE_p_ofFile); }  result = (bool)((ofFile const *)arg1)->isDirectory();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_isDevice(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::isDevice",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::isDevice",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_isDevice",1,SWIGTYPE_p_ofFile); }  result = (bool)((ofFile const *)arg1)->isDevice();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_isHidden(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::isHidden",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::isHidden",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_isHidden",1,SWIGTYPE_p_ofFile); }  result = (bool)((ofFile const *)arg1)->isHidden();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_setWriteable__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofFile::setWriteable",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::setWriteable",1,"ofFile *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFile::setWriteable",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_setWriteable",1,SWIGTYPE_p_ofFile); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setWriteable(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_setWriteable__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ;
  SWIG_check_num_args("ofFile::setWriteable",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::setWriteable",1,"ofFile *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_setWriteable",1,SWIGTYPE_p_ofFile); }  (arg1)->setWriteable(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_setWriteable(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFile_setWriteable__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_setWriteable__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_setWriteable'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFile::setWriteable(bool)\n" "    ofFile::setWriteable()\n");
  lua_error(L);return 0; }
static int _wrap_ofFile_setReadOnly__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofFile::setReadOnly",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::setReadOnly",1,"ofFile *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFile::setReadOnly",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_setReadOnly",1,SWIGTYPE_p_ofFile); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setReadOnly(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_setReadOnly__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ;
  SWIG_check_num_args("ofFile::setReadOnly",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::setReadOnly",1,"ofFile *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_setReadOnly",1,SWIGTYPE_p_ofFile); }  (arg1)->setReadOnly(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_setReadOnly(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFile_setReadOnly__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_setReadOnly__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_setReadOnly'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::setReadOnly(bool)\n" "    ofFile::setReadOnly()\n"); lua_error(L);return 0; }
static int _wrap_ofFile_setExecutable__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofFile::setExecutable",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::setExecutable",1,"ofFile *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFile::setExecutable",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_setExecutable",1,SWIGTYPE_p_ofFile); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setExecutable(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_setExecutable__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ;
  SWIG_check_num_args("ofFile::setExecutable",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::setExecutable",1,"ofFile *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_setExecutable",1,SWIGTYPE_p_ofFile); }  (arg1)->setExecutable(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_setExecutable(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFile_setExecutable__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_setExecutable__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_setExecutable'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFile::setExecutable(bool)\n" "    ofFile::setExecutable()\n");
  lua_error(L);return 0; }
static int _wrap_ofFile_copyTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofFile::copyTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::copyTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::copyTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::copyTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofFile::copyTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_copyTo",1,SWIGTYPE_p_ofFile); }
   (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->copyTo(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_copyTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool arg3 ; bool result; SWIG_check_num_args("ofFile::copyTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::copyTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::copyTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::copyTo",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_copyTo",1,SWIGTYPE_p_ofFile); }
   (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->copyTo(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_copyTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool result; SWIG_check_num_args("ofFile::copyTo",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::copyTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::copyTo",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_copyTo",1,SWIGTYPE_p_ofFile); }
   (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->copyTo(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_copyTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_copyTo__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofFile_copyTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofFile_copyTo__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_copyTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::copyTo(std::string,bool,bool)\n" "    ofFile::copyTo(std::string,bool)\n" "    ofFile::copyTo(std::string)\n");
  lua_error(L);return 0; }
static int _wrap_ofFile_moveTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofFile::moveTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::moveTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::moveTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::moveTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofFile::moveTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_moveTo",1,SWIGTYPE_p_ofFile); }
   (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->moveTo(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_moveTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool arg3 ; bool result; SWIG_check_num_args("ofFile::moveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::moveTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::moveTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::moveTo",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_moveTo",1,SWIGTYPE_p_ofFile); }
   (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->moveTo(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_moveTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool result; SWIG_check_num_args("ofFile::moveTo",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::moveTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::moveTo",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_moveTo",1,SWIGTYPE_p_ofFile); }
   (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->moveTo(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_moveTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_moveTo__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofFile_moveTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofFile_moveTo__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_moveTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::moveTo(std::string,bool,bool)\n" "    ofFile::moveTo(std::string,bool)\n" "    ofFile::moveTo(std::string)\n");
  lua_error(L);return 0; }
static int _wrap_ofFile_renameTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofFile::renameTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::renameTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::renameTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::renameTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofFile::renameTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_renameTo",1,SWIGTYPE_p_ofFile); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->renameTo(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_renameTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool arg3 ; bool result; SWIG_check_num_args("ofFile::renameTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::renameTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::renameTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::renameTo",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_renameTo",1,SWIGTYPE_p_ofFile); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->renameTo(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_renameTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; std::string arg2 ;
  bool result; SWIG_check_num_args("ofFile::renameTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::renameTo",1,"ofFile *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::renameTo",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_renameTo",1,SWIGTYPE_p_ofFile); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->renameTo(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_renameTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_renameTo__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofFile_renameTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofFile_renameTo__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_renameTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::renameTo(std::string,bool,bool)\n" "    ofFile::renameTo(std::string,bool)\n"
  "    ofFile::renameTo(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofFile_remove__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool arg2 ; bool result;
  SWIG_check_num_args("ofFile::remove",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::remove",1,"ofFile *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFile::remove",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_remove",1,SWIGTYPE_p_ofFile); }
   arg2 = (lua_toboolean(L, 2)!=0); result = (bool)(arg1)->remove(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_remove__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; bool result;
  SWIG_check_num_args("ofFile::remove",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::remove",1,"ofFile *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_remove",1,SWIGTYPE_p_ofFile); }
   result = (bool)(arg1)->remove(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_remove(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFile_remove__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_remove__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_remove'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::remove(bool)\n" "    ofFile::remove()\n"); lua_error(L);return 0; }
static int _wrap_ofFile_getSize(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; uint64_t result;
  SWIG_check_num_args("ofFile::getSize",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::getSize",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile_getSize",1,SWIGTYPE_p_ofFile); }
   result = ((ofFile const *)arg1)->getSize(); { uint64_t * resultptr = new uint64_t((const uint64_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFile___eq(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofFile::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::operator ==",1,"ofFile const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFile::operator ==",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile___eq",1,SWIGTYPE_p_ofFile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile___eq",2,SWIGTYPE_p_ofFile); } 
  result = (bool)((ofFile const *)arg1)->operator ==((ofFile const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile___lt(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofFile::operator <",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::operator <",1,"ofFile const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFile::operator <",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile___lt",1,SWIGTYPE_p_ofFile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile___lt",2,SWIGTYPE_p_ofFile); } 
  result = (bool)((ofFile const *)arg1)->operator <((ofFile const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile___le(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofFile::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::operator <=",1,"ofFile const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFile::operator <=",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile___le",1,SWIGTYPE_p_ofFile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("ofFile___le",2,SWIGTYPE_p_ofFile); } 
  result = (bool)((ofFile const *)arg1)->operator <=((ofFile const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_readToBuffer(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; ofBuffer result;
  SWIG_check_num_args("ofFile::readToBuffer",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::readToBuffer",1,"ofFile *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_readToBuffer",1,SWIGTYPE_p_ofFile); }  result = (arg1)->readToBuffer(); {
    ofBuffer * resultptr = new ofBuffer((const ofBuffer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofBuffer,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_writeFromBuffer(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; ofBuffer *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofFile::writeFromBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::writeFromBuffer",1,"ofFile *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFile::writeFromBuffer",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_writeFromBuffer",1,SWIGTYPE_p_ofFile); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofFile_writeFromBuffer",2,SWIGTYPE_p_ofBuffer); } 
  result = (bool)(arg1)->writeFromBuffer((ofBuffer const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_getFileBuffer(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = (ofFile *) 0 ; filebuf *result = 0 ;
  SWIG_check_num_args("ofFile::getFileBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFile::getFileBuffer",1,"ofFile const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("ofFile_getFileBuffer",1,SWIGTYPE_p_ofFile); }  result = (filebuf *)((ofFile const *)arg1)->getFileBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_filebuf,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFile_copyFromTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; bool arg3 ;
  bool arg4 ; bool result; SWIG_check_num_args("ofFile::copyFromTo",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::copyFromTo",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::copyFromTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::copyFromTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofFile::copyFromTo",4,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)ofFile::copyFromTo(arg1,arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_copyFromTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; bool arg3 ;
  bool result; SWIG_check_num_args("ofFile::copyFromTo",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::copyFromTo",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::copyFromTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::copyFromTo",3,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ofFile::copyFromTo(arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_copyFromTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofFile::copyFromTo",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::copyFromTo",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::copyFromTo",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)ofFile::copyFromTo(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_copyFromTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_copyFromTo__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofFile_copyFromTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofFile_copyFromTo__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_copyFromTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::copyFromTo(std::string,std::string,bool,bool)\n" "    ofFile::copyFromTo(std::string,std::string,bool)\n"
  "    ofFile::copyFromTo(std::string,std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofFile_moveFromTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; bool arg3 ;
  bool arg4 ; bool result; SWIG_check_num_args("ofFile::moveFromTo",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::moveFromTo",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::moveFromTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::moveFromTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofFile::moveFromTo",4,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)ofFile::moveFromTo(arg1,arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_moveFromTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; bool arg3 ;
  bool result; SWIG_check_num_args("ofFile::moveFromTo",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::moveFromTo",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::moveFromTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofFile::moveFromTo",3,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ofFile::moveFromTo(arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_moveFromTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofFile::moveFromTo",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::moveFromTo",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFile::moveFromTo",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)ofFile::moveFromTo(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_moveFromTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_moveFromTo__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofFile_moveFromTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofFile_moveFromTo__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_moveFromTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::moveFromTo(std::string,std::string,bool,bool)\n" "    ofFile::moveFromTo(std::string,std::string,bool)\n"
  "    ofFile::moveFromTo(std::string,std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofFile_doesFileExist__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; bool result;
  SWIG_check_num_args("ofFile::doesFileExist",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::doesFileExist",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFile::doesFileExist",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); result = (bool)ofFile::doesFileExist(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_doesFileExist__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool result;
  SWIG_check_num_args("ofFile::doesFileExist",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::doesFileExist",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = (bool)ofFile::doesFileExist(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_doesFileExist(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofFile_doesFileExist__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_doesFileExist__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_doesFileExist'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFile::doesFileExist(std::string,bool)\n"
  "    ofFile::doesFileExist(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofFile_removeFile__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; bool result;
  SWIG_check_num_args("ofFile::removeFile",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::removeFile",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFile::removeFile",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); result = (bool)ofFile::removeFile(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_removeFile__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool result;
  SWIG_check_num_args("ofFile::removeFile",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofFile::removeFile",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = (bool)ofFile::removeFile(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFile_removeFile(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofFile_removeFile__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofFile_removeFile__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFile_removeFile'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFile::removeFile(std::string,bool)\n" "    ofFile::removeFile(std::string)\n"); lua_error(L);return 0; }
static void swig_delete_ofFile(void *obj) {
ofFile *arg1 = (ofFile *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofFile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofFile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofFile_methods[]= {
    { "open", _wrap_ofFile_open},
    { "changeMode", _wrap_ofFile_changeMode},
    { "close", _wrap_ofFile_close},
    { "create", _wrap_ofFile_create},
    { "exists", _wrap_ofFile_exists},
    { "path", _wrap_ofFile_path},
    { "getExtension", _wrap_ofFile_getExtension},
    { "getFileName", _wrap_ofFile_getFileName},
    { "getBaseName", _wrap_ofFile_getBaseName},
    { "getEnclosingDirectory", _wrap_ofFile_getEnclosingDirectory},
    { "getAbsolutePath", _wrap_ofFile_getAbsolutePath},
    { "canRead", _wrap_ofFile_canRead},
    { "canWrite", _wrap_ofFile_canWrite},
    { "canExecute", _wrap_ofFile_canExecute},
    { "isFile", _wrap_ofFile_isFile},
    { "isLink", _wrap_ofFile_isLink},
    { "isDirectory", _wrap_ofFile_isDirectory},
    { "isDevice", _wrap_ofFile_isDevice},
    { "isHidden", _wrap_ofFile_isHidden},
    { "setWriteable", _wrap_ofFile_setWriteable},
    { "setReadOnly", _wrap_ofFile_setReadOnly},
    { "setExecutable", _wrap_ofFile_setExecutable},
    { "copyTo", _wrap_ofFile_copyTo},
    { "moveTo", _wrap_ofFile_moveTo},
    { "renameTo", _wrap_ofFile_renameTo},
    { "remove", _wrap_ofFile_remove},
    { "getSize", _wrap_ofFile_getSize},
    { "__eq", _wrap_ofFile___eq},
    { "__lt", _wrap_ofFile___lt},
    { "__le", _wrap_ofFile___le},
    { "readToBuffer", _wrap_ofFile_readToBuffer},
    { "writeFromBuffer", _wrap_ofFile_writeFromBuffer},
    { "getFileBuffer", _wrap_ofFile_getFileBuffer},
    {0,0}
};
static swig_lua_method swig_ofFile_meta[] = {
    { "__eq", _wrap_ofFile___eq},
    { "__lt", _wrap_ofFile___lt},
    { "__le", _wrap_ofFile___le},
    {0,0}
};

static swig_lua_attribute swig_ofFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofFile_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Reference", ofFile::Reference)},
    {SWIG_LUA_CONSTTAB_INT("ReadOnly", ofFile::ReadOnly)},
    {SWIG_LUA_CONSTTAB_INT("WriteOnly", ofFile::WriteOnly)},
    {SWIG_LUA_CONSTTAB_INT("ReadWrite", ofFile::ReadWrite)},
    {SWIG_LUA_CONSTTAB_INT("Append", ofFile::Append)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofFile_Sf_SwigStatic_methods[]= {
    { "copyFromTo", _wrap_ofFile_copyFromTo},
    { "moveFromTo", _wrap_ofFile_moveFromTo},
    { "doesFileExist", _wrap_ofFile_doesFileExist},
    { "removeFile", _wrap_ofFile_removeFile},
    {0,0}
};
static swig_lua_class* swig_ofFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofFile_Sf_SwigStatic = {
    "ofFile",
    swig_ofFile_Sf_SwigStatic_methods,
    swig_ofFile_Sf_SwigStatic_attributes,
    swig_ofFile_Sf_SwigStatic_constants,
    swig_ofFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofFile_bases[] = {0};
static const char *swig_ofFile_base_names[] = {0};
static swig_lua_class _wrap_class_ofFile = { "ofFile", "ofFile", &SWIGTYPE_p_ofFile,_proxy__wrap_new_ofFile, swig_delete_ofFile, swig_ofFile_methods, swig_ofFile_attributes, &swig_ofFile_Sf_SwigStatic, swig_ofFile_meta, swig_ofFile_bases, swig_ofFile_base_names };

static int _wrap_new_ofDirectory__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *result = 0 ;
  SWIG_check_num_args("ofDirectory::ofDirectory",0,0) result = (ofDirectory *)new ofDirectory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofDirectory,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofDirectory__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::filesystem::path *arg1 = 0 ;
  ofDirectory *result = 0 ; SWIG_check_num_args("ofDirectory::ofDirectory",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDirectory::ofDirectory",1,"std::filesystem::path const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("new_ofDirectory",1,SWIGTYPE_p_std__filesystem__path); } 
  result = (ofDirectory *)new ofDirectory((std::filesystem::path const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofDirectory,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofDirectory(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofDirectory__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__filesystem__path, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofDirectory__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofDirectory'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDirectory::ofDirectory()\n" "    ofDirectory::ofDirectory(std::filesystem::path const &)\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_open(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::filesystem::path *arg2 = 0 ; SWIG_check_num_args("ofDirectory::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::open",1,"ofDirectory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDirectory::open",2,"std::filesystem::path const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_open",1,SWIGTYPE_p_ofDirectory); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("ofDirectory_open",2,SWIGTYPE_p_std__filesystem__path); }  (arg1)->open((std::filesystem::path const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_close(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SWIG_check_num_args("ofDirectory::close",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::close",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_close",1,SWIGTYPE_p_ofDirectory); }  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_create__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ; bool result; SWIG_check_num_args("ofDirectory::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::create",1,"ofDirectory *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::create",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_create",1,SWIGTYPE_p_ofDirectory); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->create(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_create__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool result; SWIG_check_num_args("ofDirectory::create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::create",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_create",1,SWIGTYPE_p_ofDirectory); }  result = (bool)(arg1)->create();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_create(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofDirectory_create__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { return _wrap_ofDirectory_create__SWIG_0(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_create'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::create(bool)\n" "    ofDirectory::create()\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_exists(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ; bool result;
  SWIG_check_num_args("ofDirectory::exists",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::exists",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_exists",1,SWIGTYPE_p_ofDirectory); }  result = (bool)((ofDirectory const *)arg1)->exists();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_path(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ; std::string result;
  SWIG_check_num_args("ofDirectory::path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::path",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_path",1,SWIGTYPE_p_ofDirectory); }  result = ((ofDirectory const *)arg1)->path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDirectory_getAbsolutePath(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string result; SWIG_check_num_args("ofDirectory::getAbsolutePath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getAbsolutePath",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getAbsolutePath",1,SWIGTYPE_p_ofDirectory); } 
  result = ((ofDirectory const *)arg1)->getAbsolutePath(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_isDirectory(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ; bool result;
  SWIG_check_num_args("ofDirectory::isDirectory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::isDirectory",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_isDirectory",1,SWIGTYPE_p_ofDirectory); } 
  result = (bool)((ofDirectory const *)arg1)->isDirectory(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_isHidden(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ; bool result;
  SWIG_check_num_args("ofDirectory::isHidden",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::isHidden",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_isHidden",1,SWIGTYPE_p_ofDirectory); }  result = (bool)((ofDirectory const *)arg1)->isHidden();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_setWriteable__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofDirectory::setWriteable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::setWriteable",1,"ofDirectory *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::setWriteable",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_setWriteable",1,SWIGTYPE_p_ofDirectory); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setWriteable(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_setWriteable__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SWIG_check_num_args("ofDirectory::setWriteable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::setWriteable",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_setWriteable",1,SWIGTYPE_p_ofDirectory); }  (arg1)->setWriteable(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_setWriteable(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofDirectory_setWriteable__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofDirectory_setWriteable__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_setWriteable'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::setWriteable(bool)\n" "    ofDirectory::setWriteable()\n");
  lua_error(L);return 0; }
static int _wrap_ofDirectory_setReadOnly__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofDirectory::setReadOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::setReadOnly",1,"ofDirectory *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::setReadOnly",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_setReadOnly",1,SWIGTYPE_p_ofDirectory); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setReadOnly(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_setReadOnly__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SWIG_check_num_args("ofDirectory::setReadOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::setReadOnly",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_setReadOnly",1,SWIGTYPE_p_ofDirectory); }  (arg1)->setReadOnly(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_setReadOnly(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofDirectory_setReadOnly__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofDirectory_setReadOnly__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_setReadOnly'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::setReadOnly(bool)\n" "    ofDirectory::setReadOnly()\n");
  lua_error(L);return 0; }
static int _wrap_ofDirectory_setExecutable__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofDirectory::setExecutable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::setExecutable",1,"ofDirectory *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::setExecutable",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_setExecutable",1,SWIGTYPE_p_ofDirectory); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setExecutable(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_setExecutable__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SWIG_check_num_args("ofDirectory::setExecutable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::setExecutable",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_setExecutable",1,SWIGTYPE_p_ofDirectory); }  (arg1)->setExecutable(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_setExecutable(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofDirectory_setExecutable__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofDirectory_setExecutable__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_setExecutable'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::setExecutable(bool)\n" "    ofDirectory::setExecutable()\n");
  lua_error(L);return 0; }
static int _wrap_ofDirectory_setShowHidden(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofDirectory::setShowHidden",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::setShowHidden",1,"ofDirectory *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::setShowHidden",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_setShowHidden",1,SWIGTYPE_p_ofDirectory); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setShowHidden(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_copyTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofDirectory::copyTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::copyTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::copyTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDirectory::copyTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDirectory::copyTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_copyTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->copyTo(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_copyTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool arg3 ; bool result; SWIG_check_num_args("ofDirectory::copyTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::copyTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::copyTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDirectory::copyTo",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_copyTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->copyTo(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_copyTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofDirectory::copyTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::copyTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::copyTo",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_copyTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->copyTo(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_copyTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofDirectory_copyTo__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofDirectory_copyTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofDirectory_copyTo__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_copyTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDirectory::copyTo(std::string,bool,bool)\n" "    ofDirectory::copyTo(std::string,bool)\n"
  "    ofDirectory::copyTo(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_moveTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofDirectory::moveTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::moveTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::moveTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDirectory::moveTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDirectory::moveTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_moveTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->moveTo(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_moveTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool arg3 ; bool result; SWIG_check_num_args("ofDirectory::moveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::moveTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::moveTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDirectory::moveTo",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_moveTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->moveTo(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_moveTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofDirectory::moveTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::moveTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::moveTo",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_moveTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->moveTo(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_moveTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofDirectory_moveTo__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofDirectory_moveTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofDirectory_moveTo__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_moveTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDirectory::moveTo(std::string,bool,bool)\n" "    ofDirectory::moveTo(std::string,bool)\n"
  "    ofDirectory::moveTo(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_renameTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofDirectory::renameTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::renameTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::renameTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDirectory::renameTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDirectory::renameTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_renameTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->renameTo(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_renameTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool arg3 ; bool result; SWIG_check_num_args("ofDirectory::renameTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::renameTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::renameTo",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDirectory::renameTo",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_renameTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->renameTo(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_renameTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofDirectory::renameTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::renameTo",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::renameTo",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_renameTo",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->renameTo(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_renameTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofDirectory_renameTo__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofDirectory_renameTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofDirectory_renameTo__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_renameTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::renameTo(std::string,bool,bool)\n"
  "    ofDirectory::renameTo(std::string,bool)\n" "    ofDirectory::renameTo(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_remove(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ; bool arg2 ;
  bool result; SWIG_check_num_args("ofDirectory::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::remove",1,"ofDirectory *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::remove",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_remove",1,SWIGTYPE_p_ofDirectory); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->remove(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_allowExt(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; SWIG_check_num_args("ofDirectory::allowExt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::allowExt",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::allowExt",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_allowExt",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->allowExt(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_listDir__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string arg2 ; int result; SWIG_check_num_args("ofDirectory::listDir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::listDir",1,"ofDirectory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofDirectory::listDir",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_listDir",1,SWIGTYPE_p_ofDirectory); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (int)(arg1)->listDir(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_listDir__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  int result; SWIG_check_num_args("ofDirectory::listDir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::listDir",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_listDir",1,SWIGTYPE_p_ofDirectory); }  result = (int)(arg1)->listDir();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_listDir(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofDirectory_listDir__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofDirectory_listDir__SWIG_0(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_listDir'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::listDir(std::string)\n" "    ofDirectory::listDir()\n");
  lua_error(L);return 0; }
static int _wrap_ofDirectory_getOriginalDirectory(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::string result; SWIG_check_num_args("ofDirectory::getOriginalDirectory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getOriginalDirectory",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getOriginalDirectory",1,SWIGTYPE_p_ofDirectory); }  result = (arg1)->getOriginalDirectory();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDirectory_getName(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ; std::string result; SWIG_check_num_args("ofDirectory::getName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getName",1,"ofDirectory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDirectory::getName",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getName",1,SWIGTYPE_p_ofDirectory); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (arg1)->getName(arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_getPath(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ; std::string result; SWIG_check_num_args("ofDirectory::getPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getPath",1,"ofDirectory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDirectory::getPath",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getPath",1,SWIGTYPE_p_ofDirectory); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (arg1)->getPath(arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_getFile__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ; ofFile::Mode arg3 ; bool arg4 ; ofFile result; SWIG_check_num_args("ofDirectory::getFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getFile",1,"ofDirectory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDirectory::getFile",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDirectory::getFile",3,"ofFile::Mode");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDirectory::getFile",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getFile",1,SWIGTYPE_p_ofDirectory); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (ofFile::Mode)(int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); result = (arg1)->getFile(arg2,arg3,arg4); {
    ofFile * resultptr = new ofFile((const ofFile &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofFile,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_getFile__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ; ofFile::Mode arg3 ; ofFile result; SWIG_check_num_args("ofDirectory::getFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getFile",1,"ofDirectory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDirectory::getFile",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDirectory::getFile",3,"ofFile::Mode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getFile",1,SWIGTYPE_p_ofDirectory); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (ofFile::Mode)(int)lua_tonumber(L, 3); result = (arg1)->getFile(arg2,arg3); {
    ofFile * resultptr = new ofFile((const ofFile &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofFile,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_getFile__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  unsigned int arg2 ; ofFile result; SWIG_check_num_args("ofDirectory::getFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getFile",1,"ofDirectory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDirectory::getFile",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getFile",1,SWIGTYPE_p_ofDirectory); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (arg1)->getFile(arg2); { ofFile * resultptr = new ofFile((const ofFile &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofFile,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_getFile(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofDirectory_getFile__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDirectory_getFile__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofDirectory, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofDirectory_getFile__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_getFile'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::getFile(unsigned int,ofFile::Mode,bool)\n"
  "    ofDirectory::getFile(unsigned int,ofFile::Mode)\n" "    ofDirectory::getFile(unsigned int)\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_getFiles(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  std::vector< ofFile > *result = 0 ; SWIG_check_num_args("ofDirectory::getFiles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getFiles",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getFiles",1,SWIGTYPE_p_ofDirectory); } 
  result = (std::vector< ofFile > *) &((ofDirectory const *)arg1)->getFiles();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofFile_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_getShowHidden(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  bool result; SWIG_check_num_args("ofDirectory::getShowHidden",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::getShowHidden",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_getShowHidden",1,SWIGTYPE_p_ofDirectory); }  result = (bool)(arg1)->getShowHidden();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_reset(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SWIG_check_num_args("ofDirectory::reset",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::reset",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_reset",1,SWIGTYPE_p_ofDirectory); }  (arg1)->reset(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_sort(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SWIG_check_num_args("ofDirectory::sort",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::sort",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_sort",1,SWIGTYPE_p_ofDirectory); }  (arg1)->sort(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_size(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ; unsigned int result;
  SWIG_check_num_args("ofDirectory::size",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::size",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_size",1,SWIGTYPE_p_ofDirectory); }  result = (unsigned int)(arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_numFiles(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ; int result;
  SWIG_check_num_args("ofDirectory::numFiles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::numFiles",1,"ofDirectory *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_numFiles",1,SWIGTYPE_p_ofDirectory); }  result = (int)(arg1)->numFiles();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory___eq(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  ofDirectory *arg2 = 0 ; bool result; SWIG_check_num_args("ofDirectory::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::operator ==",1,"ofDirectory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDirectory::operator ==",2,"ofDirectory const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory___eq",1,SWIGTYPE_p_ofDirectory); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory___eq",2,SWIGTYPE_p_ofDirectory); } 
  result = (bool)(arg1)->operator ==((ofDirectory const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory___lt(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  ofDirectory *arg2 = 0 ; bool result; SWIG_check_num_args("ofDirectory::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::operator <",1,"ofDirectory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDirectory::operator <",2,"ofDirectory const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory___lt",1,SWIGTYPE_p_ofDirectory); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory___lt",2,SWIGTYPE_p_ofDirectory); } 
  result = (bool)(arg1)->operator <((ofDirectory const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory___le(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  ofDirectory *arg2 = 0 ; bool result; SWIG_check_num_args("ofDirectory::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::operator <=",1,"ofDirectory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDirectory::operator <=",2,"ofDirectory const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory___le",1,SWIGTYPE_p_ofDirectory); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory___le",2,SWIGTYPE_p_ofDirectory); } 
  result = (bool)(arg1)->operator <=((ofDirectory const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_createDirectory__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  bool arg3 ; bool result; SWIG_check_num_args("ofDirectory::createDirectory",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::createDirectory",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::createDirectory",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDirectory::createDirectory",3,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ofDirectory::createDirectory(arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_createDirectory__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  bool result; SWIG_check_num_args("ofDirectory::createDirectory",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::createDirectory",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::createDirectory",2,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ofDirectory::createDirectory(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_createDirectory__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool result;
  SWIG_check_num_args("ofDirectory::createDirectory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::createDirectory",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = (bool)ofDirectory::createDirectory(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_createDirectory(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofDirectory_createDirectory__SWIG_2(L);}  }
   if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofDirectory_createDirectory__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofDirectory_createDirectory__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_createDirectory'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::createDirectory(std::string,bool,bool)\n"
  "    ofDirectory::createDirectory(std::string,bool)\n" "    ofDirectory::createDirectory(std::string)\n");
  lua_error(L);return 0; }
static int _wrap_ofDirectory_isDirectoryEmpty__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  bool result; SWIG_check_num_args("ofDirectory::isDirectoryEmpty",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::isDirectoryEmpty",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::isDirectoryEmpty",2,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ofDirectory::isDirectoryEmpty(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_isDirectoryEmpty__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool result;
  SWIG_check_num_args("ofDirectory::isDirectoryEmpty",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::isDirectoryEmpty",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = (bool)ofDirectory::isDirectoryEmpty(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_isDirectoryEmpty(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofDirectory_isDirectoryEmpty__SWIG_1(L);}  }
   if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofDirectory_isDirectoryEmpty__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_isDirectoryEmpty'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::isDirectoryEmpty(std::string,bool)\n"
  "    ofDirectory::isDirectoryEmpty(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_doesDirectoryExist__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  bool result; SWIG_check_num_args("ofDirectory::doesDirectoryExist",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::doesDirectoryExist",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::doesDirectoryExist",2,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ofDirectory::doesDirectoryExist(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_doesDirectoryExist__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool result;
  SWIG_check_num_args("ofDirectory::doesDirectoryExist",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::doesDirectoryExist",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = (bool)ofDirectory::doesDirectoryExist(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_doesDirectoryExist(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofDirectory_doesDirectoryExist__SWIG_1(L);}
     }  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofDirectory_doesDirectoryExist__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_doesDirectoryExist'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::doesDirectoryExist(std::string,bool)\n"
  "    ofDirectory::doesDirectoryExist(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_removeDirectory__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  bool arg3 ; bool result; SWIG_check_num_args("ofDirectory::removeDirectory",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::removeDirectory",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::removeDirectory",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDirectory::removeDirectory",3,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)ofDirectory::removeDirectory(arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_removeDirectory__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  bool result; SWIG_check_num_args("ofDirectory::removeDirectory",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDirectory::removeDirectory",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofDirectory::removeDirectory",2,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)ofDirectory::removeDirectory(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_removeDirectory(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofDirectory_removeDirectory__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofDirectory_removeDirectory__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDirectory_removeDirectory'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDirectory::removeDirectory(std::string,bool,bool)\n"
  "    ofDirectory::removeDirectory(std::string,bool)\n"); lua_error(L);return 0; }
static int _wrap_ofDirectory_begin(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SwigValueWrapper< std::vector< ofFile >::const_iterator > result; SWIG_check_num_args("ofDirectory::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::begin",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_begin",1,SWIGTYPE_p_ofDirectory); }  result = ((ofDirectory const *)arg1)->begin(); {
    std::vector< ofFile >::const_iterator * resultptr = new std::vector< ofFile >::const_iterator((const std::vector< ofFile >::const_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofFile_t__const_iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_c_end(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SwigValueWrapper< std::vector< ofFile >::const_iterator > result; SWIG_check_num_args("ofDirectory::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::end",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_c_end",1,SWIGTYPE_p_ofDirectory); }  result = ((ofDirectory const *)arg1)->end(); {
    std::vector< ofFile >::const_iterator * resultptr = new std::vector< ofFile >::const_iterator((const std::vector< ofFile >::const_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofFile_t__const_iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_rbegin(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SwigValueWrapper< std::vector< ofFile >::const_reverse_iterator > result; SWIG_check_num_args("ofDirectory::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::rbegin",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_rbegin",1,SWIGTYPE_p_ofDirectory); }  result = ((ofDirectory const *)arg1)->rbegin(); {
    std::vector< ofFile >::const_reverse_iterator * resultptr = new std::vector< ofFile >::const_reverse_iterator((const std::vector< ofFile >::const_reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofFile_t__const_reverse_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDirectory_rend(lua_State* L) { int SWIG_arg = 0; ofDirectory *arg1 = (ofDirectory *) 0 ;
  SwigValueWrapper< std::vector< ofFile >::const_reverse_iterator > result; SWIG_check_num_args("ofDirectory::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDirectory::rend",1,"ofDirectory const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDirectory,0))){
    SWIG_fail_ptr("ofDirectory_rend",1,SWIGTYPE_p_ofDirectory); }  result = ((ofDirectory const *)arg1)->rend(); {
    std::vector< ofFile >::const_reverse_iterator * resultptr = new std::vector< ofFile >::const_reverse_iterator((const std::vector< ofFile >::const_reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofFile_t__const_reverse_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofDirectory(void *obj) {
ofDirectory *arg1 = (ofDirectory *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofDirectory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofDirectory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofDirectory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofDirectory_methods[]= {
    { "open", _wrap_ofDirectory_open},
    { "close", _wrap_ofDirectory_close},
    { "create", _wrap_ofDirectory_create},
    { "exists", _wrap_ofDirectory_exists},
    { "path", _wrap_ofDirectory_path},
    { "getAbsolutePath", _wrap_ofDirectory_getAbsolutePath},
    { "isDirectory", _wrap_ofDirectory_isDirectory},
    { "isHidden", _wrap_ofDirectory_isHidden},
    { "setWriteable", _wrap_ofDirectory_setWriteable},
    { "setReadOnly", _wrap_ofDirectory_setReadOnly},
    { "setExecutable", _wrap_ofDirectory_setExecutable},
    { "setShowHidden", _wrap_ofDirectory_setShowHidden},
    { "copyTo", _wrap_ofDirectory_copyTo},
    { "moveTo", _wrap_ofDirectory_moveTo},
    { "renameTo", _wrap_ofDirectory_renameTo},
    { "remove", _wrap_ofDirectory_remove},
    { "allowExt", _wrap_ofDirectory_allowExt},
    { "listDir", _wrap_ofDirectory_listDir},
    { "getOriginalDirectory", _wrap_ofDirectory_getOriginalDirectory},
    { "getName", _wrap_ofDirectory_getName},
    { "getPath", _wrap_ofDirectory_getPath},
    { "getFile", _wrap_ofDirectory_getFile},
    { "getFiles", _wrap_ofDirectory_getFiles},
    { "getShowHidden", _wrap_ofDirectory_getShowHidden},
    { "reset", _wrap_ofDirectory_reset},
    { "sort", _wrap_ofDirectory_sort},
    { "size", _wrap_ofDirectory_size},
    { "numFiles", _wrap_ofDirectory_numFiles},
    { "__eq", _wrap_ofDirectory___eq},
    { "__lt", _wrap_ofDirectory___lt},
    { "__le", _wrap_ofDirectory___le},
    { "begin", _wrap_ofDirectory_begin},
    { "c_end", _wrap_ofDirectory_c_end},
    { "rbegin", _wrap_ofDirectory_rbegin},
    { "rend", _wrap_ofDirectory_rend},
    {0,0}
};
static swig_lua_method swig_ofDirectory_meta[] = {
    { "__eq", _wrap_ofDirectory___eq},
    { "__lt", _wrap_ofDirectory___lt},
    { "__le", _wrap_ofDirectory___le},
    {0,0}
};

static swig_lua_attribute swig_ofDirectory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofDirectory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofDirectory_Sf_SwigStatic_methods[]= {
    { "createDirectory", _wrap_ofDirectory_createDirectory},
    { "isDirectoryEmpty", _wrap_ofDirectory_isDirectoryEmpty},
    { "doesDirectoryExist", _wrap_ofDirectory_doesDirectoryExist},
    { "removeDirectory", _wrap_ofDirectory_removeDirectory},
    {0,0}
};
static swig_lua_class* swig_ofDirectory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofDirectory_Sf_SwigStatic = {
    "ofDirectory",
    swig_ofDirectory_Sf_SwigStatic_methods,
    swig_ofDirectory_Sf_SwigStatic_attributes,
    swig_ofDirectory_Sf_SwigStatic_constants,
    swig_ofDirectory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofDirectory_bases[] = {0};
static const char *swig_ofDirectory_base_names[] = {0};
static swig_lua_class _wrap_class_ofDirectory = { "ofDirectory", "ofDirectory", &SWIGTYPE_p_ofDirectory,_proxy__wrap_new_ofDirectory, swig_delete_ofDirectory, swig_ofDirectory_methods, swig_ofDirectory_attributes, &swig_ofDirectory_Sf_SwigStatic, swig_ofDirectory_meta, swig_ofDirectory_bases, swig_ofDirectory_base_names };

static int _wrap_log(lua_State* L) { int SWIG_arg = 0; ofLogLevel arg1 ; std::string *arg2 = 0 ; std::string temp2 ;
  SWIG_check_num_args("log",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("log",1,"ofLogLevel");
  if(!lua_isstring(L,2)) SWIG_fail_arg("log",2,"std::string const &"); arg1 = (ofLogLevel)(int)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; log(arg1,(std::string const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetLogLevel__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofLogLevel arg1 ;
  SWIG_check_num_args("ofSetLogLevel",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetLogLevel",1,"ofLogLevel");
  arg1 = (ofLogLevel)(int)lua_tonumber(L, 1); ofSetLogLevel(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetLogLevel__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofLogLevel arg2 ;
  SWIG_check_num_args("ofSetLogLevel",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSetLogLevel",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetLogLevel",2,"ofLogLevel"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (ofLogLevel)(int)lua_tonumber(L, 2); ofSetLogLevel(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetLogLevel(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofSetLogLevel__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofSetLogLevel__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetLogLevel'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetLogLevel(ofLogLevel)\n" "    ofSetLogLevel(std::string,ofLogLevel)\n"); lua_error(L);return 0; }
static int _wrap_ofGetLogLevel(lua_State* L) { int SWIG_arg = 0; ofLogLevel result; SWIG_check_num_args("ofGetLogLevel",0,0)
  result = (ofLogLevel)ofGetLogLevel(); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetLogLevelName__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofLogLevel arg1 ; bool arg2 ; std::string result;
  SWIG_check_num_args("ofGetLogLevelName",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofGetLogLevelName",1,"ofLogLevel");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofGetLogLevelName",2,"bool"); arg1 = (ofLogLevel)(int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0); result = ofGetLogLevelName(arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetLogLevelName__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofLogLevel arg1 ; std::string result;
  SWIG_check_num_args("ofGetLogLevelName",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofGetLogLevelName",1,"ofLogLevel");
  arg1 = (ofLogLevel)(int)lua_tonumber(L, 1); result = ofGetLogLevelName(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetLogLevelName(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofGetLogLevelName__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofGetLogLevelName__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofGetLogLevelName'\n" "  Possible C/C++ prototypes are:\n"
  "    ofGetLogLevelName(ofLogLevel,bool)\n" "    ofGetLogLevelName(ofLogLevel)\n"); lua_error(L);return 0; }
static int _wrap_ofLogToFile__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; bool arg2 ; std::string temp1 ;
  SWIG_check_num_args("ofLogToFile",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofLogToFile",1,"std::string const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofLogToFile",2,"bool"); temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0); ofLogToFile((std::string const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofLogToFile__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  SWIG_check_num_args("ofLogToFile",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofLogToFile",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; ofLogToFile((std::string const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLogToFile(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofLogToFile__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofLogToFile__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofLogToFile'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLogToFile(std::string const &,bool)\n" "    ofLogToFile(std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_ofLogToConsole(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofLogToConsole",0,0) ofLogToConsole();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFileDialogResult(lua_State* L) { int SWIG_arg = 0; ofFileDialogResult *result = 0 ;
  SWIG_check_num_args("ofFileDialogResult::ofFileDialogResult",0,0) result = (ofFileDialogResult *)new ofFileDialogResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFileDialogResult,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofFileDialogResult_getName(lua_State* L) { int SWIG_arg = 0;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ; std::string result;
  SWIG_check_num_args("ofFileDialogResult::getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFileDialogResult::getName",1,"ofFileDialogResult *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFileDialogResult,0))){
    SWIG_fail_ptr("ofFileDialogResult_getName",1,SWIGTYPE_p_ofFileDialogResult); }  result = (arg1)->getName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFileDialogResult_getPath(lua_State* L) { int SWIG_arg = 0;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ; std::string result;
  SWIG_check_num_args("ofFileDialogResult::getPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFileDialogResult::getPath",1,"ofFileDialogResult *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFileDialogResult,0))){
    SWIG_fail_ptr("ofFileDialogResult_getPath",1,SWIGTYPE_p_ofFileDialogResult); }  result = (arg1)->getPath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFileDialogResult_filePath_set(lua_State* L) { int SWIG_arg = 0;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  SWIG_check_num_args("ofFileDialogResult::filePath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFileDialogResult::filePath",1,"ofFileDialogResult *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFileDialogResult::filePath",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFileDialogResult,0))){
    SWIG_fail_ptr("ofFileDialogResult_filePath_set",1,SWIGTYPE_p_ofFileDialogResult); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; if (arg1) (arg1)->filePath = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFileDialogResult_filePath_get(lua_State* L) { int SWIG_arg = 0;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("ofFileDialogResult::filePath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFileDialogResult::filePath",1,"ofFileDialogResult *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFileDialogResult,0))){
    SWIG_fail_ptr("ofFileDialogResult_filePath_get",1,SWIGTYPE_p_ofFileDialogResult); } 
  result = (std::string *) & ((arg1)->filePath); lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFileDialogResult_fileName_set(lua_State* L) { int SWIG_arg = 0;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  SWIG_check_num_args("ofFileDialogResult::fileName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFileDialogResult::fileName",1,"ofFileDialogResult *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofFileDialogResult::fileName",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFileDialogResult,0))){
    SWIG_fail_ptr("ofFileDialogResult_fileName_set",1,SWIGTYPE_p_ofFileDialogResult); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; if (arg1) (arg1)->fileName = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFileDialogResult_fileName_get(lua_State* L) { int SWIG_arg = 0;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("ofFileDialogResult::fileName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFileDialogResult::fileName",1,"ofFileDialogResult *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFileDialogResult,0))){
    SWIG_fail_ptr("ofFileDialogResult_fileName_get",1,SWIGTYPE_p_ofFileDialogResult); } 
  result = (std::string *) & ((arg1)->fileName); lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFileDialogResult_bSuccess_set(lua_State* L) { int SWIG_arg = 0;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ; bool arg2 ; SWIG_check_num_args("ofFileDialogResult::bSuccess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFileDialogResult::bSuccess",1,"ofFileDialogResult *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFileDialogResult::bSuccess",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFileDialogResult,0))){
    SWIG_fail_ptr("ofFileDialogResult_bSuccess_set",1,SWIGTYPE_p_ofFileDialogResult); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bSuccess = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFileDialogResult_bSuccess_get(lua_State* L) { int SWIG_arg = 0;
  ofFileDialogResult *arg1 = (ofFileDialogResult *) 0 ; bool result; SWIG_check_num_args("ofFileDialogResult::bSuccess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFileDialogResult::bSuccess",1,"ofFileDialogResult *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFileDialogResult,0))){
    SWIG_fail_ptr("ofFileDialogResult_bSuccess_get",1,SWIGTYPE_p_ofFileDialogResult); }  result = (bool) ((arg1)->bSuccess);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofFileDialogResult(void *obj) {
ofFileDialogResult *arg1 = (ofFileDialogResult *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofFileDialogResult(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofFileDialogResult);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofFileDialogResult_attributes[] = {
    { "filePath", _wrap_ofFileDialogResult_filePath_get, _wrap_ofFileDialogResult_filePath_set },
    { "fileName", _wrap_ofFileDialogResult_fileName_get, _wrap_ofFileDialogResult_fileName_set },
    { "bSuccess", _wrap_ofFileDialogResult_bSuccess_get, _wrap_ofFileDialogResult_bSuccess_set },
    {0,0,0}
};
static swig_lua_method swig_ofFileDialogResult_methods[]= {
    { "getName", _wrap_ofFileDialogResult_getName},
    { "getPath", _wrap_ofFileDialogResult_getPath},
    {0,0}
};
static swig_lua_method swig_ofFileDialogResult_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofFileDialogResult_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofFileDialogResult_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofFileDialogResult_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofFileDialogResult_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofFileDialogResult_Sf_SwigStatic = {
    "ofFileDialogResult",
    swig_ofFileDialogResult_Sf_SwigStatic_methods,
    swig_ofFileDialogResult_Sf_SwigStatic_attributes,
    swig_ofFileDialogResult_Sf_SwigStatic_constants,
    swig_ofFileDialogResult_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofFileDialogResult_bases[] = {0};
static const char *swig_ofFileDialogResult_base_names[] = {0};
static swig_lua_class _wrap_class_ofFileDialogResult = { "ofFileDialogResult", "ofFileDialogResult", &SWIGTYPE_p_ofFileDialogResult,_proxy__wrap_new_ofFileDialogResult, swig_delete_ofFileDialogResult, swig_ofFileDialogResult_methods, swig_ofFileDialogResult_attributes, &swig_ofFileDialogResult_Sf_SwigStatic, swig_ofFileDialogResult_meta, swig_ofFileDialogResult_bases, swig_ofFileDialogResult_base_names };

static int _wrap_ofSystemAlertDialog(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  SWIG_check_num_args("ofSystemAlertDialog",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystemAlertDialog",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); ofSystemAlertDialog(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSystemLoadDialog__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; std::string arg3 ;
  ofFileDialogResult result; SWIG_check_num_args("ofSystemLoadDialog",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystemLoadDialog",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSystemLoadDialog",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofSystemLoadDialog",3,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = ofSystemLoadDialog(arg1,arg2,arg3); {
    ofFileDialogResult * resultptr = new ofFileDialogResult((const ofFileDialogResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofFileDialogResult,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSystemLoadDialog__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  ofFileDialogResult result; SWIG_check_num_args("ofSystemLoadDialog",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystemLoadDialog",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSystemLoadDialog",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); result = ofSystemLoadDialog(arg1,arg2); {
    ofFileDialogResult * resultptr = new ofFileDialogResult((const ofFileDialogResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofFileDialogResult,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSystemLoadDialog__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofFileDialogResult result;
  SWIG_check_num_args("ofSystemLoadDialog",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystemLoadDialog",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofSystemLoadDialog(arg1); {
    ofFileDialogResult * resultptr = new ofFileDialogResult((const ofFileDialogResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofFileDialogResult,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSystemLoadDialog__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofFileDialogResult result;
  SWIG_check_num_args("ofSystemLoadDialog",0,0) result = ofSystemLoadDialog(); {
    ofFileDialogResult * resultptr = new ofFileDialogResult((const ofFileDialogResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofFileDialogResult,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSystemLoadDialog(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofSystemLoadDialog__SWIG_3(L);}  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      return _wrap_ofSystemLoadDialog__SWIG_2(L);}  }  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { {
        _v = lua_isboolean(L,argv[1]); }  if (_v) { return _wrap_ofSystemLoadDialog__SWIG_1(L);}  }  }  if (argc == 3) { int _v;
    { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }
         if (_v) { return _wrap_ofSystemLoadDialog__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSystemLoadDialog'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSystemLoadDialog(std::string,bool,std::string)\n" "    ofSystemLoadDialog(std::string,bool)\n"
  "    ofSystemLoadDialog(std::string)\n" "    ofSystemLoadDialog()\n"); lua_error(L);return 0; }
static int _wrap_ofSystemSaveDialog(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ;
  ofFileDialogResult result; SWIG_check_num_args("ofSystemSaveDialog",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystemSaveDialog",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSystemSaveDialog",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = ofSystemSaveDialog(arg1,arg2); {
    ofFileDialogResult * resultptr = new ofFileDialogResult((const ofFileDialogResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofFileDialogResult,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSystemTextBoxDialog__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ;
  std::string result; SWIG_check_num_args("ofSystemTextBoxDialog",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystemTextBoxDialog",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSystemTextBoxDialog",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = ofSystemTextBoxDialog(arg1,arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSystemTextBoxDialog__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofSystemTextBoxDialog",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystemTextBoxDialog",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofSystemTextBoxDialog(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSystemTextBoxDialog(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofSystemTextBoxDialog__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofSystemTextBoxDialog__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSystemTextBoxDialog'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSystemTextBoxDialog(std::string,std::string)\n"
  "    ofSystemTextBoxDialog(std::string)\n"); lua_error(L);return 0; }
static int _wrap_new_ofHttpRequest__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *result = 0 ;
  SWIG_check_num_args("ofHttpRequest::ofHttpRequest",0,0) result = (ofHttpRequest *)new ofHttpRequest();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofHttpRequest,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofHttpRequest__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; bool arg3 ;
  ofHttpRequest *result = 0 ; SWIG_check_num_args("ofHttpRequest::ofHttpRequest",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofHttpRequest::ofHttpRequest",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofHttpRequest::ofHttpRequest",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofHttpRequest::ofHttpRequest",3,"bool");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (ofHttpRequest *)new ofHttpRequest(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofHttpRequest,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofHttpRequest__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ;
  ofHttpRequest *result = 0 ; SWIG_check_num_args("ofHttpRequest::ofHttpRequest",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofHttpRequest::ofHttpRequest",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofHttpRequest::ofHttpRequest",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (ofHttpRequest *)new ofHttpRequest(arg1,arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofHttpRequest,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofHttpRequest(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofHttpRequest__SWIG_0(L);}  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { {
        _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_new_ofHttpRequest__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_new_ofHttpRequest__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofHttpRequest'\n" "  Possible C/C++ prototypes are:\n"
  "    ofHttpRequest::ofHttpRequest()\n" "    ofHttpRequest::ofHttpRequest(std::string,std::string,bool)\n"
  "    ofHttpRequest::ofHttpRequest(std::string,std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofHttpRequest_url_set(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("ofHttpRequest::url",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::url",1,"ofHttpRequest *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofHttpRequest::url",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_url_set",1,SWIGTYPE_p_ofHttpRequest); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; if (arg1) (arg1)->url = *arg2; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpRequest_url_get(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ;
  std::string *result = 0 ; SWIG_check_num_args("ofHttpRequest::url",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::url",1,"ofHttpRequest *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_url_get",1,SWIGTYPE_p_ofHttpRequest); }  result = (std::string *) & ((arg1)->url);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofHttpRequest_name_set(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("ofHttpRequest::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::name",1,"ofHttpRequest *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofHttpRequest::name",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_name_set",1,SWIGTYPE_p_ofHttpRequest); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; if (arg1) (arg1)->name = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpRequest_name_get(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ;
  std::string *result = 0 ; SWIG_check_num_args("ofHttpRequest::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::name",1,"ofHttpRequest *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_name_get",1,SWIGTYPE_p_ofHttpRequest); }  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofHttpRequest_saveTo_set(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofHttpRequest::saveTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::saveTo",1,"ofHttpRequest *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofHttpRequest::saveTo",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_saveTo_set",1,SWIGTYPE_p_ofHttpRequest); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->saveTo = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpRequest_saveTo_get(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ;
  bool result; SWIG_check_num_args("ofHttpRequest::saveTo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::saveTo",1,"ofHttpRequest *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_saveTo_get",1,SWIGTYPE_p_ofHttpRequest); }  result = (bool) ((arg1)->saveTo);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpRequest_headers_set(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  SWIG_check_num_args("ofHttpRequest::headers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::headers",1,"ofHttpRequest *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofHttpRequest::headers",2,"std::map< std::string,std::string > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_headers_set",1,SWIGTYPE_p_ofHttpRequest); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("ofHttpRequest_headers_set",2,SWIGTYPE_p_std__mapT_std__string_std__string_t); } 
  if (arg1) (arg1)->headers = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpRequest_headers_get(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ;
  std::map< std::string,std::string > *result = 0 ; SWIG_check_num_args("ofHttpRequest::headers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::headers",1,"ofHttpRequest *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_headers_get",1,SWIGTYPE_p_ofHttpRequest); } 
  result = (std::map< std::string,std::string > *)& ((arg1)->headers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_std__string_std__string_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpRequest_getID(lua_State* L) { int SWIG_arg = 0; ofHttpRequest *arg1 = (ofHttpRequest *) 0 ; int result;
  SWIG_check_num_args("ofHttpRequest::getID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpRequest::getID",1,"ofHttpRequest *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpRequest_getID",1,SWIGTYPE_p_ofHttpRequest); }  result = (int)(arg1)->getID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofHttpRequest(void *obj) {
ofHttpRequest *arg1 = (ofHttpRequest *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofHttpRequest(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofHttpRequest);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofHttpRequest_attributes[] = {
    { "url", _wrap_ofHttpRequest_url_get, _wrap_ofHttpRequest_url_set },
    { "name", _wrap_ofHttpRequest_name_get, _wrap_ofHttpRequest_name_set },
    { "saveTo", _wrap_ofHttpRequest_saveTo_get, _wrap_ofHttpRequest_saveTo_set },
    { "headers", _wrap_ofHttpRequest_headers_get, _wrap_ofHttpRequest_headers_set },
    {0,0,0}
};
static swig_lua_method swig_ofHttpRequest_methods[]= {
    { "getID", _wrap_ofHttpRequest_getID},
    {0,0}
};
static swig_lua_method swig_ofHttpRequest_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofHttpRequest_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofHttpRequest_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofHttpRequest_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofHttpRequest_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofHttpRequest_Sf_SwigStatic = {
    "ofHttpRequest",
    swig_ofHttpRequest_Sf_SwigStatic_methods,
    swig_ofHttpRequest_Sf_SwigStatic_attributes,
    swig_ofHttpRequest_Sf_SwigStatic_constants,
    swig_ofHttpRequest_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofHttpRequest_bases[] = {0};
static const char *swig_ofHttpRequest_base_names[] = {0};
static swig_lua_class _wrap_class_ofHttpRequest = { "ofHttpRequest", "ofHttpRequest", &SWIGTYPE_p_ofHttpRequest,_proxy__wrap_new_ofHttpRequest, swig_delete_ofHttpRequest, swig_ofHttpRequest_methods, swig_ofHttpRequest_attributes, &swig_ofHttpRequest_Sf_SwigStatic, swig_ofHttpRequest_meta, swig_ofHttpRequest_bases, swig_ofHttpRequest_base_names };

static int _wrap_new_ofHttpResponse__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *result = 0 ;
  SWIG_check_num_args("ofHttpResponse::ofHttpResponse",0,0) result = (ofHttpResponse *)new ofHttpResponse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofHttpResponse__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofHttpRequest arg1 ; ofBuffer *arg2 = 0 ;
  int arg3 ; std::string arg4 ; ofHttpRequest *argp1 ; ofHttpResponse *result = 0 ;
  SWIG_check_num_args("ofHttpResponse::ofHttpResponse",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofHttpResponse::ofHttpResponse",1,"ofHttpRequest");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofHttpResponse::ofHttpResponse",2,"ofBuffer const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofHttpResponse::ofHttpResponse",3,"int");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofHttpResponse::ofHttpResponse",4,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("new_ofHttpResponse",1,SWIGTYPE_p_ofHttpRequest); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("new_ofHttpResponse",2,SWIGTYPE_p_ofBuffer); }  arg3 = (int)lua_tonumber(L, 3);
  (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
  result = (ofHttpResponse *)new ofHttpResponse(arg1,(ofBuffer const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofHttpResponse__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofHttpRequest arg1 ; int arg2 ; std::string arg3 ;
  ofHttpRequest *argp1 ; ofHttpResponse *result = 0 ; SWIG_check_num_args("ofHttpResponse::ofHttpResponse",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofHttpResponse::ofHttpResponse",1,"ofHttpRequest");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofHttpResponse::ofHttpResponse",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofHttpResponse::ofHttpResponse",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("new_ofHttpResponse",1,SWIGTYPE_p_ofHttpRequest); }  arg1 = *argp1; arg2 = (int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (ofHttpResponse *)new ofHttpResponse(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofHttpResponse(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofHttpResponse__SWIG_0(L);}  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofHttpRequest, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_new_ofHttpResponse__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofHttpRequest, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isstring(L,argv[3]); } 
          if (_v) { return _wrap_new_ofHttpResponse__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofHttpResponse'\n" "  Possible C/C++ prototypes are:\n"
  "    ofHttpResponse::ofHttpResponse()\n"
  "    ofHttpResponse::ofHttpResponse(ofHttpRequest,ofBuffer const &,int,std::string)\n"
  "    ofHttpResponse::ofHttpResponse(ofHttpRequest,int,std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofHttpResponse_request_set(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *arg1 = (ofHttpResponse *) 0 ;
  ofHttpRequest *arg2 = (ofHttpRequest *) 0 ; SWIG_check_num_args("ofHttpResponse::request",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpResponse::request",1,"ofHttpResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofHttpResponse::request",2,"ofHttpRequest *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpResponse,0))){
    SWIG_fail_ptr("ofHttpResponse_request_set",1,SWIGTYPE_p_ofHttpResponse); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofHttpResponse_request_set",2,SWIGTYPE_p_ofHttpRequest); }  if (arg1) (arg1)->request = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpResponse_request_get(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *arg1 = (ofHttpResponse *) 0 ;
  ofHttpRequest *result = 0 ; SWIG_check_num_args("ofHttpResponse::request",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpResponse::request",1,"ofHttpResponse *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpResponse,0))){
    SWIG_fail_ptr("ofHttpResponse_request_get",1,SWIGTYPE_p_ofHttpResponse); }  result = (ofHttpRequest *)& ((arg1)->request);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofHttpRequest,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofHttpResponse_data_set(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *arg1 = (ofHttpResponse *) 0 ;
  ofBuffer *arg2 = (ofBuffer *) 0 ; SWIG_check_num_args("ofHttpResponse::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpResponse::data",1,"ofHttpResponse *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofHttpResponse::data",2,"ofBuffer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpResponse,0))){
    SWIG_fail_ptr("ofHttpResponse_data_set",1,SWIGTYPE_p_ofHttpResponse); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("ofHttpResponse_data_set",2,SWIGTYPE_p_ofBuffer); }  if (arg1) (arg1)->data = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpResponse_data_get(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *arg1 = (ofHttpResponse *) 0 ;
  ofBuffer *result = 0 ; SWIG_check_num_args("ofHttpResponse::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpResponse::data",1,"ofHttpResponse *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpResponse,0))){
    SWIG_fail_ptr("ofHttpResponse_data_get",1,SWIGTYPE_p_ofHttpResponse); }  result = (ofBuffer *)& ((arg1)->data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBuffer,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofHttpResponse_status_set(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *arg1 = (ofHttpResponse *) 0 ;
  int arg2 ; SWIG_check_num_args("ofHttpResponse::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpResponse::status",1,"ofHttpResponse *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofHttpResponse::status",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpResponse,0))){
    SWIG_fail_ptr("ofHttpResponse_status_set",1,SWIGTYPE_p_ofHttpResponse); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpResponse_status_get(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *arg1 = (ofHttpResponse *) 0 ;
  int result; SWIG_check_num_args("ofHttpResponse::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpResponse::status",1,"ofHttpResponse *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpResponse,0))){
    SWIG_fail_ptr("ofHttpResponse_status_get",1,SWIGTYPE_p_ofHttpResponse); }  result = (int) ((arg1)->status);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpResponse_error_set(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *arg1 = (ofHttpResponse *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("ofHttpResponse::error",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpResponse::error",1,"ofHttpResponse *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofHttpResponse::error",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpResponse,0))){
    SWIG_fail_ptr("ofHttpResponse_error_set",1,SWIGTYPE_p_ofHttpResponse); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; if (arg1) (arg1)->error = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofHttpResponse_error_get(lua_State* L) { int SWIG_arg = 0; ofHttpResponse *arg1 = (ofHttpResponse *) 0 ;
  std::string *result = 0 ; SWIG_check_num_args("ofHttpResponse::error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofHttpResponse::error",1,"ofHttpResponse *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofHttpResponse,0))){
    SWIG_fail_ptr("ofHttpResponse_error_get",1,SWIGTYPE_p_ofHttpResponse); }  result = (std::string *) & ((arg1)->error);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_ofHttpResponse(void *obj) {
ofHttpResponse *arg1 = (ofHttpResponse *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofHttpResponse(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofHttpResponse);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofHttpResponse_attributes[] = {
    { "request", _wrap_ofHttpResponse_request_get, _wrap_ofHttpResponse_request_set },
    { "data", _wrap_ofHttpResponse_data_get, _wrap_ofHttpResponse_data_set },
    { "status", _wrap_ofHttpResponse_status_get, _wrap_ofHttpResponse_status_set },
    { "error", _wrap_ofHttpResponse_error_get, _wrap_ofHttpResponse_error_set },
    {0,0,0}
};
static swig_lua_method swig_ofHttpResponse_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofHttpResponse_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofHttpResponse_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofHttpResponse_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofHttpResponse_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofHttpResponse_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofHttpResponse_Sf_SwigStatic = {
    "ofHttpResponse",
    swig_ofHttpResponse_Sf_SwigStatic_methods,
    swig_ofHttpResponse_Sf_SwigStatic_attributes,
    swig_ofHttpResponse_Sf_SwigStatic_constants,
    swig_ofHttpResponse_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofHttpResponse_bases[] = {0};
static const char *swig_ofHttpResponse_base_names[] = {0};
static swig_lua_class _wrap_class_ofHttpResponse = { "ofHttpResponse", "ofHttpResponse", &SWIGTYPE_p_ofHttpResponse,_proxy__wrap_new_ofHttpResponse, swig_delete_ofHttpResponse, swig_ofHttpResponse_methods, swig_ofHttpResponse_attributes, &swig_ofHttpResponse_Sf_SwigStatic, swig_ofHttpResponse_meta, swig_ofHttpResponse_bases, swig_ofHttpResponse_base_names };

static int _wrap_ofLoadURL(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofHttpResponse result;
  SWIG_check_num_args("ofLoadURL",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofLoadURL",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofLoadURL(arg1); {
    ofHttpResponse * resultptr = new ofHttpResponse((const ofHttpResponse &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofLoadURLAsync__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; int result;
  SWIG_check_num_args("ofLoadURLAsync",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofLoadURLAsync",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofLoadURLAsync",2,"std::string"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (int)ofLoadURLAsync(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLoadURLAsync__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; int result;
  SWIG_check_num_args("ofLoadURLAsync",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofLoadURLAsync",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = (int)ofLoadURLAsync(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLoadURLAsync(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofLoadURLAsync__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofLoadURLAsync__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofLoadURLAsync'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLoadURLAsync(std::string,std::string)\n" "    ofLoadURLAsync(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofSaveURLTo(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; ofHttpResponse result;
  SWIG_check_num_args("ofSaveURLTo",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSaveURLTo",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSaveURLTo",2,"std::string"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = ofSaveURLTo(arg1,arg2); {
    ofHttpResponse * resultptr = new ofHttpResponse((const ofHttpResponse &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSaveURLAsync(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; int result;
  SWIG_check_num_args("ofSaveURLAsync",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSaveURLAsync",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSaveURLAsync",2,"std::string"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (int)ofSaveURLAsync(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRemoveURLRequest(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofRemoveURLRequest",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRemoveURLRequest",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofRemoveURLRequest(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRemoveAllURLRequests(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofRemoveAllURLRequests",0,0)
  ofRemoveAllURLRequests(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStopURLLoader(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofStopURLLoader",0,0) ofStopURLLoader();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofURLResponseEvent(lua_State* L) { int SWIG_arg = 0; ofEvent< ofHttpResponse > *result = 0 ;
  SWIG_check_num_args("ofURLResponseEvent",0,0) result = (ofEvent< ofHttpResponse > *) &ofURLResponseEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofEventT_ofHttpResponse_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofURLFileLoader(lua_State* L) { int SWIG_arg = 0; ofURLFileLoader *result = 0 ;
  SWIG_check_num_args("ofURLFileLoader::ofURLFileLoader",0,0) result = (ofURLFileLoader *)new ofURLFileLoader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofURLFileLoader,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofURLFileLoader_get(lua_State* L) { int SWIG_arg = 0; ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ;
  std::string arg2 ; ofHttpResponse result; SWIG_check_num_args("ofURLFileLoader::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::get",1,"ofURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofURLFileLoader::get",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_get",1,SWIGTYPE_p_ofURLFileLoader); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (arg1)->get(arg2); { ofHttpResponse * resultptr = new ofHttpResponse((const ofHttpResponse &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofURLFileLoader_getAsync__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ; std::string arg2 ; std::string arg3 ; int result;
  SWIG_check_num_args("ofURLFileLoader::getAsync",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::getAsync",1,"ofURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofURLFileLoader::getAsync",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofURLFileLoader::getAsync",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_getAsync",1,SWIGTYPE_p_ofURLFileLoader); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (int)(arg1)->getAsync(arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofURLFileLoader_getAsync__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ; std::string arg2 ; int result;
  SWIG_check_num_args("ofURLFileLoader::getAsync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::getAsync",1,"ofURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofURLFileLoader::getAsync",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_getAsync",1,SWIGTYPE_p_ofURLFileLoader); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (int)(arg1)->getAsync(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofURLFileLoader_getAsync(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofURLFileLoader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofURLFileLoader_getAsync__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofURLFileLoader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_ofURLFileLoader_getAsync__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofURLFileLoader_getAsync'\n"
  "  Possible C/C++ prototypes are:\n" "    ofURLFileLoader::getAsync(std::string,std::string)\n"
  "    ofURLFileLoader::getAsync(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofURLFileLoader_saveTo(lua_State* L) { int SWIG_arg = 0; ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ;
  std::string arg2 ; std::string arg3 ; ofHttpResponse result; SWIG_check_num_args("ofURLFileLoader::saveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::saveTo",1,"ofURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofURLFileLoader::saveTo",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofURLFileLoader::saveTo",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_saveTo",1,SWIGTYPE_p_ofURLFileLoader); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (arg1)->saveTo(arg2,arg3); {
    ofHttpResponse * resultptr = new ofHttpResponse((const ofHttpResponse &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofURLFileLoader_saveAsync(lua_State* L) { int SWIG_arg = 0; ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ;
  std::string arg2 ; std::string arg3 ; int result; SWIG_check_num_args("ofURLFileLoader::saveAsync",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::saveAsync",1,"ofURLFileLoader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofURLFileLoader::saveAsync",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofURLFileLoader::saveAsync",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_saveAsync",1,SWIGTYPE_p_ofURLFileLoader); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  result = (int)(arg1)->saveAsync(arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofURLFileLoader_remove(lua_State* L) { int SWIG_arg = 0; ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ;
  int arg2 ; SWIG_check_num_args("ofURLFileLoader::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::remove",1,"ofURLFileLoader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofURLFileLoader::remove",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_remove",1,SWIGTYPE_p_ofURLFileLoader); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->remove(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofURLFileLoader_clear(lua_State* L) { int SWIG_arg = 0; ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ;
  SWIG_check_num_args("ofURLFileLoader::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::clear",1,"ofURLFileLoader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_clear",1,SWIGTYPE_p_ofURLFileLoader); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofURLFileLoader_stop(lua_State* L) { int SWIG_arg = 0; ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ;
  SWIG_check_num_args("ofURLFileLoader::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::stop",1,"ofURLFileLoader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_stop",1,SWIGTYPE_p_ofURLFileLoader); }  (arg1)->stop(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofURLFileLoader_handleRequest(lua_State* L) { int SWIG_arg = 0; ofURLFileLoader *arg1 = (ofURLFileLoader *) 0 ;
  ofHttpRequest *arg2 = 0 ; ofHttpResponse result; SWIG_check_num_args("ofURLFileLoader::handleRequest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofURLFileLoader::handleRequest",1,"ofURLFileLoader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofURLFileLoader::handleRequest",2,"ofHttpRequest &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofURLFileLoader,0))){
    SWIG_fail_ptr("ofURLFileLoader_handleRequest",1,SWIGTYPE_p_ofURLFileLoader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofHttpRequest,0))){
    SWIG_fail_ptr("ofURLFileLoader_handleRequest",2,SWIGTYPE_p_ofHttpRequest); }  result = (arg1)->handleRequest(*arg2); {
    ofHttpResponse * resultptr = new ofHttpResponse((const ofHttpResponse &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofHttpResponse,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_ofURLFileLoader(void *obj) {
ofURLFileLoader *arg1 = (ofURLFileLoader *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofURLFileLoader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofURLFileLoader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofURLFileLoader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofURLFileLoader_methods[]= {
    { "get", _wrap_ofURLFileLoader_get},
    { "getAsync", _wrap_ofURLFileLoader_getAsync},
    { "saveTo", _wrap_ofURLFileLoader_saveTo},
    { "saveAsync", _wrap_ofURLFileLoader_saveAsync},
    { "remove", _wrap_ofURLFileLoader_remove},
    { "clear", _wrap_ofURLFileLoader_clear},
    { "stop", _wrap_ofURLFileLoader_stop},
    { "handleRequest", _wrap_ofURLFileLoader_handleRequest},
    {0,0}
};
static swig_lua_method swig_ofURLFileLoader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofURLFileLoader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofURLFileLoader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofURLFileLoader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofURLFileLoader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofURLFileLoader_Sf_SwigStatic = {
    "ofURLFileLoader",
    swig_ofURLFileLoader_Sf_SwigStatic_methods,
    swig_ofURLFileLoader_Sf_SwigStatic_attributes,
    swig_ofURLFileLoader_Sf_SwigStatic_constants,
    swig_ofURLFileLoader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofURLFileLoader_bases[] = {0};
static const char *swig_ofURLFileLoader_base_names[] = {0};
static swig_lua_class _wrap_class_ofURLFileLoader = { "ofURLFileLoader", "ofURLFileLoader", &SWIGTYPE_p_ofURLFileLoader,_proxy__wrap_new_ofURLFileLoader, swig_delete_ofURLFileLoader, swig_ofURLFileLoader_methods, swig_ofURLFileLoader_attributes, &swig_ofURLFileLoader_Sf_SwigStatic, swig_ofURLFileLoader_meta, swig_ofURLFileLoader_bases, swig_ofURLFileLoader_base_names };

static int _wrap_new_ofRectangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *result = 0 ;
  SWIG_check_num_args("ofRectangle::ofRectangle",0,0) result = (ofRectangle *)new ofRectangle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofRectangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofRectangle *result = 0 ; SWIG_check_num_args("ofRectangle::ofRectangle",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRectangle::ofRectangle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::ofRectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::ofRectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::ofRectangle",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofRectangle *)new ofRectangle(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofRectangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  ofRectangle *result = 0 ; SWIG_check_num_args("ofRectangle::ofRectangle",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectangle::ofRectangle",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::ofRectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::ofRectangle",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_ofRectangle",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (ofRectangle *)new ofRectangle((ofPoint const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofRectangle__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; ofRectangle *result = 0 ;
  SWIG_check_num_args("ofRectangle::ofRectangle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectangle::ofRectangle",1,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("new_ofRectangle",1,SWIGTYPE_p_ofRectangle); } 
  result = (ofRectangle *)new ofRectangle((ofRectangle const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofRectangle__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  ofRectangle *result = 0 ; SWIG_check_num_args("ofRectangle::ofRectangle",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectangle::ofRectangle",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::ofRectangle",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_ofRectangle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_ofRectangle",2,SWIGTYPE_p_ofVec3f); } 
  result = (ofRectangle *)new ofRectangle((ofPoint const &)*arg1,(ofPoint const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofRectangle(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofRectangle__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_ofRectangle__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_new_ofRectangle__SWIG_4(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_new_ofRectangle__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofRectangle__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofRectangle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::ofRectangle()\n" "    ofRectangle::ofRectangle(float,float,float,float)\n"
  "    ofRectangle::ofRectangle(ofPoint const &,float,float)\n" "    ofRectangle::ofRectangle(ofRectangle const &)\n"
  "    ofRectangle::ofRectangle(ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofRectangle::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::set",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofRectangle::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::set",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::set",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_set",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_set",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); (arg1)->set((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::set",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::set",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_set",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_set",2,SWIGTYPE_p_ofRectangle); }  (arg1)->set((ofRectangle const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_set__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; SWIG_check_num_args("ofRectangle::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::set",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::set",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofRectangle::set",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_set",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_set",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_set",3,SWIGTYPE_p_ofVec3f); }  (arg1)->set((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_set__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_set__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofRectangle_set__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofRectangle_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::set(float,float,float,float)\n" "    ofRectangle::set(ofPoint const &,float,float)\n"
  "    ofRectangle::set(ofRectangle const &)\n" "    ofRectangle::set(ofPoint const &,ofPoint const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofRectangle_setX(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::setX",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setX",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setX",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_setX",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setX(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_setY(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::setY",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setY",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setY",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_setY",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setY(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_setWidth(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::setWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setWidth",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_setWidth",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setWidth(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_setHeight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setHeight",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_setHeight",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_setPosition__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::setPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setPosition",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::setPosition",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_setPosition",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setPosition(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_setPosition__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setPosition",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::setPosition",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_setPosition",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_setPosition",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setPosition((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_setPosition(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_setPosition__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofRectangle_setPosition__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_setPosition'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::setPosition(float,float)\n"
  "    ofRectangle::setPosition(ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_setFromCenter__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofRectangle::setFromCenter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setFromCenter",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setFromCenter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::setFromCenter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::setFromCenter",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::setFromCenter",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_setFromCenter",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setFromCenter(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_setFromCenter__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofRectangle::setFromCenter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setFromCenter",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::setFromCenter",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::setFromCenter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::setFromCenter",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_setFromCenter",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_setFromCenter",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); (arg1)->setFromCenter((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_setFromCenter(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofRectangle_setFromCenter__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofRectangle_setFromCenter__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_setFromCenter'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::setFromCenter(float,float,float,float)\n"
  "    ofRectangle::setFromCenter(ofPoint const &,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::translate",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::translate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_translate",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->translate(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::translate",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::translate",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_translate",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_translate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->translate((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_translate(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_translate__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofRectangle_translate__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_translate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::translate(float,float)\n"
  "    ofRectangle::translate(ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_translateX(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::translateX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::translateX",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::translateX",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_translateX",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->translateX(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_translateY(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::translateY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::translateY",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::translateY",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_translateY",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->translateY(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; SWIG_check_num_args("ofRectangle::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scale",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scale",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scale",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->scale(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::scale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scale",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scale",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scale",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->scale(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_scale__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scale",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scale",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scale",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_scale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->scale((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scale(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_scale__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofRectangle_scale__SWIG_0(L);}  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRectangle_scale__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_scale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::scale(float)\n" "    ofRectangle::scale(float,float)\n" "    ofRectangle::scale(ofPoint const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofRectangle_scaleWidth(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::scaleWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleWidth",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scaleWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleWidth",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scaleWidth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scaleHeight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::scaleHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleHeight",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scaleHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleHeight",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scaleHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scaleFromCenter__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; SWIG_check_num_args("ofRectangle::scaleFromCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleFromCenter",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scaleFromCenter",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleFromCenter",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scaleFromCenter(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scaleFromCenter__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::scaleFromCenter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleFromCenter",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scaleFromCenter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleFromCenter",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleFromCenter",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->scaleFromCenter(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_scaleFromCenter__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::scaleFromCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleFromCenter",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleFromCenter",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleFromCenter",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_scaleFromCenter",2,SWIGTYPE_p_ofVec3f); }  (arg1)->scaleFromCenter((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scaleFromCenter(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_scaleFromCenter__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofRectangle_scaleFromCenter__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRectangle_scaleFromCenter__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_scaleFromCenter'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::scaleFromCenter(float)\n"
  "    ofRectangle::scaleFromCenter(float,float)\n" "    ofRectangle::scaleFromCenter(ofPoint const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofRectangle_scaleToScaleMode(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofScaleMode arg3 ; SWIG_check_num_args("ofRectangle::scaleTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofScaleMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleToScaleMode",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleToScaleMode",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofScaleMode)(int)lua_tonumber(L, 3);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scaleTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::scaleTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  (arg1)->scaleTo((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scaleTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAspectRatioMode arg3 ; ofAlignHorz arg4 ; ofAlignVert arg5 ;
  SWIG_check_num_args("ofRectangle::scaleTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofAspectRatioMode");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::scaleTo",4,"ofAlignHorz");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::scaleTo",5,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAspectRatioMode)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignHorz)(int)lua_tonumber(L, 4); arg5 = (ofAlignVert)(int)lua_tonumber(L, 5);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_scaleTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAspectRatioMode arg3 ; ofAlignHorz arg4 ; SWIG_check_num_args("ofRectangle::scaleTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofAspectRatioMode");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::scaleTo",4,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAspectRatioMode)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignHorz)(int)lua_tonumber(L, 4); (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scaleToAspectRatio(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAspectRatioMode arg3 ; SWIG_check_num_args("ofRectangle::scaleTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofAspectRatioMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleToAspectRatio",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleToAspectRatio",2,SWIGTYPE_p_ofRectangle); } 
  arg3 = (ofAspectRatioMode)(int)lua_tonumber(L, 3); (arg1)->scaleTo((ofRectangle const &)*arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_scaleTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAspectRatioMode arg3 ; ofAlignHorz arg4 ; ofAlignVert arg5 ; ofAlignHorz arg6 ; ofAlignVert arg7 ;
  SWIG_check_num_args("ofRectangle::scaleTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofAspectRatioMode");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::scaleTo",4,"ofAlignHorz");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::scaleTo",5,"ofAlignVert");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofRectangle::scaleTo",6,"ofAlignHorz");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofRectangle::scaleTo",7,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAspectRatioMode)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignHorz)(int)lua_tonumber(L, 4); arg5 = (ofAlignVert)(int)lua_tonumber(L, 5);
  arg6 = (ofAlignHorz)(int)lua_tonumber(L, 6); arg7 = (ofAlignVert)(int)lua_tonumber(L, 7);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_scaleTo(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_scaleTo__SWIG_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofRectangle_scaleTo__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofRectangle_scaleTo__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_ofRectangle_scaleTo__SWIG_3(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_scaleTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::scaleTo(ofRectangle const &)\n"
  "    ofRectangle::scaleTo(ofRectangle const &,ofAspectRatioMode,ofAlignHorz,ofAlignVert)\n"
  "    ofRectangle::scaleTo(ofRectangle const &,ofAspectRatioMode,ofAlignHorz)\n"
  "    ofRectangle::scaleTo(ofRectangle const &,ofAspectRatioMode,ofAlignHorz,ofAlignVert,ofAlignHorz,ofAlignVert)\n");
  lua_error(L);return 0; }
static int _wrap_ofRectangle_alignToHorz__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ; ofAlignHorz arg3 ; float temp2 ; SWIG_check_num_args("ofRectangle::alignToHorz",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToHorz",3,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3); (arg1)->alignToHorz((float const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToHorz__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ; float temp2 ; SWIG_check_num_args("ofRectangle::alignToHorz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->alignToHorz((float const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToHorz__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; SWIG_check_num_args("ofRectangle::alignToHorz",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToHorz",3,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToHorz",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  (arg1)->alignToHorz((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToHorz__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::alignToHorz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToHorz",2,SWIGTYPE_p_ofRectangle); }  (arg1)->alignToHorz((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToHorz__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; ofAlignHorz arg4 ; SWIG_check_num_args("ofRectangle::alignToHorz",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToHorz",3,"ofAlignHorz");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignToHorz",4,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToHorz",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignHorz)(int)lua_tonumber(L, 4); (arg1)->alignToHorz((ofRectangle const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToHorz(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_alignToHorz__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofRectangle_alignToHorz__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRectangle_alignToHorz__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRectangle_alignToHorz__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofRectangle_alignToHorz__SWIG_4(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_alignToHorz'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::alignToHorz(float const &,ofAlignHorz)\n"
  "    ofRectangle::alignToHorz(float const &)\n" "    ofRectangle::alignToHorz(ofRectangle const &,ofAlignHorz)\n"
  "    ofRectangle::alignToHorz(ofRectangle const &)\n"
  "    ofRectangle::alignToHorz(ofRectangle const &,ofAlignHorz,ofAlignHorz)\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_alignToVert__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ; ofAlignVert arg3 ; float temp2 ; SWIG_check_num_args("ofRectangle::alignToVert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToVert",3,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  arg3 = (ofAlignVert)(int)lua_tonumber(L, 3); (arg1)->alignToVert((float const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToVert__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ; float temp2 ; SWIG_check_num_args("ofRectangle::alignToVert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->alignToVert((float const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToVert__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignVert arg3 ; SWIG_check_num_args("ofRectangle::alignToVert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToVert",3,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToVert",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignVert)(int)lua_tonumber(L, 3);
  (arg1)->alignToVert((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToVert__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::alignToVert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToVert",2,SWIGTYPE_p_ofRectangle); }  (arg1)->alignToVert((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToVert__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignVert arg3 ; ofAlignVert arg4 ; SWIG_check_num_args("ofRectangle::alignToVert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToVert",3,"ofAlignVert");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignToVert",4,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignToVert",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignVert)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignVert)(int)lua_tonumber(L, 4); (arg1)->alignToVert((ofRectangle const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignToVert(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_alignToVert__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofRectangle_alignToVert__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRectangle_alignToVert__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRectangle_alignToVert__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofRectangle_alignToVert__SWIG_4(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_alignToVert'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::alignToVert(float const &,ofAlignVert)\n"
  "    ofRectangle::alignToVert(float const &)\n" "    ofRectangle::alignToVert(ofRectangle const &,ofAlignVert)\n"
  "    ofRectangle::alignToVert(ofRectangle const &)\n"
  "    ofRectangle::alignToVert(ofRectangle const &,ofAlignVert,ofAlignVert)\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_alignTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofAlignHorz arg3 ; ofAlignVert arg4 ; SWIG_check_num_args("ofRectangle::alignTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignTo",4,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",2,SWIGTYPE_p_ofVec3f); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignVert)(int)lua_tonumber(L, 4); (arg1)->alignTo((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofAlignHorz arg3 ; SWIG_check_num_args("ofRectangle::alignTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",2,SWIGTYPE_p_ofVec3f); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  (arg1)->alignTo((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::alignTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->alignTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; ofAlignVert arg4 ; SWIG_check_num_args("ofRectangle::alignTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignTo",4,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignVert)(int)lua_tonumber(L, 4); (arg1)->alignTo((ofRectangle const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; SWIG_check_num_args("ofRectangle::alignTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  (arg1)->alignTo((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignTo__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::alignTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",2,SWIGTYPE_p_ofRectangle); }  (arg1)->alignTo((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignTo__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; ofAlignVert arg4 ; ofAlignHorz arg5 ; ofAlignVert arg6 ;
  SWIG_check_num_args("ofRectangle::alignTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignTo",4,"ofAlignVert");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::alignTo",5,"ofAlignHorz");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofRectangle::alignTo",6,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_alignTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignVert)(int)lua_tonumber(L, 4); arg5 = (ofAlignHorz)(int)lua_tonumber(L, 5);
  arg6 = (ofAlignVert)(int)lua_tonumber(L, 6); (arg1)->alignTo((ofRectangle const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_alignTo(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_alignTo__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_alignTo__SWIG_5(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRectangle_alignTo__SWIG_4(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRectangle_alignTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofRectangle_alignTo__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofRectangle_alignTo__SWIG_3(L);}  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofRectangle_alignTo__SWIG_6(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_alignTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::alignTo(ofPoint const &,ofAlignHorz,ofAlignVert)\n"
  "    ofRectangle::alignTo(ofPoint const &,ofAlignHorz)\n" "    ofRectangle::alignTo(ofPoint const &)\n"
  "    ofRectangle::alignTo(ofRectangle const &,ofAlignHorz,ofAlignVert)\n"
  "    ofRectangle::alignTo(ofRectangle const &,ofAlignHorz)\n" "    ofRectangle::alignTo(ofRectangle const &)\n"
  "    ofRectangle::alignTo(ofRectangle const &,ofAlignHorz,ofAlignVert,ofAlignHorz,ofAlignVert)\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_inside__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; bool result; SWIG_check_num_args("ofRectangle::inside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::inside",1,"ofRectangle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::inside",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::inside",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_inside",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofRectangle const *)arg1)->inside(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_inside__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; bool result; SWIG_check_num_args("ofRectangle::inside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::inside",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::inside",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_inside",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_inside",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofRectangle const *)arg1)->inside((ofPoint const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_inside__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; bool result; SWIG_check_num_args("ofRectangle::inside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::inside",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::inside",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_inside",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_inside",2,SWIGTYPE_p_ofRectangle); } 
  result = (bool)((ofRectangle const *)arg1)->inside((ofRectangle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_inside__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; bool result; SWIG_check_num_args("ofRectangle::inside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::inside",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::inside",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofRectangle::inside",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_inside",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_inside",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_inside",3,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofRectangle const *)arg1)->inside((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_inside(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_inside__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_inside__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_inside__SWIG_3(L);}  }  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofRectangle_inside__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_inside'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::inside(float,float) const\n" "    ofRectangle::inside(ofPoint const &) const\n"
  "    ofRectangle::inside(ofRectangle const &) const\n" "    ofRectangle::inside(ofPoint const &,ofPoint const &) const\n");
  lua_error(L);return 0; }
static int _wrap_ofRectangle_intersects__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; bool result; SWIG_check_num_args("ofRectangle::intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::intersects",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::intersects",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_intersects",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_intersects",2,SWIGTYPE_p_ofRectangle); } 
  result = (bool)((ofRectangle const *)arg1)->intersects((ofRectangle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_intersects__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; bool result; SWIG_check_num_args("ofRectangle::intersects",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::intersects",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::intersects",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofRectangle::intersects",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_intersects",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_intersects",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_intersects",3,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofRectangle const *)arg1)->intersects((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_intersects(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_intersects__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_intersects__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_intersects'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::intersects(ofRectangle const &) const\n"
  "    ofRectangle::intersects(ofPoint const &,ofPoint const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_growToInclude__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::growToInclude",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::growToInclude",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::growToInclude",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::growToInclude",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_growToInclude",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->growToInclude(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_growToInclude__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::growToInclude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::growToInclude",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::growToInclude",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_growToInclude",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_growToInclude",2,SWIGTYPE_p_ofVec3f); }  (arg1)->growToInclude((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_growToInclude__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::growToInclude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::growToInclude",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::growToInclude",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_growToInclude",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_growToInclude",2,SWIGTYPE_p_ofRectangle); }  (arg1)->growToInclude((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_growToInclude__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; SWIG_check_num_args("ofRectangle::growToInclude",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::growToInclude",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::growToInclude",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofRectangle::growToInclude",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_growToInclude",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_growToInclude",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_growToInclude",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->growToInclude((ofPoint const &)*arg2,(ofPoint const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_growToInclude(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_growToInclude__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_growToInclude__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofRectangle_growToInclude__SWIG_3(L);}  }  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofRectangle_growToInclude__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectangle_growToInclude'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::growToInclude(float,float)\n"
  "    ofRectangle::growToInclude(ofPoint const &)\n" "    ofRectangle::growToInclude(ofRectangle const &)\n"
  "    ofRectangle::growToInclude(ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofRectangle_getIntersection(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofRectangle result; SWIG_check_num_args("ofRectangle::getIntersection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getIntersection",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::getIntersection",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getIntersection",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getIntersection",2,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getIntersection((ofRectangle const &)*arg2); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getUnion(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofRectangle result; SWIG_check_num_args("ofRectangle::getUnion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getUnion",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::getUnion",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getUnion",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getUnion",2,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getUnion((ofRectangle const &)*arg2); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_standardize(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  SWIG_check_num_args("ofRectangle::standardize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::standardize",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_standardize",1,SWIGTYPE_p_ofRectangle); }  (arg1)->standardize(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getStandardized(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle result; SWIG_check_num_args("ofRectangle::getStandardized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getStandardized",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getStandardized",1,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getStandardized(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_isStandardized(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  bool result; SWIG_check_num_args("ofRectangle::isStandardized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::isStandardized",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_isStandardized",1,SWIGTYPE_p_ofRectangle); } 
  result = (bool)((ofRectangle const *)arg1)->isStandardized(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getArea(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getArea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getArea",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getArea",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getArea();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getPerimeter(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float result; SWIG_check_num_args("ofRectangle::getPerimeter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getPerimeter",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getPerimeter",1,SWIGTYPE_p_ofRectangle); } 
  result = (float)((ofRectangle const *)arg1)->getPerimeter(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getAspectRatio(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float result; SWIG_check_num_args("ofRectangle::getAspectRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getAspectRatio",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getAspectRatio",1,SWIGTYPE_p_ofRectangle); } 
  result = (float)((ofRectangle const *)arg1)->getAspectRatio(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_isEmpty(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; bool result;
  SWIG_check_num_args("ofRectangle::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::isEmpty",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_isEmpty",1,SWIGTYPE_p_ofRectangle); }  result = (bool)((ofRectangle const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getMin(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMin",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getMin",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getMin(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getMax(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMax",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getMax",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getMax(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getMinX(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getMinX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMinX",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getMinX",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getMinX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getMaxX(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getMaxX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMaxX",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getMaxX",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getMaxX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getMinY(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getMinY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMinY",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getMinY",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getMinY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getMaxY(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getMaxY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMaxY",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getMaxY",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getMaxY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getLeft(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getLeft",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getLeft",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getRight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getRight",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getRight",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getRight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getTop(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getTop",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getTop",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getTop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getBottom(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getBottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getBottom",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getBottom",1,SWIGTYPE_p_ofRectangle); } 
  result = (float)((ofRectangle const *)arg1)->getBottom(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getTopLeft(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint result; SWIG_check_num_args("ofRectangle::getTopLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getTopLeft",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getTopLeft",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getTopLeft(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getTopRight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint result; SWIG_check_num_args("ofRectangle::getTopRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getTopRight",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getTopRight",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getTopRight(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getBottomLeft(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint result; SWIG_check_num_args("ofRectangle::getBottomLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getBottomLeft",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getBottomLeft",1,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getBottomLeft(); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getBottomRight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint result; SWIG_check_num_args("ofRectangle::getBottomRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getBottomRight",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getBottomRight",1,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getBottomRight(); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getHorzAnchor(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofAlignHorz arg2 ; float result; SWIG_check_num_args("ofRectangle::getHorzAnchor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getHorzAnchor",1,"ofRectangle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::getHorzAnchor",2,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getHorzAnchor",1,SWIGTYPE_p_ofRectangle); }  arg2 = (ofAlignHorz)(int)lua_tonumber(L, 2);
  result = (float)((ofRectangle const *)arg1)->getHorzAnchor(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getVertAnchor(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofAlignVert arg2 ; float result; SWIG_check_num_args("ofRectangle::getVertAnchor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getVertAnchor",1,"ofRectangle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::getVertAnchor",2,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getVertAnchor",1,SWIGTYPE_p_ofRectangle); }  arg2 = (ofAlignVert)(int)lua_tonumber(L, 2);
  result = (float)((ofRectangle const *)arg1)->getVertAnchor(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getPosition(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint result; SWIG_check_num_args("ofRectangle::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getPosition",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getPosition",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getPosition(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getPositionRef(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *result = 0 ; SWIG_check_num_args("ofRectangle::getPositionRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getPositionRef",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getPositionRef",1,SWIGTYPE_p_ofRectangle); }  result = (ofPoint *) &(arg1)->getPositionRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_getCenter(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getCenter",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getCenter",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getCenter(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getX(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getX",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getX",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getY(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getY",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getY",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getWidth(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getWidth",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getWidth",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_getHeight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getHeight",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_getHeight",1,SWIGTYPE_p_ofRectangle); } 
  result = (float)((ofRectangle const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle___add(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint *arg2 = 0 ;
  ofRectangle result; SWIG_check_num_args("ofRectangle::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::operator +",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::operator +",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle___add",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle___add",2,SWIGTYPE_p_ofVec3f); }  result = (arg1)->operator +((ofPoint const &)*arg2); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle___eq(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; bool result; SWIG_check_num_args("ofRectangle::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::operator ==",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::operator ==",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle___eq",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle___eq",2,SWIGTYPE_p_ofRectangle); } 
  result = (bool)((ofRectangle const *)arg1)->operator ==((ofRectangle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_isZero(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; bool result;
  SWIG_check_num_args("ofRectangle::isZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::isZero",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_isZero",1,SWIGTYPE_p_ofRectangle); }  result = (bool)((ofRectangle const *)arg1)->isZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_position_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ; SWIG_check_num_args("ofRectangle::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::position",1,"ofRectangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofRectangle::position",2,"ofPoint *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_position_set",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectangle_position_set",2,SWIGTYPE_p_ofVec3f); }  if (arg1) (arg1)->position = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_position_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *result = 0 ; SWIG_check_num_args("ofRectangle::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::position",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_position_get",1,SWIGTYPE_p_ofRectangle); }  result = (ofPoint *)& ((arg1)->position);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectangle_width_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::width",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::width",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::width",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_width_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_width_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::width",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::width",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_width_get",1,SWIGTYPE_p_ofRectangle); }  result = (float) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_height_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::height",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::height",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_height_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_height_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::height",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_height_get",1,SWIGTYPE_p_ofRectangle); }  result = (float) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_x_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::x",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::x",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_x_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  ofRectangle_x_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_x_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::x",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_x_get",1,SWIGTYPE_p_ofRectangle); }  result = (float)ofRectangle_x_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_y_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::y",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::y",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_y_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  ofRectangle_y_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle_y_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::y",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle_y_get",1,SWIGTYPE_p_ofRectangle); }  result = (float)ofRectangle_y_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectangle___tostring(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  char *result = 0 ; SWIG_check_num_args("ofRectangle::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::__str__",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectangle___tostring",1,SWIGTYPE_p_ofRectangle); }  result = (char *)ofRectangle___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofRectangle(void *obj) {
ofRectangle *arg1 = (ofRectangle *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofRectangle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofRectangle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofRectangle_attributes[] = {
    { "position", _wrap_ofRectangle_position_get, _wrap_ofRectangle_position_set },
    { "width", _wrap_ofRectangle_width_get, _wrap_ofRectangle_width_set },
    { "height", _wrap_ofRectangle_height_get, _wrap_ofRectangle_height_set },
    { "x", _wrap_ofRectangle_x_get, _wrap_ofRectangle_x_set },
    { "y", _wrap_ofRectangle_y_get, _wrap_ofRectangle_y_set },
    {0,0,0}
};
static swig_lua_method swig_ofRectangle_methods[]= {
    { "set", _wrap_ofRectangle_set},
    { "setX", _wrap_ofRectangle_setX},
    { "setY", _wrap_ofRectangle_setY},
    { "setWidth", _wrap_ofRectangle_setWidth},
    { "setHeight", _wrap_ofRectangle_setHeight},
    { "setPosition", _wrap_ofRectangle_setPosition},
    { "setFromCenter", _wrap_ofRectangle_setFromCenter},
    { "translate", _wrap_ofRectangle_translate},
    { "translateX", _wrap_ofRectangle_translateX},
    { "translateY", _wrap_ofRectangle_translateY},
    { "scale", _wrap_ofRectangle_scale},
    { "scaleWidth", _wrap_ofRectangle_scaleWidth},
    { "scaleHeight", _wrap_ofRectangle_scaleHeight},
    { "scaleFromCenter", _wrap_ofRectangle_scaleFromCenter},
    { "scaleToScaleMode", _wrap_ofRectangle_scaleToScaleMode},
    { "scaleToAspectRatio", _wrap_ofRectangle_scaleToAspectRatio},
    { "scaleTo", _wrap_ofRectangle_scaleTo},
    { "alignToHorz", _wrap_ofRectangle_alignToHorz},
    { "alignToVert", _wrap_ofRectangle_alignToVert},
    { "alignTo", _wrap_ofRectangle_alignTo},
    { "inside", _wrap_ofRectangle_inside},
    { "intersects", _wrap_ofRectangle_intersects},
    { "growToInclude", _wrap_ofRectangle_growToInclude},
    { "getIntersection", _wrap_ofRectangle_getIntersection},
    { "getUnion", _wrap_ofRectangle_getUnion},
    { "standardize", _wrap_ofRectangle_standardize},
    { "getStandardized", _wrap_ofRectangle_getStandardized},
    { "isStandardized", _wrap_ofRectangle_isStandardized},
    { "getArea", _wrap_ofRectangle_getArea},
    { "getPerimeter", _wrap_ofRectangle_getPerimeter},
    { "getAspectRatio", _wrap_ofRectangle_getAspectRatio},
    { "isEmpty", _wrap_ofRectangle_isEmpty},
    { "getMin", _wrap_ofRectangle_getMin},
    { "getMax", _wrap_ofRectangle_getMax},
    { "getMinX", _wrap_ofRectangle_getMinX},
    { "getMaxX", _wrap_ofRectangle_getMaxX},
    { "getMinY", _wrap_ofRectangle_getMinY},
    { "getMaxY", _wrap_ofRectangle_getMaxY},
    { "getLeft", _wrap_ofRectangle_getLeft},
    { "getRight", _wrap_ofRectangle_getRight},
    { "getTop", _wrap_ofRectangle_getTop},
    { "getBottom", _wrap_ofRectangle_getBottom},
    { "getTopLeft", _wrap_ofRectangle_getTopLeft},
    { "getTopRight", _wrap_ofRectangle_getTopRight},
    { "getBottomLeft", _wrap_ofRectangle_getBottomLeft},
    { "getBottomRight", _wrap_ofRectangle_getBottomRight},
    { "getHorzAnchor", _wrap_ofRectangle_getHorzAnchor},
    { "getVertAnchor", _wrap_ofRectangle_getVertAnchor},
    { "getPosition", _wrap_ofRectangle_getPosition},
    { "getPositionRef", _wrap_ofRectangle_getPositionRef},
    { "getCenter", _wrap_ofRectangle_getCenter},
    { "getX", _wrap_ofRectangle_getX},
    { "getY", _wrap_ofRectangle_getY},
    { "getWidth", _wrap_ofRectangle_getWidth},
    { "getHeight", _wrap_ofRectangle_getHeight},
    { "__add", _wrap_ofRectangle___add},
    { "__eq", _wrap_ofRectangle___eq},
    { "isZero", _wrap_ofRectangle_isZero},
    { "__tostring", _wrap_ofRectangle___tostring},
    {0,0}
};
static swig_lua_method swig_ofRectangle_meta[] = {
    { "__add", _wrap_ofRectangle___add},
    { "__eq", _wrap_ofRectangle___eq},
    { "__tostring", _wrap_ofRectangle___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofRectangle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofRectangle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofRectangle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofRectangle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofRectangle_Sf_SwigStatic = {
    "ofRectangle",
    swig_ofRectangle_Sf_SwigStatic_methods,
    swig_ofRectangle_Sf_SwigStatic_attributes,
    swig_ofRectangle_Sf_SwigStatic_constants,
    swig_ofRectangle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofRectangle_bases[] = {0};
static const char *swig_ofRectangle_base_names[] = {0};
static swig_lua_class _wrap_class_ofRectangle = { "ofRectangle", "ofRectangle", &SWIGTYPE_p_ofRectangle,_proxy__wrap_new_ofRectangle, swig_delete_ofRectangle, swig_ofRectangle_methods, swig_ofRectangle_attributes, &swig_ofRectangle_Sf_SwigStatic, swig_ofRectangle_meta, swig_ofRectangle_bases, swig_ofRectangle_base_names };

static int _wrap_new_ofNode(lua_State* L) { int SWIG_arg = 0; ofNode *result = 0 ; SWIG_check_num_args("ofNode::ofNode",0,0)
  result = (ofNode *)new ofNode(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofNode,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setParent__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *arg2 = 0 ;
  bool arg3 ; SWIG_check_num_args("ofNode::setParent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setParent",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setParent",2,"ofNode &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofNode::setParent",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setParent",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setParent",2,SWIGTYPE_p_ofNode); }  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->setParent(*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setParent__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *arg2 = 0 ;
  SWIG_check_num_args("ofNode::setParent",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setParent",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setParent",2,"ofNode &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setParent",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setParent",2,SWIGTYPE_p_ofNode); }  (arg1)->setParent(*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setParent(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_setParent__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { return _wrap_ofNode_setParent__SWIG_0(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_setParent'\n"
  "  Possible C/C++ prototypes are:\n" "    ofNode::setParent(ofNode &,bool)\n" "    ofNode::setParent(ofNode &)\n");
  lua_error(L);return 0; }
static int _wrap_ofNode_clearParent__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofNode::clearParent",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::clearParent",1,"ofNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofNode::clearParent",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_clearParent",1,SWIGTYPE_p_ofNode); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->clearParent(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_clearParent__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::clearParent",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::clearParent",1,"ofNode *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_clearParent",1,SWIGTYPE_p_ofNode); }  (arg1)->clearParent(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_clearParent(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofNode_clearParent__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofNode_clearParent__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_clearParent'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::clearParent(bool)\n" "    ofNode::clearParent()\n"); lua_error(L);return 0; }
static int _wrap_ofNode_getParent(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *result = 0 ;
  SWIG_check_num_args("ofNode::getParent",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getParent",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getParent",1,SWIGTYPE_p_ofNode); }  result = (ofNode *)((ofNode const *)arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofNode,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofNode_getPosition(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getPosition",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getPosition",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getPosition(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getX(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getX",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getX",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_getX",1,SWIGTYPE_p_ofNode); } 
  result = (float)((ofNode const *)arg1)->getX(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getY(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getY",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getY",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_getY",1,SWIGTYPE_p_ofNode); } 
  result = (float)((ofNode const *)arg1)->getY(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getZ(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getZ",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getZ",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_getZ",1,SWIGTYPE_p_ofNode); } 
  result = (float)((ofNode const *)arg1)->getZ(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getXAxis(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getXAxis",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getXAxis",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getXAxis",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getXAxis(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getYAxis(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getYAxis",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getYAxis",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getYAxis",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getYAxis(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getZAxis(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getZAxis",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getZAxis",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getZAxis",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getZAxis(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getSideDir(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getSideDir",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getSideDir",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getSideDir",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getSideDir(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getLookAtDir(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getLookAtDir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getLookAtDir",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getLookAtDir",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getLookAtDir(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getUpDir(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getUpDir",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getUpDir",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getUpDir",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getUpDir(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getPitch(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getPitch",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getPitch",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getPitch",1,SWIGTYPE_p_ofNode); }  result = (float)((ofNode const *)arg1)->getPitch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getHeading(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getHeading",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getHeading",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getHeading",1,SWIGTYPE_p_ofNode); }  result = (float)((ofNode const *)arg1)->getHeading();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getRoll(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getRoll",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getRoll",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_getRoll",1,SWIGTYPE_p_ofNode); }
   result = (float)((ofNode const *)arg1)->getRoll(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getOrientationQuat(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofQuaternion result;
  SWIG_check_num_args("ofNode::getOrientationQuat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getOrientationQuat",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getOrientationQuat",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getOrientationQuat(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getOrientationEuler(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getOrientationEuler",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getOrientationEuler",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getOrientationEuler",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getOrientationEuler();
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getScale(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getScale",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getScale",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getScale",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getScale(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getLocalTransformMatrix(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofNode::getLocalTransformMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getLocalTransformMatrix",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getLocalTransformMatrix",1,SWIGTYPE_p_ofNode); } 
  result = (ofMatrix4x4 *) &((ofNode const *)arg1)->getLocalTransformMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofNode_getGlobalTransformMatrix(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofNode::getGlobalTransformMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getGlobalTransformMatrix",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getGlobalTransformMatrix",1,SWIGTYPE_p_ofNode); } 
  result = ((ofNode const *)arg1)->getGlobalTransformMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getGlobalPosition(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getGlobalPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getGlobalPosition",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getGlobalPosition",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getGlobalPosition(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getGlobalOrientation(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofNode::getGlobalOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getGlobalOrientation",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getGlobalOrientation",1,SWIGTYPE_p_ofNode); } 
  result = ((ofNode const *)arg1)->getGlobalOrientation(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_getGlobalScale(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getGlobalScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getGlobalScale",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_getGlobalScale",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getGlobalScale(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setTransformMatrix(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofNode::setTransformMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setTransformMatrix",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setTransformMatrix",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setTransformMatrix",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofNode_setTransformMatrix",2,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->setTransformMatrix((ofMatrix4x4 const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofNode_setPosition__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofNode::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setPosition",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::setPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::setPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::setPosition",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setPosition",1,SWIGTYPE_p_ofNode); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setPosition(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setPosition__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::setPosition",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setPosition",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setPosition",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setPosition",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_setPosition",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setPosition((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setPosition(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_setPosition__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofNode_setPosition__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_setPosition'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::setPosition(float,float,float)\n" "    ofNode::setPosition(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofNode_setGlobalPosition__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofNode::setGlobalPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setGlobalPosition",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::setGlobalPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::setGlobalPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::setGlobalPosition",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setGlobalPosition",1,SWIGTYPE_p_ofNode); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setGlobalPosition(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setGlobalPosition__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofNode::setGlobalPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setGlobalPosition",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setGlobalPosition",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setGlobalPosition",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_setGlobalPosition",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setGlobalPosition((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setGlobalPosition(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_setGlobalPosition__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofNode_setGlobalPosition__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_setGlobalPosition'\n"
  "  Possible C/C++ prototypes are:\n" "    ofNode::setGlobalPosition(float,float,float)\n"
  "    ofNode::setGlobalPosition(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofNode_setOrientation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofNode::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setOrientation",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setOrientation",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setOrientation",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofNode_setOrientation",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->setOrientation((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setOrientation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofNode::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setOrientation",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setOrientation",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setOrientation",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_setOrientation",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setOrientation((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setOrientation(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_setOrientation__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_setOrientation__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_setOrientation'\n"
  "  Possible C/C++ prototypes are:\n" "    ofNode::setOrientation(ofQuaternion const &)\n"
  "    ofNode::setOrientation(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofNode_setGlobalOrientation(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofNode::setGlobalOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setGlobalOrientation",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setGlobalOrientation",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setGlobalOrientation",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofNode_setGlobalOrientation",2,SWIGTYPE_p_ofQuaternion); } 
  (arg1)->setGlobalOrientation((ofQuaternion const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofNode_setScale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::setScale",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setScale",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::setScale",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setScale",1,SWIGTYPE_p_ofNode); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setScale(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setScale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofNode::setScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setScale",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::setScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::setScale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::setScale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setScale",1,SWIGTYPE_p_ofNode); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); (arg1)->setScale(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofNode_setScale__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::setScale",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setScale",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setScale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_setScale",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_setScale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setScale((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_setScale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_setScale__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofNode_setScale__SWIG_0(L);}  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofNode_setScale__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_setScale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::setScale(float)\n" "    ofNode::setScale(float,float,float)\n" "    ofNode::setScale(ofVec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofNode_move__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofNode::move",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::move",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::move",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::move",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::move",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_move",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->move(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_move__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::move",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::move",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::move",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_move",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofNode_move",2,SWIGTYPE_p_ofVec3f); }
   (arg1)->move((ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_move(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_move__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofNode_move__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_move'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::move(float,float,float)\n" "    ofNode::move(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofNode_truck(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::truck",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::truck",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::truck",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_truck",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->truck(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_boom(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::boom",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::boom",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::boom",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_boom",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->boom(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_dolly(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::dolly",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::dolly",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::dolly",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_dolly",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->dolly(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_tilt(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::tilt",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::tilt",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::tilt",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_tilt",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->tilt(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_pan(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::pan",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::pan",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::pan",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_pan",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->pan(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_roll(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::roll",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::roll",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::roll",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_roll",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->roll(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofQuaternion *arg2 = 0 ;
  SWIG_check_num_args("ofNode::rotate",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotate",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::rotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_rotate",1,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofNode_rotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->rotate((ofQuaternion const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofNode::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotate",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::rotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_rotate",1,SWIGTYPE_p_ofNode); }
   arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_rotate",3,SWIGTYPE_p_ofVec3f); }  (arg1)->rotate(arg2,(ofVec3f const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_rotate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofNode::rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotate",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofNode::rotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_rotate",1,SWIGTYPE_p_ofNode); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->rotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofNode_rotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_rotate__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofNode_rotate__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofNode_rotate__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::rotate(ofQuaternion const &)\n" "    ofNode::rotate(float,ofVec3f const &)\n"
  "    ofNode::rotate(float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofNode_rotateAround__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofNode::rotateAround",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotateAround",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::rotateAround",2,"ofQuaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::rotateAround",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_rotateAround",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofNode_rotateAround",2,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_rotateAround",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->rotateAround((ofQuaternion const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_rotateAround__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofNode::rotateAround",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotateAround",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::rotateAround",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::rotateAround",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofNode::rotateAround",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_rotateAround",1,SWIGTYPE_p_ofNode); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_rotateAround",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_rotateAround",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->rotateAround(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_rotateAround(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofNode_rotateAround__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofNode_rotateAround__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_rotateAround'\n"
  "  Possible C/C++ prototypes are:\n" "    ofNode::rotateAround(ofQuaternion const &,ofVec3f const &)\n"
  "    ofNode::rotateAround(float,ofVec3f const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofNode_lookAt__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f arg3 ; ofVec3f *argp3 ; SWIG_check_num_args("ofNode::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::lookAt",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::lookAt",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::lookAt",3,"ofVec3f");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_lookAt",1,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_lookAt",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_lookAt",3,SWIGTYPE_p_ofVec3f); }  arg3 = *argp3; (arg1)->lookAt((ofVec3f const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_lookAt__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::lookAt",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::lookAt",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::lookAt",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_lookAt",1,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_lookAt",2,SWIGTYPE_p_ofVec3f); }  (arg1)->lookAt((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_lookAt__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofNode::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::lookAt",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::lookAt",2,"ofNode const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::lookAt",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_lookAt",1,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_lookAt",2,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofNode_lookAt",3,SWIGTYPE_p_ofVec3f); }  (arg1)->lookAt((ofNode const &)*arg2,(ofVec3f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_lookAt__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *arg2 = 0 ;
  SWIG_check_num_args("ofNode::lookAt",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::lookAt",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::lookAt",2,"ofNode const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_lookAt",1,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_lookAt",2,SWIGTYPE_p_ofNode); }
   (arg1)->lookAt((ofNode const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_lookAt(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_lookAt__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_lookAt__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofNode_lookAt__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofNode_lookAt__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_lookAt'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::lookAt(ofVec3f const &,ofVec3f)\n" "    ofNode::lookAt(ofVec3f const &)\n"
  "    ofNode::lookAt(ofNode const &,ofVec3f const &)\n" "    ofNode::lookAt(ofNode const &)\n"); lua_error(L);return 0; }
static int _wrap_ofNode_orbit__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; ofVec3f *arg5 = 0 ; SWIG_check_num_args("ofNode::orbit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::orbit",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::orbit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::orbit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::orbit",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofNode::orbit",5,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_orbit",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofNode_orbit",5,SWIGTYPE_p_ofVec3f); }
   (arg1)->orbit(arg2,arg3,arg4,(ofVec3f const &)*arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_orbit__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofNode::orbit",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::orbit",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::orbit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::orbit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::orbit",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_orbit",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->orbit(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_orbit__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; ofNode *arg5 = 0 ; SWIG_check_num_args("ofNode::orbit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::orbit",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::orbit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::orbit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::orbit",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofNode::orbit",5,"ofNode &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_orbit",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_orbit",5,SWIGTYPE_p_ofNode); } 
  (arg1)->orbit(arg2,arg3,arg4,*arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_orbit(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofNode_orbit__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_ofNode_orbit__SWIG_0(L);}  }  }  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_ofNode_orbit__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_orbit'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::orbit(float,float,float,ofVec3f const &)\n" "    ofNode::orbit(float,float,float)\n"
  "    ofNode::orbit(float,float,float,ofNode &)\n"); lua_error(L);return 0; }
static int _wrap_ofNode_transformGL__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofBaseRenderer *arg2 = (ofBaseRenderer *) 0 ; SWIG_check_num_args("ofNode::transformGL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::transformGL",1,"ofNode const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofNode::transformGL",2,"ofBaseRenderer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_transformGL",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseRenderer,0))){
    SWIG_fail_ptr("ofNode_transformGL",2,SWIGTYPE_p_ofBaseRenderer); }  ((ofNode const *)arg1)->transformGL(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_transformGL__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::transformGL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::transformGL",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_transformGL",1,SWIGTYPE_p_ofNode); }  ((ofNode const *)arg1)->transformGL(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_transformGL(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofNode_transformGL__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseRenderer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_transformGL__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_transformGL'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::transformGL(ofBaseRenderer *) const\n" "    ofNode::transformGL() const\n"); lua_error(L);return 0; }
static int _wrap_ofNode_restoreTransformGL__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofBaseRenderer *arg2 = (ofBaseRenderer *) 0 ; SWIG_check_num_args("ofNode::restoreTransformGL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::restoreTransformGL",1,"ofNode const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofNode::restoreTransformGL",2,"ofBaseRenderer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_restoreTransformGL",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseRenderer,0))){
    SWIG_fail_ptr("ofNode_restoreTransformGL",2,SWIGTYPE_p_ofBaseRenderer); }  ((ofNode const *)arg1)->restoreTransformGL(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_restoreTransformGL__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::restoreTransformGL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::restoreTransformGL",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_restoreTransformGL",1,SWIGTYPE_p_ofNode); }  ((ofNode const *)arg1)->restoreTransformGL();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_restoreTransformGL(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofNode_restoreTransformGL__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseRenderer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_restoreTransformGL__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_restoreTransformGL'\n"
  "  Possible C/C++ prototypes are:\n" "    ofNode::restoreTransformGL(ofBaseRenderer *) const\n"
  "    ofNode::restoreTransformGL() const\n"); lua_error(L);return 0; }
static int _wrap_ofNode_resetTransform(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::resetTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::resetTransform",1,"ofNode *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_resetTransform",1,SWIGTYPE_p_ofNode); }  (arg1)->resetTransform(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_customDraw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofBaseRenderer *arg2 = (ofBaseRenderer *) 0 ; SWIG_check_num_args("ofNode::customDraw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::customDraw",1,"ofNode const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofNode::customDraw",2,"ofBaseRenderer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_customDraw",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseRenderer,0))){
    SWIG_fail_ptr("ofNode_customDraw",2,SWIGTYPE_p_ofBaseRenderer); } 
  ((ofNode const *)arg1)->customDraw((ofBaseRenderer const *)arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofNode_customDraw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::customDraw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::customDraw",1,"ofNode *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofNode_customDraw",1,SWIGTYPE_p_ofNode); }  (arg1)->customDraw(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNode_customDraw(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofNode_customDraw__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseRenderer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofNode_customDraw__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNode_customDraw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::customDraw(ofBaseRenderer const *) const\n" "    ofNode::customDraw()\n"); lua_error(L);return 0; }
static int _wrap_ofNode_draw(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::draw",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("ofNode_draw",1,SWIGTYPE_p_ofNode); } 
  ((ofNode const *)arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofNode(void *obj) {
ofNode *arg1 = (ofNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofNode_methods[]= {
    { "setParent", _wrap_ofNode_setParent},
    { "clearParent", _wrap_ofNode_clearParent},
    { "getParent", _wrap_ofNode_getParent},
    { "getPosition", _wrap_ofNode_getPosition},
    { "getX", _wrap_ofNode_getX},
    { "getY", _wrap_ofNode_getY},
    { "getZ", _wrap_ofNode_getZ},
    { "getXAxis", _wrap_ofNode_getXAxis},
    { "getYAxis", _wrap_ofNode_getYAxis},
    { "getZAxis", _wrap_ofNode_getZAxis},
    { "getSideDir", _wrap_ofNode_getSideDir},
    { "getLookAtDir", _wrap_ofNode_getLookAtDir},
    { "getUpDir", _wrap_ofNode_getUpDir},
    { "getPitch", _wrap_ofNode_getPitch},
    { "getHeading", _wrap_ofNode_getHeading},
    { "getRoll", _wrap_ofNode_getRoll},
    { "getOrientationQuat", _wrap_ofNode_getOrientationQuat},
    { "getOrientationEuler", _wrap_ofNode_getOrientationEuler},
    { "getScale", _wrap_ofNode_getScale},
    { "getLocalTransformMatrix", _wrap_ofNode_getLocalTransformMatrix},
    { "getGlobalTransformMatrix", _wrap_ofNode_getGlobalTransformMatrix},
    { "getGlobalPosition", _wrap_ofNode_getGlobalPosition},
    { "getGlobalOrientation", _wrap_ofNode_getGlobalOrientation},
    { "getGlobalScale", _wrap_ofNode_getGlobalScale},
    { "setTransformMatrix", _wrap_ofNode_setTransformMatrix},
    { "setPosition", _wrap_ofNode_setPosition},
    { "setGlobalPosition", _wrap_ofNode_setGlobalPosition},
    { "setOrientation", _wrap_ofNode_setOrientation},
    { "setGlobalOrientation", _wrap_ofNode_setGlobalOrientation},
    { "setScale", _wrap_ofNode_setScale},
    { "move", _wrap_ofNode_move},
    { "truck", _wrap_ofNode_truck},
    { "boom", _wrap_ofNode_boom},
    { "dolly", _wrap_ofNode_dolly},
    { "tilt", _wrap_ofNode_tilt},
    { "pan", _wrap_ofNode_pan},
    { "roll", _wrap_ofNode_roll},
    { "rotate", _wrap_ofNode_rotate},
    { "rotateAround", _wrap_ofNode_rotateAround},
    { "lookAt", _wrap_ofNode_lookAt},
    { "orbit", _wrap_ofNode_orbit},
    { "transformGL", _wrap_ofNode_transformGL},
    { "restoreTransformGL", _wrap_ofNode_restoreTransformGL},
    { "resetTransform", _wrap_ofNode_resetTransform},
    { "customDraw", _wrap_ofNode_customDraw},
    { "draw", _wrap_ofNode_draw},
    {0,0}
};
static swig_lua_method swig_ofNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofNode_Sf_SwigStatic = {
    "ofNode",
    swig_ofNode_Sf_SwigStatic_methods,
    swig_ofNode_Sf_SwigStatic_attributes,
    swig_ofNode_Sf_SwigStatic_constants,
    swig_ofNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofNode_bases[] = {0};
static const char *swig_ofNode_base_names[] = {0};
static swig_lua_class _wrap_class_ofNode = { "ofNode", "ofNode", &SWIGTYPE_p_ofNode,_proxy__wrap_new_ofNode, swig_delete_ofNode, swig_ofNode_methods, swig_ofNode_attributes, &swig_ofNode_Sf_SwigStatic, swig_ofNode_meta, swig_ofNode_bases, swig_ofNode_base_names };

static int _wrap_ofDrawAxis(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawAxis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawAxis",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawAxis(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGrid__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; size_t arg2 ; bool arg3 ; bool arg4 ;
  bool arg5 ; bool arg6 ; SWIG_check_num_args("ofDrawGrid",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"size_t"); if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGrid",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDrawGrid",4,"bool"); if(!lua_isboolean(L,5)) SWIG_fail_arg("ofDrawGrid",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofDrawGrid",6,"bool"); arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); ofDrawGrid(arg1,arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGrid__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; size_t arg2 ; bool arg3 ; bool arg4 ;
  bool arg5 ; SWIG_check_num_args("ofDrawGrid",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"size_t"); if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGrid",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDrawGrid",4,"bool"); if(!lua_isboolean(L,5)) SWIG_fail_arg("ofDrawGrid",5,"bool");
  arg1 = (float)lua_tonumber(L, 1); SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2); arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0); ofDrawGrid(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawGrid__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; size_t arg2 ; bool arg3 ; bool arg4 ;
  SWIG_check_num_args("ofDrawGrid",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"size_t"); if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGrid",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDrawGrid",4,"bool"); arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0); ofDrawGrid(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGrid__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; size_t arg2 ; bool arg3 ;
  SWIG_check_num_args("ofDrawGrid",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"size_t"); if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGrid",3,"bool");
  arg1 = (float)lua_tonumber(L, 1); SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2); arg3 = (lua_toboolean(L, 3)!=0); ofDrawGrid(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGrid__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; size_t arg2 ;
  SWIG_check_num_args("ofDrawGrid",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"size_t"); arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (size_t)lua_tonumber(L, 2);
  ofDrawGrid(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGrid__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawGrid",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawGrid(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGrid__SWIG_6(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDrawGrid",0,0) ofDrawGrid();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGrid(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofDrawGrid__SWIG_6(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_ofDrawGrid__SWIG_5(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofDrawGrid__SWIG_4(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_ofDrawGrid__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofDrawGrid__SWIG_2(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isboolean(L,argv[2]); }  if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { {
              _v = lua_isboolean(L,argv[4]); }  if (_v) { return _wrap_ofDrawGrid__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isboolean(L,argv[2]); }  if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { {
              _v = lua_isboolean(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_ofDrawGrid__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawGrid'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawGrid(float,size_t,bool,bool,bool,bool)\n" "    ofDrawGrid(float,size_t,bool,bool,bool)\n"
  "    ofDrawGrid(float,size_t,bool,bool)\n" "    ofDrawGrid(float,size_t,bool)\n" "    ofDrawGrid(float,size_t)\n"
  "    ofDrawGrid(float)\n" "    ofDrawGrid()\n"); lua_error(L);return 0; }
static int _wrap_ofDrawGridPlane__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; size_t arg2 ; bool arg3 ;
  SWIG_check_num_args("ofDrawGridPlane",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGridPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGridPlane",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGridPlane",3,"bool"); arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); ofDrawGridPlane(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawGridPlane__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; size_t arg2 ;
  SWIG_check_num_args("ofDrawGridPlane",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGridPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGridPlane",2,"size_t"); arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (size_t)lua_tonumber(L, 2);
  ofDrawGridPlane(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGridPlane__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  SWIG_check_num_args("ofDrawGridPlane",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGridPlane",1,"float");
  arg1 = (float)lua_tonumber(L, 1); ofDrawGridPlane(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawGridPlane__SWIG_3(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDrawGridPlane",0,0)
  ofDrawGridPlane(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawGridPlane(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofDrawGridPlane__SWIG_3(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_ofDrawGridPlane__SWIG_2(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofDrawGridPlane__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_ofDrawGridPlane__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawGridPlane'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawGridPlane(float,size_t,bool)\n" "    ofDrawGridPlane(float,size_t)\n" "    ofDrawGridPlane(float)\n"
  "    ofDrawGridPlane()\n"); lua_error(L);return 0; }
static int _wrap_ofDrawArrow__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec3f *arg2 = 0 ; float arg3 ;
  SWIG_check_num_args("ofDrawArrow",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawArrow",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawArrow",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawArrow",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawArrow",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawArrow",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); ofDrawArrow((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawArrow__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofDrawArrow",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawArrow",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawArrow",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawArrow",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawArrow",2,SWIGTYPE_p_ofVec3f); }
   ofDrawArrow((ofVec3f const &)*arg1,(ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawArrow(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofDrawArrow__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofDrawArrow__SWIG_0(L);}  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawArrow'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawArrow(ofVec3f const &,ofVec3f const &,float)\n" "    ofDrawArrow(ofVec3f const &,ofVec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofDrawRotationAxes__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ;
  SWIG_check_num_args("ofDrawRotationAxes",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRotationAxes",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRotationAxes",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRotationAxes",3,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofDrawRotationAxes(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRotationAxes__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawRotationAxes",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRotationAxes",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRotationAxes",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawRotationAxes(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawRotationAxes__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  SWIG_check_num_args("ofDrawRotationAxes",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRotationAxes",1,"float");
  arg1 = (float)lua_tonumber(L, 1); ofDrawRotationAxes(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawRotationAxes(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofDrawRotationAxes__SWIG_2(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofDrawRotationAxes__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawRotationAxes__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawRotationAxes'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawRotationAxes(float,float,int)\n" "    ofDrawRotationAxes(float,float)\n" "    ofDrawRotationAxes(float)\n");
  lua_error(L);return 0; }
static int _wrap_new_ofCamera(lua_State* L) { int SWIG_arg = 0; ofCamera *result = 0 ;
  SWIG_check_num_args("ofCamera::ofCamera",0,0) result = (ofCamera *)new ofCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofCamera,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCamera_setFov(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; float arg2 ;
  SWIG_check_num_args("ofCamera::setFov",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setFov",1,"ofCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCamera::setFov",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setFov",1,SWIGTYPE_p_ofCamera); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setFov(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setNearClip(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; float arg2 ;
  SWIG_check_num_args("ofCamera::setNearClip",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setNearClip",1,"ofCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCamera::setNearClip",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setNearClip",1,SWIGTYPE_p_ofCamera); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setNearClip(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setFarClip(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; float arg2 ;
  SWIG_check_num_args("ofCamera::setFarClip",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setFarClip",1,"ofCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCamera::setFarClip",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setFarClip",1,SWIGTYPE_p_ofCamera); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setFarClip(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setLensOffset(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; ofVec2f *arg2 = 0 ;
  SWIG_check_num_args("ofCamera::setLensOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setLensOffset",1,"ofCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::setLensOffset",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setLensOffset",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofCamera_setLensOffset",2,SWIGTYPE_p_ofVec2f); }  (arg1)->setLensOffset((ofVec2f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setAspectRatio(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; float arg2 ;
  SWIG_check_num_args("ofCamera::setAspectRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setAspectRatio",1,"ofCamera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCamera::setAspectRatio",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setAspectRatio",1,SWIGTYPE_p_ofCamera); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAspectRatio(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setForceAspectRatio(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofCamera::setForceAspectRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setForceAspectRatio",1,"ofCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofCamera::setForceAspectRatio",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setForceAspectRatio",1,SWIGTYPE_p_ofCamera); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setForceAspectRatio(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getFov(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; float result;
  SWIG_check_num_args("ofCamera::getFov",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getFov",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getFov",1,SWIGTYPE_p_ofCamera); }  result = (float)((ofCamera const *)arg1)->getFov();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getNearClip(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; float result;
  SWIG_check_num_args("ofCamera::getNearClip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getNearClip",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getNearClip",1,SWIGTYPE_p_ofCamera); }  result = (float)((ofCamera const *)arg1)->getNearClip();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getFarClip(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; float result;
  SWIG_check_num_args("ofCamera::getFarClip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getFarClip",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getFarClip",1,SWIGTYPE_p_ofCamera); }  result = (float)((ofCamera const *)arg1)->getFarClip();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getLensOffset(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofCamera::getLensOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getLensOffset",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getLensOffset",1,SWIGTYPE_p_ofCamera); }  result = ((ofCamera const *)arg1)->getLensOffset(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getForceAspectRatio(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; bool result;
  SWIG_check_num_args("ofCamera::getForceAspectRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getForceAspectRatio",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getForceAspectRatio",1,SWIGTYPE_p_ofCamera); } 
  result = (bool)((ofCamera const *)arg1)->getForceAspectRatio(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getAspectRatio(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; float result;
  SWIG_check_num_args("ofCamera::getAspectRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getAspectRatio",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getAspectRatio",1,SWIGTYPE_p_ofCamera); } 
  result = (float)((ofCamera const *)arg1)->getAspectRatio(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setupPerspective__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ; float arg3 ; float arg4 ; float arg5 ; ofVec2f *arg6 = 0 ; SWIG_check_num_args("ofCamera::setupPerspective",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setupPerspective",1,"ofCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofCamera::setupPerspective",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCamera::setupPerspective",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCamera::setupPerspective",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCamera::setupPerspective",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofCamera::setupPerspective",6,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setupPerspective",1,SWIGTYPE_p_ofCamera); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofCamera_setupPerspective",6,SWIGTYPE_p_ofVec2f); } 
  (arg1)->setupPerspective(arg2,arg3,arg4,arg5,(ofVec2f const &)*arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCamera_setupPerspective__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofCamera::setupPerspective",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setupPerspective",1,"ofCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofCamera::setupPerspective",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCamera::setupPerspective",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCamera::setupPerspective",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCamera::setupPerspective",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setupPerspective",1,SWIGTYPE_p_ofCamera); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setupPerspective(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setupPerspective__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofCamera::setupPerspective",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setupPerspective",1,"ofCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofCamera::setupPerspective",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCamera::setupPerspective",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCamera::setupPerspective",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setupPerspective",1,SWIGTYPE_p_ofCamera); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setupPerspective(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setupPerspective__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ; float arg3 ; SWIG_check_num_args("ofCamera::setupPerspective",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setupPerspective",1,"ofCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofCamera::setupPerspective",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCamera::setupPerspective",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setupPerspective",1,SWIGTYPE_p_ofCamera); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setupPerspective(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCamera_setupPerspective__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofCamera::setupPerspective",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setupPerspective",1,"ofCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofCamera::setupPerspective",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setupPerspective",1,SWIGTYPE_p_ofCamera); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setupPerspective(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setupPerspective__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  SWIG_check_num_args("ofCamera::setupPerspective",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setupPerspective",1,"ofCamera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setupPerspective",1,SWIGTYPE_p_ofCamera); }  (arg1)->setupPerspective(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setupPerspective(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_setupPerspective__SWIG_5(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofCamera_setupPerspective__SWIG_4(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofCamera_setupPerspective__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofCamera_setupPerspective__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofCamera_setupPerspective__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_setupPerspective__SWIG_0(L);}  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_setupPerspective'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::setupPerspective(bool,float,float,float,ofVec2f const &)\n"
  "    ofCamera::setupPerspective(bool,float,float,float)\n" "    ofCamera::setupPerspective(bool,float,float)\n"
  "    ofCamera::setupPerspective(bool,float)\n" "    ofCamera::setupPerspective(bool)\n" "    ofCamera::setupPerspective()\n");
  lua_error(L);return 0; }
static int _wrap_ofCamera_setupOffAxisViewPortal(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofCamera::setupOffAxisViewPortal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setupOffAxisViewPortal",1,"ofCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::setupOffAxisViewPortal",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCamera::setupOffAxisViewPortal",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofCamera::setupOffAxisViewPortal",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setupOffAxisViewPortal",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_setupOffAxisViewPortal",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_setupOffAxisViewPortal",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_setupOffAxisViewPortal",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->setupOffAxisViewPortal((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_setVFlip(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofCamera::setVFlip",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setVFlip",1,"ofCamera *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofCamera::setVFlip",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setVFlip",1,SWIGTYPE_p_ofCamera); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setVFlip(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_isVFlipped(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; bool result;
  SWIG_check_num_args("ofCamera::isVFlipped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::isVFlipped",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_isVFlipped",1,SWIGTYPE_p_ofCamera); }  result = (bool)((ofCamera const *)arg1)->isVFlipped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_enableOrtho(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  SWIG_check_num_args("ofCamera::enableOrtho",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::enableOrtho",1,"ofCamera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_enableOrtho",1,SWIGTYPE_p_ofCamera); }  (arg1)->enableOrtho(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_disableOrtho(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  SWIG_check_num_args("ofCamera::disableOrtho",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::disableOrtho",1,"ofCamera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_disableOrtho",1,SWIGTYPE_p_ofCamera); }  (arg1)->disableOrtho(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getOrtho(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ; bool result;
  SWIG_check_num_args("ofCamera::getOrtho",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getOrtho",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getOrtho",1,SWIGTYPE_p_ofCamera); }  result = (bool)((ofCamera const *)arg1)->getOrtho();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getImagePlaneDistance__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofRectangle arg2 ; ofRectangle *argp2 ; float result; SWIG_check_num_args("ofCamera::getImagePlaneDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getImagePlaneDistance",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::getImagePlaneDistance",2,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getImagePlaneDistance",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofCamera_getImagePlaneDistance",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2;
  result = (float)((ofCamera const *)arg1)->getImagePlaneDistance(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getImagePlaneDistance__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  float result; SWIG_check_num_args("ofCamera::getImagePlaneDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getImagePlaneDistance",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getImagePlaneDistance",1,SWIGTYPE_p_ofCamera); } 
  result = (float)((ofCamera const *)arg1)->getImagePlaneDistance(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getImagePlaneDistance(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_getImagePlaneDistance__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_getImagePlaneDistance__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_getImagePlaneDistance'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::getImagePlaneDistance(ofRectangle) const\n"
  "    ofCamera::getImagePlaneDistance() const\n"); lua_error(L);return 0; }
static int _wrap_ofCamera_beginCamera__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofRectangle arg2 ; ofRectangle *argp2 ; SWIG_check_num_args("ofCamera::begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::begin",1,"ofCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::begin",2,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_beginCamera",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofCamera_beginCamera",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2; (arg1)->begin(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_beginCamera__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  SWIG_check_num_args("ofCamera::begin",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::begin",1,"ofCamera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_beginCamera",1,SWIGTYPE_p_ofCamera); }  (arg1)->begin(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_beginCamera(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_beginCamera__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_beginCamera__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_beginCamera'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::begin(ofRectangle)\n" "    ofCamera::begin()\n"); lua_error(L);return 0; }
static int _wrap_ofCamera_endCamera(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  SWIG_check_num_args("ofCamera::end",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::end",1,"ofCamera *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_endCamera",1,SWIGTYPE_p_ofCamera); }  (arg1)->end(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getProjectionMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofRectangle arg2 ; ofRectangle *argp2 ; ofMatrix4x4 result; SWIG_check_num_args("ofCamera::getProjectionMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getProjectionMatrix",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::getProjectionMatrix",2,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getProjectionMatrix",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofCamera_getProjectionMatrix",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2;
  result = ((ofCamera const *)arg1)->getProjectionMatrix(arg2); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getProjectionMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofCamera::getProjectionMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getProjectionMatrix",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getProjectionMatrix",1,SWIGTYPE_p_ofCamera); } 
  result = ((ofCamera const *)arg1)->getProjectionMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getProjectionMatrix(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_getProjectionMatrix__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_getProjectionMatrix__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_getProjectionMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::getProjectionMatrix(ofRectangle) const\n"
  "    ofCamera::getProjectionMatrix() const\n"); lua_error(L);return 0; }
static int _wrap_ofCamera_getModelViewMatrix(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofCamera::getModelViewMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getModelViewMatrix",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getModelViewMatrix",1,SWIGTYPE_p_ofCamera); } 
  result = ((ofCamera const *)arg1)->getModelViewMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getModelViewProjectionMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofCamera *arg1 = (ofCamera *) 0 ; ofRectangle arg2 ; ofRectangle *argp2 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofCamera::getModelViewProjectionMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getModelViewProjectionMatrix",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::getModelViewProjectionMatrix",2,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getModelViewProjectionMatrix",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofCamera_getModelViewProjectionMatrix",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2;
  result = ((ofCamera const *)arg1)->getModelViewProjectionMatrix(arg2); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getModelViewProjectionMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofCamera *arg1 = (ofCamera *) 0 ; ofMatrix4x4 result; SWIG_check_num_args("ofCamera::getModelViewProjectionMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::getModelViewProjectionMatrix",1,"ofCamera const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_getModelViewProjectionMatrix",1,SWIGTYPE_p_ofCamera); } 
  result = ((ofCamera const *)arg1)->getModelViewProjectionMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_getModelViewProjectionMatrix(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_getModelViewProjectionMatrix__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_getModelViewProjectionMatrix__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_getModelViewProjectionMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::getModelViewProjectionMatrix(ofRectangle) const\n"
  "    ofCamera::getModelViewProjectionMatrix() const\n"); lua_error(L);return 0; }
static int _wrap_ofCamera_worldToScreen__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ; ofRectangle arg3 ; ofVec3f *argp2 ; ofRectangle *argp3 ; ofVec3f result;
  SWIG_check_num_args("ofCamera::worldToScreen",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::worldToScreen",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::worldToScreen",2,"ofVec3f");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCamera::worldToScreen",3,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_worldToScreen",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_worldToScreen",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofCamera_worldToScreen",3,SWIGTYPE_p_ofRectangle); }  arg3 = *argp3;
  result = ((ofCamera const *)arg1)->worldToScreen(arg2,arg3); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_worldToScreen__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ; ofVec3f *argp2 ; ofVec3f result; SWIG_check_num_args("ofCamera::worldToScreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::worldToScreen",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::worldToScreen",2,"ofVec3f");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_worldToScreen",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_worldToScreen",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  result = ((ofCamera const *)arg1)->worldToScreen(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_worldToScreen(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_worldToScreen__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_worldToScreen__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_worldToScreen'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::worldToScreen(ofVec3f,ofRectangle) const\n"
  "    ofCamera::worldToScreen(ofVec3f) const\n"); lua_error(L);return 0; }
static int _wrap_ofCamera_screenToWorld__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ; ofRectangle arg3 ; ofVec3f *argp2 ; ofRectangle *argp3 ; ofVec3f result;
  SWIG_check_num_args("ofCamera::screenToWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::screenToWorld",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::screenToWorld",2,"ofVec3f");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCamera::screenToWorld",3,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_screenToWorld",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_screenToWorld",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofCamera_screenToWorld",3,SWIGTYPE_p_ofRectangle); }  arg3 = *argp3;
  result = ((ofCamera const *)arg1)->screenToWorld(arg2,arg3); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_screenToWorld__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ; ofVec3f *argp2 ; ofVec3f result; SWIG_check_num_args("ofCamera::screenToWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::screenToWorld",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::screenToWorld",2,"ofVec3f");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_screenToWorld",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_screenToWorld",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  result = ((ofCamera const *)arg1)->screenToWorld(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_screenToWorld(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_screenToWorld__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_screenToWorld__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_screenToWorld'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::screenToWorld(ofVec3f,ofRectangle) const\n"
  "    ofCamera::screenToWorld(ofVec3f) const\n"); lua_error(L);return 0; }
static int _wrap_ofCamera_worldToCamera__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ; ofRectangle arg3 ; ofVec3f *argp2 ; ofRectangle *argp3 ; ofVec3f result;
  SWIG_check_num_args("ofCamera::worldToCamera",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::worldToCamera",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::worldToCamera",2,"ofVec3f");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCamera::worldToCamera",3,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_worldToCamera",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_worldToCamera",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofCamera_worldToCamera",3,SWIGTYPE_p_ofRectangle); }  arg3 = *argp3;
  result = ((ofCamera const *)arg1)->worldToCamera(arg2,arg3); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_worldToCamera__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ; ofVec3f *argp2 ; ofVec3f result; SWIG_check_num_args("ofCamera::worldToCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::worldToCamera",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::worldToCamera",2,"ofVec3f");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_worldToCamera",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_worldToCamera",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  result = ((ofCamera const *)arg1)->worldToCamera(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_worldToCamera(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_worldToCamera__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_worldToCamera__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_worldToCamera'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::worldToCamera(ofVec3f,ofRectangle) const\n"
  "    ofCamera::worldToCamera(ofVec3f) const\n"); lua_error(L);return 0; }
static int _wrap_ofCamera_cameraToWorld__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ; ofRectangle arg3 ; ofVec3f *argp2 ; ofRectangle *argp3 ; ofVec3f result;
  SWIG_check_num_args("ofCamera::cameraToWorld",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::cameraToWorld",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::cameraToWorld",2,"ofVec3f");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCamera::cameraToWorld",3,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_cameraToWorld",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_cameraToWorld",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofCamera_cameraToWorld",3,SWIGTYPE_p_ofRectangle); }  arg3 = *argp3;
  result = ((ofCamera const *)arg1)->cameraToWorld(arg2,arg3); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_cameraToWorld__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  ofVec3f arg2 ; ofVec3f *argp2 ; ofVec3f result; SWIG_check_num_args("ofCamera::cameraToWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::cameraToWorld",1,"ofCamera const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::cameraToWorld",2,"ofVec3f");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_cameraToWorld",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCamera_cameraToWorld",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  result = ((ofCamera const *)arg1)->cameraToWorld(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCamera_cameraToWorld(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_cameraToWorld__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCamera, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofCamera_cameraToWorld__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCamera_cameraToWorld'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCamera::cameraToWorld(ofVec3f,ofRectangle) const\n"
  "    ofCamera::cameraToWorld(ofVec3f) const\n"); lua_error(L);return 0; }
static int _wrap_ofCamera_setRenderer(lua_State* L) { int SWIG_arg = 0; ofCamera *arg1 = (ofCamera *) 0 ;
  SwigValueWrapper< shared_ptr< ofBaseRenderer > > arg2 ; shared_ptr< ofBaseRenderer > *argp2 ;
  SWIG_check_num_args("ofCamera::setRenderer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCamera::setRenderer",1,"ofCamera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCamera::setRenderer",2,"shared_ptr< ofBaseRenderer >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCamera,0))){
    SWIG_fail_ptr("ofCamera_setRenderer",1,SWIGTYPE_p_ofCamera); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t,0))){
    SWIG_fail_ptr("ofCamera_setRenderer",2,SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t); }  arg2 = *argp2;
  (arg1)->setRenderer(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofCamera(void *obj) {
ofCamera *arg1 = (ofCamera *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofCamera(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofCamera);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofCamera_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofCamera_methods[]= {
    { "setFov", _wrap_ofCamera_setFov},
    { "setNearClip", _wrap_ofCamera_setNearClip},
    { "setFarClip", _wrap_ofCamera_setFarClip},
    { "setLensOffset", _wrap_ofCamera_setLensOffset},
    { "setAspectRatio", _wrap_ofCamera_setAspectRatio},
    { "setForceAspectRatio", _wrap_ofCamera_setForceAspectRatio},
    { "getFov", _wrap_ofCamera_getFov},
    { "getNearClip", _wrap_ofCamera_getNearClip},
    { "getFarClip", _wrap_ofCamera_getFarClip},
    { "getLensOffset", _wrap_ofCamera_getLensOffset},
    { "getForceAspectRatio", _wrap_ofCamera_getForceAspectRatio},
    { "getAspectRatio", _wrap_ofCamera_getAspectRatio},
    { "setupPerspective", _wrap_ofCamera_setupPerspective},
    { "setupOffAxisViewPortal", _wrap_ofCamera_setupOffAxisViewPortal},
    { "setVFlip", _wrap_ofCamera_setVFlip},
    { "isVFlipped", _wrap_ofCamera_isVFlipped},
    { "enableOrtho", _wrap_ofCamera_enableOrtho},
    { "disableOrtho", _wrap_ofCamera_disableOrtho},
    { "getOrtho", _wrap_ofCamera_getOrtho},
    { "getImagePlaneDistance", _wrap_ofCamera_getImagePlaneDistance},
    { "beginCamera", _wrap_ofCamera_beginCamera},
    { "endCamera", _wrap_ofCamera_endCamera},
    { "getProjectionMatrix", _wrap_ofCamera_getProjectionMatrix},
    { "getModelViewMatrix", _wrap_ofCamera_getModelViewMatrix},
    { "getModelViewProjectionMatrix", _wrap_ofCamera_getModelViewProjectionMatrix},
    { "worldToScreen", _wrap_ofCamera_worldToScreen},
    { "screenToWorld", _wrap_ofCamera_screenToWorld},
    { "worldToCamera", _wrap_ofCamera_worldToCamera},
    { "cameraToWorld", _wrap_ofCamera_cameraToWorld},
    { "setRenderer", _wrap_ofCamera_setRenderer},
    {0,0}
};
static swig_lua_method swig_ofCamera_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofCamera_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofCamera_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofCamera_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofCamera_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofCamera_Sf_SwigStatic = {
    "ofCamera",
    swig_ofCamera_Sf_SwigStatic_methods,
    swig_ofCamera_Sf_SwigStatic_attributes,
    swig_ofCamera_Sf_SwigStatic_constants,
    swig_ofCamera_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofCamera_bases[] = {0,0};
static const char *swig_ofCamera_base_names[] = {"ofNode *",0};
static swig_lua_class _wrap_class_ofCamera = { "ofCamera", "ofCamera", &SWIGTYPE_p_ofCamera,_proxy__wrap_new_ofCamera, swig_delete_ofCamera, swig_ofCamera_methods, swig_ofCamera_attributes, &swig_ofCamera_Sf_SwigStatic, swig_ofCamera_meta, swig_ofCamera_bases, swig_ofCamera_base_names };

static int _wrap_new_ofEasyCam(lua_State* L) { int SWIG_arg = 0; ofEasyCam *result = 0 ;
  SWIG_check_num_args("ofEasyCam::ofEasyCam",0,0) result = (ofEasyCam *)new ofEasyCam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofEasyCam,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofEasyCam_beginCamera__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  ofRectangle arg2 ; ofRectangle *argp2 ; SWIG_check_num_args("ofEasyCam::begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::begin",1,"ofEasyCam *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofEasyCam::begin",2,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_beginCamera",1,SWIGTYPE_p_ofEasyCam); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofEasyCam_beginCamera",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2; (arg1)->begin(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_beginCamera__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  SWIG_check_num_args("ofEasyCam::begin",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::begin",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_beginCamera",1,SWIGTYPE_p_ofEasyCam); }  (arg1)->begin(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_beginCamera(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofEasyCam, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofEasyCam_beginCamera__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofEasyCam, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofEasyCam_beginCamera__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofEasyCam_beginCamera'\n"
  "  Possible C/C++ prototypes are:\n" "    ofEasyCam::begin(ofRectangle)\n" "    ofEasyCam::begin()\n");
  lua_error(L);return 0; }
static int _wrap_ofEasyCam_reset(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  SWIG_check_num_args("ofEasyCam::reset",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::reset",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_reset",1,SWIGTYPE_p_ofEasyCam); }  (arg1)->reset(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_setTarget__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofEasyCam::setTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::setTarget",1,"ofEasyCam *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofEasyCam::setTarget",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_setTarget",1,SWIGTYPE_p_ofEasyCam); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofEasyCam_setTarget",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setTarget((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_setTarget__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  ofNode *arg2 = 0 ; SWIG_check_num_args("ofEasyCam::setTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::setTarget",1,"ofEasyCam *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofEasyCam::setTarget",2,"ofNode &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_setTarget",1,SWIGTYPE_p_ofEasyCam); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("ofEasyCam_setTarget",2,SWIGTYPE_p_ofNode); }  (arg1)->setTarget(*arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_setTarget(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofEasyCam, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofEasyCam_setTarget__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofEasyCam, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofEasyCam_setTarget__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofEasyCam_setTarget'\n"
  "  Possible C/C++ prototypes are:\n" "    ofEasyCam::setTarget(ofVec3f const &)\n" "    ofEasyCam::setTarget(ofNode &)\n");
  lua_error(L);return 0; }
static int _wrap_ofEasyCam_getTarget(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ; ofNode *result = 0 ;
  SWIG_check_num_args("ofEasyCam::getTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::getTarget",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_getTarget",1,SWIGTYPE_p_ofEasyCam); }  result = (ofNode *) &(arg1)->getTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofNode,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofEasyCam_setDistance(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ; float arg2 ;
  SWIG_check_num_args("ofEasyCam::setDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::setDistance",1,"ofEasyCam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofEasyCam::setDistance",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_setDistance",1,SWIGTYPE_p_ofEasyCam); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDistance(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_getDistance(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ; float result;
  SWIG_check_num_args("ofEasyCam::getDistance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::getDistance",1,"ofEasyCam const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_getDistance",1,SWIGTYPE_p_ofEasyCam); }  result = (float)((ofEasyCam const *)arg1)->getDistance();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_setDrag(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ; float arg2 ;
  SWIG_check_num_args("ofEasyCam::setDrag",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::setDrag",1,"ofEasyCam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofEasyCam::setDrag",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_setDrag",1,SWIGTYPE_p_ofEasyCam); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setDrag(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_getDrag(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ; float result;
  SWIG_check_num_args("ofEasyCam::getDrag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::getDrag",1,"ofEasyCam const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_getDrag",1,SWIGTYPE_p_ofEasyCam); }  result = (float)((ofEasyCam const *)arg1)->getDrag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_setAutoDistance(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofEasyCam::setAutoDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::setAutoDistance",1,"ofEasyCam *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofEasyCam::setAutoDistance",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_setAutoDistance",1,SWIGTYPE_p_ofEasyCam); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setAutoDistance(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_setEvents(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  ofCoreEvents *arg2 = 0 ; SWIG_check_num_args("ofEasyCam::setEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::setEvents",1,"ofEasyCam *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofEasyCam::setEvents",2,"ofCoreEvents &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_setEvents",1,SWIGTYPE_p_ofEasyCam); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofCoreEvents,0))){
    SWIG_fail_ptr("ofEasyCam_setEvents",2,SWIGTYPE_p_ofCoreEvents); }  (arg1)->setEvents(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_setTranslationKey(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ; char arg2 ;
  SWIG_check_num_args("ofEasyCam::setTranslationKey",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::setTranslationKey",1,"ofEasyCam *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofEasyCam::setTranslationKey",2,"char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_setTranslationKey",1,SWIGTYPE_p_ofEasyCam); }  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->setTranslationKey(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_getTranslationKey(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ; char result;
  SWIG_check_num_args("ofEasyCam::getTranslationKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::getTranslationKey",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_getTranslationKey",1,SWIGTYPE_p_ofEasyCam); }  result = (char)(arg1)->getTranslationKey();
  lua_pushlstring(L, &result, 1); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_enableMouseInput(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  SWIG_check_num_args("ofEasyCam::enableMouseInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::enableMouseInput",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_enableMouseInput",1,SWIGTYPE_p_ofEasyCam); }  (arg1)->enableMouseInput(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_disableMouseInput(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  SWIG_check_num_args("ofEasyCam::disableMouseInput",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::disableMouseInput",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_disableMouseInput",1,SWIGTYPE_p_ofEasyCam); }  (arg1)->disableMouseInput(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_getMouseInputEnabled(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  bool result; SWIG_check_num_args("ofEasyCam::getMouseInputEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::getMouseInputEnabled",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_getMouseInputEnabled",1,SWIGTYPE_p_ofEasyCam); }  result = (bool)(arg1)->getMouseInputEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_enableMouseMiddleButton(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  SWIG_check_num_args("ofEasyCam::enableMouseMiddleButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::enableMouseMiddleButton",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_enableMouseMiddleButton",1,SWIGTYPE_p_ofEasyCam); }  (arg1)->enableMouseMiddleButton();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_disableMouseMiddleButton(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  SWIG_check_num_args("ofEasyCam::disableMouseMiddleButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::disableMouseMiddleButton",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_disableMouseMiddleButton",1,SWIGTYPE_p_ofEasyCam); }  (arg1)->disableMouseMiddleButton();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEasyCam_getMouseMiddleButtonEnabled(lua_State* L) { int SWIG_arg = 0; ofEasyCam *arg1 = (ofEasyCam *) 0 ;
  bool result; SWIG_check_num_args("ofEasyCam::getMouseMiddleButtonEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofEasyCam::getMouseMiddleButtonEnabled",1,"ofEasyCam *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofEasyCam,0))){
    SWIG_fail_ptr("ofEasyCam_getMouseMiddleButtonEnabled",1,SWIGTYPE_p_ofEasyCam); } 
  result = (bool)(arg1)->getMouseMiddleButtonEnabled(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofEasyCam(void *obj) {
ofEasyCam *arg1 = (ofEasyCam *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofEasyCam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofEasyCam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofEasyCam_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofEasyCam_methods[]= {
    { "beginCamera", _wrap_ofEasyCam_beginCamera},
    { "reset", _wrap_ofEasyCam_reset},
    { "setTarget", _wrap_ofEasyCam_setTarget},
    { "getTarget", _wrap_ofEasyCam_getTarget},
    { "setDistance", _wrap_ofEasyCam_setDistance},
    { "getDistance", _wrap_ofEasyCam_getDistance},
    { "setDrag", _wrap_ofEasyCam_setDrag},
    { "getDrag", _wrap_ofEasyCam_getDrag},
    { "setAutoDistance", _wrap_ofEasyCam_setAutoDistance},
    { "setEvents", _wrap_ofEasyCam_setEvents},
    { "setTranslationKey", _wrap_ofEasyCam_setTranslationKey},
    { "getTranslationKey", _wrap_ofEasyCam_getTranslationKey},
    { "enableMouseInput", _wrap_ofEasyCam_enableMouseInput},
    { "disableMouseInput", _wrap_ofEasyCam_disableMouseInput},
    { "getMouseInputEnabled", _wrap_ofEasyCam_getMouseInputEnabled},
    { "enableMouseMiddleButton", _wrap_ofEasyCam_enableMouseMiddleButton},
    { "disableMouseMiddleButton", _wrap_ofEasyCam_disableMouseMiddleButton},
    { "getMouseMiddleButtonEnabled", _wrap_ofEasyCam_getMouseMiddleButtonEnabled},
    {0,0}
};
static swig_lua_method swig_ofEasyCam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofEasyCam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofEasyCam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofEasyCam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofEasyCam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofEasyCam_Sf_SwigStatic = {
    "ofEasyCam",
    swig_ofEasyCam_Sf_SwigStatic_methods,
    swig_ofEasyCam_Sf_SwigStatic_attributes,
    swig_ofEasyCam_Sf_SwigStatic_constants,
    swig_ofEasyCam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofEasyCam_bases[] = {0,0};
static const char *swig_ofEasyCam_base_names[] = {"ofCamera *",0};
static swig_lua_class _wrap_class_ofEasyCam = { "ofEasyCam", "ofEasyCam", &SWIGTYPE_p_ofEasyCam,_proxy__wrap_new_ofEasyCam, swig_delete_ofEasyCam, swig_ofEasyCam_methods, swig_ofEasyCam_attributes, &swig_ofEasyCam_Sf_SwigStatic, swig_ofEasyCam_meta, swig_ofEasyCam_bases, swig_ofEasyCam_base_names };

static int _wrap_new_ofMesh__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *result = 0 ;
  SWIG_check_num_args("ofMesh::ofMesh",0,0) result = (ofMesh *)new ofMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMesh__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPrimitiveMode arg1 ; std::vector< ofVec3f > *arg2 = 0 ;
  ofPrimitiveMode *argp1 ; ofMesh *result = 0 ; SWIG_check_num_args("ofMesh::ofMesh",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMesh::ofMesh",1,"ofPrimitiveMode");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::ofMesh",2,"std::vector< ofVec3f > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("new_ofMesh",1,SWIGTYPE_p_ofPrimitiveMode); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("new_ofMesh",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  result = (ofMesh *)new ofMesh(arg1,(std::vector< ofVec3f > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMesh(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofMesh__SWIG_0(L);}  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofMesh__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofMesh'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::ofMesh()\n" "    ofMesh::ofMesh(ofPrimitiveMode,std::vector< ofVec3f > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_setFromTriangles__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofMeshFace > *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofMesh::setFromTriangles",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setFromTriangles",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setFromTriangles",2,"std::vector< ofMeshFace > const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofMesh::setFromTriangles",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setFromTriangles",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofMeshFace_t,0))){
    SWIG_fail_ptr("ofMesh_setFromTriangles",2,SWIGTYPE_p_std__vectorT_ofMeshFace_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setFromTriangles((std::vector< ofMeshFace > const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_setFromTriangles__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofMeshFace > *arg2 = 0 ; SWIG_check_num_args("ofMesh::setFromTriangles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setFromTriangles",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setFromTriangles",2,"std::vector< ofMeshFace > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setFromTriangles",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofMeshFace_t,0))){
    SWIG_fail_ptr("ofMesh_setFromTriangles",2,SWIGTYPE_p_std__vectorT_ofMeshFace_t); } 
  (arg1)->setFromTriangles((std::vector< ofMeshFace > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_setFromTriangles(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofMeshFace_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_setFromTriangles__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofMeshFace_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofMesh_setFromTriangles__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_setFromTriangles'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::setFromTriangles(std::vector< ofMeshFace > const &,bool)\n"
  "    ofMesh::setFromTriangles(std::vector< ofMeshFace > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_setMode(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofPrimitiveMode arg2 ;
  ofPrimitiveMode *argp2 ; SWIG_check_num_args("ofMesh::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setMode",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setMode",2,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_setMode",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofMesh_setMode",2,SWIGTYPE_p_ofPrimitiveMode); }  arg2 = *argp2; (arg1)->setMode(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getMode(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofPrimitiveMode result;
  SWIG_check_num_args("ofMesh::getMode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getMode",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_getMode",1,SWIGTYPE_p_ofMesh); }
   result = ((ofMesh const *)arg1)->getMode(); {
    ofPrimitiveMode * resultptr = new ofPrimitiveMode((const ofPrimitiveMode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPrimitiveMode,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_plane__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofPrimitiveMode arg5 ; ofPrimitiveMode *argp5 ; ofMesh result; SWIG_check_num_args("ofMesh::plane",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::plane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::plane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::plane",3,"int"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::plane",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMesh::plane",5,"ofPrimitiveMode"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofMesh_plane",5,SWIGTYPE_p_ofPrimitiveMode); }  arg5 = *argp5;
  result = ofMesh::plane(arg1,arg2,arg3,arg4,arg5); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_plane__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofMesh result; SWIG_check_num_args("ofMesh::plane",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::plane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::plane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::plane",3,"int"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::plane",4,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = ofMesh::plane(arg1,arg2,arg3,arg4); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_plane__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; ofMesh result;
  SWIG_check_num_args("ofMesh::plane",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::plane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::plane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::plane",3,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); result = ofMesh::plane(arg1,arg2,arg3); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_plane__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::plane",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::plane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::plane",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofMesh::plane(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_plane(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofMesh_plane__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofMesh_plane__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofMesh_plane__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_plane__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_plane'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::plane(float,float,int,int,ofPrimitiveMode)\n" "    ofMesh::plane(float,float,int,int)\n"
  "    ofMesh::plane(float,float,int)\n" "    ofMesh::plane(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_sphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; int arg2 ; ofPrimitiveMode arg3 ;
  ofPrimitiveMode *argp3 ; ofMesh result; SWIG_check_num_args("ofMesh::sphere",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::sphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::sphere",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::sphere",3,"ofPrimitiveMode"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofMesh_sphere",3,SWIGTYPE_p_ofPrimitiveMode); }  arg3 = *argp3; result = ofMesh::sphere(arg1,arg2,arg3); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_sphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; int arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::sphere",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::sphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::sphere",2,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); result = ofMesh::sphere(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_sphere__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMesh result;
  SWIG_check_num_args("ofMesh::sphere",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::sphere",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = ofMesh::sphere(arg1); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_sphere(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofMesh_sphere__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofMesh_sphere__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_sphere__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_sphere'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::sphere(float,int,ofPrimitiveMode)\n" "    ofMesh::sphere(float,int)\n" "    ofMesh::sphere(float)\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_icosahedron(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMesh result;
  SWIG_check_num_args("ofMesh::icosahedron",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::icosahedron",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = ofMesh::icosahedron(arg1); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_icosphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; std::size_t arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::icosphere",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::icosphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::icosphere",2,"std::size_t"); arg1 = (float)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = ofMesh::icosphere(arg1,arg2); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_icosphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMesh result;
  SWIG_check_num_args("ofMesh::icosphere",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::icosphere",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = ofMesh::icosphere(arg1); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_icosphere(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofMesh_icosphere__SWIG_1(L);}  }  if (argc == 2) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofMesh_icosphere__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_icosphere'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::icosphere(float,std::size_t)\n" "    ofMesh::icosphere(float)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_cylinder__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; bool arg6 ; ofPrimitiveMode arg7 ; ofPrimitiveMode *argp7 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cylinder",7,7) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cylinder",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cylinder",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofMesh::cylinder",6,"bool");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofMesh::cylinder",7,"ofPrimitiveMode"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofMesh_cylinder",7,SWIGTYPE_p_ofPrimitiveMode); }  arg7 = *argp7;
  result = ofMesh::cylinder(arg1,arg2,arg3,arg4,arg5,arg6,arg7); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cylinder__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; bool arg6 ; ofMesh result; SWIG_check_num_args("ofMesh::cylinder",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cylinder",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cylinder",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofMesh::cylinder",6,"bool"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0); result = ofMesh::cylinder(arg1,arg2,arg3,arg4,arg5,arg6); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cylinder__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; ofMesh result; SWIG_check_num_args("ofMesh::cylinder",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cylinder",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cylinder",5,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); result = ofMesh::cylinder(arg1,arg2,arg3,arg4,arg5); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cylinder__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofMesh result; SWIG_check_num_args("ofMesh::cylinder",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cylinder",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = ofMesh::cylinder(arg1,arg2,arg3,arg4); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cylinder__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cylinder",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); result = ofMesh::cylinder(arg1,arg2,arg3); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cylinder__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cylinder",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofMesh::cylinder(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cylinder(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofMesh_cylinder__SWIG_5(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofMesh_cylinder__SWIG_4(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMesh_cylinder__SWIG_3(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofMesh_cylinder__SWIG_2(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_ofMesh_cylinder__SWIG_1(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_cylinder__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_cylinder'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::cylinder(float,float,int,int,int,bool,ofPrimitiveMode)\n" "    ofMesh::cylinder(float,float,int,int,int,bool)\n"
  "    ofMesh::cylinder(float,float,int,int,int)\n" "    ofMesh::cylinder(float,float,int,int)\n"
  "    ofMesh::cylinder(float,float,int)\n" "    ofMesh::cylinder(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_cone__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; ofPrimitiveMode arg6 ; ofPrimitiveMode *argp6 ; ofMesh result; SWIG_check_num_args("ofMesh::cone",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cone",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cone",4,"int"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cone",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofMesh::cone",6,"ofPrimitiveMode"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofMesh_cone",6,SWIGTYPE_p_ofPrimitiveMode); }  arg6 = *argp6;
  result = ofMesh::cone(arg1,arg2,arg3,arg4,arg5,arg6); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cone__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; ofMesh result; SWIG_check_num_args("ofMesh::cone",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cone",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cone",4,"int"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cone",5,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); result = ofMesh::cone(arg1,arg2,arg3,arg4,arg5); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cone__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofMesh result; SWIG_check_num_args("ofMesh::cone",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cone",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cone",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = ofMesh::cone(arg1,arg2,arg3,arg4); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cone__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cone",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cone",3,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  result = ofMesh::cone(arg1,arg2,arg3); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cone__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cone",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofMesh::cone(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_cone(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofMesh_cone__SWIG_4(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofMesh_cone__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofMesh_cone__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofMesh_cone__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_cone__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_cone'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::cone(float,float,int,int,int,ofPrimitiveMode)\n" "    ofMesh::cone(float,float,int,int,int)\n"
  "    ofMesh::cone(float,float,int,int)\n" "    ofMesh::cone(float,float,int)\n" "    ofMesh::cone(float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_box__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ;
  int arg5 ; int arg6 ; ofMesh result; SWIG_check_num_args("ofMesh::box",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::box",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::box",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::box",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::box",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::box",5,"int"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMesh::box",6,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  result = ofMesh::box(arg1,arg2,arg3,arg4,arg5,arg6); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_box__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ;
  int arg5 ; ofMesh result; SWIG_check_num_args("ofMesh::box",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::box",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::box",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::box",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::box",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::box",5,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); result = ofMesh::box(arg1,arg2,arg3,arg4,arg5); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_box__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ;
  ofMesh result; SWIG_check_num_args("ofMesh::box",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::box",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::box",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::box",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::box",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = ofMesh::box(arg1,arg2,arg3,arg4); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_box__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; ofMesh result;
  SWIG_check_num_args("ofMesh::box",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::box",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::box",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::box",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = ofMesh::box(arg1,arg2,arg3); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_box(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofMesh_box__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMesh_box__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofMesh_box__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofMesh_box__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_box'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::box(float,float,float,int,int,int)\n" "    ofMesh::box(float,float,float,int,int)\n"
  "    ofMesh::box(float,float,float,int)\n" "    ofMesh::box(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_axis__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMesh result;
  SWIG_check_num_args("ofMesh::axis",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::axis",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = ofMesh::axis(arg1); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_axis__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh result; SWIG_check_num_args("ofMesh::axis",0,0)
  result = ofMesh::axis(); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_axis(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofMesh_axis__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_ofMesh_axis__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_axis'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::axis(float)\n" "    ofMesh::axis()\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_addVertex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::addVertex",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addVertex",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addVertex",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addVertex",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMesh_addVertex",2,SWIGTYPE_p_ofVec3f); }  (arg1)->addVertex((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addVertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addVertices",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addVertices",2,"std::vector< ofVec3f > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addVertices",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("ofMesh_addVertices",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  (arg1)->addVertices((std::vector< ofVec3f > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_addVertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; std::size_t arg3 ; SWIG_check_num_args("ofMesh::addVertices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addVertices",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addVertices",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addVertices",3,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addVertices",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMesh_addVertices",2,SWIGTYPE_p_ofVec3f); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (std::size_t)lua_tonumber(L, 3);
  (arg1)->addVertices((ofVec3f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addVertices(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_addVertices__SWIG_0(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofMesh_addVertices__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_addVertices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::addVertices(std::vector< ofVec3f > const &)\n"
  "    ofMesh::addVertices(ofVec3f const *,std::size_t)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_removeVertex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  SWIG_check_num_args("ofMesh::removeVertex",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeVertex",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::removeVertex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_removeVertex",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  (arg1)->removeVertex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_setVertex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofMesh::setVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setVertex",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::setVertex",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setVertex",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setVertex",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMesh_setVertex",3,SWIGTYPE_p_ofVec3f); }  (arg1)->setVertex(arg2,(ofVec3f const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_clearVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearVertices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearVertices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_clearVertices",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearVertices(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_clear(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clear",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_clear",1,SWIGTYPE_p_ofMesh); } 
  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNumVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::size_t result;
  SWIG_check_num_args("ofMesh::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumVertices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNumVertices",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getVerticesPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMesh::getVerticesPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVerticesPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getVerticesPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofVec3f *)(arg1)->getVerticesPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_getVerticesPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMesh::getVerticesPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVerticesPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getVerticesPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofVec3f *)((ofMesh const *)arg1)->getVerticesPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_getVerticesPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getVerticesPointer__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getVerticesPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getVerticesPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getVerticesPointer()\n" "    ofMesh::getVerticesPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_getVertex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec3f result; SWIG_check_num_args("ofMesh::getVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVertex",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getVertex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getVertex",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = ((ofMesh const *)arg1)->getVertex(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getVertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *result = 0 ; SWIG_check_num_args("ofMesh::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVertices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getVertices",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofVec3f > *) &(arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getVertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *result = 0 ; SWIG_check_num_args("ofMesh::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVertices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getVertices",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofVec3f > *) &((ofMesh const *)arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getVertices(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getVertices__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getVertices__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getVertices'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getVertices()\n" "    ofMesh::getVertices() const\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_haveVertsChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveVertsChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveVertsChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_haveVertsChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveVertsChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_hasVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasVertices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_hasVertices",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasVertices();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_append(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofMesh *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::append",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::append",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::append",2,"ofMesh const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_append",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_append",2,SWIGTYPE_p_ofMesh); }
   (arg1)->append((ofMesh const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_mergeDuplicateVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::mergeDuplicateVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::mergeDuplicateVertices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_mergeDuplicateVertices",1,SWIGTYPE_p_ofMesh); }  (arg1)->mergeDuplicateVertices(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getCentroid(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofMesh::getCentroid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getCentroid",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getCentroid",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getCentroid(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNormal(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec3f result; SWIG_check_num_args("ofMesh::getNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormal",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getNormal",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNormal",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = ((ofMesh const *)arg1)->getNormal(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addNormal(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::addNormal",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addNormal",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addNormal",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addNormal",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMesh_addNormal",2,SWIGTYPE_p_ofVec3f); }  (arg1)->addNormal((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addNormals__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addNormals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addNormals",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addNormals",2,"std::vector< ofVec3f > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addNormals",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("ofMesh_addNormals",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  (arg1)->addNormals((std::vector< ofVec3f > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_addNormals__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; std::size_t arg3 ; SWIG_check_num_args("ofMesh::addNormals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addNormals",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addNormals",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addNormals",3,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addNormals",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMesh_addNormals",2,SWIGTYPE_p_ofVec3f); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (std::size_t)lua_tonumber(L, 3);
  (arg1)->addNormals((ofVec3f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addNormals(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_addNormals__SWIG_0(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofMesh_addNormals__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_addNormals'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::addNormals(std::vector< ofVec3f > const &)\n"
  "    ofMesh::addNormals(ofVec3f const *,std::size_t)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_removeNormal(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  SWIG_check_num_args("ofMesh::removeNormal",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeNormal",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::removeNormal",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_removeNormal",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  (arg1)->removeNormal(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_setNormal(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofMesh::setNormal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setNormal",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::setNormal",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setNormal",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setNormal",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMesh_setNormal",3,SWIGTYPE_p_ofVec3f); }  (arg1)->setNormal(arg2,(ofVec3f const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_clearNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearNormals",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_clearNormals",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearNormals(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNumNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::size_t result;
  SWIG_check_num_args("ofMesh::getNumNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNumNormals",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getNumNormals();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNormalsPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMesh::getNormalsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormalsPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNormalsPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofVec3f *)(arg1)->getNormalsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_getNormalsPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMesh::getNormalsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormalsPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNormalsPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofVec3f *)((ofMesh const *)arg1)->getNormalsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_getNormalsPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getNormalsPointer__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getNormalsPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getNormalsPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getNormalsPointer()\n" "    ofMesh::getNormalsPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_getNormals__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *result = 0 ; SWIG_check_num_args("ofMesh::getNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormals",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNormals",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofVec3f > *) &(arg1)->getNormals();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNormals__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *result = 0 ; SWIG_check_num_args("ofMesh::getNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNormals",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofVec3f > *) &((ofMesh const *)arg1)->getNormals();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNormals(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getNormals__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getNormals__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getNormals'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getNormals()\n" "    ofMesh::getNormals() const\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_haveNormalsChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveNormalsChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveNormalsChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_haveNormalsChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveNormalsChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_hasNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_hasNormals",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasNormals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_enableNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::enableNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::enableNormals",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_enableNormals",1,SWIGTYPE_p_ofMesh); }  (arg1)->enableNormals(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_disableNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::disableNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::disableNormals",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_disableNormals",1,SWIGTYPE_p_ofMesh); }  (arg1)->disableNormals(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_usingNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::usingNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::usingNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_usingNormals",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->usingNormals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_smoothNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMesh::smoothNormals",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::smoothNormals",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::smoothNormals",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_smoothNormals",1,SWIGTYPE_p_ofMesh); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->smoothNormals(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getFace(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofMeshFace result; SWIG_check_num_args("ofMesh::getFace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getFace",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getFace",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_getFace",1,SWIGTYPE_p_ofMesh); }
   SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = ((ofMesh const *)arg1)->getFace(arg2); { ofMeshFace * resultptr = new ofMeshFace((const ofMeshFace &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMeshFace,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getFaceNormals__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool arg2 ;
  SwigValueWrapper< std::vector< ofVec3f > > result; SWIG_check_num_args("ofMesh::getFaceNormals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getFaceNormals",1,"ofMesh const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofMesh::getFaceNormals",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getFaceNormals",1,SWIGTYPE_p_ofMesh); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((ofMesh const *)arg1)->getFaceNormals(arg2); {
    std::vector< ofVec3f > * resultptr = new std::vector< ofVec3f >((const std::vector< ofVec3f > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getFaceNormals__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f > > result; SWIG_check_num_args("ofMesh::getFaceNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getFaceNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getFaceNormals",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getFaceNormals(); {
    std::vector< ofVec3f > * resultptr = new std::vector< ofVec3f >((const std::vector< ofVec3f > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getFaceNormals(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getFaceNormals__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofMesh_getFaceNormals__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getFaceNormals'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getFaceNormals(bool) const\n" "    ofMesh::getFaceNormals() const\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_getUniqueFaces(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofMeshFace > *result = 0 ; SWIG_check_num_args("ofMesh::getUniqueFaces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getUniqueFaces",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getUniqueFaces",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofMeshFace > *) &((ofMesh const *)arg1)->getUniqueFaces();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofMeshFace_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getColor(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofFloatColor result; SWIG_check_num_args("ofMesh::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColor",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getColor",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getColor",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = ((ofMesh const *)arg1)->getColor(arg2); { ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addColor(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofFloatColor *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::addColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addColor",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addColor",2,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addColor",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMesh_addColor",2,SWIGTYPE_p_ofColor_T_float_t); }  (arg1)->addColor((ofFloatColor const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addColors__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofFloatColor > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addColors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addColors",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addColors",2,"std::vector< ofFloatColor > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addColors",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t,0))){
    SWIG_fail_ptr("ofMesh_addColors",2,SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t); } 
  (arg1)->addColors((std::vector< ofFloatColor > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_addColors__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ; std::size_t arg3 ; SWIG_check_num_args("ofMesh::addColors",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addColors",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addColors",2,"ofFloatColor const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addColors",3,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addColors",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMesh_addColors",2,SWIGTYPE_p_ofColor_T_float_t); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (std::size_t)lua_tonumber(L, 3);
  (arg1)->addColors((ofFloatColor const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addColors(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_addColors__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofMesh_addColors__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_addColors'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::addColors(std::vector< ofFloatColor > const &)\n" "    ofMesh::addColors(ofFloatColor const *,std::size_t)\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_removeColor(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  SWIG_check_num_args("ofMesh::removeColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeColor",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::removeColor",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_removeColor",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  (arg1)->removeColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_setColor(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofFloatColor *arg3 = 0 ; SWIG_check_num_args("ofMesh::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setColor",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::setColor",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setColor",3,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setColor",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMesh_setColor",3,SWIGTYPE_p_ofColor_T_float_t); }  (arg1)->setColor(arg2,(ofFloatColor const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_clearColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearColors",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_clearColors",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNumColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::size_t result;
  SWIG_check_num_args("ofMesh::getNumColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumColors",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNumColors",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getNumColors();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getColorsPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofFloatColor *result = 0 ; SWIG_check_num_args("ofMesh::getColorsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColorsPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getColorsPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofFloatColor *)(arg1)->getColorsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getColorsPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofFloatColor *result = 0 ; SWIG_check_num_args("ofMesh::getColorsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColorsPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getColorsPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofFloatColor *)((ofMesh const *)arg1)->getColorsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getColorsPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getColorsPointer__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getColorsPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getColorsPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getColorsPointer()\n" "    ofMesh::getColorsPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_getColors__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofFloatColor > *result = 0 ; SWIG_check_num_args("ofMesh::getColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColors",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getColors",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofFloatColor > *) &(arg1)->getColors();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getColors__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofFloatColor > *result = 0 ; SWIG_check_num_args("ofMesh::getColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColors",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getColors",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofFloatColor > *) &((ofMesh const *)arg1)->getColors();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getColors(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getColors__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getColors__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getColors'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getColors()\n" "    ofMesh::getColors() const\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_haveColorsChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveColorsChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveColorsChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_haveColorsChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveColorsChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_hasColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasColors",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_hasColors",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasColors();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_enableColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::enableColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::enableColors",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_enableColors",1,SWIGTYPE_p_ofMesh); }  (arg1)->enableColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_disableColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::disableColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::disableColors",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_disableColors",1,SWIGTYPE_p_ofMesh); }  (arg1)->disableColors(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_usingColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::usingColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::usingColors",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_usingColors",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->usingColors();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getTexCoord(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec2f result; SWIG_check_num_args("ofMesh::getTexCoord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoord",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getTexCoord",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getTexCoord",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = ((ofMesh const *)arg1)->getTexCoord(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addTexCoord(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofVec2f *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::addTexCoord",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addTexCoord",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addTexCoord",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addTexCoord",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofMesh_addTexCoord",2,SWIGTYPE_p_ofVec2f); }  (arg1)->addTexCoord((ofVec2f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addTexCoords__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec2f > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addTexCoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addTexCoords",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addTexCoords",2,"std::vector< ofVec2f > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addTexCoords",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec2f_t,0))){
    SWIG_fail_ptr("ofMesh_addTexCoords",2,SWIGTYPE_p_std__vectorT_ofVec2f_t); } 
  (arg1)->addTexCoords((std::vector< ofVec2f > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_addTexCoords__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; std::size_t arg3 ; SWIG_check_num_args("ofMesh::addTexCoords",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addTexCoords",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addTexCoords",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addTexCoords",3,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addTexCoords",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofMesh_addTexCoords",2,SWIGTYPE_p_ofVec2f); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (std::size_t)lua_tonumber(L, 3);
  (arg1)->addTexCoords((ofVec2f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addTexCoords(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec2f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_addTexCoords__SWIG_0(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofMesh_addTexCoords__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_addTexCoords'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::addTexCoords(std::vector< ofVec2f > const &)\n"
  "    ofMesh::addTexCoords(ofVec2f const *,std::size_t)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_removeTexCoord(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  SWIG_check_num_args("ofMesh::removeTexCoord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeTexCoord",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::removeTexCoord",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_removeTexCoord",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  (arg1)->removeTexCoord(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_setTexCoord(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec2f *arg3 = 0 ; SWIG_check_num_args("ofMesh::setTexCoord",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setTexCoord",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::setTexCoord",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setTexCoord",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setTexCoord",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofMesh_setTexCoord",3,SWIGTYPE_p_ofVec2f); }  (arg1)->setTexCoord(arg2,(ofVec2f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_clearTexCoords(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearTexCoords",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_clearTexCoords",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNumTexCoords(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::size_t result;
  SWIG_check_num_args("ofMesh::getNumTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumTexCoords",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNumTexCoords",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getNumTexCoords();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getTexCoordsPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofMesh::getTexCoordsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoordsPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getTexCoordsPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofVec2f *)(arg1)->getTexCoordsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_getTexCoordsPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofMesh::getTexCoordsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoordsPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getTexCoordsPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofVec2f *)((ofMesh const *)arg1)->getTexCoordsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_getTexCoordsPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofMesh_getTexCoordsPointer__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofMesh_getTexCoordsPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getTexCoordsPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getTexCoordsPointer()\n" "    ofMesh::getTexCoordsPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_getTexCoords__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec2f > *result = 0 ; SWIG_check_num_args("ofMesh::getTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoords",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getTexCoords",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofVec2f > *) &(arg1)->getTexCoords();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec2f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getTexCoords__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec2f > *result = 0 ; SWIG_check_num_args("ofMesh::getTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoords",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getTexCoords",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofVec2f > *) &((ofMesh const *)arg1)->getTexCoords();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec2f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getTexCoords(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getTexCoords__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getTexCoords__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getTexCoords'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getTexCoords()\n" "    ofMesh::getTexCoords() const\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_haveTexCoordsChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveTexCoordsChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveTexCoordsChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_haveTexCoordsChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveTexCoordsChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_hasTexCoords(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasTexCoords",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_hasTexCoords",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasTexCoords();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_enableTextures(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::enableTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::enableTextures",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_enableTextures",1,SWIGTYPE_p_ofMesh); }  (arg1)->enableTextures(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_disableTextures(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::disableTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::disableTextures",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_disableTextures",1,SWIGTYPE_p_ofMesh); }  (arg1)->disableTextures(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_usingTextures(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::usingTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::usingTextures",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_usingTextures",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->usingTextures();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_setupIndicesAuto(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::setupIndicesAuto",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setupIndicesAuto",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setupIndicesAuto",1,SWIGTYPE_p_ofMesh); }  (arg1)->setupIndicesAuto(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getIndices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofIndexType > *result = 0 ; SWIG_check_num_args("ofMesh::getIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getIndices",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofIndexType > *) &(arg1)->getIndices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getIndex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType result; SWIG_check_num_args("ofMesh::getIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndex",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getIndex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getIndex",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = (ofIndexType)((ofMesh const *)arg1)->getIndex(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addIndex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  SWIG_check_num_args("ofMesh::addIndex",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addIndex",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::addIndex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addIndex",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  (arg1)->addIndex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addIndices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofIndexType > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addIndices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addIndices",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addIndices",2,"std::vector< ofIndexType > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addIndices",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("ofMesh_addIndices",2,SWIGTYPE_p_std__vectorT_unsigned_int_t); } 
  (arg1)->addIndices((std::vector< ofIndexType > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_addIndices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ; std::size_t arg3 ; SWIG_check_num_args("ofMesh::addIndices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addIndices",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addIndices",2,"ofIndexType const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addIndices",3,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addIndices",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ofMesh_addIndices",2,SWIGTYPE_p_unsigned_int); } 
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (std::size_t)lua_tonumber(L, 3);
  (arg1)->addIndices((ofIndexType const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addIndices(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_addIndices__SWIG_0(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofMesh_addIndices__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_addIndices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::addIndices(std::vector< ofIndexType > const &)\n"
  "    ofMesh::addIndices(ofIndexType const *,std::size_t)\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_removeIndex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  SWIG_check_num_args("ofMesh::removeIndex",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeIndex",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::removeIndex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_removeIndex",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  (arg1)->removeIndex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_setIndex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType arg3 ; SWIG_check_num_args("ofMesh::setIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setIndex",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::setIndex",2,"ofIndexType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::setIndex",3,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setIndex",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (ofIndexType)lua_tonumber(L, 3);
  (arg1)->setIndex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_clearIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearIndices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_clearIndices",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearIndices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getNumIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::size_t result;
  SWIG_check_num_args("ofMesh::getNumIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumIndices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getNumIndices",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getNumIndices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getIndexPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType *result = 0 ; SWIG_check_num_args("ofMesh::getIndexPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndexPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getIndexPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofIndexType *)(arg1)->getIndexPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_getIndexPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType *result = 0 ; SWIG_check_num_args("ofMesh::getIndexPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndexPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getIndexPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofIndexType *)((ofMesh const *)arg1)->getIndexPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_getIndexPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getIndexPointer__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getIndexPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getIndexPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getIndexPointer()\n" "    ofMesh::getIndexPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofMesh_getIndices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofIndexType > *result = 0 ; SWIG_check_num_args("ofMesh::getIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getIndices",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofIndexType > *) &((ofMesh const *)arg1)->getIndices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getIndices(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getIndices__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_getIndices__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getIndices'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getIndices()\n" "    ofMesh::getIndices() const\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_haveIndicesChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveIndicesChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveIndicesChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_haveIndicesChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveIndicesChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_hasIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasIndices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_hasIndices",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasIndices();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_addTriangle(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType arg3 ; ofIndexType arg4 ; SWIG_check_num_args("ofMesh::addTriangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addTriangle",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::addTriangle",2,"ofIndexType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addTriangle",3,"ofIndexType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::addTriangle",4,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_addTriangle",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (ofIndexType)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (ofIndexType)lua_tonumber(L, 4);
  (arg1)->addTriangle(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_enableIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::enableIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::enableIndices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_enableIndices",1,SWIGTYPE_p_ofMesh); }  (arg1)->enableIndices(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_disableIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::disableIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::disableIndices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_disableIndices",1,SWIGTYPE_p_ofMesh); }  (arg1)->disableIndices(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_usingIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::usingIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::usingIndices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_usingIndices",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->usingIndices();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_setColorForIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType arg3 ; ofColor arg4 ; ofColor *argp4 ; SWIG_check_num_args("ofMesh::setColorForIndices",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setColorForIndices",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::setColorForIndices",2,"ofIndexType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::setColorForIndices",3,"ofIndexType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMesh::setColorForIndices",4,"ofColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_setColorForIndices",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (ofIndexType)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofMesh_setColorForIndices",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg4 = *argp4;
  (arg1)->setColorForIndices(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getMeshForIndices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ; ofIndexType arg3 ; ofMesh result; SWIG_check_num_args("ofMesh::getMeshForIndices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getMeshForIndices",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getMeshForIndices",2,"ofIndexType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::getMeshForIndices",3,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getMeshForIndices",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (ofIndexType)lua_tonumber(L, 3);
  result = ((ofMesh const *)arg1)->getMeshForIndices(arg2,arg3); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getMeshForIndices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType arg2 ; ofIndexType arg3 ; ofIndexType arg4 ; ofIndexType arg5 ; ofMesh result;
  SWIG_check_num_args("ofMesh::getMeshForIndices",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getMeshForIndices",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getMeshForIndices",2,"ofIndexType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::getMeshForIndices",3,"ofIndexType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::getMeshForIndices",4,"ofIndexType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::getMeshForIndices",5,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_getMeshForIndices",1,SWIGTYPE_p_ofMesh); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (ofIndexType)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative") arg4 = (ofIndexType)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative") arg5 = (ofIndexType)lua_tonumber(L, 5);
  result = ((ofMesh const *)arg1)->getMeshForIndices(arg2,arg3,arg4,arg5); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_getMeshForIndices(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofMesh_getMeshForIndices__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofMesh_getMeshForIndices__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_getMeshForIndices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getMeshForIndices(ofIndexType,ofIndexType) const\n"
  "    ofMesh::getMeshForIndices(ofIndexType,ofIndexType,ofIndexType,ofIndexType) const\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_drawVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::drawVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::drawVertices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_drawVertices",1,SWIGTYPE_p_ofMesh); }  ((ofMesh const *)arg1)->drawVertices(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_drawWireframe(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::drawWireframe",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::drawWireframe",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_drawWireframe",1,SWIGTYPE_p_ofMesh); }  ((ofMesh const *)arg1)->drawWireframe(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_drawFaces(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::drawFaces",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::drawFaces",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofMesh_drawFaces",1,SWIGTYPE_p_ofMesh); }  ((ofMesh const *)arg1)->drawFaces(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::draw",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_draw",1,SWIGTYPE_p_ofMesh); } 
  ((ofMesh const *)arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofPolyRenderMode arg2 ;
  ofPolyRenderMode *argp2 ; SWIG_check_num_args("ofMesh::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::draw",1,"ofMesh const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::draw",2,"ofPolyRenderMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_draw",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPolyRenderMode,0))){
    SWIG_fail_ptr("ofMesh_draw",2,SWIGTYPE_p_ofPolyRenderMode); }  arg2 = *argp2; ((ofMesh const *)arg1)->draw(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_draw(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_draw__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPolyRenderMode, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMesh_draw__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::draw() const\n" "    ofMesh::draw(ofPolyRenderMode) const\n"); lua_error(L);return 0; }
static int _wrap_ofMesh_load(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofMesh::load",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::load",1,"ofMesh *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofMesh::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_load",1,SWIGTYPE_p_ofMesh); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->load(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMesh_save__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::string arg2 ;
  bool arg3 ; SWIG_check_num_args("ofMesh::save",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::save",1,"ofMesh const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofMesh::save",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofMesh::save",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_save",1,SWIGTYPE_p_ofMesh); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0); ((ofMesh const *)arg1)->save(arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_save__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofMesh::save",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::save",1,"ofMesh const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofMesh::save",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofMesh_save",1,SWIGTYPE_p_ofMesh); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); ((ofMesh const *)arg1)->save(arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMesh_save(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofMesh_save__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofMesh_save__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMesh_save'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::save(std::string,bool) const\n" "    ofMesh::save(std::string) const\n"); lua_error(L);return 0; }
static void swig_delete_ofMesh(void *obj) {
ofMesh *arg1 = (ofMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMesh_methods[]= {
    { "setFromTriangles", _wrap_ofMesh_setFromTriangles},
    { "setMode", _wrap_ofMesh_setMode},
    { "getMode", _wrap_ofMesh_getMode},
    { "addVertex", _wrap_ofMesh_addVertex},
    { "addVertices", _wrap_ofMesh_addVertices},
    { "removeVertex", _wrap_ofMesh_removeVertex},
    { "setVertex", _wrap_ofMesh_setVertex},
    { "clearVertices", _wrap_ofMesh_clearVertices},
    { "clear", _wrap_ofMesh_clear},
    { "getNumVertices", _wrap_ofMesh_getNumVertices},
    { "getVerticesPointer", _wrap_ofMesh_getVerticesPointer},
    { "getVertex", _wrap_ofMesh_getVertex},
    { "getVertices", _wrap_ofMesh_getVertices},
    { "haveVertsChanged", _wrap_ofMesh_haveVertsChanged},
    { "hasVertices", _wrap_ofMesh_hasVertices},
    { "append", _wrap_ofMesh_append},
    { "mergeDuplicateVertices", _wrap_ofMesh_mergeDuplicateVertices},
    { "getCentroid", _wrap_ofMesh_getCentroid},
    { "getNormal", _wrap_ofMesh_getNormal},
    { "addNormal", _wrap_ofMesh_addNormal},
    { "addNormals", _wrap_ofMesh_addNormals},
    { "removeNormal", _wrap_ofMesh_removeNormal},
    { "setNormal", _wrap_ofMesh_setNormal},
    { "clearNormals", _wrap_ofMesh_clearNormals},
    { "getNumNormals", _wrap_ofMesh_getNumNormals},
    { "getNormalsPointer", _wrap_ofMesh_getNormalsPointer},
    { "getNormals", _wrap_ofMesh_getNormals},
    { "haveNormalsChanged", _wrap_ofMesh_haveNormalsChanged},
    { "hasNormals", _wrap_ofMesh_hasNormals},
    { "enableNormals", _wrap_ofMesh_enableNormals},
    { "disableNormals", _wrap_ofMesh_disableNormals},
    { "usingNormals", _wrap_ofMesh_usingNormals},
    { "smoothNormals", _wrap_ofMesh_smoothNormals},
    { "getFace", _wrap_ofMesh_getFace},
    { "getFaceNormals", _wrap_ofMesh_getFaceNormals},
    { "getUniqueFaces", _wrap_ofMesh_getUniqueFaces},
    { "getColor", _wrap_ofMesh_getColor},
    { "addColor", _wrap_ofMesh_addColor},
    { "addColors", _wrap_ofMesh_addColors},
    { "removeColor", _wrap_ofMesh_removeColor},
    { "setColor", _wrap_ofMesh_setColor},
    { "clearColors", _wrap_ofMesh_clearColors},
    { "getNumColors", _wrap_ofMesh_getNumColors},
    { "getColorsPointer", _wrap_ofMesh_getColorsPointer},
    { "getColors", _wrap_ofMesh_getColors},
    { "haveColorsChanged", _wrap_ofMesh_haveColorsChanged},
    { "hasColors", _wrap_ofMesh_hasColors},
    { "enableColors", _wrap_ofMesh_enableColors},
    { "disableColors", _wrap_ofMesh_disableColors},
    { "usingColors", _wrap_ofMesh_usingColors},
    { "getTexCoord", _wrap_ofMesh_getTexCoord},
    { "addTexCoord", _wrap_ofMesh_addTexCoord},
    { "addTexCoords", _wrap_ofMesh_addTexCoords},
    { "removeTexCoord", _wrap_ofMesh_removeTexCoord},
    { "setTexCoord", _wrap_ofMesh_setTexCoord},
    { "clearTexCoords", _wrap_ofMesh_clearTexCoords},
    { "getNumTexCoords", _wrap_ofMesh_getNumTexCoords},
    { "getTexCoordsPointer", _wrap_ofMesh_getTexCoordsPointer},
    { "getTexCoords", _wrap_ofMesh_getTexCoords},
    { "haveTexCoordsChanged", _wrap_ofMesh_haveTexCoordsChanged},
    { "hasTexCoords", _wrap_ofMesh_hasTexCoords},
    { "enableTextures", _wrap_ofMesh_enableTextures},
    { "disableTextures", _wrap_ofMesh_disableTextures},
    { "usingTextures", _wrap_ofMesh_usingTextures},
    { "setupIndicesAuto", _wrap_ofMesh_setupIndicesAuto},
    { "getIndex", _wrap_ofMesh_getIndex},
    { "addIndex", _wrap_ofMesh_addIndex},
    { "addIndices", _wrap_ofMesh_addIndices},
    { "removeIndex", _wrap_ofMesh_removeIndex},
    { "setIndex", _wrap_ofMesh_setIndex},
    { "clearIndices", _wrap_ofMesh_clearIndices},
    { "getNumIndices", _wrap_ofMesh_getNumIndices},
    { "getIndexPointer", _wrap_ofMesh_getIndexPointer},
    { "getIndices", _wrap_ofMesh_getIndices},
    { "haveIndicesChanged", _wrap_ofMesh_haveIndicesChanged},
    { "hasIndices", _wrap_ofMesh_hasIndices},
    { "addTriangle", _wrap_ofMesh_addTriangle},
    { "enableIndices", _wrap_ofMesh_enableIndices},
    { "disableIndices", _wrap_ofMesh_disableIndices},
    { "usingIndices", _wrap_ofMesh_usingIndices},
    { "setColorForIndices", _wrap_ofMesh_setColorForIndices},
    { "getMeshForIndices", _wrap_ofMesh_getMeshForIndices},
    { "drawVertices", _wrap_ofMesh_drawVertices},
    { "drawWireframe", _wrap_ofMesh_drawWireframe},
    { "drawFaces", _wrap_ofMesh_drawFaces},
    { "draw", _wrap_ofMesh_draw},
    { "load", _wrap_ofMesh_load},
    { "save", _wrap_ofMesh_save},
    {0,0}
};
static swig_lua_method swig_ofMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofMesh_Sf_SwigStatic_methods[]= {
    { "plane", _wrap_ofMesh_plane},
    { "sphere", _wrap_ofMesh_sphere},
    { "icosahedron", _wrap_ofMesh_icosahedron},
    { "icosphere", _wrap_ofMesh_icosphere},
    { "cylinder", _wrap_ofMesh_cylinder},
    { "cone", _wrap_ofMesh_cone},
    { "box", _wrap_ofMesh_box},
    { "axis", _wrap_ofMesh_axis},
    {0,0}
};
static swig_lua_class* swig_ofMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofMesh_Sf_SwigStatic = {
    "ofMesh",
    swig_ofMesh_Sf_SwigStatic_methods,
    swig_ofMesh_Sf_SwigStatic_attributes,
    swig_ofMesh_Sf_SwigStatic_constants,
    swig_ofMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofMesh_bases[] = {0};
static const char *swig_ofMesh_base_names[] = {0};
static swig_lua_class _wrap_class_ofMesh = { "ofMesh", "ofMesh", &SWIGTYPE_p_ofMesh,_proxy__wrap_new_ofMesh, swig_delete_ofMesh, swig_ofMesh_methods, swig_ofMesh_attributes, &swig_ofMesh_Sf_SwigStatic, swig_ofMesh_meta, swig_ofMesh_bases, swig_ofMesh_base_names };

static int _wrap_new_ofMeshFace(lua_State* L) { int SWIG_arg = 0; ofMeshFace *result = 0 ;
  SWIG_check_num_args("ofMeshFace::ofMeshFace",0,0) result = (ofMeshFace *)new ofMeshFace();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMeshFace,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_getFaceNormal(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMeshFace::getFaceNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getFaceNormal",1,"ofMeshFace const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getFaceNormal",1,SWIGTYPE_p_ofMeshFace); } 
  result = (ofVec3f *) &((ofMeshFace const *)arg1)->getFaceNormal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_setVertex(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; ofIndexType arg2 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofMeshFace::setVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setVertex",1,"ofMeshFace *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::setVertex",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMeshFace::setVertex",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setVertex",1,SWIGTYPE_p_ofMeshFace); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMeshFace_setVertex",3,SWIGTYPE_p_ofVec3f); }  (arg1)->setVertex(arg2,(ofVec3f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_getVertex(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; ofIndexType arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMeshFace::getVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getVertex",1,"ofMeshFace const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::getVertex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getVertex",1,SWIGTYPE_p_ofMeshFace); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = (ofVec3f *) &((ofMeshFace const *)arg1)->getVertex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_setNormal(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; ofIndexType arg2 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofMeshFace::setNormal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setNormal",1,"ofMeshFace *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::setNormal",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMeshFace::setNormal",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setNormal",1,SWIGTYPE_p_ofMeshFace); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMeshFace_setNormal",3,SWIGTYPE_p_ofVec3f); }  (arg1)->setNormal(arg2,(ofVec3f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_getNormal(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; ofIndexType arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMeshFace::getNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getNormal",1,"ofMeshFace const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::getNormal",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getNormal",1,SWIGTYPE_p_ofMeshFace); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = (ofVec3f *) &((ofMeshFace const *)arg1)->getNormal(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_setColor(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; ofIndexType arg2 ;
  ofFloatColor *arg3 = 0 ; SWIG_check_num_args("ofMeshFace::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setColor",1,"ofMeshFace *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::setColor",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMeshFace::setColor",3,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setColor",1,SWIGTYPE_p_ofMeshFace); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMeshFace_setColor",3,SWIGTYPE_p_ofColor_T_float_t); }  (arg1)->setColor(arg2,(ofFloatColor const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_getColor(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; ofIndexType arg2 ;
  ofFloatColor *result = 0 ; SWIG_check_num_args("ofMeshFace::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getColor",1,"ofMeshFace const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::getColor",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getColor",1,SWIGTYPE_p_ofMeshFace); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = (ofFloatColor *) &((ofMeshFace const *)arg1)->getColor(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_setTexCoord(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ;
  ofIndexType arg2 ; ofVec2f *arg3 = 0 ; SWIG_check_num_args("ofMeshFace::setTexCoord",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setTexCoord",1,"ofMeshFace *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::setTexCoord",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMeshFace::setTexCoord",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setTexCoord",1,SWIGTYPE_p_ofMeshFace); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofMeshFace_setTexCoord",3,SWIGTYPE_p_ofVec2f); }  (arg1)->setTexCoord(arg2,(ofVec2f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_getTexCoord(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ;
  ofIndexType arg2 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofMeshFace::getTexCoord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getTexCoord",1,"ofMeshFace const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::getTexCoord",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getTexCoord",1,SWIGTYPE_p_ofMeshFace); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (ofIndexType)lua_tonumber(L, 2);
  result = (ofVec2f *) &((ofMeshFace const *)arg1)->getTexCoord(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_setHasColors(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofMeshFace::setHasColors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setHasColors",1,"ofMeshFace *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofMeshFace::setHasColors",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setHasColors",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHasColors(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_setHasNormals(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofMeshFace::setHasNormals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setHasNormals",1,"ofMeshFace *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofMeshFace::setHasNormals",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setHasNormals",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHasNormals(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_setHasTexcoords(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofMeshFace::setHasTexcoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setHasTexcoords",1,"ofMeshFace *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofMeshFace::setHasTexcoords",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setHasTexcoords",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHasTexcoords(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_hasColors(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool result;
  SWIG_check_num_args("ofMeshFace::hasColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::hasColors",1,"ofMeshFace const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_hasColors",1,SWIGTYPE_p_ofMeshFace); }  result = (bool)((ofMeshFace const *)arg1)->hasColors();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_hasNormals(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool result;
  SWIG_check_num_args("ofMeshFace::hasNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::hasNormals",1,"ofMeshFace const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_hasNormals",1,SWIGTYPE_p_ofMeshFace); }  result = (bool)((ofMeshFace const *)arg1)->hasNormals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_hasTexcoords(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool result;
  SWIG_check_num_args("ofMeshFace::hasTexcoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::hasTexcoords",1,"ofMeshFace const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_hasTexcoords",1,SWIGTYPE_p_ofMeshFace); } 
  result = (bool)((ofMeshFace const *)arg1)->hasTexcoords(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofMeshFace(void *obj) {
ofMeshFace *arg1 = (ofMeshFace *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofMeshFace(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofMeshFace);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofMeshFace_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMeshFace_methods[]= {
    { "getFaceNormal", _wrap_ofMeshFace_getFaceNormal},
    { "setVertex", _wrap_ofMeshFace_setVertex},
    { "getVertex", _wrap_ofMeshFace_getVertex},
    { "setNormal", _wrap_ofMeshFace_setNormal},
    { "getNormal", _wrap_ofMeshFace_getNormal},
    { "setColor", _wrap_ofMeshFace_setColor},
    { "getColor", _wrap_ofMeshFace_getColor},
    { "setTexCoord", _wrap_ofMeshFace_setTexCoord},
    { "getTexCoord", _wrap_ofMeshFace_getTexCoord},
    { "setHasColors", _wrap_ofMeshFace_setHasColors},
    { "setHasNormals", _wrap_ofMeshFace_setHasNormals},
    { "setHasTexcoords", _wrap_ofMeshFace_setHasTexcoords},
    { "hasColors", _wrap_ofMeshFace_hasColors},
    { "hasNormals", _wrap_ofMeshFace_hasNormals},
    { "hasTexcoords", _wrap_ofMeshFace_hasTexcoords},
    {0,0}
};
static swig_lua_method swig_ofMeshFace_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofMeshFace_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofMeshFace_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofMeshFace_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofMeshFace_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofMeshFace_Sf_SwigStatic = {
    "ofMeshFace",
    swig_ofMeshFace_Sf_SwigStatic_methods,
    swig_ofMeshFace_Sf_SwigStatic_attributes,
    swig_ofMeshFace_Sf_SwigStatic_constants,
    swig_ofMeshFace_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofMeshFace_bases[] = {0};
static const char *swig_ofMeshFace_base_names[] = {0};
static swig_lua_class _wrap_class_ofMeshFace = { "ofMeshFace", "ofMeshFace", &SWIGTYPE_p_ofMeshFace,_proxy__wrap_new_ofMeshFace, swig_delete_ofMeshFace, swig_ofMeshFace_methods, swig_ofMeshFace_attributes, &swig_ofMeshFace_Sf_SwigStatic, swig_ofMeshFace_meta, swig_ofMeshFace_bases, swig_ofMeshFace_base_names };

static int _wrap_new_ofPlanePrimitive__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *result = 0 ;
  SWIG_check_num_args("ofPlanePrimitive::ofPlanePrimitive",0,0) result = (ofPlanePrimitive *)new ofPlanePrimitive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPlanePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofPlanePrimitive__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofPrimitiveMode arg5 ; ofPrimitiveMode *argp5 ; ofPlanePrimitive *result = 0 ;
  SWIG_check_num_args("ofPlanePrimitive::ofPlanePrimitive",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",5,"ofPrimitiveMode");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("new_ofPlanePrimitive",5,SWIGTYPE_p_ofPrimitiveMode); }  arg5 = *argp5;
  result = (ofPlanePrimitive *)new ofPlanePrimitive(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPlanePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofPlanePrimitive__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofPlanePrimitive *result = 0 ; SWIG_check_num_args("ofPlanePrimitive::ofPlanePrimitive",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPlanePrimitive::ofPlanePrimitive",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = (ofPlanePrimitive *)new ofPlanePrimitive(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPlanePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofPlanePrimitive(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofPlanePrimitive__SWIG_0(L);}  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofPlanePrimitive__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofPlanePrimitive__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofPlanePrimitive'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPlanePrimitive::ofPlanePrimitive()\n"
  "    ofPlanePrimitive::ofPlanePrimitive(float,float,int,int,ofPrimitiveMode)\n"
  "    ofPlanePrimitive::ofPlanePrimitive(float,float,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofPlanePrimitive_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ; float arg2 ; float arg3 ; int arg4 ; int arg5 ; ofPrimitiveMode arg6 ;
  ofPrimitiveMode *argp6 ; SWIG_check_num_args("ofPlanePrimitive::set",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::set",1,"ofPlanePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPlanePrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPlanePrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPlanePrimitive::set",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofPlanePrimitive::set",6,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_set",1,SWIGTYPE_p_ofPlanePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofPlanePrimitive_set",6,SWIGTYPE_p_ofPrimitiveMode); }  arg6 = *argp6; (arg1)->set(arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ; float arg2 ; float arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofPlanePrimitive::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::set",1,"ofPlanePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPlanePrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPlanePrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPlanePrimitive::set",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_set",1,SWIGTYPE_p_ofPlanePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_set__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ; float arg2 ; float arg3 ; SWIG_check_num_args("ofPlanePrimitive::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::set",1,"ofPlanePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPlanePrimitive::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_set",1,SWIGTYPE_p_ofPlanePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPlanePrimitive_set(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPlanePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPlanePrimitive_set__SWIG_2(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPlanePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofPlanePrimitive_set__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPlanePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPlanePrimitive_set__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPlanePrimitive_set'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPlanePrimitive::set(float,float,int,int,ofPrimitiveMode)\n"
  "    ofPlanePrimitive::set(float,float,int,int)\n" "    ofPlanePrimitive::set(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPlanePrimitive_resizeToTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ; ofTexture *arg2 = 0 ; float arg3 ;
  SWIG_check_num_args("ofPlanePrimitive::resizeToTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::resizeToTexture",1,"ofPlanePrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPlanePrimitive::resizeToTexture",2,"ofTexture &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPlanePrimitive::resizeToTexture",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_resizeToTexture",1,SWIGTYPE_p_ofPlanePrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofPlanePrimitive_resizeToTexture",2,SWIGTYPE_p_ofTexture); }  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->resizeToTexture(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_resizeToTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ; ofTexture *arg2 = 0 ;
  SWIG_check_num_args("ofPlanePrimitive::resizeToTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::resizeToTexture",1,"ofPlanePrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPlanePrimitive::resizeToTexture",2,"ofTexture &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_resizeToTexture",1,SWIGTYPE_p_ofPlanePrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofPlanePrimitive_resizeToTexture",2,SWIGTYPE_p_ofTexture); }  (arg1)->resizeToTexture(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_resizeToTexture(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPlanePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPlanePrimitive_resizeToTexture__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPlanePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPlanePrimitive_resizeToTexture__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPlanePrimitive_resizeToTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPlanePrimitive::resizeToTexture(ofTexture &,float)\n"
  "    ofPlanePrimitive::resizeToTexture(ofTexture &)\n"); lua_error(L);return 0; }
static int _wrap_ofPlanePrimitive_setWidth(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ;
  float arg2 ; SWIG_check_num_args("ofPlanePrimitive::setWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::setWidth",1,"ofPlanePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::setWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_setWidth",1,SWIGTYPE_p_ofPlanePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_setHeight(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ;
  float arg2 ; SWIG_check_num_args("ofPlanePrimitive::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::setHeight",1,"ofPlanePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::setHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_setHeight",1,SWIGTYPE_p_ofPlanePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_setColumns(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ;
  int arg2 ; SWIG_check_num_args("ofPlanePrimitive::setColumns",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::setColumns",1,"ofPlanePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::setColumns",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_setColumns",1,SWIGTYPE_p_ofPlanePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setColumns(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_setRows(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ;
  int arg2 ; SWIG_check_num_args("ofPlanePrimitive::setRows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::setRows",1,"ofPlanePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::setRows",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_setRows",1,SWIGTYPE_p_ofPlanePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setRows(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_setResolution(lua_State* L) { int SWIG_arg = 0;
  ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofPlanePrimitive::setResolution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::setResolution",1,"ofPlanePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPlanePrimitive::setResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPlanePrimitive::setResolution",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_setResolution",1,SWIGTYPE_p_ofPlanePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->setResolution(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPlanePrimitive_setMode(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ;
  ofPrimitiveMode arg2 ; ofPrimitiveMode *argp2 ; SWIG_check_num_args("ofPlanePrimitive::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::setMode",1,"ofPlanePrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPlanePrimitive::setMode",2,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_setMode",1,SWIGTYPE_p_ofPlanePrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofPlanePrimitive_setMode",2,SWIGTYPE_p_ofPrimitiveMode); }  arg2 = *argp2; (arg1)->setMode(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_getNumColumns(lua_State* L) { int SWIG_arg = 0;
  ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ; int result; SWIG_check_num_args("ofPlanePrimitive::getNumColumns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::getNumColumns",1,"ofPlanePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_getNumColumns",1,SWIGTYPE_p_ofPlanePrimitive); } 
  result = (int)((ofPlanePrimitive const *)arg1)->getNumColumns(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_getNumRows(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ;
  int result; SWIG_check_num_args("ofPlanePrimitive::getNumRows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::getNumRows",1,"ofPlanePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_getNumRows",1,SWIGTYPE_p_ofPlanePrimitive); } 
  result = (int)((ofPlanePrimitive const *)arg1)->getNumRows(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_getResolution(lua_State* L) { int SWIG_arg = 0;
  ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ; ofVec2f result; SWIG_check_num_args("ofPlanePrimitive::getResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::getResolution",1,"ofPlanePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_getResolution",1,SWIGTYPE_p_ofPlanePrimitive); } 
  result = ((ofPlanePrimitive const *)arg1)->getResolution(); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_getWidth(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ;
  float result; SWIG_check_num_args("ofPlanePrimitive::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::getWidth",1,"ofPlanePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_getWidth",1,SWIGTYPE_p_ofPlanePrimitive); } 
  result = (float)((ofPlanePrimitive const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPlanePrimitive_getHeight(lua_State* L) { int SWIG_arg = 0; ofPlanePrimitive *arg1 = (ofPlanePrimitive *) 0 ;
  float result; SWIG_check_num_args("ofPlanePrimitive::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPlanePrimitive::getHeight",1,"ofPlanePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPlanePrimitive,0))){
    SWIG_fail_ptr("ofPlanePrimitive_getHeight",1,SWIGTYPE_p_ofPlanePrimitive); } 
  result = (float)((ofPlanePrimitive const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofPlanePrimitive(void *obj) {
ofPlanePrimitive *arg1 = (ofPlanePrimitive *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofPlanePrimitive(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofPlanePrimitive);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofPlanePrimitive_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofPlanePrimitive_methods[]= {
    { "set", _wrap_ofPlanePrimitive_set},
    { "resizeToTexture", _wrap_ofPlanePrimitive_resizeToTexture},
    { "setWidth", _wrap_ofPlanePrimitive_setWidth},
    { "setHeight", _wrap_ofPlanePrimitive_setHeight},
    { "setColumns", _wrap_ofPlanePrimitive_setColumns},
    { "setRows", _wrap_ofPlanePrimitive_setRows},
    { "setResolution", _wrap_ofPlanePrimitive_setResolution},
    { "setMode", _wrap_ofPlanePrimitive_setMode},
    { "getNumColumns", _wrap_ofPlanePrimitive_getNumColumns},
    { "getNumRows", _wrap_ofPlanePrimitive_getNumRows},
    { "getResolution", _wrap_ofPlanePrimitive_getResolution},
    { "getWidth", _wrap_ofPlanePrimitive_getWidth},
    { "getHeight", _wrap_ofPlanePrimitive_getHeight},
    {0,0}
};
static swig_lua_method swig_ofPlanePrimitive_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofPlanePrimitive_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofPlanePrimitive_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofPlanePrimitive_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofPlanePrimitive_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofPlanePrimitive_Sf_SwigStatic = {
    "ofPlanePrimitive",
    swig_ofPlanePrimitive_Sf_SwigStatic_methods,
    swig_ofPlanePrimitive_Sf_SwigStatic_attributes,
    swig_ofPlanePrimitive_Sf_SwigStatic_constants,
    swig_ofPlanePrimitive_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofPlanePrimitive_bases[] = {0};
static const char *swig_ofPlanePrimitive_base_names[] = {0};
static swig_lua_class _wrap_class_ofPlanePrimitive = { "ofPlanePrimitive", "ofPlanePrimitive", &SWIGTYPE_p_ofPlanePrimitive,_proxy__wrap_new_ofPlanePrimitive, swig_delete_ofPlanePrimitive, swig_ofPlanePrimitive_methods, swig_ofPlanePrimitive_attributes, &swig_ofPlanePrimitive_Sf_SwigStatic, swig_ofPlanePrimitive_meta, swig_ofPlanePrimitive_bases, swig_ofPlanePrimitive_base_names };

static int _wrap_new_ofSpherePrimitive__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofSpherePrimitive *result = 0 ;
  SWIG_check_num_args("ofSpherePrimitive::ofSpherePrimitive",0,0) result = (ofSpherePrimitive *)new ofSpherePrimitive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSpherePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofSpherePrimitive__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; int arg2 ; ofPrimitiveMode arg3 ;
  ofPrimitiveMode *argp3 ; ofSpherePrimitive *result = 0 ; SWIG_check_num_args("ofSpherePrimitive::ofSpherePrimitive",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSpherePrimitive::ofSpherePrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSpherePrimitive::ofSpherePrimitive",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofSpherePrimitive::ofSpherePrimitive",3,"ofPrimitiveMode");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("new_ofSpherePrimitive",3,SWIGTYPE_p_ofPrimitiveMode); }  arg3 = *argp3;
  result = (ofSpherePrimitive *)new ofSpherePrimitive(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSpherePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofSpherePrimitive__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; int arg2 ;
  ofSpherePrimitive *result = 0 ; SWIG_check_num_args("ofSpherePrimitive::ofSpherePrimitive",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSpherePrimitive::ofSpherePrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSpherePrimitive::ofSpherePrimitive",2,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); result = (ofSpherePrimitive *)new ofSpherePrimitive(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSpherePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofSpherePrimitive(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofSpherePrimitive__SWIG_0(L);}  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_ofSpherePrimitive__SWIG_2(L);}  }  }  if (argc == 3) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofSpherePrimitive__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofSpherePrimitive'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSpherePrimitive::ofSpherePrimitive()\n"
  "    ofSpherePrimitive::ofSpherePrimitive(float,int,ofPrimitiveMode)\n"
  "    ofSpherePrimitive::ofSpherePrimitive(float,int)\n"); lua_error(L);return 0; }
static int _wrap_ofSpherePrimitive_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofSpherePrimitive *arg1 = (ofSpherePrimitive *) 0 ; float arg2 ; int arg3 ; ofPrimitiveMode arg4 ; ofPrimitiveMode *argp4 ;
  SWIG_check_num_args("ofSpherePrimitive::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSpherePrimitive::set",1,"ofSpherePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSpherePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSpherePrimitive::set",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofSpherePrimitive::set",4,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSpherePrimitive,0))){
    SWIG_fail_ptr("ofSpherePrimitive_set",1,SWIGTYPE_p_ofSpherePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofSpherePrimitive_set",4,SWIGTYPE_p_ofPrimitiveMode); }  arg4 = *argp4; (arg1)->set(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSpherePrimitive_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofSpherePrimitive *arg1 = (ofSpherePrimitive *) 0 ; float arg2 ; int arg3 ; SWIG_check_num_args("ofSpherePrimitive::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSpherePrimitive::set",1,"ofSpherePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSpherePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSpherePrimitive::set",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSpherePrimitive,0))){
    SWIG_fail_ptr("ofSpherePrimitive_set",1,SWIGTYPE_p_ofSpherePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSpherePrimitive_set(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSpherePrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofSpherePrimitive_set__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSpherePrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSpherePrimitive_set__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSpherePrimitive_set'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSpherePrimitive::set(float,int,ofPrimitiveMode)\n"
  "    ofSpherePrimitive::set(float,int)\n"); lua_error(L);return 0; }
static int _wrap_ofSpherePrimitive_setResolution(lua_State* L) { int SWIG_arg = 0;
  ofSpherePrimitive *arg1 = (ofSpherePrimitive *) 0 ; int arg2 ; SWIG_check_num_args("ofSpherePrimitive::setResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSpherePrimitive::setResolution",1,"ofSpherePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSpherePrimitive::setResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSpherePrimitive,0))){
    SWIG_fail_ptr("ofSpherePrimitive_setResolution",1,SWIGTYPE_p_ofSpherePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSpherePrimitive_setRadius(lua_State* L) { int SWIG_arg = 0;
  ofSpherePrimitive *arg1 = (ofSpherePrimitive *) 0 ; float arg2 ; SWIG_check_num_args("ofSpherePrimitive::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSpherePrimitive::setRadius",1,"ofSpherePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSpherePrimitive::setRadius",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSpherePrimitive,0))){
    SWIG_fail_ptr("ofSpherePrimitive_setRadius",1,SWIGTYPE_p_ofSpherePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSpherePrimitive_setMode(lua_State* L) { int SWIG_arg = 0; ofSpherePrimitive *arg1 = (ofSpherePrimitive *) 0 ;
  ofPrimitiveMode arg2 ; ofPrimitiveMode *argp2 ; SWIG_check_num_args("ofSpherePrimitive::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSpherePrimitive::setMode",1,"ofSpherePrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSpherePrimitive::setMode",2,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSpherePrimitive,0))){
    SWIG_fail_ptr("ofSpherePrimitive_setMode",1,SWIGTYPE_p_ofSpherePrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofSpherePrimitive_setMode",2,SWIGTYPE_p_ofPrimitiveMode); }  arg2 = *argp2; (arg1)->setMode(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSpherePrimitive_getRadius(lua_State* L) { int SWIG_arg = 0;
  ofSpherePrimitive *arg1 = (ofSpherePrimitive *) 0 ; float result; SWIG_check_num_args("ofSpherePrimitive::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSpherePrimitive::getRadius",1,"ofSpherePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSpherePrimitive,0))){
    SWIG_fail_ptr("ofSpherePrimitive_getRadius",1,SWIGTYPE_p_ofSpherePrimitive); } 
  result = (float)((ofSpherePrimitive const *)arg1)->getRadius(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSpherePrimitive_getResolution(lua_State* L) { int SWIG_arg = 0;
  ofSpherePrimitive *arg1 = (ofSpherePrimitive *) 0 ; int result; SWIG_check_num_args("ofSpherePrimitive::getResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSpherePrimitive::getResolution",1,"ofSpherePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSpherePrimitive,0))){
    SWIG_fail_ptr("ofSpherePrimitive_getResolution",1,SWIGTYPE_p_ofSpherePrimitive); } 
  result = (int)((ofSpherePrimitive const *)arg1)->getResolution(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofSpherePrimitive(void *obj) {
ofSpherePrimitive *arg1 = (ofSpherePrimitive *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofSpherePrimitive(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofSpherePrimitive);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofSpherePrimitive_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofSpherePrimitive_methods[]= {
    { "set", _wrap_ofSpherePrimitive_set},
    { "setResolution", _wrap_ofSpherePrimitive_setResolution},
    { "setRadius", _wrap_ofSpherePrimitive_setRadius},
    { "setMode", _wrap_ofSpherePrimitive_setMode},
    { "getRadius", _wrap_ofSpherePrimitive_getRadius},
    { "getResolution", _wrap_ofSpherePrimitive_getResolution},
    {0,0}
};
static swig_lua_method swig_ofSpherePrimitive_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofSpherePrimitive_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofSpherePrimitive_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofSpherePrimitive_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofSpherePrimitive_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofSpherePrimitive_Sf_SwigStatic = {
    "ofSpherePrimitive",
    swig_ofSpherePrimitive_Sf_SwigStatic_methods,
    swig_ofSpherePrimitive_Sf_SwigStatic_attributes,
    swig_ofSpherePrimitive_Sf_SwigStatic_constants,
    swig_ofSpherePrimitive_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofSpherePrimitive_bases[] = {0};
static const char *swig_ofSpherePrimitive_base_names[] = {0};
static swig_lua_class _wrap_class_ofSpherePrimitive = { "ofSpherePrimitive", "ofSpherePrimitive", &SWIGTYPE_p_ofSpherePrimitive,_proxy__wrap_new_ofSpherePrimitive, swig_delete_ofSpherePrimitive, swig_ofSpherePrimitive_methods, swig_ofSpherePrimitive_attributes, &swig_ofSpherePrimitive_Sf_SwigStatic, swig_ofSpherePrimitive_meta, swig_ofSpherePrimitive_bases, swig_ofSpherePrimitive_base_names };

static int _wrap_new_ofIcoSpherePrimitive__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofIcoSpherePrimitive *result = 0 ;
  SWIG_check_num_args("ofIcoSpherePrimitive::ofIcoSpherePrimitive",0,0)
  result = (ofIcoSpherePrimitive *)new ofIcoSpherePrimitive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofIcoSpherePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofIcoSpherePrimitive__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; int arg2 ;
  ofIcoSpherePrimitive *result = 0 ; SWIG_check_num_args("ofIcoSpherePrimitive::ofIcoSpherePrimitive",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofIcoSpherePrimitive::ofIcoSpherePrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofIcoSpherePrimitive::ofIcoSpherePrimitive",2,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); result = (ofIcoSpherePrimitive *)new ofIcoSpherePrimitive(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofIcoSpherePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofIcoSpherePrimitive(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofIcoSpherePrimitive__SWIG_0(L);}  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_ofIcoSpherePrimitive__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofIcoSpherePrimitive'\n"
  "  Possible C/C++ prototypes are:\n" "    ofIcoSpherePrimitive::ofIcoSpherePrimitive()\n"
  "    ofIcoSpherePrimitive::ofIcoSpherePrimitive(float,int)\n"); lua_error(L);return 0; }
static int _wrap_ofIcoSpherePrimitive_set(lua_State* L) { int SWIG_arg = 0;
  ofIcoSpherePrimitive *arg1 = (ofIcoSpherePrimitive *) 0 ; float arg2 ; int arg3 ;
  SWIG_check_num_args("ofIcoSpherePrimitive::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofIcoSpherePrimitive::set",1,"ofIcoSpherePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofIcoSpherePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofIcoSpherePrimitive::set",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofIcoSpherePrimitive,0))){
    SWIG_fail_ptr("ofIcoSpherePrimitive_set",1,SWIGTYPE_p_ofIcoSpherePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofIcoSpherePrimitive_setResolution(lua_State* L) { int SWIG_arg = 0;
  ofIcoSpherePrimitive *arg1 = (ofIcoSpherePrimitive *) 0 ; int arg2 ;
  SWIG_check_num_args("ofIcoSpherePrimitive::setResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofIcoSpherePrimitive::setResolution",1,"ofIcoSpherePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofIcoSpherePrimitive::setResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofIcoSpherePrimitive,0))){
    SWIG_fail_ptr("ofIcoSpherePrimitive_setResolution",1,SWIGTYPE_p_ofIcoSpherePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofIcoSpherePrimitive_setRadius(lua_State* L) { int SWIG_arg = 0;
  ofIcoSpherePrimitive *arg1 = (ofIcoSpherePrimitive *) 0 ; float arg2 ;
  SWIG_check_num_args("ofIcoSpherePrimitive::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofIcoSpherePrimitive::setRadius",1,"ofIcoSpherePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofIcoSpherePrimitive::setRadius",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofIcoSpherePrimitive,0))){
    SWIG_fail_ptr("ofIcoSpherePrimitive_setRadius",1,SWIGTYPE_p_ofIcoSpherePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofIcoSpherePrimitive_setMode(lua_State* L) { int SWIG_arg = 0;
  ofIcoSpherePrimitive *arg1 = (ofIcoSpherePrimitive *) 0 ; ofPrimitiveMode arg2 ; ofPrimitiveMode *argp2 ;
  SWIG_check_num_args("ofIcoSpherePrimitive::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofIcoSpherePrimitive::setMode",1,"ofIcoSpherePrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofIcoSpherePrimitive::setMode",2,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofIcoSpherePrimitive,0))){
    SWIG_fail_ptr("ofIcoSpherePrimitive_setMode",1,SWIGTYPE_p_ofIcoSpherePrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofIcoSpherePrimitive_setMode",2,SWIGTYPE_p_ofPrimitiveMode); }  arg2 = *argp2; (arg1)->setMode(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofIcoSpherePrimitive_getRadius(lua_State* L) { int SWIG_arg = 0;
  ofIcoSpherePrimitive *arg1 = (ofIcoSpherePrimitive *) 0 ; float result;
  SWIG_check_num_args("ofIcoSpherePrimitive::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofIcoSpherePrimitive::getRadius",1,"ofIcoSpherePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofIcoSpherePrimitive,0))){
    SWIG_fail_ptr("ofIcoSpherePrimitive_getRadius",1,SWIGTYPE_p_ofIcoSpherePrimitive); } 
  result = (float)((ofIcoSpherePrimitive const *)arg1)->getRadius(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofIcoSpherePrimitive_getResolution(lua_State* L) { int SWIG_arg = 0;
  ofIcoSpherePrimitive *arg1 = (ofIcoSpherePrimitive *) 0 ; int result;
  SWIG_check_num_args("ofIcoSpherePrimitive::getResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofIcoSpherePrimitive::getResolution",1,"ofIcoSpherePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofIcoSpherePrimitive,0))){
    SWIG_fail_ptr("ofIcoSpherePrimitive_getResolution",1,SWIGTYPE_p_ofIcoSpherePrimitive); } 
  result = (int)((ofIcoSpherePrimitive const *)arg1)->getResolution(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofIcoSpherePrimitive(void *obj) {
ofIcoSpherePrimitive *arg1 = (ofIcoSpherePrimitive *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofIcoSpherePrimitive(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofIcoSpherePrimitive);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofIcoSpherePrimitive_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofIcoSpherePrimitive_methods[]= {
    { "set", _wrap_ofIcoSpherePrimitive_set},
    { "setResolution", _wrap_ofIcoSpherePrimitive_setResolution},
    { "setRadius", _wrap_ofIcoSpherePrimitive_setRadius},
    { "setMode", _wrap_ofIcoSpherePrimitive_setMode},
    { "getRadius", _wrap_ofIcoSpherePrimitive_getRadius},
    { "getResolution", _wrap_ofIcoSpherePrimitive_getResolution},
    {0,0}
};
static swig_lua_method swig_ofIcoSpherePrimitive_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofIcoSpherePrimitive_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofIcoSpherePrimitive_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofIcoSpherePrimitive_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofIcoSpherePrimitive_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofIcoSpherePrimitive_Sf_SwigStatic = {
    "ofIcoSpherePrimitive",
    swig_ofIcoSpherePrimitive_Sf_SwigStatic_methods,
    swig_ofIcoSpherePrimitive_Sf_SwigStatic_attributes,
    swig_ofIcoSpherePrimitive_Sf_SwigStatic_constants,
    swig_ofIcoSpherePrimitive_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofIcoSpherePrimitive_bases[] = {0};
static const char *swig_ofIcoSpherePrimitive_base_names[] = {0};
static swig_lua_class _wrap_class_ofIcoSpherePrimitive = { "ofIcoSpherePrimitive", "ofIcoSpherePrimitive", &SWIGTYPE_p_ofIcoSpherePrimitive,_proxy__wrap_new_ofIcoSpherePrimitive, swig_delete_ofIcoSpherePrimitive, swig_ofIcoSpherePrimitive_methods, swig_ofIcoSpherePrimitive_attributes, &swig_ofIcoSpherePrimitive_Sf_SwigStatic, swig_ofIcoSpherePrimitive_meta, swig_ofIcoSpherePrimitive_bases, swig_ofIcoSpherePrimitive_base_names };

static int _wrap_new_ofCylinderPrimitive__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofCylinderPrimitive *result = 0 ;
  SWIG_check_num_args("ofCylinderPrimitive::ofCylinderPrimitive",0,0) result = (ofCylinderPrimitive *)new ofCylinderPrimitive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofCylinderPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofCylinderPrimitive__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ;
  int arg4 ; int arg5 ; bool arg6 ; ofPrimitiveMode arg7 ; ofPrimitiveMode *argp7 ; ofCylinderPrimitive *result = 0 ;
  SWIG_check_num_args("ofCylinderPrimitive::ofCylinderPrimitive",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",6,"bool");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",7,"ofPrimitiveMode");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("new_ofCylinderPrimitive",7,SWIGTYPE_p_ofPrimitiveMode); }  arg7 = *argp7;
  result = (ofCylinderPrimitive *)new ofCylinderPrimitive(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofCylinderPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofCylinderPrimitive__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ;
  int arg4 ; int arg5 ; bool arg6 ; ofCylinderPrimitive *result = 0 ;
  SWIG_check_num_args("ofCylinderPrimitive::ofCylinderPrimitive",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",6,"bool"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  result = (ofCylinderPrimitive *)new ofCylinderPrimitive(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofCylinderPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofCylinderPrimitive__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ;
  int arg4 ; int arg5 ; ofCylinderPrimitive *result = 0 ; SWIG_check_num_args("ofCylinderPrimitive::ofCylinderPrimitive",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",5,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); result = (ofCylinderPrimitive *)new ofCylinderPrimitive(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofCylinderPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofCylinderPrimitive__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ;
  int arg4 ; ofCylinderPrimitive *result = 0 ; SWIG_check_num_args("ofCylinderPrimitive::ofCylinderPrimitive",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::ofCylinderPrimitive",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = (ofCylinderPrimitive *)new ofCylinderPrimitive(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofCylinderPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofCylinderPrimitive(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofCylinderPrimitive__SWIG_0(L);}  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofCylinderPrimitive__SWIG_4(L);}  }  }  }  } 
  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_new_ofCylinderPrimitive__SWIG_3(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_new_ofCylinderPrimitive__SWIG_2(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofCylinderPrimitive__SWIG_1(L);}  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofCylinderPrimitive'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCylinderPrimitive::ofCylinderPrimitive()\n"
  "    ofCylinderPrimitive::ofCylinderPrimitive(float,float,int,int,int,bool,ofPrimitiveMode)\n"
  "    ofCylinderPrimitive::ofCylinderPrimitive(float,float,int,int,int,bool)\n"
  "    ofCylinderPrimitive::ofCylinderPrimitive(float,float,int,int,int)\n"
  "    ofCylinderPrimitive::ofCylinderPrimitive(float,float,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofCylinderPrimitive_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float arg2 ; float arg3 ; int arg4 ; int arg5 ; int arg6 ; bool arg7 ;
  ofPrimitiveMode arg8 ; ofPrimitiveMode *argp8 ; SWIG_check_num_args("ofCylinderPrimitive::set",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::set",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCylinderPrimitive::set",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofCylinderPrimitive::set",6,"int");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofCylinderPrimitive::set",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ofCylinderPrimitive::set",8,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_set",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); arg7 = (lua_toboolean(L, 7)!=0);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_set",8,SWIGTYPE_p_ofPrimitiveMode); }  arg8 = *argp8;
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float arg2 ; float arg3 ; int arg4 ; int arg5 ; int arg6 ; bool arg7 ;
  SWIG_check_num_args("ofCylinderPrimitive::set",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::set",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCylinderPrimitive::set",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofCylinderPrimitive::set",6,"int");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofCylinderPrimitive::set",7,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_set",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); arg7 = (lua_toboolean(L, 7)!=0); (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_set__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float arg2 ; float arg3 ; int arg4 ; int arg5 ; int arg6 ;
  SWIG_check_num_args("ofCylinderPrimitive::set",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::set",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCylinderPrimitive::set",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofCylinderPrimitive::set",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_set",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); (arg1)->set(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_set__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float arg2 ; float arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofCylinderPrimitive::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::set",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCylinderPrimitive::set",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_set",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_set__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float arg2 ; float arg3 ; bool arg4 ;
  SWIG_check_num_args("ofCylinderPrimitive::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::set",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::set",3,"float");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofCylinderPrimitive::set",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_set",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); (arg1)->set(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_set__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofCylinderPrimitive::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::set",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_set",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_set(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCylinderPrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofCylinderPrimitive_set__SWIG_5(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCylinderPrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofCylinderPrimitive_set__SWIG_4(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCylinderPrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofCylinderPrimitive_set__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCylinderPrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofCylinderPrimitive_set__SWIG_2(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCylinderPrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isboolean(L,argv[6]); }  if (_v) {
                  return _wrap_ofCylinderPrimitive_set__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCylinderPrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isboolean(L,argv[6]); }  if (_v) { { void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                      _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofCylinderPrimitive_set__SWIG_0(L);}  }  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCylinderPrimitive_set'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCylinderPrimitive::set(float,float,int,int,int,bool,ofPrimitiveMode)\n"
  "    ofCylinderPrimitive::set(float,float,int,int,int,bool)\n" "    ofCylinderPrimitive::set(float,float,int,int,int)\n"
  "    ofCylinderPrimitive::set(float,float,int,int)\n" "    ofCylinderPrimitive::set(float,float,bool)\n"
  "    ofCylinderPrimitive::set(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofCylinderPrimitive_setRadius(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float arg2 ; SWIG_check_num_args("ofCylinderPrimitive::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setRadius",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setRadius",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setRadius",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setHeight(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float arg2 ; SWIG_check_num_args("ofCylinderPrimitive::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setHeight",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setHeight",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setCapped(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; bool arg2 ; SWIG_check_num_args("ofCylinderPrimitive::setCapped",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setCapped",1,"ofCylinderPrimitive *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setCapped",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setCapped",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCapped(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setResolutionRadius(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; int arg2 ;
  SWIG_check_num_args("ofCylinderPrimitive::setResolutionRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setResolutionRadius",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setResolutionRadius",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setResolutionRadius",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  arg2 = (int)lua_tonumber(L, 2); (arg1)->setResolutionRadius(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setResolutionHeight(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; int arg2 ;
  SWIG_check_num_args("ofCylinderPrimitive::setResolutionHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setResolutionHeight",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setResolutionHeight",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setResolutionHeight",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  arg2 = (int)lua_tonumber(L, 2); (arg1)->setResolutionHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setResolutionCap(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; int arg2 ;
  SWIG_check_num_args("ofCylinderPrimitive::setResolutionCap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setResolutionCap",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setResolutionCap",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setResolutionCap",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolutionCap(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofCylinderPrimitive::setResolution",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setResolution",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::setResolution",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCylinderPrimitive::setResolution",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setResolution",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setResolution(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofCylinderPrimitive::setResolution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setResolution",1,"ofCylinderPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCylinderPrimitive::setResolution",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setResolution",1,SWIGTYPE_p_ofCylinderPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->setResolution(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setResolution(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCylinderPrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofCylinderPrimitive_setResolution__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofCylinderPrimitive, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofCylinderPrimitive_setResolution__SWIG_0(L);}  }  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCylinderPrimitive_setResolution'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCylinderPrimitive::setResolution(int,int,int)\n"
  "    ofCylinderPrimitive::setResolution(int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofCylinderPrimitive_setMode(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; ofPrimitiveMode arg2 ; ofPrimitiveMode *argp2 ;
  SWIG_check_num_args("ofCylinderPrimitive::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setMode",1,"ofCylinderPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setMode",2,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setMode",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setMode",2,SWIGTYPE_p_ofPrimitiveMode); }  arg2 = *argp2; (arg1)->setMode(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setTopCapColor(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; ofColor arg2 ; ofColor *argp2 ;
  SWIG_check_num_args("ofCylinderPrimitive::setTopCapColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setTopCapColor",1,"ofCylinderPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setTopCapColor",2,"ofColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setTopCapColor",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setTopCapColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = *argp2;
  (arg1)->setTopCapColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setCylinderColor(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; ofColor arg2 ; ofColor *argp2 ;
  SWIG_check_num_args("ofCylinderPrimitive::setCylinderColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setCylinderColor",1,"ofCylinderPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setCylinderColor",2,"ofColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setCylinderColor",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setCylinderColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = *argp2;
  (arg1)->setCylinderColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_setBottomCapColor(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; ofColor arg2 ; ofColor *argp2 ;
  SWIG_check_num_args("ofCylinderPrimitive::setBottomCapColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::setBottomCapColor",1,"ofCylinderPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCylinderPrimitive::setBottomCapColor",2,"ofColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setBottomCapColor",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_setBottomCapColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = *argp2;
  (arg1)->setBottomCapColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getTopCapIndices(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; SwigValueWrapper< std::vector< ofIndexType > > result;
  SWIG_check_num_args("ofCylinderPrimitive::getTopCapIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getTopCapIndices",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getTopCapIndices",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = ((ofCylinderPrimitive const *)arg1)->getTopCapIndices(); {
    std::vector< ofIndexType > * resultptr = new std::vector< ofIndexType >((const std::vector< ofIndexType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getTopCapMesh(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; ofMesh result;
  SWIG_check_num_args("ofCylinderPrimitive::getTopCapMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getTopCapMesh",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getTopCapMesh",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = ((ofCylinderPrimitive const *)arg1)->getTopCapMesh(); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getCylinderIndices(lua_State* L) { int SWIG_arg = 0;
ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; SwigValueWrapper< std::vector< ofIndexType > > result;
  SWIG_check_num_args("ofCylinderPrimitive::getCylinderIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getCylinderIndices",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getCylinderIndices",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = ((ofCylinderPrimitive const *)arg1)->getCylinderIndices(); {
    std::vector< ofIndexType > * resultptr = new std::vector< ofIndexType >((const std::vector< ofIndexType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getCylinderMesh(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; ofMesh result;
  SWIG_check_num_args("ofCylinderPrimitive::getCylinderMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getCylinderMesh",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getCylinderMesh",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = ((ofCylinderPrimitive const *)arg1)->getCylinderMesh(); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getBottomCapIndices(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; SwigValueWrapper< std::vector< ofIndexType > > result;
  SWIG_check_num_args("ofCylinderPrimitive::getBottomCapIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getBottomCapIndices",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getBottomCapIndices",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = ((ofCylinderPrimitive const *)arg1)->getBottomCapIndices(); {
    std::vector< ofIndexType > * resultptr = new std::vector< ofIndexType >((const std::vector< ofIndexType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getBottomCapMesh(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; ofMesh result;
  SWIG_check_num_args("ofCylinderPrimitive::getBottomCapMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getBottomCapMesh",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getBottomCapMesh",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = ((ofCylinderPrimitive const *)arg1)->getBottomCapMesh(); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getResolutionRadius(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; int result;
  SWIG_check_num_args("ofCylinderPrimitive::getResolutionRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getResolutionRadius",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getResolutionRadius",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = (int)((ofCylinderPrimitive const *)arg1)->getResolutionRadius(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getResolutionHeight(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; int result;
  SWIG_check_num_args("ofCylinderPrimitive::getResolutionHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getResolutionHeight",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getResolutionHeight",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = (int)((ofCylinderPrimitive const *)arg1)->getResolutionHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getResolutionCap(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; int result;
  SWIG_check_num_args("ofCylinderPrimitive::getResolutionCap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getResolutionCap",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getResolutionCap",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = (int)((ofCylinderPrimitive const *)arg1)->getResolutionCap(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getResolution(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofCylinderPrimitive::getResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getResolution",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getResolution",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = ((ofCylinderPrimitive const *)arg1)->getResolution(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getHeight(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float result;
  SWIG_check_num_args("ofCylinderPrimitive::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getHeight",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getHeight",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = (float)((ofCylinderPrimitive const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getRadius(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; float result;
  SWIG_check_num_args("ofCylinderPrimitive::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getRadius",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getRadius",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = (float)((ofCylinderPrimitive const *)arg1)->getRadius(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCylinderPrimitive_getCapped(lua_State* L) { int SWIG_arg = 0;
  ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) 0 ; bool result; SWIG_check_num_args("ofCylinderPrimitive::getCapped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofCylinderPrimitive::getCapped",1,"ofCylinderPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofCylinderPrimitive,0))){
    SWIG_fail_ptr("ofCylinderPrimitive_getCapped",1,SWIGTYPE_p_ofCylinderPrimitive); } 
  result = (bool)((ofCylinderPrimitive const *)arg1)->getCapped(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofCylinderPrimitive(void *obj) {
ofCylinderPrimitive *arg1 = (ofCylinderPrimitive *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofCylinderPrimitive(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofCylinderPrimitive);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofCylinderPrimitive_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofCylinderPrimitive_methods[]= {
    { "set", _wrap_ofCylinderPrimitive_set},
    { "setRadius", _wrap_ofCylinderPrimitive_setRadius},
    { "setHeight", _wrap_ofCylinderPrimitive_setHeight},
    { "setCapped", _wrap_ofCylinderPrimitive_setCapped},
    { "setResolutionRadius", _wrap_ofCylinderPrimitive_setResolutionRadius},
    { "setResolutionHeight", _wrap_ofCylinderPrimitive_setResolutionHeight},
    { "setResolutionCap", _wrap_ofCylinderPrimitive_setResolutionCap},
    { "setResolution", _wrap_ofCylinderPrimitive_setResolution},
    { "setMode", _wrap_ofCylinderPrimitive_setMode},
    { "setTopCapColor", _wrap_ofCylinderPrimitive_setTopCapColor},
    { "setCylinderColor", _wrap_ofCylinderPrimitive_setCylinderColor},
    { "setBottomCapColor", _wrap_ofCylinderPrimitive_setBottomCapColor},
    { "getTopCapIndices", _wrap_ofCylinderPrimitive_getTopCapIndices},
    { "getTopCapMesh", _wrap_ofCylinderPrimitive_getTopCapMesh},
    { "getCylinderIndices", _wrap_ofCylinderPrimitive_getCylinderIndices},
    { "getCylinderMesh", _wrap_ofCylinderPrimitive_getCylinderMesh},
    { "getBottomCapIndices", _wrap_ofCylinderPrimitive_getBottomCapIndices},
    { "getBottomCapMesh", _wrap_ofCylinderPrimitive_getBottomCapMesh},
    { "getResolutionRadius", _wrap_ofCylinderPrimitive_getResolutionRadius},
    { "getResolutionHeight", _wrap_ofCylinderPrimitive_getResolutionHeight},
    { "getResolutionCap", _wrap_ofCylinderPrimitive_getResolutionCap},
    { "getResolution", _wrap_ofCylinderPrimitive_getResolution},
    { "getHeight", _wrap_ofCylinderPrimitive_getHeight},
    { "getRadius", _wrap_ofCylinderPrimitive_getRadius},
    { "getCapped", _wrap_ofCylinderPrimitive_getCapped},
    {0,0}
};
static swig_lua_method swig_ofCylinderPrimitive_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofCylinderPrimitive_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofCylinderPrimitive_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofCylinderPrimitive_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofCylinderPrimitive_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofCylinderPrimitive_Sf_SwigStatic = {
    "ofCylinderPrimitive",
    swig_ofCylinderPrimitive_Sf_SwigStatic_methods,
    swig_ofCylinderPrimitive_Sf_SwigStatic_attributes,
    swig_ofCylinderPrimitive_Sf_SwigStatic_constants,
    swig_ofCylinderPrimitive_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofCylinderPrimitive_bases[] = {0};
static const char *swig_ofCylinderPrimitive_base_names[] = {0};
static swig_lua_class _wrap_class_ofCylinderPrimitive = { "ofCylinderPrimitive", "ofCylinderPrimitive", &SWIGTYPE_p_ofCylinderPrimitive,_proxy__wrap_new_ofCylinderPrimitive, swig_delete_ofCylinderPrimitive, swig_ofCylinderPrimitive_methods, swig_ofCylinderPrimitive_attributes, &swig_ofCylinderPrimitive_Sf_SwigStatic, swig_ofCylinderPrimitive_meta, swig_ofCylinderPrimitive_bases, swig_ofCylinderPrimitive_base_names };

static int _wrap_new_ofConePrimitive__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *result = 0 ;
  SWIG_check_num_args("ofConePrimitive::ofConePrimitive",0,0) result = (ofConePrimitive *)new ofConePrimitive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofConePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofConePrimitive__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; ofPrimitiveMode arg6 ; ofPrimitiveMode *argp6 ; ofConePrimitive *result = 0 ;
  SWIG_check_num_args("ofConePrimitive::ofConePrimitive",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",6,"ofPrimitiveMode");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("new_ofConePrimitive",6,SWIGTYPE_p_ofPrimitiveMode); }  arg6 = *argp6;
  result = (ofConePrimitive *)new ofConePrimitive(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofConePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofConePrimitive__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; ofConePrimitive *result = 0 ; SWIG_check_num_args("ofConePrimitive::ofConePrimitive",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",5,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); result = (ofConePrimitive *)new ofConePrimitive(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofConePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofConePrimitive__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofConePrimitive *result = 0 ; SWIG_check_num_args("ofConePrimitive::ofConePrimitive",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofConePrimitive::ofConePrimitive",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = (ofConePrimitive *)new ofConePrimitive(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofConePrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofConePrimitive(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofConePrimitive__SWIG_0(L);}  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofConePrimitive__SWIG_3(L);}  }  }  }  } 
  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_new_ofConePrimitive__SWIG_2(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofConePrimitive__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofConePrimitive'\n"
  "  Possible C/C++ prototypes are:\n" "    ofConePrimitive::ofConePrimitive()\n"
  "    ofConePrimitive::ofConePrimitive(float,float,int,int,int,ofPrimitiveMode)\n"
  "    ofConePrimitive::ofConePrimitive(float,float,int,int,int)\n"
  "    ofConePrimitive::ofConePrimitive(float,float,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofConePrimitive_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  float arg2 ; float arg3 ; int arg4 ; int arg5 ; int arg6 ; ofPrimitiveMode arg7 ; ofPrimitiveMode *argp7 ;
  SWIG_check_num_args("ofConePrimitive::set",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::set",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofConePrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofConePrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofConePrimitive::set",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofConePrimitive::set",6,"int");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofConePrimitive::set",7,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_set",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofConePrimitive_set",7,SWIGTYPE_p_ofPrimitiveMode); }  arg7 = *argp7;
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  float arg2 ; float arg3 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofConePrimitive::set",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::set",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofConePrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofConePrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofConePrimitive::set",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofConePrimitive::set",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_set",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); (arg1)->set(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofConePrimitive_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  float arg2 ; float arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofConePrimitive::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::set",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofConePrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofConePrimitive::set",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofConePrimitive::set",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_set",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_set__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofConePrimitive::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::set",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofConePrimitive::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_set",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofConePrimitive_set(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofConePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofConePrimitive_set__SWIG_3(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofConePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofConePrimitive_set__SWIG_2(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofConePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofConePrimitive_set__SWIG_1(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofConePrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofConePrimitive_set__SWIG_0(L);}  }  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofConePrimitive_set'\n"
  "  Possible C/C++ prototypes are:\n" "    ofConePrimitive::set(float,float,int,int,int,ofPrimitiveMode)\n"
  "    ofConePrimitive::set(float,float,int,int,int)\n" "    ofConePrimitive::set(float,float,int,int)\n"
  "    ofConePrimitive::set(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofConePrimitive_setResolutionRadius(lua_State* L) { int SWIG_arg = 0;
  ofConePrimitive *arg1 = (ofConePrimitive *) 0 ; int arg2 ; SWIG_check_num_args("ofConePrimitive::setResolutionRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setResolutionRadius",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::setResolutionRadius",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setResolutionRadius",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolutionRadius(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_setResolutionHeight(lua_State* L) { int SWIG_arg = 0;
  ofConePrimitive *arg1 = (ofConePrimitive *) 0 ; int arg2 ; SWIG_check_num_args("ofConePrimitive::setResolutionHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setResolutionHeight",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::setResolutionHeight",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setResolutionHeight",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolutionHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_setResolutionCap(lua_State* L) { int SWIG_arg = 0;
  ofConePrimitive *arg1 = (ofConePrimitive *) 0 ; int arg2 ; SWIG_check_num_args("ofConePrimitive::setResolutionCap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setResolutionCap",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::setResolutionCap",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setResolutionCap",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolutionCap(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_setResolution(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  int arg2 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofConePrimitive::setResolution",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setResolution",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::setResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofConePrimitive::setResolution",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofConePrimitive::setResolution",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setResolution",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setResolution(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_setMode(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  ofPrimitiveMode arg2 ; ofPrimitiveMode *argp2 ; SWIG_check_num_args("ofConePrimitive::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setMode",1,"ofConePrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofConePrimitive::setMode",2,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setMode",1,SWIGTYPE_p_ofConePrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofConePrimitive_setMode",2,SWIGTYPE_p_ofPrimitiveMode); }  arg2 = *argp2; (arg1)->setMode(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_setRadius(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  float arg2 ; SWIG_check_num_args("ofConePrimitive::setRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setRadius",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::setRadius",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setRadius",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRadius(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_setHeight(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  float arg2 ; SWIG_check_num_args("ofConePrimitive::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setHeight",1,"ofConePrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofConePrimitive::setHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setHeight",1,SWIGTYPE_p_ofConePrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_setTopColor(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  ofColor arg2 ; ofColor *argp2 ; SWIG_check_num_args("ofConePrimitive::setTopColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setTopColor",1,"ofConePrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofConePrimitive::setTopColor",2,"ofColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setTopColor",1,SWIGTYPE_p_ofConePrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofConePrimitive_setTopColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = *argp2;
  (arg1)->setTopColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_setCapColor(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  ofColor arg2 ; ofColor *argp2 ; SWIG_check_num_args("ofConePrimitive::setCapColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::setCapColor",1,"ofConePrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofConePrimitive::setCapColor",2,"ofColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_setCapColor",1,SWIGTYPE_p_ofConePrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofConePrimitive_setCapColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = *argp2;
  (arg1)->setCapColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getConeIndices(lua_State* L) { int SWIG_arg = 0;
  ofConePrimitive *arg1 = (ofConePrimitive *) 0 ; SwigValueWrapper< std::vector< ofIndexType > > result;
  SWIG_check_num_args("ofConePrimitive::getConeIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getConeIndices",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getConeIndices",1,SWIGTYPE_p_ofConePrimitive); } 
  result = ((ofConePrimitive const *)arg1)->getConeIndices(); {
    std::vector< ofIndexType > * resultptr = new std::vector< ofIndexType >((const std::vector< ofIndexType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getConeMesh(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  ofMesh result; SWIG_check_num_args("ofConePrimitive::getConeMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getConeMesh",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getConeMesh",1,SWIGTYPE_p_ofConePrimitive); } 
  result = ((ofConePrimitive const *)arg1)->getConeMesh(); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getCapIndices(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  SwigValueWrapper< std::vector< ofIndexType > > result; SWIG_check_num_args("ofConePrimitive::getCapIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getCapIndices",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getCapIndices",1,SWIGTYPE_p_ofConePrimitive); } 
  result = ((ofConePrimitive const *)arg1)->getCapIndices(); {
    std::vector< ofIndexType > * resultptr = new std::vector< ofIndexType >((const std::vector< ofIndexType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getCapMesh(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  ofMesh result; SWIG_check_num_args("ofConePrimitive::getCapMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getCapMesh",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getCapMesh",1,SWIGTYPE_p_ofConePrimitive); } 
  result = ((ofConePrimitive const *)arg1)->getCapMesh(); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getResolutionRadius(lua_State* L) { int SWIG_arg = 0;
  ofConePrimitive *arg1 = (ofConePrimitive *) 0 ; int result; SWIG_check_num_args("ofConePrimitive::getResolutionRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getResolutionRadius",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getResolutionRadius",1,SWIGTYPE_p_ofConePrimitive); } 
  result = (int)((ofConePrimitive const *)arg1)->getResolutionRadius(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getResolutionHeight(lua_State* L) { int SWIG_arg = 0;
  ofConePrimitive *arg1 = (ofConePrimitive *) 0 ; int result; SWIG_check_num_args("ofConePrimitive::getResolutionHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getResolutionHeight",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getResolutionHeight",1,SWIGTYPE_p_ofConePrimitive); } 
  result = (int)((ofConePrimitive const *)arg1)->getResolutionHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getResolutionCap(lua_State* L) { int SWIG_arg = 0;
  ofConePrimitive *arg1 = (ofConePrimitive *) 0 ; int result; SWIG_check_num_args("ofConePrimitive::getResolutionCap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getResolutionCap",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getResolutionCap",1,SWIGTYPE_p_ofConePrimitive); } 
  result = (int)((ofConePrimitive const *)arg1)->getResolutionCap(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getResolution(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  ofVec3f result; SWIG_check_num_args("ofConePrimitive::getResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getResolution",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getResolution",1,SWIGTYPE_p_ofConePrimitive); } 
  result = ((ofConePrimitive const *)arg1)->getResolution(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getRadius(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  float result; SWIG_check_num_args("ofConePrimitive::getRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getRadius",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getRadius",1,SWIGTYPE_p_ofConePrimitive); } 
  result = (float)((ofConePrimitive const *)arg1)->getRadius(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofConePrimitive_getHeight(lua_State* L) { int SWIG_arg = 0; ofConePrimitive *arg1 = (ofConePrimitive *) 0 ;
  float result; SWIG_check_num_args("ofConePrimitive::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofConePrimitive::getHeight",1,"ofConePrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofConePrimitive,0))){
    SWIG_fail_ptr("ofConePrimitive_getHeight",1,SWIGTYPE_p_ofConePrimitive); } 
  result = (float)((ofConePrimitive const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofConePrimitive(void *obj) {
ofConePrimitive *arg1 = (ofConePrimitive *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofConePrimitive(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofConePrimitive);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofConePrimitive_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofConePrimitive_methods[]= {
    { "set", _wrap_ofConePrimitive_set},
    { "setResolutionRadius", _wrap_ofConePrimitive_setResolutionRadius},
    { "setResolutionHeight", _wrap_ofConePrimitive_setResolutionHeight},
    { "setResolutionCap", _wrap_ofConePrimitive_setResolutionCap},
    { "setResolution", _wrap_ofConePrimitive_setResolution},
    { "setMode", _wrap_ofConePrimitive_setMode},
    { "setRadius", _wrap_ofConePrimitive_setRadius},
    { "setHeight", _wrap_ofConePrimitive_setHeight},
    { "setTopColor", _wrap_ofConePrimitive_setTopColor},
    { "setCapColor", _wrap_ofConePrimitive_setCapColor},
    { "getConeIndices", _wrap_ofConePrimitive_getConeIndices},
    { "getConeMesh", _wrap_ofConePrimitive_getConeMesh},
    { "getCapIndices", _wrap_ofConePrimitive_getCapIndices},
    { "getCapMesh", _wrap_ofConePrimitive_getCapMesh},
    { "getResolutionRadius", _wrap_ofConePrimitive_getResolutionRadius},
    { "getResolutionHeight", _wrap_ofConePrimitive_getResolutionHeight},
    { "getResolutionCap", _wrap_ofConePrimitive_getResolutionCap},
    { "getResolution", _wrap_ofConePrimitive_getResolution},
    { "getRadius", _wrap_ofConePrimitive_getRadius},
    { "getHeight", _wrap_ofConePrimitive_getHeight},
    {0,0}
};
static swig_lua_method swig_ofConePrimitive_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofConePrimitive_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofConePrimitive_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofConePrimitive_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofConePrimitive_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofConePrimitive_Sf_SwigStatic = {
    "ofConePrimitive",
    swig_ofConePrimitive_Sf_SwigStatic_methods,
    swig_ofConePrimitive_Sf_SwigStatic_attributes,
    swig_ofConePrimitive_Sf_SwigStatic_constants,
    swig_ofConePrimitive_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofConePrimitive_bases[] = {0};
static const char *swig_ofConePrimitive_base_names[] = {0};
static swig_lua_class _wrap_class_ofConePrimitive = { "ofConePrimitive", "ofConePrimitive", &SWIGTYPE_p_ofConePrimitive,_proxy__wrap_new_ofConePrimitive, swig_delete_ofConePrimitive, swig_ofConePrimitive_methods, swig_ofConePrimitive_attributes, &swig_ofConePrimitive_Sf_SwigStatic, swig_ofConePrimitive_meta, swig_ofConePrimitive_bases, swig_ofConePrimitive_base_names };

static int _wrap_new_ofBoxPrimitive__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *result = 0 ;
  SWIG_check_num_args("ofBoxPrimitive::ofBoxPrimitive",0,0) result = (ofBoxPrimitive *)new ofBoxPrimitive();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBoxPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofBoxPrimitive__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ;
  int arg5 ; int arg6 ; ofBoxPrimitive *result = 0 ; SWIG_check_num_args("ofBoxPrimitive::ofBoxPrimitive",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",6,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  result = (ofBoxPrimitive *)new ofBoxPrimitive(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBoxPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofBoxPrimitive__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ;
  int arg5 ; ofBoxPrimitive *result = 0 ; SWIG_check_num_args("ofBoxPrimitive::ofBoxPrimitive",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",5,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); result = (ofBoxPrimitive *)new ofBoxPrimitive(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBoxPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofBoxPrimitive__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ;
  ofBoxPrimitive *result = 0 ; SWIG_check_num_args("ofBoxPrimitive::ofBoxPrimitive",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = (ofBoxPrimitive *)new ofBoxPrimitive(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBoxPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofBoxPrimitive__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofBoxPrimitive *result = 0 ; SWIG_check_num_args("ofBoxPrimitive::ofBoxPrimitive",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBoxPrimitive::ofBoxPrimitive",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (ofBoxPrimitive *)new ofBoxPrimitive(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBoxPrimitive,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofBoxPrimitive(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofBoxPrimitive__SWIG_0(L);}  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_new_ofBoxPrimitive__SWIG_4(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofBoxPrimitive__SWIG_3(L);}  }  }  }  } 
  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_new_ofBoxPrimitive__SWIG_2(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_new_ofBoxPrimitive__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofBoxPrimitive'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBoxPrimitive::ofBoxPrimitive()\n" "    ofBoxPrimitive::ofBoxPrimitive(float,float,float,int,int,int)\n"
  "    ofBoxPrimitive::ofBoxPrimitive(float,float,float,int,int)\n"
  "    ofBoxPrimitive::ofBoxPrimitive(float,float,float,int)\n" "    ofBoxPrimitive::ofBoxPrimitive(float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofBoxPrimitive_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; int arg5 ; int arg6 ; int arg7 ; SWIG_check_num_args("ofBoxPrimitive::set",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::set",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBoxPrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBoxPrimitive::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBoxPrimitive::set",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBoxPrimitive::set",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofBoxPrimitive::set",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_set",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); arg7 = (int)lua_tonumber(L, 7); (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofBoxPrimitive::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::set",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBoxPrimitive::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBoxPrimitive::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_set",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float arg2 ; SWIG_check_num_args("ofBoxPrimitive::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::set",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_set",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_set(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBoxPrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofBoxPrimitive_set__SWIG_2(L);}
       }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBoxPrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofBoxPrimitive_set__SWIG_1(L);}  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBoxPrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofBoxPrimitive_set__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBoxPrimitive_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBoxPrimitive::set(float,float,float,int,int,int)\n" "    ofBoxPrimitive::set(float,float,float)\n"
  "    ofBoxPrimitive::set(float)\n"); lua_error(L);return 0; }
static int _wrap_ofBoxPrimitive_setWidth(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float arg2 ; SWIG_check_num_args("ofBoxPrimitive::setWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setWidth",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setWidth",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setWidth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setHeight(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float arg2 ; SWIG_check_num_args("ofBoxPrimitive::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setHeight",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setHeight",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setDepth(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float arg2 ; SWIG_check_num_args("ofBoxPrimitive::setDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setDepth",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setDepth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setDepth",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDepth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_resizeToTexture(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  ofTexture *arg2 = 0 ; SWIG_check_num_args("ofBoxPrimitive::resizeToTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::resizeToTexture",1,"ofBoxPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBoxPrimitive::resizeToTexture",2,"ofTexture &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_resizeToTexture",1,SWIGTYPE_p_ofBoxPrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofBoxPrimitive_resizeToTexture",2,SWIGTYPE_p_ofTexture); }  (arg1)->resizeToTexture(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getSideIndices(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  int arg2 ; SwigValueWrapper< std::vector< ofIndexType > > result; SWIG_check_num_args("ofBoxPrimitive::getSideIndices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getSideIndices",1,"ofBoxPrimitive const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::getSideIndices",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getSideIndices",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofBoxPrimitive const *)arg1)->getSideIndices(arg2); {
    std::vector< ofIndexType > * resultptr = new std::vector< ofIndexType >((const std::vector< ofIndexType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getSideMesh(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  int arg2 ; ofMesh result; SWIG_check_num_args("ofBoxPrimitive::getSideMesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getSideMesh",1,"ofBoxPrimitive const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::getSideMesh",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getSideMesh",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofBoxPrimitive const *)arg1)->getSideMesh(arg2); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ; int arg2 ; SWIG_check_num_args("ofBoxPrimitive::setResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setResolution",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setResolution",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setResolutionWidth(lua_State* L) { int SWIG_arg = 0;
  ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ; int arg2 ; SWIG_check_num_args("ofBoxPrimitive::setResolutionWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setResolutionWidth",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setResolutionWidth",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setResolutionWidth",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolutionWidth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setResolutionHeight(lua_State* L) { int SWIG_arg = 0;
  ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ; int arg2 ; SWIG_check_num_args("ofBoxPrimitive::setResolutionHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setResolutionHeight",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setResolutionHeight",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setResolutionHeight",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolutionHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setResolutionDepth(lua_State* L) { int SWIG_arg = 0;
  ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ; int arg2 ; SWIG_check_num_args("ofBoxPrimitive::setResolutionDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setResolutionDepth",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setResolutionDepth",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setResolutionDepth",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setResolutionDepth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofBoxPrimitive::setResolution",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setResolution",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBoxPrimitive::setResolution",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBoxPrimitive::setResolution",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setResolution",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setResolution(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setResolution(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBoxPrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofBoxPrimitive_setResolution__SWIG_0(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofBoxPrimitive, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofBoxPrimitive_setResolution__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBoxPrimitive_setResolution'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBoxPrimitive::setResolution(int)\n"
  "    ofBoxPrimitive::setResolution(int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofBoxPrimitive_setMode(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  ofPrimitiveMode arg2 ; ofPrimitiveMode *argp2 ; SWIG_check_num_args("ofBoxPrimitive::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setMode",1,"ofBoxPrimitive *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBoxPrimitive::setMode",2,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setMode",1,SWIGTYPE_p_ofBoxPrimitive); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setMode",2,SWIGTYPE_p_ofPrimitiveMode); }  arg2 = *argp2; (arg1)->setMode(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_setSideColor(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  int arg2 ; ofColor arg3 ; ofColor *argp3 ; SWIG_check_num_args("ofBoxPrimitive::setSideColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::setSideColor",1,"ofBoxPrimitive *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBoxPrimitive::setSideColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBoxPrimitive::setSideColor",3,"ofColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setSideColor",1,SWIGTYPE_p_ofBoxPrimitive); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofBoxPrimitive_setSideColor",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg3 = *argp3;
  (arg1)->setSideColor(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getResolutionWidth(lua_State* L) { int SWIG_arg = 0;
  ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ; int result; SWIG_check_num_args("ofBoxPrimitive::getResolutionWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getResolutionWidth",1,"ofBoxPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getResolutionWidth",1,SWIGTYPE_p_ofBoxPrimitive); } 
  result = (int)((ofBoxPrimitive const *)arg1)->getResolutionWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getResolutionHeight(lua_State* L) { int SWIG_arg = 0;
  ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ; int result; SWIG_check_num_args("ofBoxPrimitive::getResolutionHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getResolutionHeight",1,"ofBoxPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getResolutionHeight",1,SWIGTYPE_p_ofBoxPrimitive); } 
  result = (int)((ofBoxPrimitive const *)arg1)->getResolutionHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getResolutionDepth(lua_State* L) { int SWIG_arg = 0;
  ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ; int result; SWIG_check_num_args("ofBoxPrimitive::getResolutionDepth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getResolutionDepth",1,"ofBoxPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getResolutionDepth",1,SWIGTYPE_p_ofBoxPrimitive); } 
  result = (int)((ofBoxPrimitive const *)arg1)->getResolutionDepth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getResolution(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  ofVec3f result; SWIG_check_num_args("ofBoxPrimitive::getResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getResolution",1,"ofBoxPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getResolution",1,SWIGTYPE_p_ofBoxPrimitive); } 
  result = ((ofBoxPrimitive const *)arg1)->getResolution(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getWidth(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float result; SWIG_check_num_args("ofBoxPrimitive::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getWidth",1,"ofBoxPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getWidth",1,SWIGTYPE_p_ofBoxPrimitive); } 
  result = (float)((ofBoxPrimitive const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getHeight(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float result; SWIG_check_num_args("ofBoxPrimitive::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getHeight",1,"ofBoxPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getHeight",1,SWIGTYPE_p_ofBoxPrimitive); } 
  result = (float)((ofBoxPrimitive const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getDepth(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  float result; SWIG_check_num_args("ofBoxPrimitive::getDepth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getDepth",1,"ofBoxPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getDepth",1,SWIGTYPE_p_ofBoxPrimitive); } 
  result = (float)((ofBoxPrimitive const *)arg1)->getDepth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBoxPrimitive_getSize(lua_State* L) { int SWIG_arg = 0; ofBoxPrimitive *arg1 = (ofBoxPrimitive *) 0 ;
  ofVec3f result; SWIG_check_num_args("ofBoxPrimitive::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBoxPrimitive::getSize",1,"ofBoxPrimitive const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBoxPrimitive,0))){
    SWIG_fail_ptr("ofBoxPrimitive_getSize",1,SWIGTYPE_p_ofBoxPrimitive); }  result = ((ofBoxPrimitive const *)arg1)->getSize();
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_ofBoxPrimitive(void *obj) {
ofBoxPrimitive *arg1 = (ofBoxPrimitive *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofBoxPrimitive(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofBoxPrimitive);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofBoxPrimitive_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofBoxPrimitive_methods[]= {
    { "set", _wrap_ofBoxPrimitive_set},
    { "setWidth", _wrap_ofBoxPrimitive_setWidth},
    { "setHeight", _wrap_ofBoxPrimitive_setHeight},
    { "setDepth", _wrap_ofBoxPrimitive_setDepth},
    { "resizeToTexture", _wrap_ofBoxPrimitive_resizeToTexture},
    { "getSideIndices", _wrap_ofBoxPrimitive_getSideIndices},
    { "getSideMesh", _wrap_ofBoxPrimitive_getSideMesh},
    { "setResolutionWidth", _wrap_ofBoxPrimitive_setResolutionWidth},
    { "setResolutionHeight", _wrap_ofBoxPrimitive_setResolutionHeight},
    { "setResolutionDepth", _wrap_ofBoxPrimitive_setResolutionDepth},
    { "setResolution", _wrap_ofBoxPrimitive_setResolution},
    { "setMode", _wrap_ofBoxPrimitive_setMode},
    { "setSideColor", _wrap_ofBoxPrimitive_setSideColor},
    { "getResolutionWidth", _wrap_ofBoxPrimitive_getResolutionWidth},
    { "getResolutionHeight", _wrap_ofBoxPrimitive_getResolutionHeight},
    { "getResolutionDepth", _wrap_ofBoxPrimitive_getResolutionDepth},
    { "getResolution", _wrap_ofBoxPrimitive_getResolution},
    { "getWidth", _wrap_ofBoxPrimitive_getWidth},
    { "getHeight", _wrap_ofBoxPrimitive_getHeight},
    { "getDepth", _wrap_ofBoxPrimitive_getDepth},
    { "getSize", _wrap_ofBoxPrimitive_getSize},
    {0,0}
};
static swig_lua_method swig_ofBoxPrimitive_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofBoxPrimitive_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofBoxPrimitive_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("SIDE_FRONT", ofBoxPrimitive::SIDE_FRONT)},
    {SWIG_LUA_CONSTTAB_INT("SIDE_RIGHT", ofBoxPrimitive::SIDE_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("SIDE_LEFT", ofBoxPrimitive::SIDE_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("SIDE_BACK", ofBoxPrimitive::SIDE_BACK)},
    {SWIG_LUA_CONSTTAB_INT("SIDE_TOP", ofBoxPrimitive::SIDE_TOP)},
    {SWIG_LUA_CONSTTAB_INT("SIDE_BOTTOM", ofBoxPrimitive::SIDE_BOTTOM)},
    {SWIG_LUA_CONSTTAB_INT("SIDES_TOTAL", ofBoxPrimitive::SIDES_TOTAL)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofBoxPrimitive_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofBoxPrimitive_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofBoxPrimitive_Sf_SwigStatic = {
    "ofBoxPrimitive",
    swig_ofBoxPrimitive_Sf_SwigStatic_methods,
    swig_ofBoxPrimitive_Sf_SwigStatic_attributes,
    swig_ofBoxPrimitive_Sf_SwigStatic_constants,
    swig_ofBoxPrimitive_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofBoxPrimitive_bases[] = {0};
static const char *swig_ofBoxPrimitive_base_names[] = {0};
static swig_lua_class _wrap_class_ofBoxPrimitive = { "ofBoxPrimitive", "ofBoxPrimitive", &SWIGTYPE_p_ofBoxPrimitive,_proxy__wrap_new_ofBoxPrimitive, swig_delete_ofBoxPrimitive, swig_ofBoxPrimitive_methods, swig_ofBoxPrimitive_attributes, &swig_ofBoxPrimitive_Sf_SwigStatic, swig_ofBoxPrimitive_meta, swig_ofBoxPrimitive_bases, swig_ofBoxPrimitive_base_names };

static int _wrap_ofInit(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofInit",0,0) ofInit(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupOpenGL(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; ofWindowMode arg3 ;
  SWIG_check_num_args("ofSetupOpenGL",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupOpenGL",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupOpenGL",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupOpenGL",3,"ofWindowMode"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (ofWindowMode)(int)lua_tonumber(L, 3); ofSetupOpenGL(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCreateWindow(lua_State* L) { int SWIG_arg = 0; ofWindowSettings *arg1 = 0 ;
  SwigValueWrapper< shared_ptr< ofAppBaseWindow > > result; SWIG_check_num_args("ofCreateWindow",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCreateWindow",1,"ofWindowSettings const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofWindowSettings,0))){
    SWIG_fail_ptr("ofCreateWindow",1,SWIGTYPE_p_ofWindowSettings); }  result = ofCreateWindow((ofWindowSettings const &)*arg1);
  {
    shared_ptr< ofAppBaseWindow > * resultptr = new shared_ptr< ofAppBaseWindow >((const shared_ptr< ofAppBaseWindow > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_ofAppBaseWindow_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetMainLoop(lua_State* L) { int SWIG_arg = 0; shared_ptr< ofMainLoop > result;
  SWIG_check_num_args("ofGetMainLoop",0,0) result = ofGetMainLoop(); {
    shared_ptr< ofMainLoop > * resultptr = new shared_ptr< ofMainLoop >((const shared_ptr< ofMainLoop > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_ofMainLoop_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetMainLoop(lua_State* L) { int SWIG_arg = 0; shared_ptr< ofMainLoop > arg1 ;
  shared_ptr< ofMainLoop > *argp1 ; SWIG_check_num_args("ofSetMainLoop",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetMainLoop",1,"shared_ptr< ofMainLoop >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_shared_ptrT_ofMainLoop_t,0))){
    SWIG_fail_ptr("ofSetMainLoop",1,SWIGTYPE_p_shared_ptrT_ofMainLoop_t); }  arg1 = *argp1; ofSetMainLoop(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRunApp__SWIG_0(lua_State* L) { int SWIG_arg = 0; SwigValueWrapper< shared_ptr< ofBaseApp > > arg1 ;
  shared_ptr< ofBaseApp > *argp1 ; int result; SWIG_check_num_args("ofRunApp",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRunApp",1,"shared_ptr< ofBaseApp >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_shared_ptrT_ofBaseApp_t,0))){
    SWIG_fail_ptr("ofRunApp",1,SWIGTYPE_p_shared_ptrT_ofBaseApp_t); }  arg1 = *argp1; result = (int)ofRunApp(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRunApp__SWIG_1(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofRunApp",0,0)
  result = (int)ofRunApp(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRunApp__SWIG_2(lua_State* L) { int SWIG_arg = 0; SwigValueWrapper< shared_ptr< ofAppBaseWindow > > arg1 ;
  SwigValueWrapper< shared_ptr< ofBaseApp > > arg2 ; shared_ptr< ofAppBaseWindow > *argp1 ; shared_ptr< ofBaseApp > *argp2 ;
  SWIG_check_num_args("ofRunApp",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRunApp",1,"shared_ptr< ofAppBaseWindow >");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRunApp",2,"shared_ptr< ofBaseApp >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_shared_ptrT_ofAppBaseWindow_t,0))){
    SWIG_fail_ptr("ofRunApp",1,SWIGTYPE_p_shared_ptrT_ofAppBaseWindow_t); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_shared_ptrT_ofBaseApp_t,0))){
    SWIG_fail_ptr("ofRunApp",2,SWIGTYPE_p_shared_ptrT_ofBaseApp_t); }  arg2 = *argp2; ofRunApp(arg1,arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRunApp(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofRunApp__SWIG_1(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_shared_ptrT_ofBaseApp_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofRunApp__SWIG_0(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_shared_ptrT_ofAppBaseWindow_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_shared_ptrT_ofBaseApp_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofRunApp__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRunApp'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRunApp(shared_ptr< ofBaseApp >)\n" "    ofRunApp()\n"
  "    ofRunApp(shared_ptr< ofAppBaseWindow >,shared_ptr< ofBaseApp >)\n"); lua_error(L);return 0; }
static int _wrap_ofRunMainLoop(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofRunMainLoop",0,0)
  result = (int)ofRunMainLoop(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetAppPtr(lua_State* L) { int SWIG_arg = 0; ofBaseApp *result = 0 ; SWIG_check_num_args("ofGetAppPtr",0,0)
  result = (ofBaseApp *)ofGetAppPtr(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBaseApp,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofExit__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofExit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofExit",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofExit(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofExit__SWIG_1(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofExit",0,0) ofExit(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofExit(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofExit__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_ofExit__SWIG_0(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofExit'\n"
  "  Possible C/C++ prototypes are:\n" "    ofExit(int)\n" "    ofExit()\n"); lua_error(L);return 0; }
static int _wrap_ofGetFrameRate(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofGetFrameRate",0,0)
  result = (float)ofGetFrameRate(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetTargetFrameRate(lua_State* L) { int SWIG_arg = 0; float result;
  SWIG_check_num_args("ofGetTargetFrameRate",0,0) result = (float)ofGetTargetFrameRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetFrameRate(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSetFrameRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetFrameRate",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSetFrameRate(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetLastFrameTime(lua_State* L) { int SWIG_arg = 0; double result;
  SWIG_check_num_args("ofGetLastFrameTime",0,0) result = (double)ofGetLastFrameTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetOrientation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofOrientation arg1 ; bool arg2 ;
  SWIG_check_num_args("ofSetOrientation",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetOrientation",1,"ofOrientation");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSetOrientation",2,"bool"); arg1 = (ofOrientation)(int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0); ofSetOrientation(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetOrientation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofOrientation arg1 ;
  SWIG_check_num_args("ofSetOrientation",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetOrientation",1,"ofOrientation");
  arg1 = (ofOrientation)(int)lua_tonumber(L, 1); ofSetOrientation(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetOrientation(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofSetOrientation__SWIG_1(L);}  }  if (argc == 2) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofSetOrientation__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetOrientation'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetOrientation(ofOrientation,bool)\n" "    ofSetOrientation(ofOrientation)\n"); lua_error(L);return 0; }
static int _wrap_ofGetOrientation(lua_State* L) { int SWIG_arg = 0; ofOrientation result;
  SWIG_check_num_args("ofGetOrientation",0,0) result = (ofOrientation)ofGetOrientation();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofHideCursor(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofHideCursor",0,0) ofHideCursor();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShowCursor(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofShowCursor",0,0) ofShowCursor();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWindowPositionX(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetWindowPositionX",0,0) result = (int)ofGetWindowPositionX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWindowPositionY(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetWindowPositionY",0,0) result = (int)ofGetWindowPositionY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetScreenWidth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetScreenWidth",0,0)
  result = (int)ofGetScreenWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetScreenHeight(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetScreenHeight",0,0)
  result = (int)ofGetScreenHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWindowMode(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWindowMode",0,0)
  result = (int)ofGetWindowMode(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWidth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWidth",0,0)
  result = (int)ofGetWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetHeight(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetHeight",0,0)
  result = (int)ofGetHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWindowWidth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWindowWidth",0,0)
  result = (int)ofGetWindowWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWindowHeight(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWindowHeight",0,0)
  result = (int)ofGetWindowHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRandomWidth(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofRandomWidth",0,0)
  result = (float)ofRandomWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRandomHeight(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofRandomHeight",0,0)
  result = (float)ofRandomHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDoesHWOrientation(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofDoesHWOrientation",0,0) result = (bool)ofDoesHWOrientation();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWindowSize(lua_State* L) { int SWIG_arg = 0; ofPoint result; SWIG_check_num_args("ofGetWindowSize",0,0)
  result = ofGetWindowSize(); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWindowRect(lua_State* L) { int SWIG_arg = 0; ofRectangle result;
  SWIG_check_num_args("ofGetWindowRect",0,0) result = ofGetWindowRect(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetWindowPtr(lua_State* L) { int SWIG_arg = 0; ofAppBaseWindow *result = 0 ;
  SWIG_check_num_args("ofGetWindowPtr",0,0) result = (ofAppBaseWindow *)ofGetWindowPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofAppBaseWindow,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetWindowPosition(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetWindowPosition",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetWindowPosition",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetWindowPosition",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetWindowPosition(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetWindowShape(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetWindowShape",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetWindowShape",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetWindowShape",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetWindowShape(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetWindowTitle(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  SWIG_check_num_args("ofSetWindowTitle",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSetWindowTitle",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); ofSetWindowTitle(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableSetupScreen(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableSetupScreen",0,0)
  ofEnableSetupScreen(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableSetupScreen(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableSetupScreen",0,0)
  ofDisableSetupScreen(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetFullscreen(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSetFullscreen",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetFullscreen",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofSetFullscreen(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofToggleFullscreen(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofToggleFullscreen",0,0)
  ofToggleFullscreen(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetVerticalSync(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSetVerticalSync",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetVerticalSync",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofSetVerticalSync(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEvents(lua_State* L) { int SWIG_arg = 0; ofCoreEvents *result = 0 ; SWIG_check_num_args("ofEvents",0,0)
  result = (ofCoreEvents *) &ofEvents(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofCoreEvents,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetCurrentRenderer__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  SwigValueWrapper< shared_ptr< ofBaseRenderer > > arg1 ; bool arg2 ; shared_ptr< ofBaseRenderer > *argp1 ;
  SWIG_check_num_args("ofSetCurrentRenderer",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetCurrentRenderer",1,"shared_ptr< ofBaseRenderer >");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSetCurrentRenderer",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t,0))){
    SWIG_fail_ptr("ofSetCurrentRenderer",1,SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t); }  arg1 = *argp1;
  arg2 = (lua_toboolean(L, 2)!=0); ofSetCurrentRenderer(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetCurrentRenderer__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  SwigValueWrapper< shared_ptr< ofBaseRenderer > > arg1 ; shared_ptr< ofBaseRenderer > *argp1 ;
  SWIG_check_num_args("ofSetCurrentRenderer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetCurrentRenderer",1,"shared_ptr< ofBaseRenderer >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t,0))){
    SWIG_fail_ptr("ofSetCurrentRenderer",1,SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t); }  arg1 = *argp1;
  ofSetCurrentRenderer(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetCurrentRenderer(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSetCurrentRenderer__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofSetCurrentRenderer__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetCurrentRenderer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetCurrentRenderer(shared_ptr< ofBaseRenderer >,bool)\n"
  "    ofSetCurrentRenderer(shared_ptr< ofBaseRenderer >)\n"); lua_error(L);return 0; }
static int _wrap_ofGetCurrentRenderer(lua_State* L) { int SWIG_arg = 0; shared_ptr< ofBaseRenderer > *result = 0 ;
  SWIG_check_num_args("ofGetCurrentRenderer",0,0) result = (shared_ptr< ofBaseRenderer > *) &ofGetCurrentRenderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_shared_ptrT_ofBaseRenderer_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSetEscapeQuitsApp(lua_State* L) { int SWIG_arg = 0; bool arg1 ;
  SWIG_check_num_args("ofSetEscapeQuitsApp",1,1) if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetEscapeQuitsApp",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0); ofSetEscapeQuitsApp(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofEnableLighting(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableLighting",0,0)
  ofEnableLighting(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableLighting(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableLighting",0,0)
  ofDisableLighting(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableSeparateSpecularLight(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofEnableSeparateSpecularLight",0,0) ofEnableSeparateSpecularLight(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableSeparateSpecularLight(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofDisableSeparateSpecularLight",0,0) ofDisableSeparateSpecularLight(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetLightingEnabled(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofGetLightingEnabled",0,0) result = (bool)ofGetLightingEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetSmoothLighting(lua_State* L) { int SWIG_arg = 0; bool arg1 ;
  SWIG_check_num_args("ofSetSmoothLighting",1,1) if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetSmoothLighting",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0); ofSetSmoothLighting(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetGlobalAmbientColor(lua_State* L) { int SWIG_arg = 0; ofFloatColor *arg1 = 0 ;
  SWIG_check_num_args("ofSetGlobalAmbientColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetGlobalAmbientColor",1,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofSetGlobalAmbientColor",1,SWIGTYPE_p_ofColor_T_float_t); } 
  ofSetGlobalAmbientColor((ofColor_< float > const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetGlobalAmbientColor(lua_State* L) { int SWIG_arg = 0; ofFloatColor *result = 0 ;
  SWIG_check_num_args("ofGetGlobalAmbientColor",0,0) result = (ofFloatColor *) &ofGetGlobalAmbientColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofLight(lua_State* L) { int SWIG_arg = 0; ofLight *result = 0 ; SWIG_check_num_args("ofLight::ofLight",0,0)
  result = (ofLight *)new ofLight(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofLight,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setup(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setup",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setup",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setup",1,SWIGTYPE_p_ofLight); }  (arg1)->setup(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_enable(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::enable",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::enable",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_enable",1,SWIGTYPE_p_ofLight); }  (arg1)->enable(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_disable(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::disable",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::disable",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_disable",1,SWIGTYPE_p_ofLight); }  (arg1)->disable(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getIsEnabled(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsEnabled",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getIsEnabled",1,SWIGTYPE_p_ofLight); }  result = (bool)((ofLight const *)arg1)->getIsEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setDirectional(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setDirectional",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setDirectional",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setDirectional",1,SWIGTYPE_p_ofLight); }  (arg1)->setDirectional(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getIsDirectional(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsDirectional",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsDirectional",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getIsDirectional",1,SWIGTYPE_p_ofLight); } 
  result = (bool)((ofLight const *)arg1)->getIsDirectional(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setSpotlight__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofLight::setSpotlight",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotlight",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setSpotlight",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLight::setSpotlight",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setSpotlight",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setSpotlight(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofLight_setSpotlight__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  SWIG_check_num_args("ofLight::setSpotlight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotlight",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setSpotlight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setSpotlight",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setSpotlight(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setSpotlight__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setSpotlight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotlight",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setSpotlight",1,SWIGTYPE_p_ofLight); }  (arg1)->setSpotlight(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setSpotlight(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofLight_setSpotlight__SWIG_2(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofLight_setSpotlight__SWIG_1(L);}  }  }
   if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofLight_setSpotlight__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofLight_setSpotlight'\n"
  "  Possible C/C++ prototypes are:\n" "    ofLight::setSpotlight(float,float)\n" "    ofLight::setSpotlight(float)\n"
  "    ofLight::setSpotlight()\n"); lua_error(L);return 0; }
static int _wrap_ofLight_getIsSpotlight(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsSpotlight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsSpotlight",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getIsSpotlight",1,SWIGTYPE_p_ofLight); }  result = (bool)((ofLight const *)arg1)->getIsSpotlight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setSpotlightCutOff(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  SWIG_check_num_args("ofLight::setSpotlightCutOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotlightCutOff",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setSpotlightCutOff",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setSpotlightCutOff",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpotlightCutOff(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getSpotlightCutOff(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getSpotlightCutOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getSpotlightCutOff",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getSpotlightCutOff",1,SWIGTYPE_p_ofLight); } 
  result = (float)((ofLight const *)arg1)->getSpotlightCutOff(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setSpotConcentration(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  SWIG_check_num_args("ofLight::setSpotConcentration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotConcentration",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setSpotConcentration",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setSpotConcentration",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpotConcentration(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getSpotConcentration(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getSpotConcentration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getSpotConcentration",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getSpotConcentration",1,SWIGTYPE_p_ofLight); } 
  result = (float)((ofLight const *)arg1)->getSpotConcentration(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setPointLight(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setPointLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setPointLight",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setPointLight",1,SWIGTYPE_p_ofLight); }  (arg1)->setPointLight(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getIsPointLight(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsPointLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsPointLight",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getIsPointLight",1,SWIGTYPE_p_ofLight); }  result = (bool)((ofLight const *)arg1)->getIsPointLight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setAttenuation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofLight::setAttenuation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAttenuation",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setAttenuation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLight::setAttenuation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofLight::setAttenuation",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setAttenuation",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setAttenuation(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setAttenuation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofLight::setAttenuation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAttenuation",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setAttenuation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLight::setAttenuation",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setAttenuation",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAttenuation(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofLight_setAttenuation__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  SWIG_check_num_args("ofLight::setAttenuation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAttenuation",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setAttenuation",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setAttenuation",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAttenuation(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setAttenuation__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setAttenuation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAttenuation",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setAttenuation",1,SWIGTYPE_p_ofLight); }  (arg1)->setAttenuation(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setAttenuation(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofLight_setAttenuation__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofLight_setAttenuation__SWIG_2(L);}  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofLight_setAttenuation__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofLight_setAttenuation__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofLight_setAttenuation'\n"
  "  Possible C/C++ prototypes are:\n" "    ofLight::setAttenuation(float,float,float)\n"
  "    ofLight::setAttenuation(float,float)\n" "    ofLight::setAttenuation(float)\n" "    ofLight::setAttenuation()\n");
  lua_error(L);return 0; }
static int _wrap_ofLight_getAttenuationConstant(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getAttenuationConstant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getAttenuationConstant",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getAttenuationConstant",1,SWIGTYPE_p_ofLight); } 
  result = (float)((ofLight const *)arg1)->getAttenuationConstant(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getAttenuationLinear(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getAttenuationLinear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getAttenuationLinear",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getAttenuationLinear",1,SWIGTYPE_p_ofLight); } 
  result = (float)((ofLight const *)arg1)->getAttenuationLinear(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getAttenuationQuadratic(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getAttenuationQuadratic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getAttenuationQuadratic",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getAttenuationQuadratic",1,SWIGTYPE_p_ofLight); } 
  result = (float)((ofLight const *)arg1)->getAttenuationQuadratic(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setAreaLight(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofLight::setAreaLight",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAreaLight",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setAreaLight",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLight::setAreaLight",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setAreaLight",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAreaLight(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofLight_getIsAreaLight(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsAreaLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsAreaLight",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getIsAreaLight",1,SWIGTYPE_p_ofLight); }  result = (bool)((ofLight const *)arg1)->getIsAreaLight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getType(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; int result;
  SWIG_check_num_args("ofLight::getType",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getType",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getType",1,SWIGTYPE_p_ofLight); }  result = (int)((ofLight const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setAmbientColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ; SWIG_check_num_args("ofLight::setAmbientColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAmbientColor",1,"ofLight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLight::setAmbientColor",2,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setAmbientColor",1,SWIGTYPE_p_ofLight); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofLight_setAmbientColor",2,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setAmbientColor((ofFloatColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setDiffuseColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ; SWIG_check_num_args("ofLight::setDiffuseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setDiffuseColor",1,"ofLight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLight::setDiffuseColor",2,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setDiffuseColor",1,SWIGTYPE_p_ofLight); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofLight_setDiffuseColor",2,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setDiffuseColor((ofFloatColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_setSpecularColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ; SWIG_check_num_args("ofLight::setSpecularColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpecularColor",1,"ofLight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLight::setSpecularColor",2,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_setSpecularColor",1,SWIGTYPE_p_ofLight); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofLight_setSpecularColor",2,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setSpecularColor((ofFloatColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getAmbientColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; ofFloatColor result;
  SWIG_check_num_args("ofLight::getAmbientColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getAmbientColor",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getAmbientColor",1,SWIGTYPE_p_ofLight); }  result = ((ofLight const *)arg1)->getAmbientColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getDiffuseColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; ofFloatColor result;
  SWIG_check_num_args("ofLight::getDiffuseColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getDiffuseColor",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getDiffuseColor",1,SWIGTYPE_p_ofLight); }  result = ((ofLight const *)arg1)->getDiffuseColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getSpecularColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; ofFloatColor result;
  SWIG_check_num_args("ofLight::getSpecularColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getSpecularColor",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getSpecularColor",1,SWIGTYPE_p_ofLight); }  result = ((ofLight const *)arg1)->getSpecularColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLight_getLightID(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; int result;
  SWIG_check_num_args("ofLight::getLightID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getLightID",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("ofLight_getLightID",1,SWIGTYPE_p_ofLight); }  result = (int)((ofLight const *)arg1)->getLightID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofLight(void *obj) {
ofLight *arg1 = (ofLight *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofLight(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofLight);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofLight_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofLight_methods[]= {
    { "setup", _wrap_ofLight_setup},
    { "enable", _wrap_ofLight_enable},
    { "disable", _wrap_ofLight_disable},
    { "getIsEnabled", _wrap_ofLight_getIsEnabled},
    { "setDirectional", _wrap_ofLight_setDirectional},
    { "getIsDirectional", _wrap_ofLight_getIsDirectional},
    { "setSpotlight", _wrap_ofLight_setSpotlight},
    { "getIsSpotlight", _wrap_ofLight_getIsSpotlight},
    { "setSpotlightCutOff", _wrap_ofLight_setSpotlightCutOff},
    { "getSpotlightCutOff", _wrap_ofLight_getSpotlightCutOff},
    { "setSpotConcentration", _wrap_ofLight_setSpotConcentration},
    { "getSpotConcentration", _wrap_ofLight_getSpotConcentration},
    { "setPointLight", _wrap_ofLight_setPointLight},
    { "getIsPointLight", _wrap_ofLight_getIsPointLight},
    { "setAttenuation", _wrap_ofLight_setAttenuation},
    { "getAttenuationConstant", _wrap_ofLight_getAttenuationConstant},
    { "getAttenuationLinear", _wrap_ofLight_getAttenuationLinear},
    { "getAttenuationQuadratic", _wrap_ofLight_getAttenuationQuadratic},
    { "setAreaLight", _wrap_ofLight_setAreaLight},
    { "getIsAreaLight", _wrap_ofLight_getIsAreaLight},
    { "getType", _wrap_ofLight_getType},
    { "setAmbientColor", _wrap_ofLight_setAmbientColor},
    { "setDiffuseColor", _wrap_ofLight_setDiffuseColor},
    { "setSpecularColor", _wrap_ofLight_setSpecularColor},
    { "getAmbientColor", _wrap_ofLight_getAmbientColor},
    { "getDiffuseColor", _wrap_ofLight_getDiffuseColor},
    { "getSpecularColor", _wrap_ofLight_getSpecularColor},
    { "getLightID", _wrap_ofLight_getLightID},
    {0,0}
};
static swig_lua_method swig_ofLight_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofLight_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofLight_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofLight_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofLight_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofLight_Sf_SwigStatic = {
    "ofLight",
    swig_ofLight_Sf_SwigStatic_methods,
    swig_ofLight_Sf_SwigStatic_attributes,
    swig_ofLight_Sf_SwigStatic_constants,
    swig_ofLight_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofLight_bases[] = {0,0};
static const char *swig_ofLight_base_names[] = {"ofNode *",0};
static swig_lua_class _wrap_class_ofLight = { "ofLight", "ofLight", &SWIGTYPE_p_ofLight,_proxy__wrap_new_ofLight, swig_delete_ofLight, swig_ofLight_methods, swig_ofLight_attributes, &swig_ofLight_Sf_SwigStatic, swig_ofLight_meta, swig_ofLight_bases, swig_ofLight_base_names };

static int _wrap_ofLightsData(lua_State* L) { int SWIG_arg = 0; std::vector< weak_ptr< ofLight::Data > > *result = 0 ;
  SWIG_check_num_args("ofLightsData",0,0) result = (std::vector< weak_ptr< ofLight::Data > > *) &ofLightsData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_weak_ptrT_ofLight__Data_t_t,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofMaterial(lua_State* L) { int SWIG_arg = 0; ofMaterial *result = 0 ;
  SWIG_check_num_args("ofMaterial::ofMaterial",0,0) result = (ofMaterial *)new ofMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMaterial,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMaterial_setColors(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ; ofFloatColor arg3 ; ofFloatColor arg4 ; ofFloatColor arg5 ; ofFloatColor *argp2 ; ofFloatColor *argp3 ;
  ofFloatColor *argp4 ; ofFloatColor *argp5 ; SWIG_check_num_args("ofMaterial::setColors",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setColors",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setColors",2,"ofFloatColor");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMaterial::setColors",3,"ofFloatColor");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMaterial::setColors",4,"ofFloatColor");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMaterial::setColors",5,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("ofMaterial_setColors",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMaterial_setColors",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMaterial_setColors",3,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMaterial_setColors",4,SWIGTYPE_p_ofColor_T_float_t); }  arg4 = *argp4;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMaterial_setColors",5,SWIGTYPE_p_ofColor_T_float_t); }  arg5 = *argp5;
  (arg1)->setColors(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMaterial_setDiffuseColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ; ofFloatColor *argp2 ; SWIG_check_num_args("ofMaterial::setDiffuseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setDiffuseColor",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setDiffuseColor",2,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("ofMaterial_setDiffuseColor",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMaterial_setDiffuseColor",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2; (arg1)->setDiffuseColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMaterial_setAmbientColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ; ofFloatColor *argp2 ; SWIG_check_num_args("ofMaterial::setAmbientColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setAmbientColor",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setAmbientColor",2,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("ofMaterial_setAmbientColor",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMaterial_setAmbientColor",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2; (arg1)->setAmbientColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMaterial_setSpecularColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ; ofFloatColor *argp2 ; SWIG_check_num_args("ofMaterial::setSpecularColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setSpecularColor",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setSpecularColor",2,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("ofMaterial_setSpecularColor",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMaterial_setSpecularColor",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2;
  (arg1)->setSpecularColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMaterial_setEmissiveColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofFloatColor arg2 ; ofFloatColor *argp2 ; SWIG_check_num_args("ofMaterial::setEmissiveColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setEmissiveColor",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setEmissiveColor",2,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("ofMaterial_setEmissiveColor",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMaterial_setEmissiveColor",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2;
  (arg1)->setEmissiveColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMaterial_setShininess(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMaterial::setShininess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setShininess",1,"ofMaterial *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMaterial::setShininess",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("ofMaterial_setShininess",1,SWIGTYPE_p_ofMaterial); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setShininess(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMaterial_getData(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofMaterial::Data result; SWIG_check_num_args("ofMaterial::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::getData",1,"ofMaterial const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("ofMaterial_getData",1,SWIGTYPE_p_ofMaterial); }  result = ((ofMaterial const *)arg1)->getData(); {
    ofMaterial::Data * resultptr = new ofMaterial::Data((const ofMaterial::Data &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMaterial__Data,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMaterial_setData(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  ofMaterial::Data *arg2 = 0 ; SWIG_check_num_args("ofMaterial::setData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setData",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setData",2,"ofMaterial::Data const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("ofMaterial_setData",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMaterial__Data,0))){
    SWIG_fail_ptr("ofMaterial_setData",2,SWIGTYPE_p_ofMaterial__Data); }  (arg1)->setData((ofMaterial::Data const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofMaterial(void *obj) {
ofMaterial *arg1 = (ofMaterial *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofMaterial(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofMaterial);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofMaterial_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMaterial_methods[]= {
    { "setColors", _wrap_ofMaterial_setColors},
    { "setDiffuseColor", _wrap_ofMaterial_setDiffuseColor},
    { "setAmbientColor", _wrap_ofMaterial_setAmbientColor},
    { "setSpecularColor", _wrap_ofMaterial_setSpecularColor},
    { "setEmissiveColor", _wrap_ofMaterial_setEmissiveColor},
    { "setShininess", _wrap_ofMaterial_setShininess},
    { "getData", _wrap_ofMaterial_getData},
    { "setData", _wrap_ofMaterial_setData},
    {0,0}
};
static swig_lua_method swig_ofMaterial_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofMaterial_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofMaterial_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofMaterial_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofMaterial_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofMaterial_Sf_SwigStatic = {
    "ofMaterial",
    swig_ofMaterial_Sf_SwigStatic_methods,
    swig_ofMaterial_Sf_SwigStatic_attributes,
    swig_ofMaterial_Sf_SwigStatic_constants,
    swig_ofMaterial_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofMaterial_bases[] = {0,0};
static const char *swig_ofMaterial_base_names[] = {"ofBaseMaterial *",0};
static swig_lua_class _wrap_class_ofMaterial = { "ofMaterial", "ofMaterial", &SWIGTYPE_p_ofMaterial,_proxy__wrap_new_ofMaterial, swig_delete_ofMaterial, swig_ofMaterial_methods, swig_ofMaterial_attributes, &swig_ofMaterial_Sf_SwigStatic, swig_ofMaterial_meta, swig_ofMaterial_bases, swig_ofMaterial_base_names };

static int _wrap_new_ofShader__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *result = 0 ;
  SWIG_check_num_args("ofShader::ofShader",0,0) result = (ofShader *)new ofShader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofShader,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofShader__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = 0 ; ofShader *result = 0 ;
  SWIG_check_num_args("ofShader::ofShader",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofShader::ofShader",1,"ofShader const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("new_ofShader",1,SWIGTYPE_p_ofShader); }  result = (ofShader *)new ofShader((ofShader const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofShader,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofShader(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofShader__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_ofShader__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofShader'\n" "  Possible C/C++ prototypes are:\n"
  "    ofShader::ofShader()\n" "    ofShader::ofShader(ofShader const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShader_load__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string arg2 ;
  bool result; SWIG_check_num_args("ofShader::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::load",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_load",1,SWIGTYPE_p_ofShader); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->load(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_load__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string arg2 ;
  std::string arg3 ; std::string arg4 ; bool result; SWIG_check_num_args("ofShader::load",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::load",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::load",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::load",3,"std::string");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofShader::load",4,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_load",1,SWIGTYPE_p_ofShader); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
  result = (bool)(arg1)->load(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_load__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string arg2 ;
  std::string arg3 ; bool result; SWIG_check_num_args("ofShader::load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::load",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::load",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::load",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_load",1,SWIGTYPE_p_ofShader); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (bool)(arg1)->load(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_load(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_ofShader_load__SWIG_0(L);}  }  }
   if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_ofShader_load__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isstring(L,argv[3]); }  if (_v) { return _wrap_ofShader_load__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_load'\n" "  Possible C/C++ prototypes are:\n"
  "    ofShader::load(std::string)\n" "    ofShader::load(std::string,std::string,std::string)\n"
  "    ofShader::load(std::string,std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setGeometryInputType(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  GLenum *argp2 ; SWIG_check_num_args("ofShader::setGeometryInputType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setGeometryInputType",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setGeometryInputType",2,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setGeometryInputType",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofShader_setGeometryInputType",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2; (arg1)->setGeometryInputType(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setGeometryOutputType(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  GLenum arg2 ; GLenum *argp2 ; SWIG_check_num_args("ofShader::setGeometryOutputType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setGeometryOutputType",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setGeometryOutputType",2,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setGeometryOutputType",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofShader_setGeometryOutputType",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2; (arg1)->setGeometryOutputType(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setGeometryOutputCount(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; int arg2 ;
  SWIG_check_num_args("ofShader::setGeometryOutputCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setGeometryOutputCount",1,"ofShader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofShader::setGeometryOutputCount",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setGeometryOutputCount",1,SWIGTYPE_p_ofShader); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setGeometryOutputCount(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_getGeometryMaxOutputCount(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  int result; SWIG_check_num_args("ofShader::getGeometryMaxOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getGeometryMaxOutputCount",1,"ofShader const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_getGeometryMaxOutputCount",1,SWIGTYPE_p_ofShader); } 
  result = (int)((ofShader const *)arg1)->getGeometryMaxOutputCount(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_unload(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::unload",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::unload",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_unload",1,SWIGTYPE_p_ofShader); }  (arg1)->unload(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_isLoaded(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; bool result;
  SWIG_check_num_args("ofShader::isLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::isLoaded",1,"ofShader const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_isLoaded",1,SWIGTYPE_p_ofShader); }  result = (bool)((ofShader const *)arg1)->isLoaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_beginShader(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::begin",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::begin",1,"ofShader const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_beginShader",1,SWIGTYPE_p_ofShader); }  ((ofShader const *)arg1)->begin(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_endShader(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::end",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::end",1,"ofShader const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_endShader",1,SWIGTYPE_p_ofShader); }  ((ofShader const *)arg1)->end(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniformTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofBaseHasTexture *arg3 = 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniformTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformTexture",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformTexture",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformTexture",3,"ofBaseHasTexture const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniformTexture",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniformTexture",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofBaseHasTexture,0))){
    SWIG_fail_ptr("ofShader_setUniformTexture",3,SWIGTYPE_p_ofBaseHasTexture); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniformTexture((std::string const &)*arg2,(ofBaseHasTexture const &)*arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniformTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofTexture *arg3 = 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniformTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformTexture",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformTexture",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformTexture",3,"ofTexture const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniformTexture",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniformTexture",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("ofShader_setUniformTexture",3,SWIGTYPE_p_ofTexture); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniformTexture((std::string const &)*arg2,(ofTexture const &)*arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniformTexture__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int arg3 ; GLint arg4 ; int arg5 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniformTexture",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformTexture",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformTexture",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniformTexture",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniformTexture",4,"GLint");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniformTexture",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniformTexture",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  arg4 = (GLint)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  ((ofShader const *)arg1)->setUniformTexture((std::string const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniformTexture(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofBaseHasTexture, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShader_setUniformTexture__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShader_setUniformTexture__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofShader_setUniformTexture__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniformTexture'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofShader::setUniformTexture(std::string const &,ofBaseHasTexture const &,int) const\n"
  "    ofShader::setUniformTexture(std::string const &,ofTexture const &,int) const\n"
  "    ofShader::setUniformTexture(std::string const &,int,GLint,int) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform1i(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int arg3 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform1i",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1i",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1i",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform1i",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform1i",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  ((ofShader const *)arg1)->setUniform1i((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShader_setUniform2i(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int arg3 ; int arg4 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2i",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2i",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2i",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform2i",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform2i",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform2i",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform2i((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform3i(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform3i",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3i",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3i",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform3i",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform3i",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniform3i",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform3i",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); ((ofShader const *)arg1)->setUniform3i((std::string const &)*arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform4i(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform4i",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4i",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4i",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform4i",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform4i",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniform4i",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofShader::setUniform4i",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform4i",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  ((ofShader const *)arg1)->setUniform4i((std::string const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform1f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float arg3 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform1f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1f",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform1f",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform1f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (float)lua_tonumber(L, 3);
  ((ofShader const *)arg1)->setUniform1f((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShader_setUniform2f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float arg3 ; float arg4 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2f",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2f",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform2f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform2f",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform2f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ((ofShader const *)arg1)->setUniform2f((std::string const &)*arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform3f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform3f",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3f",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform3f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform3f",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniform3f",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform3f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofShader const *)arg1)->setUniform3f((std::string const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform4f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform4f",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4f",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform4f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform4f",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniform4f",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofShader::setUniform4f",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform4f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  ((ofShader const *)arg1)->setUniform4f((std::string const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform2f__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofVec2f *arg3 = 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2f",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniform2f",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform2f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofShader_setUniform2f",3,SWIGTYPE_p_ofVec2f); } 
  ((ofShader const *)arg1)->setUniform2f((std::string const &)*arg2,(ofVec2f const &)*arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform2f(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform2f__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShader_setUniform2f__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform2f'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform2f(std::string const &,float,float) const\n"
  "    ofShader::setUniform2f(std::string const &,ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform3f__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofVec3f *arg3 = 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform3f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3f",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniform3f",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform3f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofShader_setUniform3f",3,SWIGTYPE_p_ofVec3f); } 
  ((ofShader const *)arg1)->setUniform3f((std::string const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform3f(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform3f__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofShader_setUniform3f__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform3f'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform3f(std::string const &,float,float,float) const\n"
  "    ofShader::setUniform3f(std::string const &,ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform4f__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofVec4f *arg3 = 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform4f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4f",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniform4f",3,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform4f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofShader_setUniform4f",3,SWIGTYPE_p_ofVec4f); } 
  ((ofShader const *)arg1)->setUniform4f((std::string const &)*arg2,(ofVec4f const &)*arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform4f(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform4f__SWIG_1(L);}  }  }  }  if (argc == 6) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofShader_setUniform4f__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform4f'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform4f(std::string const &,float,float,float,float) const\n"
  "    ofShader::setUniform4f(std::string const &,ofVec4f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform1iv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform1iv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1iv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform1iv",3,"int const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform1iv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform1iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ofShader_setUniform1iv",3,SWIGTYPE_p_int); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform1iv((std::string const &)*arg2,(int const *)arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform1iv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform1iv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1iv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform1iv",3,"int const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform1iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ofShader_setUniform1iv",3,SWIGTYPE_p_int); } 
  ((ofShader const *)arg1)->setUniform1iv((std::string const &)*arg2,(int const *)arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform1iv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform1iv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShader_setUniform1iv__SWIG_0(L);}
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform1iv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform1iv(std::string const &,int const *,int) const\n"
  "    ofShader::setUniform1iv(std::string const &,int const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform2iv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform2iv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2iv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform2iv",3,"int const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform2iv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform2iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ofShader_setUniform2iv",3,SWIGTYPE_p_int); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform2iv((std::string const &)*arg2,(int const *)arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform2iv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2iv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2iv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform2iv",3,"int const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform2iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ofShader_setUniform2iv",3,SWIGTYPE_p_int); } 
  ((ofShader const *)arg1)->setUniform2iv((std::string const &)*arg2,(int const *)arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform2iv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform2iv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShader_setUniform2iv__SWIG_0(L);}
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform2iv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform2iv(std::string const &,int const *,int) const\n"
  "    ofShader::setUniform2iv(std::string const &,int const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform3iv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform3iv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3iv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform3iv",3,"int const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform3iv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform3iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ofShader_setUniform3iv",3,SWIGTYPE_p_int); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform3iv((std::string const &)*arg2,(int const *)arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform3iv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform3iv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3iv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform3iv",3,"int const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform3iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ofShader_setUniform3iv",3,SWIGTYPE_p_int); } 
  ((ofShader const *)arg1)->setUniform3iv((std::string const &)*arg2,(int const *)arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform3iv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform3iv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShader_setUniform3iv__SWIG_0(L);}
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform3iv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform3iv(std::string const &,int const *,int) const\n"
  "    ofShader::setUniform3iv(std::string const &,int const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform4iv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform4iv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4iv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform4iv",3,"int const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform4iv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform4iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ofShader_setUniform4iv",3,SWIGTYPE_p_int); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform4iv((std::string const &)*arg2,(int const *)arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform4iv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform4iv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4iv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform4iv",3,"int const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform4iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("ofShader_setUniform4iv",3,SWIGTYPE_p_int); } 
  ((ofShader const *)arg1)->setUniform4iv((std::string const &)*arg2,(int const *)arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform4iv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform4iv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShader_setUniform4iv__SWIG_0(L);}
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform4iv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform4iv(std::string const &,int const *,int) const\n"
  "    ofShader::setUniform4iv(std::string const &,int const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform1fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform1fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform1fv",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform1fv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform1fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setUniform1fv",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform1fv((std::string const &)*arg2,(float const *)arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform1fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform1fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform1fv",3,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform1fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setUniform1fv",3,SWIGTYPE_p_float); } 
  ((ofShader const *)arg1)->setUniform1fv((std::string const &)*arg2,(float const *)arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform1fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform1fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShader_setUniform1fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform1fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform1fv(std::string const &,float const *,int) const\n"
  "    ofShader::setUniform1fv(std::string const &,float const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform2fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform2fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform2fv",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform2fv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform2fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setUniform2fv",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform2fv((std::string const &)*arg2,(float const *)arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform2fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform2fv",3,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform2fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setUniform2fv",3,SWIGTYPE_p_float); } 
  ((ofShader const *)arg1)->setUniform2fv((std::string const &)*arg2,(float const *)arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform2fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform2fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShader_setUniform2fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform2fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform2fv(std::string const &,float const *,int) const\n"
  "    ofShader::setUniform2fv(std::string const &,float const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform3fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform3fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform3fv",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform3fv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform3fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setUniform3fv",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform3fv((std::string const &)*arg2,(float const *)arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform3fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform3fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform3fv",3,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform3fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setUniform3fv",3,SWIGTYPE_p_float); } 
  ((ofShader const *)arg1)->setUniform3fv((std::string const &)*arg2,(float const *)arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform3fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform3fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShader_setUniform3fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform3fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform3fv(std::string const &,float const *,int) const\n"
  "    ofShader::setUniform3fv(std::string const &,float const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniform4fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform4fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform4fv",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform4fv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform4fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setUniform4fv",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniform4fv((std::string const &)*arg2,(float const *)arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform4fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform4fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform4fv",3,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniform4fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setUniform4fv",3,SWIGTYPE_p_float); } 
  ((ofShader const *)arg1)->setUniform4fv((std::string const &)*arg2,(float const *)arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniform4fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniform4fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShader_setUniform4fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniform4fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform4fv(std::string const &,float const *,int) const\n"
  "    ofShader::setUniform4fv(std::string const &,float const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniforms(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  ofParameterGroup *arg2 = 0 ; SWIG_check_num_args("ofShader::setUniforms",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniforms",1,"ofShader const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setUniforms",2,"ofParameterGroup const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniforms",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("ofShader_setUniforms",2,SWIGTYPE_p_ofParameterGroup); } 
  ((ofShader const *)arg1)->setUniforms((ofParameterGroup const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShader_setUniformMatrix3f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofMatrix3x3 *arg3 = 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniformMatrix3f",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformMatrix3f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformMatrix3f",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformMatrix3f",3,"ofMatrix3x3 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniformMatrix3f",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniformMatrix3f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofShader_setUniformMatrix3f",3,SWIGTYPE_p_ofMatrix3x3); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniformMatrix3f((std::string const &)*arg2,(ofMatrix3x3 const &)*arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniformMatrix3f__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofMatrix3x3 *arg3 = 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniformMatrix3f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformMatrix3f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformMatrix3f",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformMatrix3f",3,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniformMatrix3f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofShader_setUniformMatrix3f",3,SWIGTYPE_p_ofMatrix3x3); } 
  ((ofShader const *)arg1)->setUniformMatrix3f((std::string const &)*arg2,(ofMatrix3x3 const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniformMatrix3f(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniformMatrix3f__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShader_setUniformMatrix3f__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniformMatrix3f'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniformMatrix3f(std::string const &,ofMatrix3x3 const &,int) const\n"
  "    ofShader::setUniformMatrix3f(std::string const &,ofMatrix3x3 const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setUniformMatrix4f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofMatrix4x4 *arg3 = 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniformMatrix4f",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformMatrix4f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformMatrix4f",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformMatrix4f",3,"ofMatrix4x4 const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniformMatrix4f",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniformMatrix4f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofShader_setUniformMatrix4f",3,SWIGTYPE_p_ofMatrix4x4); }  arg4 = (int)lua_tonumber(L, 4);
  ((ofShader const *)arg1)->setUniformMatrix4f((std::string const &)*arg2,(ofMatrix4x4 const &)*arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniformMatrix4f__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofMatrix4x4 *arg3 = 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniformMatrix4f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformMatrix4f",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformMatrix4f",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformMatrix4f",3,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setUniformMatrix4f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofShader_setUniformMatrix4f",3,SWIGTYPE_p_ofMatrix4x4); } 
  ((ofShader const *)arg1)->setUniformMatrix4f((std::string const &)*arg2,(ofMatrix4x4 const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setUniformMatrix4f(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setUniformMatrix4f__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofShader_setUniformMatrix4f__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setUniformMatrix4f'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniformMatrix4f(std::string const &,ofMatrix4x4 const &,int) const\n"
  "    ofShader::setUniformMatrix4f(std::string const &,ofMatrix4x4 const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_getUniformLocation(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; GLint result; SWIG_check_num_args("ofShader::getUniformLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getUniformLocation",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::getUniformLocation",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_getUniformLocation",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (GLint)((ofShader const *)arg1)->getUniformLocation((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_getAttributeLocation(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; GLint result; SWIG_check_num_args("ofShader::getAttributeLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getAttributeLocation",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::getAttributeLocation",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_getAttributeLocation",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (GLint)((ofShader const *)arg1)->getAttributeLocation((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute1f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  float arg3 ; SWIG_check_num_args("ofShader::setAttribute1f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute1f",1,"ofShader const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofShader::setAttribute1f",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute1f",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute1f",1,SWIGTYPE_p_ofShader); }  arg2 = (GLint)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofShader const *)arg1)->setAttribute1f(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute2f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofShader::setAttribute2f",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute2f",1,"ofShader const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofShader::setAttribute2f",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute2f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute2f",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute2f",1,SWIGTYPE_p_ofShader); }  arg2 = (GLint)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ((ofShader const *)arg1)->setAttribute2f(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute3f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofShader::setAttribute3f",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute3f",1,"ofShader const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofShader::setAttribute3f",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute3f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute3f",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setAttribute3f",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute3f",1,SWIGTYPE_p_ofShader); }  arg2 = (GLint)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofShader const *)arg1)->setAttribute3f(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShader_setAttribute4f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofShader::setAttribute4f",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute4f",1,"ofShader const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofShader::setAttribute4f",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute4f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute4f",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setAttribute4f",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofShader::setAttribute4f",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute4f",1,SWIGTYPE_p_ofShader); }  arg2 = (GLint)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ((ofShader const *)arg1)->setAttribute4f(arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute1fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; GLsizei arg4 ; std::string temp2 ; GLsizei *argp4 ;
  SWIG_check_num_args("ofShader::setAttribute1fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute1fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute1fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute1fv",3,"float const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setAttribute1fv",4,"GLsizei");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute1fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setAttribute1fv",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLsizei,0))){
    SWIG_fail_ptr("ofShader_setAttribute1fv",4,SWIGTYPE_p_GLsizei); }  arg4 = *argp4;
  ((ofShader const *)arg1)->setAttribute1fv((std::string const &)*arg2,(float const *)arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute1fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setAttribute1fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute1fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute1fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute1fv",3,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute1fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setAttribute1fv",3,SWIGTYPE_p_float); } 
  ((ofShader const *)arg1)->setAttribute1fv((std::string const &)*arg2,(float const *)arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute1fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setAttribute1fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLsizei, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setAttribute1fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setAttribute1fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setAttribute1fv(std::string const &,float const *,GLsizei) const\n"
  "    ofShader::setAttribute1fv(std::string const &,float const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setAttribute2fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; GLsizei arg4 ; std::string temp2 ; GLsizei *argp4 ;
  SWIG_check_num_args("ofShader::setAttribute2fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute2fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute2fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute2fv",3,"float const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setAttribute2fv",4,"GLsizei");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute2fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setAttribute2fv",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLsizei,0))){
    SWIG_fail_ptr("ofShader_setAttribute2fv",4,SWIGTYPE_p_GLsizei); }  arg4 = *argp4;
  ((ofShader const *)arg1)->setAttribute2fv((std::string const &)*arg2,(float const *)arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute2fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setAttribute2fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute2fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute2fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute2fv",3,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute2fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setAttribute2fv",3,SWIGTYPE_p_float); } 
  ((ofShader const *)arg1)->setAttribute2fv((std::string const &)*arg2,(float const *)arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute2fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setAttribute2fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLsizei, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setAttribute2fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setAttribute2fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setAttribute2fv(std::string const &,float const *,GLsizei) const\n"
  "    ofShader::setAttribute2fv(std::string const &,float const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setAttribute3fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; GLsizei arg4 ; std::string temp2 ; GLsizei *argp4 ;
  SWIG_check_num_args("ofShader::setAttribute3fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute3fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute3fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute3fv",3,"float const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setAttribute3fv",4,"GLsizei");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute3fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setAttribute3fv",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLsizei,0))){
    SWIG_fail_ptr("ofShader_setAttribute3fv",4,SWIGTYPE_p_GLsizei); }  arg4 = *argp4;
  ((ofShader const *)arg1)->setAttribute3fv((std::string const &)*arg2,(float const *)arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute3fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setAttribute3fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute3fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute3fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute3fv",3,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute3fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setAttribute3fv",3,SWIGTYPE_p_float); } 
  ((ofShader const *)arg1)->setAttribute3fv((std::string const &)*arg2,(float const *)arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute3fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setAttribute3fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLsizei, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setAttribute3fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setAttribute3fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setAttribute3fv(std::string const &,float const *,GLsizei) const\n"
  "    ofShader::setAttribute3fv(std::string const &,float const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setAttribute4fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; GLsizei arg4 ; std::string temp2 ; GLsizei *argp4 ;
  SWIG_check_num_args("ofShader::setAttribute4fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute4fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute4fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute4fv",3,"float const *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setAttribute4fv",4,"GLsizei");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute4fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setAttribute4fv",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLsizei,0))){
    SWIG_fail_ptr("ofShader_setAttribute4fv",4,SWIGTYPE_p_GLsizei); }  arg4 = *argp4;
  ((ofShader const *)arg1)->setAttribute4fv((std::string const &)*arg2,(float const *)arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute4fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setAttribute4fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute4fv",1,"ofShader const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute4fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute4fv",3,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setAttribute4fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofShader_setAttribute4fv",3,SWIGTYPE_p_float); } 
  ((ofShader const *)arg1)->setAttribute4fv((std::string const &)*arg2,(float const *)arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setAttribute4fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setAttribute4fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLsizei, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofShader_setAttribute4fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setAttribute4fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setAttribute4fv(std::string const &,float const *,GLsizei) const\n"
  "    ofShader::setAttribute4fv(std::string const &,float const *) const\n"); lua_error(L);return 0; }
static int _wrap_ofShader_bindAttribute(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLuint arg2 ;
  std::string *arg3 = 0 ; GLuint *argp2 ; std::string temp3 ; SWIG_check_num_args("ofShader::bindAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::bindAttribute",1,"ofShader const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::bindAttribute",2,"GLuint");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::bindAttribute",3,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_bindAttribute",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("ofShader_bindAttribute",2,SWIGTYPE_p_GLuint); }  arg2 = *argp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  ((ofShader const *)arg1)->bindAttribute(arg2,(std::string const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_printActiveUniforms(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::printActiveUniforms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::printActiveUniforms",1,"ofShader const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_printActiveUniforms",1,SWIGTYPE_p_ofShader); }  ((ofShader const *)arg1)->printActiveUniforms();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_printActiveAttributes(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::printActiveAttributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::printActiveAttributes",1,"ofShader const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_printActiveAttributes",1,SWIGTYPE_p_ofShader); }  ((ofShader const *)arg1)->printActiveAttributes();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setupShaderFromSource__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  GLenum arg2 ; std::string arg3 ; std::string arg4 ; GLenum *argp2 ; bool result;
  SWIG_check_num_args("ofShader::setupShaderFromSource",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setupShaderFromSource",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setupShaderFromSource",2,"GLenum");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::setupShaderFromSource",3,"std::string");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofShader::setupShaderFromSource",4,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setupShaderFromSource",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofShader_setupShaderFromSource",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
  result = (bool)(arg1)->setupShaderFromSource(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setupShaderFromSource__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  GLenum arg2 ; std::string arg3 ; GLenum *argp2 ; bool result; SWIG_check_num_args("ofShader::setupShaderFromSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setupShaderFromSource",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setupShaderFromSource",2,"GLenum");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::setupShaderFromSource",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setupShaderFromSource",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofShader_setupShaderFromSource",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (bool)(arg1)->setupShaderFromSource(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_setupShaderFromSource(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_ofShader_setupShaderFromSource__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) { { _v = lua_isstring(L,argv[3]); } 
          if (_v) { return _wrap_ofShader_setupShaderFromSource__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShader_setupShaderFromSource'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setupShaderFromSource(GLenum,std::string,std::string)\n"
  "    ofShader::setupShaderFromSource(GLenum,std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofShader_setupShaderFromFile(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  std::string arg3 ; GLenum *argp2 ; bool result; SWIG_check_num_args("ofShader::setupShaderFromFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setupShaderFromFile",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setupShaderFromFile",2,"GLenum");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::setupShaderFromFile",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_setupShaderFromFile",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofShader_setupShaderFromFile",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (bool)(arg1)->setupShaderFromFile(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_linkProgram(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; bool result;
  SWIG_check_num_args("ofShader::linkProgram",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::linkProgram",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_linkProgram",1,SWIGTYPE_p_ofShader); }  result = (bool)(arg1)->linkProgram();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_bindDefaults(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; bool result;
  SWIG_check_num_args("ofShader::bindDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::bindDefaults",1,"ofShader const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_bindDefaults",1,SWIGTYPE_p_ofShader); }  result = (bool)((ofShader const *)arg1)->bindDefaults();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_getProgram(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLuint result;
  SWIG_check_num_args("ofShader::getProgram",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getProgram",1,"ofShader const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_getProgram",1,SWIGTYPE_p_ofShader); }  result = ((ofShader const *)arg1)->getProgram(); {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_getShader(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  GLenum *argp2 ; GLuint result; SWIG_check_num_args("ofShader::getShader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getShader",1,"ofShader const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::getShader",2,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_getShader",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofShader_getShader",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  result = ((ofShader const *)arg1)->getShader(arg2); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShader___eq(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; ofShader *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofShader::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::operator ==",1,"ofShader const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::operator ==",2,"ofShader const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader___eq",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader___eq",2,SWIGTYPE_p_ofShader); } 
  result = (bool)((ofShader const *)arg1)->operator ==((ofShader const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShader_getShaderSource(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  GLenum *argp2 ; std::string result; SWIG_check_num_args("ofShader::getShaderSource",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getShaderSource",1,"ofShader const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::getShaderSource",2,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("ofShader_getShaderSource",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("ofShader_getShaderSource",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  result = ((ofShader const *)arg1)->getShaderSource(arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofShader(void *obj) {
ofShader *arg1 = (ofShader *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofShader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofShader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofShader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofShader_methods[]= {
    { "load", _wrap_ofShader_load},
    { "setGeometryInputType", _wrap_ofShader_setGeometryInputType},
    { "setGeometryOutputType", _wrap_ofShader_setGeometryOutputType},
    { "setGeometryOutputCount", _wrap_ofShader_setGeometryOutputCount},
    { "getGeometryMaxOutputCount", _wrap_ofShader_getGeometryMaxOutputCount},
    { "unload", _wrap_ofShader_unload},
    { "isLoaded", _wrap_ofShader_isLoaded},
    { "beginShader", _wrap_ofShader_beginShader},
    { "endShader", _wrap_ofShader_endShader},
    { "setUniformTexture", _wrap_ofShader_setUniformTexture},
    { "setUniform1i", _wrap_ofShader_setUniform1i},
    { "setUniform2i", _wrap_ofShader_setUniform2i},
    { "setUniform3i", _wrap_ofShader_setUniform3i},
    { "setUniform4i", _wrap_ofShader_setUniform4i},
    { "setUniform1f", _wrap_ofShader_setUniform1f},
    { "setUniform2f", _wrap_ofShader_setUniform2f},
    { "setUniform3f", _wrap_ofShader_setUniform3f},
    { "setUniform4f", _wrap_ofShader_setUniform4f},
    { "setUniform1iv", _wrap_ofShader_setUniform1iv},
    { "setUniform2iv", _wrap_ofShader_setUniform2iv},
    { "setUniform3iv", _wrap_ofShader_setUniform3iv},
    { "setUniform4iv", _wrap_ofShader_setUniform4iv},
    { "setUniform1fv", _wrap_ofShader_setUniform1fv},
    { "setUniform2fv", _wrap_ofShader_setUniform2fv},
    { "setUniform3fv", _wrap_ofShader_setUniform3fv},
    { "setUniform4fv", _wrap_ofShader_setUniform4fv},
    { "setUniforms", _wrap_ofShader_setUniforms},
    { "setUniformMatrix3f", _wrap_ofShader_setUniformMatrix3f},
    { "setUniformMatrix4f", _wrap_ofShader_setUniformMatrix4f},
    { "getUniformLocation", _wrap_ofShader_getUniformLocation},
    { "getAttributeLocation", _wrap_ofShader_getAttributeLocation},
    { "setAttribute1f", _wrap_ofShader_setAttribute1f},
    { "setAttribute2f", _wrap_ofShader_setAttribute2f},
    { "setAttribute3f", _wrap_ofShader_setAttribute3f},
    { "setAttribute4f", _wrap_ofShader_setAttribute4f},
    { "setAttribute1fv", _wrap_ofShader_setAttribute1fv},
    { "setAttribute2fv", _wrap_ofShader_setAttribute2fv},
    { "setAttribute3fv", _wrap_ofShader_setAttribute3fv},
    { "setAttribute4fv", _wrap_ofShader_setAttribute4fv},
    { "bindAttribute", _wrap_ofShader_bindAttribute},
    { "printActiveUniforms", _wrap_ofShader_printActiveUniforms},
    { "printActiveAttributes", _wrap_ofShader_printActiveAttributes},
    { "setupShaderFromSource", _wrap_ofShader_setupShaderFromSource},
    { "setupShaderFromFile", _wrap_ofShader_setupShaderFromFile},
    { "linkProgram", _wrap_ofShader_linkProgram},
    { "bindDefaults", _wrap_ofShader_bindDefaults},
    { "getProgram", _wrap_ofShader_getProgram},
    { "getShader", _wrap_ofShader_getShader},
    { "__eq", _wrap_ofShader___eq},
    { "getShaderSource", _wrap_ofShader_getShaderSource},
    {0,0}
};
static swig_lua_method swig_ofShader_meta[] = {
    { "__eq", _wrap_ofShader___eq},
    {0,0}
};

static swig_lua_attribute swig_ofShader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofShader_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("POSITION_ATTRIBUTE", ofShader::POSITION_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTRIBUTE", ofShader::COLOR_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("NORMAL_ATTRIBUTE", ofShader::NORMAL_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("TEXCOORD_ATTRIBUTE", ofShader::TEXCOORD_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("INDEX_ATTRIBUTE", ofShader::INDEX_ATTRIBUTE)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofShader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofShader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofShader_Sf_SwigStatic = {
    "ofShader",
    swig_ofShader_Sf_SwigStatic_methods,
    swig_ofShader_Sf_SwigStatic_attributes,
    swig_ofShader_Sf_SwigStatic_constants,
    swig_ofShader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofShader_bases[] = {0};
static const char *swig_ofShader_base_names[] = {0};
static swig_lua_class _wrap_class_ofShader = { "ofShader", "ofShader", &SWIGTYPE_p_ofShader,_proxy__wrap_new_ofShader, swig_delete_ofShader, swig_ofShader_methods, swig_ofShader_attributes, &swig_ofShader_Sf_SwigStatic, swig_ofShader_meta, swig_ofShader_bases, swig_ofShader_base_names };

static int _wrap_new_ofVbo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *result = 0 ; SWIG_check_num_args("ofVbo::ofVbo",0,0)
  result = (ofVbo *)new ofVbo(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVbo,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVbo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = 0 ; ofVbo *result = 0 ;
  SWIG_check_num_args("ofVbo::ofVbo",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVbo::ofVbo",1,"ofVbo const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("new_ofVbo",1,SWIGTYPE_p_ofVbo); } 
  result = (ofVbo *)new ofVbo((ofVbo const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVbo,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVbo(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofVbo__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofVbo__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofVbo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVbo::ofVbo()\n" "    ofVbo::ofVbo(ofVbo const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setMesh__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; ofMesh *arg2 = 0 ;
  int arg3 ; SWIG_check_num_args("ofVbo::setMesh",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setMesh",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setMesh",2,"ofMesh const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setMesh",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_setMesh",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofVbo_setMesh",2,SWIGTYPE_p_ofMesh); }
   arg3 = (int)lua_tonumber(L, 3); (arg1)->setMesh((ofMesh const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setMesh__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; ofMesh *arg2 = 0 ;
  int arg3 ; bool arg4 ; bool arg5 ; bool arg6 ; SWIG_check_num_args("ofVbo::setMesh",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setMesh",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setMesh",2,"ofMesh const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setMesh",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofVbo::setMesh",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofVbo::setMesh",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofVbo::setMesh",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_setMesh",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("ofVbo_setMesh",2,SWIGTYPE_p_ofMesh); }
   arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); (arg1)->setMesh((ofMesh const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setMesh(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVbo_setMesh__SWIG_0(L);}  }
       }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isboolean(L,argv[3]); } 
          if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_ofVbo_setMesh__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setMesh'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVbo::setMesh(ofMesh const &,int)\n" "    ofVbo::setMesh(ofMesh const &,int,bool,bool,bool)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setVertexData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setVertexData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setVertexData",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVbo_setVertexData",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setVertexData((ofVec3f const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setVertexData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setVertexData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setVertexData",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVbo_setVertexData",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setVertexData((ofVec2f const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setColorData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setColorData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setColorData",2,"ofFloatColor const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setColorData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setColorData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setColorData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofVbo_setColorData",2,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setColorData((ofFloatColor const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setNormalData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setNormalData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setNormalData",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setNormalData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setNormalData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVbo_setNormalData",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setNormalData((ofVec3f const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setTexCoordData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setTexCoordData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setTexCoordData",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setTexCoordData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setTexCoordData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordData",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setTexCoordData((ofVec2f const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setIndexData(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setIndexData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setIndexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setIndexData",2,"ofIndexType const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setIndexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setIndexData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setIndexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ofVbo_setIndexData",2,SWIGTYPE_p_unsigned_int); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setIndexData((ofIndexType const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setVertexData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofVbo::setVertexData",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setVertexData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setVertexData",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofVbo::setVertexData",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setVertexData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setVertexData((float const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_setVertexData__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setVertexData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setVertexData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setVertexData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setVertexData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->setVertexData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setVertexData(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVbo_setVertexData__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVbo_setVertexData__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofVbo_setVertexData__SWIG_3(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofVbo_setVertexData__SWIG_2(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setVertexData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setVertexData(ofVec3f const *,int,int)\n"
  "    ofVbo::setVertexData(ofVec2f const *,int,int)\n" "    ofVbo::setVertexData(float const *,int,int,int,int)\n"
  "    ofVbo::setVertexData(float const *,int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setColorData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setColorData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setColorData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setColorData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setColorData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setColorData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setColorData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setColorData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->setColorData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setColorData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setColorData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setColorData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setColorData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setColorData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setColorData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setColorData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setColorData((float const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setColorData(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofVbo_setColorData__SWIG_0(L);}  }  }  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofVbo_setColorData__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofVbo_setColorData__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setColorData'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVbo::setColorData(ofFloatColor const *,int,int)\n" "    ofVbo::setColorData(float const *,int,int,int)\n"
  "    ofVbo::setColorData(float const *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setNormalData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setNormalData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setNormalData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setNormalData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setNormalData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setNormalData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setNormalData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->setNormalData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setNormalData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setNormalData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setNormalData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setNormalData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setNormalData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setNormalData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setNormalData((float const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setNormalData(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVbo_setNormalData__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofVbo_setNormalData__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofVbo_setNormalData__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setNormalData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setNormalData(ofVec3f const *,int,int)\n"
  "    ofVbo::setNormalData(float const *,int,int,int)\n" "    ofVbo::setNormalData(float const *,int,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_setTexCoordData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setTexCoordData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setTexCoordData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setTexCoordData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setTexCoordData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setTexCoordData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->setTexCoordData((float const *)arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setTexCoordData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setTexCoordData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setTexCoordData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setTexCoordData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setTexCoordData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setTexCoordData((float const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setTexCoordData(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVbo_setTexCoordData__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofVbo_setTexCoordData__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofVbo_setTexCoordData__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setTexCoordData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setTexCoordData(ofVec2f const *,int,int)\n"
  "    ofVbo::setTexCoordData(float const *,int,int,int)\n" "    ofVbo::setTexCoordData(float const *,int,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_setAttributeData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  float *arg3 = (float *) 0 ; int arg4 ; int arg5 ; int arg6 ; int arg7 ; SWIG_check_num_args("ofVbo::setAttributeData",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setAttributeData",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::setAttributeData",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofVbo::setAttributeData",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setAttributeData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setAttributeData",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofVbo::setAttributeData",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofVbo::setAttributeData",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setAttributeData",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setAttributeData",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6); arg7 = (int)lua_tonumber(L, 7);
  (arg1)->setAttributeData(arg2,(float const *)arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_setAttributeData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  float *arg3 = (float *) 0 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofVbo::setAttributeData",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setAttributeData",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::setAttributeData",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofVbo::setAttributeData",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setAttributeData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setAttributeData",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofVbo::setAttributeData",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setAttributeData",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_setAttributeData",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setAttributeData(arg2,(float const *)arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_setAttributeData(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); } 
            if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofVbo_setAttributeData__SWIG_1(L);}  }  }  }  }
       }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); } 
            if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofVbo_setAttributeData__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setAttributeData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setAttributeData(int,float const *,int,int,int,int)\n"
  "    ofVbo::setAttributeData(int,float const *,int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setVertexBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setVertexBuffer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setVertexBuffer",2,"ofBufferObject &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexBuffer",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexBuffer",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setVertexBuffer",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setVertexBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setVertexBuffer",2,SWIGTYPE_p_ofBufferObject); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->setVertexBuffer(*arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setVertexBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *arg2 = 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setVertexBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setVertexBuffer",2,"ofBufferObject &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexBuffer",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexBuffer",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setVertexBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setVertexBuffer",2,SWIGTYPE_p_ofBufferObject); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setVertexBuffer(*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setVertexBuffer(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVbo_setVertexBuffer__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofVbo_setVertexBuffer__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setVertexBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setVertexBuffer(ofBufferObject &,int,int,int)\n"
  "    ofVbo::setVertexBuffer(ofBufferObject &,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setColorBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *arg2 = 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setColorBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setColorBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setColorBuffer",2,"ofBufferObject &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setColorBuffer",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setColorBuffer",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setColorBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setColorBuffer",2,SWIGTYPE_p_ofBufferObject); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setColorBuffer(*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_setColorBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofVbo::setColorBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setColorBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setColorBuffer",2,"ofBufferObject &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setColorBuffer",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setColorBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setColorBuffer",2,SWIGTYPE_p_ofBufferObject); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setColorBuffer(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setColorBuffer(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVbo_setColorBuffer__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVbo_setColorBuffer__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setColorBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setColorBuffer(ofBufferObject &,int,int)\n"
  "    ofVbo::setColorBuffer(ofBufferObject &,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setNormalBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *arg2 = 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setNormalBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setNormalBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setNormalBuffer",2,"ofBufferObject &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setNormalBuffer",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setNormalBuffer",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setNormalBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setNormalBuffer",2,SWIGTYPE_p_ofBufferObject); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setNormalBuffer(*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setNormalBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofVbo::setNormalBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setNormalBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setNormalBuffer",2,"ofBufferObject &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setNormalBuffer",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setNormalBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setNormalBuffer",2,SWIGTYPE_p_ofBufferObject); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setNormalBuffer(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setNormalBuffer(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVbo_setNormalBuffer__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVbo_setNormalBuffer__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setNormalBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setNormalBuffer(ofBufferObject &,int,int)\n"
  "    ofVbo::setNormalBuffer(ofBufferObject &,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setTexCoordBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *arg2 = 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setTexCoordBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setTexCoordBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setTexCoordBuffer",2,"ofBufferObject &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setTexCoordBuffer",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setTexCoordBuffer",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordBuffer",2,SWIGTYPE_p_ofBufferObject); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setTexCoordBuffer(*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setTexCoordBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofVbo::setTexCoordBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setTexCoordBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setTexCoordBuffer",2,"ofBufferObject &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setTexCoordBuffer",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setTexCoordBuffer",2,SWIGTYPE_p_ofBufferObject); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setTexCoordBuffer(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setTexCoordBuffer(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVbo_setTexCoordBuffer__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVbo_setTexCoordBuffer__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setTexCoordBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setTexCoordBuffer(ofBufferObject &,int,int)\n"
  "    ofVbo::setTexCoordBuffer(ofBufferObject &,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_setIndexBuffer(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; ofBufferObject *arg2 = 0 ;
  SWIG_check_num_args("ofVbo::setIndexBuffer",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setIndexBuffer",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setIndexBuffer",2,"ofBufferObject &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setIndexBuffer",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setIndexBuffer",2,SWIGTYPE_p_ofBufferObject); }  (arg1)->setIndexBuffer(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setAttributeBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  ofBufferObject *arg3 = 0 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofVbo::setAttributeBuffer",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setAttributeBuffer",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::setAttributeBuffer",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVbo::setAttributeBuffer",3,"ofBufferObject &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setAttributeBuffer",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setAttributeBuffer",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofVbo::setAttributeBuffer",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setAttributeBuffer",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setAttributeBuffer",3,SWIGTYPE_p_ofBufferObject); }  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6); (arg1)->setAttributeBuffer(arg2,*arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setAttributeBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  ofBufferObject *arg3 = 0 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setAttributeBuffer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setAttributeBuffer",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::setAttributeBuffer",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVbo::setAttributeBuffer",3,"ofBufferObject &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setAttributeBuffer",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setAttributeBuffer",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_setAttributeBuffer",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofBufferObject,0))){
    SWIG_fail_ptr("ofVbo_setAttributeBuffer",3,SWIGTYPE_p_ofBufferObject); }  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->setAttributeBuffer(arg2,*arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_setAttributeBuffer(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofVbo_setAttributeBuffer__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofBufferObject, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofVbo_setAttributeBuffer__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_setAttributeBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setAttributeBuffer(int,ofBufferObject &,int,int,int)\n"
  "    ofVbo::setAttributeBuffer(int,ofBufferObject &,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_getVertexBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getVertexBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getVertexBuffer",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getVertexBuffer",1,SWIGTYPE_p_ofVbo); }  result = (ofBufferObject *) &(arg1)->getVertexBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getColorBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getColorBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getColorBuffer",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getColorBuffer",1,SWIGTYPE_p_ofVbo); }  result = (ofBufferObject *) &(arg1)->getColorBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getNormalBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getNormalBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getNormalBuffer",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getNormalBuffer",1,SWIGTYPE_p_ofVbo); }  result = (ofBufferObject *) &(arg1)->getNormalBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getTexCoordBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getTexCoordBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getTexCoordBuffer",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getTexCoordBuffer",1,SWIGTYPE_p_ofVbo); }  result = (ofBufferObject *) &(arg1)->getTexCoordBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getIndexBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getIndexBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getIndexBuffer",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getIndexBuffer",1,SWIGTYPE_p_ofVbo); }  result = (ofBufferObject *) &(arg1)->getIndexBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getAttributeBuffer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getAttributeBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getAttributeBuffer",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::getAttributeBuffer",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getAttributeBuffer",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofBufferObject *) &(arg1)->getAttributeBuffer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getVertexBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getVertexBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getVertexBuffer",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getVertexBuffer",1,SWIGTYPE_p_ofVbo); } 
  result = (ofBufferObject *) &((ofVbo const *)arg1)->getVertexBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getVertexBuffer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getVertexBuffer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getVertexBuffer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_getVertexBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::getVertexBuffer()\n" "    ofVbo::getVertexBuffer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_getColorBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getColorBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getColorBuffer",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getColorBuffer",1,SWIGTYPE_p_ofVbo); } 
  result = (ofBufferObject *) &((ofVbo const *)arg1)->getColorBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getColorBuffer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getColorBuffer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getColorBuffer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_getColorBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::getColorBuffer()\n" "    ofVbo::getColorBuffer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_getNormalBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getNormalBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getNormalBuffer",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getNormalBuffer",1,SWIGTYPE_p_ofVbo); } 
  result = (ofBufferObject *) &((ofVbo const *)arg1)->getNormalBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getNormalBuffer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getNormalBuffer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getNormalBuffer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_getNormalBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::getNormalBuffer()\n" "    ofVbo::getNormalBuffer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_getTexCoordBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getTexCoordBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getTexCoordBuffer",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getTexCoordBuffer",1,SWIGTYPE_p_ofVbo); } 
  result = (ofBufferObject *) &((ofVbo const *)arg1)->getTexCoordBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getTexCoordBuffer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getTexCoordBuffer__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getTexCoordBuffer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_getTexCoordBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::getTexCoordBuffer()\n" "    ofVbo::getTexCoordBuffer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_getIndexBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getIndexBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getIndexBuffer",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getIndexBuffer",1,SWIGTYPE_p_ofVbo); } 
  result = (ofBufferObject *) &((ofVbo const *)arg1)->getIndexBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getIndexBuffer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getIndexBuffer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVbo_getIndexBuffer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_getIndexBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::getIndexBuffer()\n" "    ofVbo::getIndexBuffer() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_getAttributeBuffer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  ofBufferObject *result = 0 ; SWIG_check_num_args("ofVbo::getAttributeBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getAttributeBuffer",1,"ofVbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::getAttributeBuffer",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getAttributeBuffer",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofBufferObject *) &((ofVbo const *)arg1)->getAttributeBuffer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBufferObject,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_getAttributeBuffer(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVbo_getAttributeBuffer__SWIG_0(L);}
       }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVbo_getAttributeBuffer__SWIG_1(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_getAttributeBuffer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::getAttributeBuffer(int)\n" "    ofVbo::getAttributeBuffer(int) const\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_updateMesh(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; ofMesh *arg2 = 0 ;
  SWIG_check_num_args("ofVbo::updateMesh",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateMesh",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::updateMesh",2,"ofMesh const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_updateMesh",1,SWIGTYPE_p_ofVbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("ofVbo_updateMesh",2,SWIGTYPE_p_ofMesh); }  (arg1)->updateMesh((ofMesh const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_updateVertexData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateVertexData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateVertexData",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateVertexData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVbo_updateVertexData",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateVertexData((ofVec3f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_updateVertexData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateVertexData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateVertexData",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateVertexData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVbo_updateVertexData",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateVertexData((ofVec2f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_updateColorData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateColorData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateColorData",2,"ofFloatColor const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateColorData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateColorData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofVbo_updateColorData",2,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateColorData((ofFloatColor const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_updateNormalData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateNormalData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateNormalData",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateNormalData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVbo_updateNormalData",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateNormalData((ofVec3f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_updateTexCoordData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateTexCoordData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateTexCoordData",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateTexCoordData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVbo_updateTexCoordData",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateTexCoordData((ofVec2f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_updateIndexData(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateIndexData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateIndexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateIndexData",2,"ofIndexType const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateIndexData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateIndexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ofVbo_updateIndexData",2,SWIGTYPE_p_unsigned_int); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateIndexData((ofIndexType const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_updateVertexData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateVertexData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateVertexData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateVertexData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_updateVertexData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateVertexData((float const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_updateVertexData(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVbo_updateVertexData__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVbo_updateVertexData__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVbo_updateVertexData__SWIG_2(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_updateVertexData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::updateVertexData(ofVec3f const *,int)\n"
  "    ofVbo::updateVertexData(ofVec2f const *,int)\n" "    ofVbo::updateVertexData(float const *,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofVbo_updateColorData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateColorData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateColorData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateColorData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateColorData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_updateColorData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateColorData((float const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_updateColorData(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVbo_updateColorData__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVbo_updateColorData__SWIG_1(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_updateColorData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::updateColorData(ofFloatColor const *,int)\n"
  "    ofVbo::updateColorData(float const *,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_updateNormalData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateNormalData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateNormalData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateNormalData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_updateNormalData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateNormalData((float const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_updateNormalData(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVbo_updateNormalData__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVbo_updateNormalData__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_updateNormalData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::updateNormalData(ofVec3f const *,int)\n"
  "    ofVbo::updateNormalData(float const *,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_updateTexCoordData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateTexCoordData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateTexCoordData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateTexCoordData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_updateTexCoordData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateTexCoordData((float const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_updateTexCoordData(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVbo_updateTexCoordData__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVbo_updateTexCoordData__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVbo_updateTexCoordData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::updateTexCoordData(ofVec2f const *,int)\n"
  "    ofVbo::updateTexCoordData(float const *,int)\n"); lua_error(L);return 0; }
static int _wrap_ofVbo_updateAttributeData(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  float *arg3 = (float *) 0 ; int arg4 ; SWIG_check_num_args("ofVbo::updateAttributeData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateAttributeData",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::updateAttributeData",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofVbo::updateAttributeData",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::updateAttributeData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_updateAttributeData",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofVbo_updateAttributeData",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->updateAttributeData(arg2,(float const *)arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVbo_enableColors(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::enableColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::enableColors",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_enableColors",1,SWIGTYPE_p_ofVbo); }  (arg1)->enableColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_enableNormals(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::enableNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::enableNormals",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_enableNormals",1,SWIGTYPE_p_ofVbo); }  (arg1)->enableNormals(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_enableTexCoords(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::enableTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::enableTexCoords",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_enableTexCoords",1,SWIGTYPE_p_ofVbo); }  (arg1)->enableTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_enableIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::enableIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::enableIndices",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_enableIndices",1,SWIGTYPE_p_ofVbo); }  (arg1)->enableIndices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_disableColors(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::disableColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::disableColors",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_disableColors",1,SWIGTYPE_p_ofVbo); }  (arg1)->disableColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_disableNormals(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::disableNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::disableNormals",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_disableNormals",1,SWIGTYPE_p_ofVbo); }  (arg1)->disableNormals(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_disableTexCoords(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::disableTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::disableTexCoords",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_disableTexCoords",1,SWIGTYPE_p_ofVbo); }  (arg1)->disableTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_disableIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::disableIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::disableIndices",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_disableIndices",1,SWIGTYPE_p_ofVbo); }  (arg1)->disableIndices(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getVaoId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getVaoId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getVaoId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_getVaoId",1,SWIGTYPE_p_ofVbo); } 
  result = ((ofVbo const *)arg1)->getVaoId(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getVertId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getVertId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getVertId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_getVertId",1,SWIGTYPE_p_ofVbo); }
   result = ((ofVbo const *)arg1)->getVertId(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getColorId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getColorId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getColorId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_getColorId",1,SWIGTYPE_p_ofVbo); }
   result = ((ofVbo const *)arg1)->getColorId(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getNormalId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getNormalId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getNormalId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getNormalId",1,SWIGTYPE_p_ofVbo); }  result = ((ofVbo const *)arg1)->getNormalId(); {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getTexCoordId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getTexCoordId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getTexCoordId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getTexCoordId",1,SWIGTYPE_p_ofVbo); }  result = ((ofVbo const *)arg1)->getTexCoordId(); {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getIndexId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getIndexId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getIndexId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_getIndexId",1,SWIGTYPE_p_ofVbo); }
   result = ((ofVbo const *)arg1)->getIndexId(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getAttributeId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; GLuint result;
  SWIG_check_num_args("ofVbo::getAttributeId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getAttributeId",1,"ofVbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::getAttributeId",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getAttributeId",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofVbo const *)arg1)->getAttributeId(arg2); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getIsAllocated(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getIsAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getIsAllocated",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getIsAllocated",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getIsAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getUsingVerts(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingVerts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingVerts",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getUsingVerts",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingVerts();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getUsingColors(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingColors",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getUsingColors",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingColors();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getUsingNormals(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingNormals",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getUsingNormals",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingNormals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getUsingTexCoords(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingTexCoords",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getUsingTexCoords",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingTexCoords();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getUsingIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingIndices",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getUsingIndices",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingIndices();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_draw(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofVbo::draw",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::draw",1,"ofVbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::draw",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::draw",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::draw",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_draw",1,SWIGTYPE_p_ofVbo); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  ((ofVbo const *)arg1)->draw(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_drawElements(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofVbo::drawElements",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::drawElements",1,"ofVbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::drawElements",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::drawElements",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_drawElements",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  ((ofVbo const *)arg1)->drawElements(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_drawInstanced(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::drawInstanced",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::drawInstanced",1,"ofVbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::drawInstanced",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::drawInstanced",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::drawInstanced",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::drawInstanced",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_drawInstanced",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); ((ofVbo const *)arg1)->drawInstanced(arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_drawElementsInstanced(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; SWIG_check_num_args("ofVbo::drawElementsInstanced",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::drawElementsInstanced",1,"ofVbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::drawElementsInstanced",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::drawElementsInstanced",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::drawElementsInstanced",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_drawElementsInstanced",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); ((ofVbo const *)arg1)->drawElementsInstanced(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_bind(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; SWIG_check_num_args("ofVbo::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::bind",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_bind",1,SWIGTYPE_p_ofVbo); } 
  ((ofVbo const *)arg1)->bind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_unbind(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::unbind",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::unbind",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_unbind",1,SWIGTYPE_p_ofVbo); } 
  ((ofVbo const *)arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_clear(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clear",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("ofVbo_clear",1,SWIGTYPE_p_ofVbo); } 
  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_clearVertices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearVertices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearVertices",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_clearVertices",1,SWIGTYPE_p_ofVbo); }  (arg1)->clearVertices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_clearNormals(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearNormals",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_clearNormals",1,SWIGTYPE_p_ofVbo); }  (arg1)->clearNormals(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_clearColors(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearColors",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_clearColors",1,SWIGTYPE_p_ofVbo); }  (arg1)->clearColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_clearTexCoords(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearTexCoords",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearTexCoords",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_clearTexCoords",1,SWIGTYPE_p_ofVbo); }  (arg1)->clearTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_clearIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearIndices",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_clearIndices",1,SWIGTYPE_p_ofVbo); }  (arg1)->clearIndices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_clearAttribute(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  SWIG_check_num_args("ofVbo::clearAttribute",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearAttribute",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::clearAttribute",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_clearAttribute",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->clearAttribute(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getNumVertices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int result;
  SWIG_check_num_args("ofVbo::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getNumVertices",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getNumVertices",1,SWIGTYPE_p_ofVbo); }  result = (int)((ofVbo const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_getNumIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int result;
  SWIG_check_num_args("ofVbo::getNumIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getNumIndices",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_getNumIndices",1,SWIGTYPE_p_ofVbo); }  result = (int)((ofVbo const *)arg1)->getNumIndices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVbo_hasAttribute(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; bool result;
  SWIG_check_num_args("ofVbo::hasAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::hasAttribute",1,"ofVbo const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::hasAttribute",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("ofVbo_hasAttribute",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)((ofVbo const *)arg1)->hasAttribute(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofVbo(void *obj) {
ofVbo *arg1 = (ofVbo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofVbo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofVbo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofVbo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVbo_methods[]= {
    { "setMesh", _wrap_ofVbo_setMesh},
    { "setIndexData", _wrap_ofVbo_setIndexData},
    { "setVertexData", _wrap_ofVbo_setVertexData},
    { "setColorData", _wrap_ofVbo_setColorData},
    { "setNormalData", _wrap_ofVbo_setNormalData},
    { "setTexCoordData", _wrap_ofVbo_setTexCoordData},
    { "setAttributeData", _wrap_ofVbo_setAttributeData},
    { "setVertexBuffer", _wrap_ofVbo_setVertexBuffer},
    { "setColorBuffer", _wrap_ofVbo_setColorBuffer},
    { "setNormalBuffer", _wrap_ofVbo_setNormalBuffer},
    { "setTexCoordBuffer", _wrap_ofVbo_setTexCoordBuffer},
    { "setIndexBuffer", _wrap_ofVbo_setIndexBuffer},
    { "setAttributeBuffer", _wrap_ofVbo_setAttributeBuffer},
    { "getVertexBuffer", _wrap_ofVbo_getVertexBuffer},
    { "getColorBuffer", _wrap_ofVbo_getColorBuffer},
    { "getNormalBuffer", _wrap_ofVbo_getNormalBuffer},
    { "getTexCoordBuffer", _wrap_ofVbo_getTexCoordBuffer},
    { "getIndexBuffer", _wrap_ofVbo_getIndexBuffer},
    { "getAttributeBuffer", _wrap_ofVbo_getAttributeBuffer},
    { "updateMesh", _wrap_ofVbo_updateMesh},
    { "updateIndexData", _wrap_ofVbo_updateIndexData},
    { "updateVertexData", _wrap_ofVbo_updateVertexData},
    { "updateColorData", _wrap_ofVbo_updateColorData},
    { "updateNormalData", _wrap_ofVbo_updateNormalData},
    { "updateTexCoordData", _wrap_ofVbo_updateTexCoordData},
    { "updateAttributeData", _wrap_ofVbo_updateAttributeData},
    { "enableColors", _wrap_ofVbo_enableColors},
    { "enableNormals", _wrap_ofVbo_enableNormals},
    { "enableTexCoords", _wrap_ofVbo_enableTexCoords},
    { "enableIndices", _wrap_ofVbo_enableIndices},
    { "disableColors", _wrap_ofVbo_disableColors},
    { "disableNormals", _wrap_ofVbo_disableNormals},
    { "disableTexCoords", _wrap_ofVbo_disableTexCoords},
    { "disableIndices", _wrap_ofVbo_disableIndices},
    { "getVaoId", _wrap_ofVbo_getVaoId},
    { "getVertId", _wrap_ofVbo_getVertId},
    { "getColorId", _wrap_ofVbo_getColorId},
    { "getNormalId", _wrap_ofVbo_getNormalId},
    { "getTexCoordId", _wrap_ofVbo_getTexCoordId},
    { "getIndexId", _wrap_ofVbo_getIndexId},
    { "getAttributeId", _wrap_ofVbo_getAttributeId},
    { "getIsAllocated", _wrap_ofVbo_getIsAllocated},
    { "getUsingVerts", _wrap_ofVbo_getUsingVerts},
    { "getUsingColors", _wrap_ofVbo_getUsingColors},
    { "getUsingNormals", _wrap_ofVbo_getUsingNormals},
    { "getUsingTexCoords", _wrap_ofVbo_getUsingTexCoords},
    { "getUsingIndices", _wrap_ofVbo_getUsingIndices},
    { "draw", _wrap_ofVbo_draw},
    { "drawElements", _wrap_ofVbo_drawElements},
    { "drawInstanced", _wrap_ofVbo_drawInstanced},
    { "drawElementsInstanced", _wrap_ofVbo_drawElementsInstanced},
    { "bind", _wrap_ofVbo_bind},
    { "unbind", _wrap_ofVbo_unbind},
    { "clear", _wrap_ofVbo_clear},
    { "clearVertices", _wrap_ofVbo_clearVertices},
    { "clearNormals", _wrap_ofVbo_clearNormals},
    { "clearColors", _wrap_ofVbo_clearColors},
    { "clearTexCoords", _wrap_ofVbo_clearTexCoords},
    { "clearIndices", _wrap_ofVbo_clearIndices},
    { "clearAttribute", _wrap_ofVbo_clearAttribute},
    { "getNumVertices", _wrap_ofVbo_getNumVertices},
    { "getNumIndices", _wrap_ofVbo_getNumIndices},
    { "hasAttribute", _wrap_ofVbo_hasAttribute},
    {0,0}
};
static swig_lua_method swig_ofVbo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofVbo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofVbo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofVbo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofVbo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofVbo_Sf_SwigStatic = {
    "ofVbo",
    swig_ofVbo_Sf_SwigStatic_methods,
    swig_ofVbo_Sf_SwigStatic_attributes,
    swig_ofVbo_Sf_SwigStatic_constants,
    swig_ofVbo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofVbo_bases[] = {0};
static const char *swig_ofVbo_base_names[] = {0};
static swig_lua_class _wrap_class_ofVbo = { "ofVbo", "ofVbo", &SWIGTYPE_p_ofVbo,_proxy__wrap_new_ofVbo, swig_delete_ofVbo, swig_ofVbo_methods, swig_ofVbo_attributes, &swig_ofVbo_Sf_SwigStatic, swig_ofVbo_meta, swig_ofVbo_bases, swig_ofVbo_base_names };

static int _wrap_ofVboMesh_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  SWIG_check_num_args("draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofVboMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("ofVboMesh_draw",1,SWIGTYPE_p_ofVboMesh); }  ((ofVboMesh const *)arg1)->draw(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVboMesh__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVboMesh *result = 0 ;
  SWIG_check_num_args("ofVboMesh::ofVboMesh",0,0) result = (ofVboMesh *)new ofVboMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVboMesh,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVboMesh__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = 0 ; ofVboMesh *result = 0 ;
  SWIG_check_num_args("ofVboMesh::ofVboMesh",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVboMesh::ofVboMesh",1,"ofMesh const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("new_ofVboMesh",1,SWIGTYPE_p_ofMesh); }
   result = (ofVboMesh *)new ofVboMesh((ofMesh const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVboMesh,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVboMesh(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofVboMesh__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofVboMesh__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofVboMesh'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVboMesh::ofVboMesh()\n" "    ofVboMesh::ofVboMesh(ofMesh const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVboMesh_setUsage(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ; int arg2 ;
  SWIG_check_num_args("ofVboMesh::setUsage",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::setUsage",1,"ofVboMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVboMesh::setUsage",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("ofVboMesh_setUsage",1,SWIGTYPE_p_ofVboMesh); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->setUsage(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVboMesh_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  ofPolyRenderMode arg2 ; ofPolyRenderMode *argp2 ; SWIG_check_num_args("ofVboMesh::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::draw",1,"ofVboMesh const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVboMesh::draw",2,"ofPolyRenderMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("ofVboMesh_draw",1,SWIGTYPE_p_ofVboMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPolyRenderMode,0))){
    SWIG_fail_ptr("ofVboMesh_draw",2,SWIGTYPE_p_ofPolyRenderMode); }  arg2 = *argp2; ((ofVboMesh const *)arg1)->draw(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVboMesh_draw(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVboMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVboMesh_draw__SWIG_0_0(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVboMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPolyRenderMode, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVboMesh_draw__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVboMesh_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw() const\n" "    ofVboMesh::draw(ofPolyRenderMode) const\n"); lua_error(L);return 0; }
static int _wrap_ofVboMesh_drawInstanced(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  ofPolyRenderMode arg2 ; int arg3 ; ofPolyRenderMode *argp2 ; SWIG_check_num_args("ofVboMesh::drawInstanced",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::drawInstanced",1,"ofVboMesh const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVboMesh::drawInstanced",2,"ofPolyRenderMode");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVboMesh::drawInstanced",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("ofVboMesh_drawInstanced",1,SWIGTYPE_p_ofVboMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPolyRenderMode,0))){
    SWIG_fail_ptr("ofVboMesh_drawInstanced",2,SWIGTYPE_p_ofPolyRenderMode); }  arg2 = *argp2; arg3 = (int)lua_tonumber(L, 3);
  ((ofVboMesh const *)arg1)->drawInstanced(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVboMesh_getVbo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  ofVbo *result = 0 ; SWIG_check_num_args("ofVboMesh::getVbo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::getVbo",1,"ofVboMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("ofVboMesh_getVbo",1,SWIGTYPE_p_ofVboMesh); }  result = (ofVbo *) &(arg1)->getVbo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVbo,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVboMesh_getVbo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  ofVbo *result = 0 ; SWIG_check_num_args("ofVboMesh::getVbo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::getVbo",1,"ofVboMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("ofVboMesh_getVbo",1,SWIGTYPE_p_ofVboMesh); }  result = (ofVbo *) &((ofVboMesh const *)arg1)->getVbo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVbo,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVboMesh_getVbo(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVboMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVboMesh_getVbo__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVboMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVboMesh_getVbo__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVboMesh_getVbo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVboMesh::getVbo()\n" "    ofVboMesh::getVbo() const\n"); lua_error(L);return 0; }
static void swig_delete_ofVboMesh(void *obj) {
ofVboMesh *arg1 = (ofVboMesh *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofVboMesh(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofVboMesh);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofVboMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVboMesh_methods[]= {
    { "setUsage", _wrap_ofVboMesh_setUsage},
    { "draw", _wrap_ofVboMesh_draw},
    { "drawInstanced", _wrap_ofVboMesh_drawInstanced},
    { "getVbo", _wrap_ofVboMesh_getVbo},
    {0,0}
};
static swig_lua_method swig_ofVboMesh_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofVboMesh_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofVboMesh_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofVboMesh_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofVboMesh_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofVboMesh_Sf_SwigStatic = {
    "ofVboMesh",
    swig_ofVboMesh_Sf_SwigStatic_methods,
    swig_ofVboMesh_Sf_SwigStatic_attributes,
    swig_ofVboMesh_Sf_SwigStatic_constants,
    swig_ofVboMesh_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofVboMesh_bases[] = {0,0};
static const char *swig_ofVboMesh_base_names[] = {"ofMesh *",0};
static swig_lua_class _wrap_class_ofVboMesh = { "ofVboMesh", "ofVboMesh", &SWIGTYPE_p_ofVboMesh,_proxy__wrap_new_ofVboMesh, swig_delete_ofVboMesh, swig_ofVboMesh_methods, swig_ofVboMesh_attributes, &swig_ofVboMesh_Sf_SwigStatic, swig_ofVboMesh_meta, swig_ofVboMesh_bases, swig_ofVboMesh_base_names };

static int _wrap_new_ofPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::ofPixels_",0,0)
  result = (ofPixels_< unsigned char > *)new ofPixels_< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned char > *arg1 = 0 ;
  ofPixels_< unsigned char > *result = 0 ; SWIG_check_num_args("ofPixels_< unsigned char >::ofPixels_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::ofPixels_",1,"ofPixels_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_ofPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char > *)new ofPixels_< unsigned char >((ofPixels_< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofPixels__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::ofPixels_()\n"
  "    ofPixels_< unsigned char >::ofPixels_(ofPixels_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_allocate(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_allocate",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_allocatePixelFormat(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofPixelFormat arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",4,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_allocatePixelFormat",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofPixelFormat)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_allocateImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofImageType arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",4,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_allocateImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofImageType)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_isAllocated(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned char >::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::isAllocated",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_isAllocated",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (bool)((ofPixels_< unsigned char > const *)arg1)->isAllocated(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_clear(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::clear",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_clear",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::set",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::set",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_set",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  (arg1)->set(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; unsigned char arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::set",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::set",3,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_set",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned char)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_set(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofPixels_set__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofPixels_set__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::set(unsigned char)\n" "    ofPixels_< unsigned char >::set(int,unsigned char)\n");
  lua_error(L);return 0; }
static int _wrap_ofPixels_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; int arg5 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setFromPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofPixels_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofPixelFormat arg5 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",5,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setFromPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofPixels_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_setFromPixels(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofPixels_setFromPixels__SWIG_0(L);}  }  }  }  }  }
   if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofPixels_setFromPixels__SWIG_1(L);}  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned char >::setFromPixels(unsigned char const *,int,int,int)\n"
  "    ofPixels_< unsigned char >::setFromPixels(unsigned char const *,int,int,ofPixelFormat)\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_setFromPixelsImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofImageType arg5 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",5,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setFromPixelsImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofPixels_setFromPixelsImageType",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_setFromExternalPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; int arg5 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromExternalPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setFromExternalPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofPixels_setFromExternalPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_setFromExternalPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofPixelFormat arg5 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromExternalPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",5,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setFromExternalPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofPixels_setFromExternalPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5);
  (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_setFromExternalPixels(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofPixels_setFromExternalPixels__SWIG_0(L);}  }  }
         }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofPixels_setFromExternalPixels__SWIG_1(L);}  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_setFromExternalPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned char >::setFromExternalPixels(unsigned char *,int,int,int)\n"
  "    ofPixels_< unsigned char >::setFromExternalPixels(unsigned char *,int,int,ofPixelFormat)\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_setFromAlignedPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromAlignedPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setFromAlignedPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofPixels_setFromAlignedPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setFromAlignedPixels((unsigned char const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_setFromAlignedPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofPixelFormat arg5 ; int arg6 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromAlignedPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",5,"ofPixelFormat");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setFromAlignedPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("ofPixels_setFromAlignedPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setFromAlignedPixels((unsigned char const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_setFromAlignedPixels(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofPixels_setFromAlignedPixels__SWIG_0(L);}  }  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofPixels_setFromAlignedPixels__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_setFromAlignedPixels'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::setFromAlignedPixels(unsigned char const *,int,int,int,int)\n"
  "    ofPixels_< unsigned char >::setFromAlignedPixels(unsigned char const *,int,int,ofPixelFormat,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofPixels_swap(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::swap",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::swap",2,"ofPixels_< unsigned char > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_swap",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_swap",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->swap(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_crop(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::crop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_crop",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->crop(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_cropTo(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofPixels_< unsigned char >::cropTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",1,"ofPixels_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_cropTo",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_cropTo",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  ((ofPixels_< unsigned char > const *)arg1)->cropTo(*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_rotate90(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_rotate90",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_rotate90To(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::rotate90To",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90To",1,"ofPixels_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90To",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90To",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_rotate90To",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_rotate90To",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  ((ofPixels_< unsigned char > const *)arg1)->rotate90To(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_mirrorTo(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; bool arg3 ;
  bool arg4 ; SWIG_check_num_args("ofPixels_< unsigned char >::mirrorTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::mirrorTo",1,"ofPixels_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::mirrorTo",2,"ofPixels_< unsigned char > &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::mirrorTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::mirrorTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_mirrorTo",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_mirrorTo",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0); ((ofPixels_< unsigned char > const *)arg1)->mirrorTo(*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_mirror(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::mirror",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::mirror",1,"ofPixels_< unsigned char > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_mirror",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_resize__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofInterpolationMethod arg4 ;
  bool result; SWIG_check_num_args("ofPixels_< unsigned char >::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",4,"ofInterpolationMethod");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_resize",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofInterpolationMethod)(int)lua_tonumber(L, 4);
  result = (bool)(arg1)->resize(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_resize__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned char >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_resize",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->resize(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_resize(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofPixels_resize__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofPixels_resize__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_resize'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::resize(int,int,ofInterpolationMethod)\n"
  "    ofPixels_< unsigned char >::resize(int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_resizeTo__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ;
  ofInterpolationMethod arg3 ; bool result; SWIG_check_num_args("ofPixels_< unsigned char >::resizeTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",1,"ofPixels_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",3,"ofInterpolationMethod");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_resizeTo",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_resizeTo",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  arg3 = (ofInterpolationMethod)(int)lua_tonumber(L, 3);
  result = (bool)((ofPixels_< unsigned char > const *)arg1)->resizeTo(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_resizeTo__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned char >::resizeTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",1,"ofPixels_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",2,"ofPixels_< unsigned char > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_resizeTo",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_resizeTo",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (bool)((ofPixels_< unsigned char > const *)arg1)->resizeTo(*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_resizeTo(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_resizeTo__SWIG_1(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPixels_resizeTo__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_resizeTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::resizeTo(ofPixels_< unsigned char > &,ofInterpolationMethod) const\n"
  "    ofPixels_< unsigned char >::resizeTo(ofPixels_< unsigned char > &) const\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_pasteInto(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; int arg3 ;
  int arg4 ; bool result; SWIG_check_num_args("ofPixels_< unsigned char >::pasteInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::pasteInto",1,"ofPixels_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::pasteInto",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::pasteInto",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::pasteInto",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_pasteInto",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_pasteInto",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (bool)((ofPixels_< unsigned char > const *)arg1)->pasteInto(*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_blendInto(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; int arg3 ;
  int arg4 ; bool result; SWIG_check_num_args("ofPixels_< unsigned char >::blendInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::blendInto",1,"ofPixels_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::blendInto",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::blendInto",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::blendInto",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_blendInto",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_blendInto",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (bool)((ofPixels_< unsigned char > const *)arg1)->blendInto(*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_swapRgb(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::swapRgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::swapRgb",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_swapRgb",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->swapRgb(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getData__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getData",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getData",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  result = (unsigned char *)(arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_getData__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getData",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getData",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (unsigned char *)((ofPixels_< unsigned char > const *)arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_getData(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_getData__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_getData__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_getData'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::getData()\n" "    ofPixels_< unsigned char >::getData() const\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixels",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (unsigned char *)(arg1)->getPixels(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixels",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (unsigned char *)((ofPixels_< unsigned char > const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_getPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::getPixels()\n" "    ofPixels_< unsigned char >::getPixels() const\n");
  lua_error(L);return 0; }
static int _wrap_ofPixels_getPixelIndex(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getPixelIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixelIndex",1,"ofPixels_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixelIndex",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixelIndex",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getPixelIndex",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (int)((ofPixels_< unsigned char > const *)arg1)->getPixelIndex(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getColor",1,"ofPixels_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::getColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::getColor",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofPixels_< unsigned char > const *)arg1)->getColor(arg2,arg3); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getColor",1,"ofPixels_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::getColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPixels_< unsigned char > const *)arg1)->getColor(arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getColor(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofPixels_getColor__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofPixels_getColor__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_getColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::getColor(int,int) const\n" "    ofPixels_< unsigned char >::getColor(int) const\n");
  lua_error(L);return 0; }
static int _wrap_ofPixels_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ;
  ofColor_< unsigned char > *arg4 = 0 ; SWIG_check_num_args("ofPixels_< unsigned char >::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",4,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setColor",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor(arg2,arg3,(ofColor_< unsigned char > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; ofColor_< unsigned char > *arg3 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",3,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setColor",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor(arg2,(ofColor_< unsigned char > const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor((ofColor_< unsigned char > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_setColor__SWIG_2(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_setColor__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_setColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::setColor(int,int,ofColor_< unsigned char > const &)\n"
  "    ofPixels_< unsigned char >::setColor(int,ofColor_< unsigned char > const &)\n"
  "    ofPixels_< unsigned char >::setColor(ofColor_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_getWidth(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getWidth",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getWidth",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getHeight(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getHeight",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getHeight",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getBytesPerPixel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBytesPerPixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBytesPerPixel",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getBytesPerPixel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBytesPerPixel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getBitsPerPixel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBitsPerPixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBitsPerPixel",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getBitsPerPixel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBitsPerPixel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getBytesPerChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBytesPerChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBytesPerChannel",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getBytesPerChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBytesPerChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getBitsPerChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBitsPerChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBitsPerChannel",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getBitsPerChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBitsPerChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getBytesStride(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBytesStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBytesStride",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getBytesStride",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBytesStride();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getNumChannels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getNumChannels",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getNumChannels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getNumChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getTotalBytes(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getTotalBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getTotalBytes",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getTotalBytes",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getTotalBytes(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getNumPlanes(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getNumPlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getNumPlanes",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getNumPlanes",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getNumPlanes(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getPlane(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; ofPixels_< unsigned char > result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getPlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getPlane",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::getPlane",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getPlane",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getPlane(arg2); {
    ofPixels_< unsigned char > * resultptr = new ofPixels_< unsigned char >((const ofPixels_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPixels_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; ofPixels_< unsigned char > result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getChannel",1,"ofPixels_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::getChannel",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPixels_< unsigned char > const *)arg1)->getChannel(arg2); {
    ofPixels_< unsigned char > * resultptr = new ofPixels_< unsigned char >((const ofPixels_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPixels_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getPixelFormat(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixelFormat result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getPixelFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixelFormat",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getPixelFormat",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixelFormat)((ofPixels_< unsigned char > const *)arg1)->getPixelFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_size(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::size",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_size",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_getImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofImageType result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getImageType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getImageType",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_getImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofImageType)((ofPixels_< unsigned char > const *)arg1)->getImageType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_setChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; ofPixels_< unsigned char > arg3 ;
  ofPixels_< unsigned char > *argp3 ; SWIG_check_num_args("ofPixels_< unsigned char >::setChannel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setChannel",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setChannel",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setChannel",3,"ofPixels_< unsigned char > const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setChannel",3,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = *argp3;
  (arg1)->setChannel(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_setImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofImageType arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::setImageType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setImageType",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setImageType",2,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  arg2 = (ofImageType)(int)lua_tonumber(L, 2); (arg1)->setImageType(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_setNumChannels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::setNumChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setNumChannels",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setNumChannels",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_setNumChannels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNumChannels(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPixels_begin__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char >::iterator result;
  SWIG_check_num_args("ofPixels_< unsigned char >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::begin",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_begin",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char >::iterator)(arg1)->begin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_c_end__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char >::iterator result;
  SWIG_check_num_args("ofPixels_< unsigned char >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::end",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_c_end",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char >::iterator)(arg1)->end();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_begin__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char >::const_iterator result;
  SWIG_check_num_args("ofPixels_< unsigned char >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::begin",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_begin",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char >::const_iterator)((ofPixels_< unsigned char > const *)arg1)->begin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_begin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_begin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_begin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_begin'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::begin()\n" "    ofPixels_< unsigned char >::begin() const\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_c_end__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char >::const_iterator result;
  SWIG_check_num_args("ofPixels_< unsigned char >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::end",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_c_end",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char >::const_iterator)((ofPixels_< unsigned char > const *)arg1)->end();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_c_end(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_c_end__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_c_end__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_c_end'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::end()\n" "    ofPixels_< unsigned char >::end() const\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_rbegin__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char >::reverse_iterator result;
  SWIG_check_num_args("ofPixels_< unsigned char >::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::rbegin",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_rbegin",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char >::reverse_iterator)(arg1)->rbegin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_rend__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char >::reverse_iterator result;
  SWIG_check_num_args("ofPixels_< unsigned char >::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::rend",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_rend",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char >::reverse_iterator)(arg1)->rend();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_rbegin__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char >::const_reverse_iterator result; SWIG_check_num_args("ofPixels_< unsigned char >::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::rbegin",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_rbegin",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char >::const_reverse_iterator)((ofPixels_< unsigned char > const *)arg1)->rbegin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_rbegin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_rbegin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_rbegin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_rbegin'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::rbegin()\n" "    ofPixels_< unsigned char >::rbegin() const\n"); lua_error(L);return 0; }
static int _wrap_ofPixels_rend__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  ofPixels_< unsigned char >::const_reverse_iterator result; SWIG_check_num_args("ofPixels_< unsigned char >::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::rend",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPixels_rend",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char >::const_reverse_iterator)((ofPixels_< unsigned char > const *)arg1)->rend();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPixels_rend(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_rend__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPixels_rend__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPixels_rend'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::rend()\n" "    ofPixels_< unsigned char >::rend() const\n"); lua_error(L);return 0; }
static void swig_delete_ofPixels(void *obj) {
ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofPixels(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofPixels);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofPixels_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofPixels_methods[]= {
    { "allocate", _wrap_ofPixels_allocate},
    { "allocatePixelFormat", _wrap_ofPixels_allocatePixelFormat},
    { "allocateImageType", _wrap_ofPixels_allocateImageType},
    { "isAllocated", _wrap_ofPixels_isAllocated},
    { "clear", _wrap_ofPixels_clear},
    { "set", _wrap_ofPixels_set},
    { "setFromPixels", _wrap_ofPixels_setFromPixels},
    { "setFromPixelsImageType", _wrap_ofPixels_setFromPixelsImageType},
    { "setFromExternalPixels", _wrap_ofPixels_setFromExternalPixels},
    { "setFromAlignedPixels", _wrap_ofPixels_setFromAlignedPixels},
    { "swap", _wrap_ofPixels_swap},
    { "crop", _wrap_ofPixels_crop},
    { "cropTo", _wrap_ofPixels_cropTo},
    { "rotate90", _wrap_ofPixels_rotate90},
    { "rotate90To", _wrap_ofPixels_rotate90To},
    { "mirrorTo", _wrap_ofPixels_mirrorTo},
    { "mirror", _wrap_ofPixels_mirror},
    { "resize", _wrap_ofPixels_resize},
    { "resizeTo", _wrap_ofPixels_resizeTo},
    { "pasteInto", _wrap_ofPixels_pasteInto},
    { "blendInto", _wrap_ofPixels_blendInto},
    { "swapRgb", _wrap_ofPixels_swapRgb},
    { "getData", _wrap_ofPixels_getData},
    { "getPixels", _wrap_ofPixels_getPixels},
    { "getPixelIndex", _wrap_ofPixels_getPixelIndex},
    { "getColor", _wrap_ofPixels_getColor},
    { "setColor", _wrap_ofPixels_setColor},
    { "getWidth", _wrap_ofPixels_getWidth},
    { "getHeight", _wrap_ofPixels_getHeight},
    { "getBytesPerPixel", _wrap_ofPixels_getBytesPerPixel},
    { "getBitsPerPixel", _wrap_ofPixels_getBitsPerPixel},
    { "getBytesPerChannel", _wrap_ofPixels_getBytesPerChannel},
    { "getBitsPerChannel", _wrap_ofPixels_getBitsPerChannel},
    { "getBytesStride", _wrap_ofPixels_getBytesStride},
    { "getNumChannels", _wrap_ofPixels_getNumChannels},
    { "getTotalBytes", _wrap_ofPixels_getTotalBytes},
    { "getNumPlanes", _wrap_ofPixels_getNumPlanes},
    { "getPlane", _wrap_ofPixels_getPlane},
    { "getChannel", _wrap_ofPixels_getChannel},
    { "getPixelFormat", _wrap_ofPixels_getPixelFormat},
    { "size", _wrap_ofPixels_size},
    { "getImageType", _wrap_ofPixels_getImageType},
    { "setChannel", _wrap_ofPixels_setChannel},
    { "setImageType", _wrap_ofPixels_setImageType},
    { "setNumChannels", _wrap_ofPixels_setNumChannels},
    { "begin", _wrap_ofPixels_begin},
    { "c_end", _wrap_ofPixels_c_end},
    { "rbegin", _wrap_ofPixels_rbegin},
    { "rend", _wrap_ofPixels_rend},
    {0,0}
};
static swig_lua_method swig_ofPixels_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofPixels_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofPixels_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofPixels_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofPixels_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofPixels_Sf_SwigStatic = {
    "ofPixels",
    swig_ofPixels_Sf_SwigStatic_methods,
    swig_ofPixels_Sf_SwigStatic_attributes,
    swig_ofPixels_Sf_SwigStatic_constants,
    swig_ofPixels_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofPixels_bases[] = {0};
static const char *swig_ofPixels_base_names[] = {0};
static swig_lua_class _wrap_class_ofPixels = { "ofPixels", "ofPixels", &SWIGTYPE_p_ofPixels_T_unsigned_char_t,_proxy__wrap_new_ofPixels, swig_delete_ofPixels, swig_ofPixels_methods, swig_ofPixels_attributes, &swig_ofPixels_Sf_SwigStatic, swig_ofPixels_meta, swig_ofPixels_bases, swig_ofPixels_base_names };

static int _wrap_new_ofFloatPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *result = 0 ;
  SWIG_check_num_args("ofPixels_< float >::ofPixels_",0,0) result = (ofPixels_< float > *)new ofPixels_< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = 0 ;
  ofPixels_< float > *result = 0 ; SWIG_check_num_args("ofPixels_< float >::ofPixels_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPixels_< float >::ofPixels_",1,"ofPixels_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("new_ofFloatPixels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float > *)new ofPixels_< float >((ofPixels_< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofFloatPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofFloatPixels__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofFloatPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofFloatPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< float >::ofPixels_()\n" "    ofPixels_< float >::ofPixels_(ofPixels_< float > const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatPixels_allocate(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofPixels_< float >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::allocate",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_allocate",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_allocatePixelFormat(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; int arg3 ; ofPixelFormat arg4 ;
  SWIG_check_num_args("ofPixels_< float >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::allocate",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::allocate",4,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_allocatePixelFormat",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofPixelFormat)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_allocateImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; int arg3 ; ofImageType arg4 ;
  SWIG_check_num_args("ofPixels_< float >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::allocate",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::allocate",4,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_allocateImageType",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofImageType)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_isAllocated(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; bool result; SWIG_check_num_args("ofPixels_< float >::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::isAllocated",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_isAllocated",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (bool)((ofPixels_< float > const *)arg1)->isAllocated(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_clear(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  SWIG_check_num_args("ofPixels_< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::clear",1,"ofPixels_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_clear",1,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float arg2 ; SWIG_check_num_args("ofPixels_< float >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::set",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_set",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; float arg3 ;
  SWIG_check_num_args("ofPixels_< float >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::set",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_set",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_set(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatPixels_set__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatPixels_set__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< float >::set(float)\n" "    ofPixels_< float >::set(int,float)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatPixels_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofPixels_< float >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",1,"ofPixels_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromPixels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; ofPixelFormat arg5 ;
  SWIG_check_num_args("ofPixels_< float >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",1,"ofPixels_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",5,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromPixels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_setFromPixels(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofFloatPixels_setFromPixels__SWIG_0(L);}  }  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofFloatPixels_setFromPixels__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::setFromPixels(float const *,int,int,int)\n"
  "    ofPixels_< float >::setFromPixels(float const *,int,int,ofPixelFormat)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatPixels_setFromPixelsImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; ofImageType arg5 ;
  SWIG_check_num_args("ofPixels_< float >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",1,"ofPixels_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::setFromPixels",5,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromPixelsImageType",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromPixelsImageType",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_setFromExternalPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofPixels_< float >::setFromExternalPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",1,"ofPixels_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromExternalPixels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromExternalPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_setFromExternalPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; ofPixelFormat arg5 ;
  SWIG_check_num_args("ofPixels_< float >::setFromExternalPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",1,"ofPixels_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::setFromExternalPixels",5,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromExternalPixels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromExternalPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5);
  (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_setFromExternalPixels(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ;
  argc = lua_gettop(L); if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofFloatPixels_setFromExternalPixels__SWIG_0(L);}  }  }  }
       }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofFloatPixels_setFromExternalPixels__SWIG_1(L);}  }  }  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_setFromExternalPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::setFromExternalPixels(float *,int,int,int)\n"
  "    ofPixels_< float >::setFromExternalPixels(float *,int,int,ofPixelFormat)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatPixels_setFromAlignedPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
  SWIG_check_num_args("ofPixels_< float >::setFromAlignedPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",1,"ofPixels_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromAlignedPixels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromAlignedPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setFromAlignedPixels((float const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_setFromAlignedPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; ofPixelFormat arg5 ;
  int arg6 ; SWIG_check_num_args("ofPixels_< float >::setFromAlignedPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",1,"ofPixels_< float > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",5,"ofPixelFormat");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< float >::setFromAlignedPixels",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromAlignedPixels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofFloatPixels_setFromAlignedPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setFromAlignedPixels((float const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_setFromAlignedPixels(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ;
  argc = lua_gettop(L); if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofFloatPixels_setFromAlignedPixels__SWIG_0(L);}  }  }  }  }  }  }  if (argc == 6) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofFloatPixels_setFromAlignedPixels__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_setFromAlignedPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::setFromAlignedPixels(float const *,int,int,int,int)\n"
  "    ofPixels_< float >::setFromAlignedPixels(float const *,int,int,ofPixelFormat,int)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatPixels_swap(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ; SWIG_check_num_args("ofPixels_< float >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::swap",1,"ofPixels_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::swap",2,"ofPixels_< float > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_swap",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_swap",2,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->swap(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_crop(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofPixels_< float >::crop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::crop",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::crop",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::crop",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::crop",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::crop",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_crop",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->crop(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_cropTo(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
  SWIG_check_num_args("ofPixels_< float >::cropTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::cropTo",1,"ofPixels_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::cropTo",2,"ofPixels_< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::cropTo",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::cropTo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< float >::cropTo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< float >::cropTo",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_cropTo",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_cropTo",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  ((ofPixels_< float > const *)arg1)->cropTo(*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_rotate90(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ; SWIG_check_num_args("ofPixels_< float >::rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::rotate90",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::rotate90",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_rotate90",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_rotate90To(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float > *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofPixels_< float >::rotate90To",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::rotate90To",1,"ofPixels_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::rotate90To",2,"ofPixels_< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::rotate90To",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_rotate90To",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_rotate90To",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  ((ofPixels_< float > const *)arg1)->rotate90To(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_mirrorTo(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ; bool arg3 ; bool arg4 ; SWIG_check_num_args("ofPixels_< float >::mirrorTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::mirrorTo",1,"ofPixels_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::mirrorTo",2,"ofPixels_< float > &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofPixels_< float >::mirrorTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofPixels_< float >::mirrorTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_mirrorTo",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_mirrorTo",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0); ((ofPixels_< float > const *)arg1)->mirrorTo(*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_mirror(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  bool arg2 ; bool arg3 ; SWIG_check_num_args("ofPixels_< float >::mirror",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::mirror",1,"ofPixels_< float > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPixels_< float >::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofPixels_< float >::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_mirror",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_resize__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; int arg3 ; ofInterpolationMethod arg4 ; bool result;
  SWIG_check_num_args("ofPixels_< float >::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::resize",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::resize",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::resize",4,"ofInterpolationMethod");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_resize",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofInterpolationMethod)(int)lua_tonumber(L, 4);
  result = (bool)(arg1)->resize(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_resize__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; int arg3 ; bool result;
  SWIG_check_num_args("ofPixels_< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::resize",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_resize",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->resize(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_resize(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatPixels_resize__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofFloatPixels_resize__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_resize'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::resize(int,int,ofInterpolationMethod)\n"
  "    ofPixels_< float >::resize(int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatPixels_resizeTo__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float > *arg2 = 0 ; ofInterpolationMethod arg3 ; bool result;
  SWIG_check_num_args("ofPixels_< float >::resizeTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::resizeTo",1,"ofPixels_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::resizeTo",2,"ofPixels_< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::resizeTo",3,"ofInterpolationMethod");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_resizeTo",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_resizeTo",2,SWIGTYPE_p_ofPixels_T_float_t); } 
  arg3 = (ofInterpolationMethod)(int)lua_tonumber(L, 3);
  result = (bool)((ofPixels_< float > const *)arg1)->resizeTo(*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_resizeTo__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float > *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofPixels_< float >::resizeTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::resizeTo",1,"ofPixels_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::resizeTo",2,"ofPixels_< float > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_resizeTo",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_resizeTo",2,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (bool)((ofPixels_< float > const *)arg1)->resizeTo(*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_resizeTo(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_resizeTo__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofFloatPixels_resizeTo__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_resizeTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::resizeTo(ofPixels_< float > &,ofInterpolationMethod) const\n"
  "    ofPixels_< float >::resizeTo(ofPixels_< float > &) const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatPixels_pasteInto(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ; int arg3 ; int arg4 ; bool result; SWIG_check_num_args("ofPixels_< float >::pasteInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::pasteInto",1,"ofPixels_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::pasteInto",2,"ofPixels_< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::pasteInto",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::pasteInto",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_pasteInto",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_pasteInto",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (bool)((ofPixels_< float > const *)arg1)->pasteInto(*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_blendInto(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  ofPixels_< float > *arg2 = 0 ; int arg3 ; int arg4 ; bool result; SWIG_check_num_args("ofPixels_< float >::blendInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::blendInto",1,"ofPixels_< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::blendInto",2,"ofPixels_< float > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::blendInto",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< float >::blendInto",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_blendInto",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_blendInto",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (bool)((ofPixels_< float > const *)arg1)->blendInto(*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_swapRgb(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  SWIG_check_num_args("ofPixels_< float >::swapRgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::swapRgb",1,"ofPixels_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_swapRgb",1,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->swapRgb(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getData__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofPixels_< float >::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getData",1,"ofPixels_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getData",1,SWIGTYPE_p_ofPixels_T_float_t); }  result = (float *)(arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_getData__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofPixels_< float >::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getData",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getData",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (float *)((ofPixels_< float > const *)arg1)->getData(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getData(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_getData__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_getData__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_getData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::getData()\n" "    ofPixels_< float >::getData() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatPixels_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofPixels_< float >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getPixels",1,"ofPixels_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getPixels",1,SWIGTYPE_p_ofPixels_T_float_t); }  result = (float *)(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofPixels_< float >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getPixels",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getPixels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (float *)((ofPixels_< float > const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_getPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::getPixels()\n" "    ofPixels_< float >::getPixels() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatPixels_getPixelIndex(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; int arg3 ; int result;
  SWIG_check_num_args("ofPixels_< float >::getPixelIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getPixelIndex",1,"ofPixels_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::getPixelIndex",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::getPixelIndex",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getPixelIndex",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (int)((ofPixels_< float > const *)arg1)->getPixelIndex(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; int arg3 ; ofColor_< float > result;
  SWIG_check_num_args("ofPixels_< float >::getColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getColor",1,"ofPixels_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::getColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::getColor",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getColor",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofPixels_< float > const *)arg1)->getColor(arg2,arg3); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; ofColor_< float > result;
  SWIG_check_num_args("ofPixels_< float >::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getColor",1,"ofPixels_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::getColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getColor",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPixels_< float > const *)arg1)->getColor(arg2); {
    ofColor_< float > * resultptr = new ofColor_< float >((const ofColor_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getColor(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofFloatPixels_getColor__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofFloatPixels_getColor__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_getColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::getColor(int,int) const\n"
  "    ofPixels_< float >::getColor(int) const\n"); lua_error(L);return 0; }
static int _wrap_ofFloatPixels_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; int arg3 ; ofColor_< float > *arg4 = 0 ;
  SWIG_check_num_args("ofPixels_< float >::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setColor",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< float >::setColor",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPixels_< float >::setColor",4,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setColor",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setColor",4,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setColor(arg2,arg3,(ofColor_< float > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; ofColor_< float > *arg3 = 0 ;
  SWIG_check_num_args("ofPixels_< float >::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setColor",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPixels_< float >::setColor",3,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setColor",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setColor",3,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setColor(arg2,(ofColor_< float > const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofColor_< float > *arg2 = 0 ;
  SWIG_check_num_args("ofPixels_< float >::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setColor",1,"ofPixels_< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< float >::setColor",2,"ofColor_< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setColor",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setColor",2,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setColor((ofColor_< float > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_setColor__SWIG_2(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_setColor__SWIG_1(L);}  }  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_setColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::setColor(int,int,ofColor_< float > const &)\n"
  "    ofPixels_< float >::setColor(int,ofColor_< float > const &)\n"
  "    ofPixels_< float >::setColor(ofColor_< float > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofFloatPixels_getWidth(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int result; SWIG_check_num_args("ofPixels_< float >::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getWidth",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getWidth",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getHeight(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int result; SWIG_check_num_args("ofPixels_< float >::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getHeight",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getHeight",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getBytesPerPixel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< float >::getBytesPerPixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getBytesPerPixel",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getBytesPerPixel",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getBytesPerPixel(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getBitsPerPixel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< float >::getBitsPerPixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getBitsPerPixel",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getBitsPerPixel",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getBitsPerPixel(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getBytesPerChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< float >::getBytesPerChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getBytesPerChannel",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getBytesPerChannel",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getBytesPerChannel(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getBitsPerChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< float >::getBitsPerChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getBitsPerChannel",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getBitsPerChannel",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getBitsPerChannel(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getBytesStride(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< float >::getBytesStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getBytesStride",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getBytesStride",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getBytesStride(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getNumChannels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< float >::getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getNumChannels",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getNumChannels",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getNumChannels(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getTotalBytes(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int result; SWIG_check_num_args("ofPixels_< float >::getTotalBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getTotalBytes",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getTotalBytes",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getTotalBytes(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getNumPlanes(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int result; SWIG_check_num_args("ofPixels_< float >::getNumPlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getNumPlanes",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getNumPlanes",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->getNumPlanes(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getPlane(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int arg2 ; ofPixels_< float > result; SWIG_check_num_args("ofPixels_< float >::getPlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getPlane",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::getPlane",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getPlane",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getPlane(arg2); {
    ofPixels_< float > * resultptr = new ofPixels_< float >((const ofPixels_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPixels_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; ofPixels_< float > result;
  SWIG_check_num_args("ofPixels_< float >::getChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getChannel",1,"ofPixels_< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::getChannel",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getChannel",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPixels_< float > const *)arg1)->getChannel(arg2); {
    ofPixels_< float > * resultptr = new ofPixels_< float >((const ofPixels_< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPixels_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getPixelFormat(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixelFormat result;
  SWIG_check_num_args("ofPixels_< float >::getPixelFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getPixelFormat",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getPixelFormat",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixelFormat)((ofPixels_< float > const *)arg1)->getPixelFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_size(lua_State* L) { int SWIG_arg = 0; ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ;
  int result; SWIG_check_num_args("ofPixels_< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::size",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_size",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (int)((ofPixels_< float > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_getImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofImageType result;
  SWIG_check_num_args("ofPixels_< float >::getImageType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::getImageType",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_getImageType",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofImageType)((ofPixels_< float > const *)arg1)->getImageType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_setChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; ofPixels_< float > arg3 ; ofPixels_< float > *argp3 ;
  SWIG_check_num_args("ofPixels_< float >::setChannel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setChannel",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::setChannel",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPixels_< float >::setChannel",3,"ofPixels_< float > const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setChannel",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setChannel",3,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = *argp3; (arg1)->setChannel(arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_setImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofImageType arg2 ;
  SWIG_check_num_args("ofPixels_< float >::setImageType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setImageType",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::setImageType",2,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setImageType",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (ofImageType)(int)lua_tonumber(L, 2);
  (arg1)->setImageType(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_setNumChannels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; int arg2 ; SWIG_check_num_args("ofPixels_< float >::setNumChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::setNumChannels",1,"ofPixels_< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< float >::setNumChannels",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_setNumChannels",1,SWIGTYPE_p_ofPixels_T_float_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNumChannels(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_begin__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float >::iterator result;
  SWIG_check_num_args("ofPixels_< float >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::begin",1,"ofPixels_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_begin",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float >::iterator)(arg1)->begin(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_c_end__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float >::iterator result;
  SWIG_check_num_args("ofPixels_< float >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::end",1,"ofPixels_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_c_end",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float >::iterator)(arg1)->end(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_begin__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float >::const_iterator result;
  SWIG_check_num_args("ofPixels_< float >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::begin",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_begin",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float >::const_iterator)((ofPixels_< float > const *)arg1)->begin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_begin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_begin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_begin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_begin'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::begin()\n" "    ofPixels_< float >::begin() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatPixels_c_end__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float >::const_iterator result;
  SWIG_check_num_args("ofPixels_< float >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::end",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_c_end",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float >::const_iterator)((ofPixels_< float > const *)arg1)->end();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_c_end(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_c_end__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_c_end__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_c_end'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::end()\n" "    ofPixels_< float >::end() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatPixels_rbegin__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float >::reverse_iterator result;
  SWIG_check_num_args("ofPixels_< float >::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::rbegin",1,"ofPixels_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_rbegin",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float >::reverse_iterator)(arg1)->rbegin(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_rend__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float >::reverse_iterator result;
  SWIG_check_num_args("ofPixels_< float >::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::rend",1,"ofPixels_< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_rend",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float >::reverse_iterator)(arg1)->rend(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFloatPixels_rbegin__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float >::const_reverse_iterator result;
  SWIG_check_num_args("ofPixels_< float >::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::rbegin",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_rbegin",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float >::const_reverse_iterator)((ofPixels_< float > const *)arg1)->rbegin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_rbegin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_rbegin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_rbegin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_rbegin'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< float >::rbegin()\n" "    ofPixels_< float >::rbegin() const\n");
  lua_error(L);return 0; }
static int _wrap_ofFloatPixels_rend__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< float > *arg1 = (ofPixels_< float > *) 0 ; ofPixels_< float >::const_reverse_iterator result;
  SWIG_check_num_args("ofPixels_< float >::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< float >::rend",1,"ofPixels_< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("ofFloatPixels_rend",1,SWIGTYPE_p_ofPixels_T_float_t); } 
  result = (ofPixels_< float >::const_reverse_iterator)((ofPixels_< float > const *)arg1)->rend();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofFloatPixels_rend(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_rend__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofFloatPixels_rend__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofFloatPixels_rend'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< float >::rend()\n" "    ofPixels_< float >::rend() const\n"); lua_error(L);return 0; }
static void swig_delete_ofFloatPixels(void *obj) {
ofPixels_< float > *arg1 = (ofPixels_< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofFloatPixels(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofFloatPixels);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofFloatPixels_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofFloatPixels_methods[]= {
    { "allocate", _wrap_ofFloatPixels_allocate},
    { "allocatePixelFormat", _wrap_ofFloatPixels_allocatePixelFormat},
    { "allocateImageType", _wrap_ofFloatPixels_allocateImageType},
    { "isAllocated", _wrap_ofFloatPixels_isAllocated},
    { "clear", _wrap_ofFloatPixels_clear},
    { "set", _wrap_ofFloatPixels_set},
    { "setFromPixels", _wrap_ofFloatPixels_setFromPixels},
    { "setFromPixelsImageType", _wrap_ofFloatPixels_setFromPixelsImageType},
    { "setFromExternalPixels", _wrap_ofFloatPixels_setFromExternalPixels},
    { "setFromAlignedPixels", _wrap_ofFloatPixels_setFromAlignedPixels},
    { "swap", _wrap_ofFloatPixels_swap},
    { "crop", _wrap_ofFloatPixels_crop},
    { "cropTo", _wrap_ofFloatPixels_cropTo},
    { "rotate90", _wrap_ofFloatPixels_rotate90},
    { "rotate90To", _wrap_ofFloatPixels_rotate90To},
    { "mirrorTo", _wrap_ofFloatPixels_mirrorTo},
    { "mirror", _wrap_ofFloatPixels_mirror},
    { "resize", _wrap_ofFloatPixels_resize},
    { "resizeTo", _wrap_ofFloatPixels_resizeTo},
    { "pasteInto", _wrap_ofFloatPixels_pasteInto},
    { "blendInto", _wrap_ofFloatPixels_blendInto},
    { "swapRgb", _wrap_ofFloatPixels_swapRgb},
    { "getData", _wrap_ofFloatPixels_getData},
    { "getPixels", _wrap_ofFloatPixels_getPixels},
    { "getPixelIndex", _wrap_ofFloatPixels_getPixelIndex},
    { "getColor", _wrap_ofFloatPixels_getColor},
    { "setColor", _wrap_ofFloatPixels_setColor},
    { "getWidth", _wrap_ofFloatPixels_getWidth},
    { "getHeight", _wrap_ofFloatPixels_getHeight},
    { "getBytesPerPixel", _wrap_ofFloatPixels_getBytesPerPixel},
    { "getBitsPerPixel", _wrap_ofFloatPixels_getBitsPerPixel},
    { "getBytesPerChannel", _wrap_ofFloatPixels_getBytesPerChannel},
    { "getBitsPerChannel", _wrap_ofFloatPixels_getBitsPerChannel},
    { "getBytesStride", _wrap_ofFloatPixels_getBytesStride},
    { "getNumChannels", _wrap_ofFloatPixels_getNumChannels},
    { "getTotalBytes", _wrap_ofFloatPixels_getTotalBytes},
    { "getNumPlanes", _wrap_ofFloatPixels_getNumPlanes},
    { "getPlane", _wrap_ofFloatPixels_getPlane},
    { "getChannel", _wrap_ofFloatPixels_getChannel},
    { "getPixelFormat", _wrap_ofFloatPixels_getPixelFormat},
    { "size", _wrap_ofFloatPixels_size},
    { "getImageType", _wrap_ofFloatPixels_getImageType},
    { "setChannel", _wrap_ofFloatPixels_setChannel},
    { "setImageType", _wrap_ofFloatPixels_setImageType},
    { "setNumChannels", _wrap_ofFloatPixels_setNumChannels},
    { "begin", _wrap_ofFloatPixels_begin},
    { "c_end", _wrap_ofFloatPixels_c_end},
    { "rbegin", _wrap_ofFloatPixels_rbegin},
    { "rend", _wrap_ofFloatPixels_rend},
    {0,0}
};
static swig_lua_method swig_ofFloatPixels_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofFloatPixels_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofFloatPixels_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofFloatPixels_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofFloatPixels_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofFloatPixels_Sf_SwigStatic = {
    "ofFloatPixels",
    swig_ofFloatPixels_Sf_SwigStatic_methods,
    swig_ofFloatPixels_Sf_SwigStatic_attributes,
    swig_ofFloatPixels_Sf_SwigStatic_constants,
    swig_ofFloatPixels_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofFloatPixels_bases[] = {0};
static const char *swig_ofFloatPixels_base_names[] = {0};
static swig_lua_class _wrap_class_ofFloatPixels = { "ofFloatPixels", "ofFloatPixels", &SWIGTYPE_p_ofPixels_T_float_t,_proxy__wrap_new_ofFloatPixels, swig_delete_ofFloatPixels, swig_ofFloatPixels_methods, swig_ofFloatPixels_attributes, &swig_ofFloatPixels_Sf_SwigStatic, swig_ofFloatPixels_meta, swig_ofFloatPixels_bases, swig_ofFloatPixels_base_names };

static int _wrap_new_ofShortPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned short > *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::ofPixels_",0,0)
  result = (ofPixels_< unsigned short > *)new ofPixels_< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned short > *arg1 = 0 ;
  ofPixels_< unsigned short > *result = 0 ; SWIG_check_num_args("ofPixels_< unsigned short >::ofPixels_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::ofPixels_",1,"ofPixels_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("new_ofShortPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short > *)new ofPixels_< unsigned short >((ofPixels_< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_short_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_ofShortPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofShortPixels__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofShortPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofShortPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned short >::ofPixels_()\n"
  "    ofPixels_< unsigned short >::ofPixels_(ofPixels_< unsigned short > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_allocate(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_allocate",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_allocatePixelFormat(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ; ofPixelFormat arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",4,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_allocatePixelFormat",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (ofPixelFormat)(int)lua_tonumber(L, 4);
  (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_allocateImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ; ofImageType arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::allocate",4,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_allocateImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (ofImageType)(int)lua_tonumber(L, 4);
  (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_isAllocated(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned short >::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::isAllocated",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_isAllocated",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (bool)((ofPixels_< unsigned short > const *)arg1)->isAllocated(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_clear(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::clear",1,"ofPixels_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_clear",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::set",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::set",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_set",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  (arg1)->set(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; unsigned short arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::set",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::set",3,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_set",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned short)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_set(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortPixels_set__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortPixels_set__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned short >::set(unsigned short)\n" "    ofPixels_< unsigned short >::set(int,unsigned short)\n");
  lua_error(L);return 0; }
static int _wrap_ofShortPixels_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofPixels_< unsigned short >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",1,"ofPixels_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setFromPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortPixels_setFromPixels",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ; int arg4 ; ofPixelFormat arg5 ; SWIG_check_num_args("ofPixels_< unsigned short >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",1,"ofPixels_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",5,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setFromPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortPixels_setFromPixels",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_setFromPixels(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofShortPixels_setFromPixels__SWIG_0(L);}  }  }  }
       }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofShortPixels_setFromPixels__SWIG_1(L);}  }  }  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::setFromPixels(unsigned short const *,int,int,int)\n"
  "    ofPixels_< unsigned short >::setFromPixels(unsigned short const *,int,int,ofPixelFormat)\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_setFromPixelsImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ; int arg4 ; ofImageType arg5 ; SWIG_check_num_args("ofPixels_< unsigned short >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",1,"ofPixels_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromPixels",5,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setFromPixelsImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortPixels_setFromPixelsImageType",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned short const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_setFromExternalPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofPixels_< unsigned short >::setFromExternalPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",1,"ofPixels_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",2,"unsigned short *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setFromExternalPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortPixels_setFromExternalPixels",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_setFromExternalPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ; int arg4 ; ofPixelFormat arg5 ; SWIG_check_num_args("ofPixels_< unsigned short >::setFromExternalPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",1,"ofPixels_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",2,"unsigned short *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromExternalPixels",5,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setFromExternalPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortPixels_setFromExternalPixels",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5);
  (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_setFromExternalPixels(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ;
  argc = lua_gettop(L); if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofShortPixels_setFromExternalPixels__SWIG_0(L);}  }
           }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofShortPixels_setFromExternalPixels__SWIG_1(L);}  }
           }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_setFromExternalPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::setFromExternalPixels(unsigned short *,int,int,int)\n"
  "    ofPixels_< unsigned short >::setFromExternalPixels(unsigned short *,int,int,ofPixelFormat)\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_setFromAlignedPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofPixels_< unsigned short >::setFromAlignedPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",1,"ofPixels_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setFromAlignedPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortPixels_setFromAlignedPixels",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setFromAlignedPixels((unsigned short const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_setFromAlignedPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *arg2 = (unsigned short *) 0 ;
  int arg3 ; int arg4 ; ofPixelFormat arg5 ; int arg6 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::setFromAlignedPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",1,"ofPixels_< unsigned short > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",5,"ofPixelFormat");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< unsigned short >::setFromAlignedPixels",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setFromAlignedPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("ofShortPixels_setFromAlignedPixels",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofPixelFormat)(int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setFromAlignedPixels((unsigned short const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_setFromAlignedPixels(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ;
  argc = lua_gettop(L); if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofShortPixels_setFromAlignedPixels__SWIG_0(L);}  }  }  }  }  }  }  if (argc == 6) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofShortPixels_setFromAlignedPixels__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_setFromAlignedPixels'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned short >::setFromAlignedPixels(unsigned short const *,int,int,int,int)\n"
  "    ofPixels_< unsigned short >::setFromAlignedPixels(unsigned short const *,int,int,ofPixelFormat,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofShortPixels_swap(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::swap",1,"ofPixels_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::swap",2,"ofPixels_< unsigned short > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_swap",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_swap",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  (arg1)->swap(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_crop(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::crop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::crop",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::crop",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::crop",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::crop",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::crop",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_crop",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->crop(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_cropTo(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofPixels_< unsigned short >::cropTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::cropTo",1,"ofPixels_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::cropTo",2,"ofPixels_< unsigned short > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::cropTo",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::cropTo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned short >::cropTo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< unsigned short >::cropTo",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_cropTo",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_cropTo",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  ((ofPixels_< unsigned short > const *)arg1)->cropTo(*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_rotate90(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::rotate90",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::rotate90",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_rotate90",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_rotate90To(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::rotate90To",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::rotate90To",1,"ofPixels_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::rotate90To",2,"ofPixels_< unsigned short > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::rotate90To",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_rotate90To",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_rotate90To",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  ((ofPixels_< unsigned short > const *)arg1)->rotate90To(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_mirrorTo(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ; bool arg3 ;
  bool arg4 ; SWIG_check_num_args("ofPixels_< unsigned short >::mirrorTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::mirrorTo",1,"ofPixels_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::mirrorTo",2,"ofPixels_< unsigned short > &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::mirrorTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::mirrorTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_mirrorTo",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_mirrorTo",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0); ((ofPixels_< unsigned short > const *)arg1)->mirrorTo(*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_mirror(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::mirror",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::mirror",1,"ofPixels_< unsigned short > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_mirror",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_resize__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ; ofInterpolationMethod arg4 ;
  bool result; SWIG_check_num_args("ofPixels_< unsigned short >::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::resize",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::resize",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::resize",4,"ofInterpolationMethod");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_resize",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofInterpolationMethod)(int)lua_tonumber(L, 4);
  result = (bool)(arg1)->resize(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_resize__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned short >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::resize",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_resize",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->resize(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_resize(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortPixels_resize__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofShortPixels_resize__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_resize'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::resize(int,int,ofInterpolationMethod)\n"
  "    ofPixels_< unsigned short >::resize(int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_resizeTo__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ;
  ofInterpolationMethod arg3 ; bool result; SWIG_check_num_args("ofPixels_< unsigned short >::resizeTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::resizeTo",1,"ofPixels_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::resizeTo",2,"ofPixels_< unsigned short > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::resizeTo",3,"ofInterpolationMethod");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_resizeTo",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_resizeTo",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  arg3 = (ofInterpolationMethod)(int)lua_tonumber(L, 3);
  result = (bool)((ofPixels_< unsigned short > const *)arg1)->resizeTo(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_resizeTo__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned short >::resizeTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::resizeTo",1,"ofPixels_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::resizeTo",2,"ofPixels_< unsigned short > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_resizeTo",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_resizeTo",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (bool)((ofPixels_< unsigned short > const *)arg1)->resizeTo(*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_resizeTo(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_resizeTo__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofShortPixels_resizeTo__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_resizeTo'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned short >::resizeTo(ofPixels_< unsigned short > &,ofInterpolationMethod) const\n"
  "    ofPixels_< unsigned short >::resizeTo(ofPixels_< unsigned short > &) const\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_pasteInto(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ; int arg3 ;
  int arg4 ; bool result; SWIG_check_num_args("ofPixels_< unsigned short >::pasteInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::pasteInto",1,"ofPixels_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::pasteInto",2,"ofPixels_< unsigned short > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::pasteInto",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::pasteInto",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_pasteInto",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_pasteInto",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (bool)((ofPixels_< unsigned short > const *)arg1)->pasteInto(*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_blendInto(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short > *arg2 = 0 ; int arg3 ;
  int arg4 ; bool result; SWIG_check_num_args("ofPixels_< unsigned short >::blendInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::blendInto",1,"ofPixels_< unsigned short > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::blendInto",2,"ofPixels_< unsigned short > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::blendInto",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::blendInto",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_blendInto",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_blendInto",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (bool)((ofPixels_< unsigned short > const *)arg1)->blendInto(*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_swapRgb(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::swapRgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::swapRgb",1,"ofPixels_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_swapRgb",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  (arg1)->swapRgb(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getData__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getData",1,"ofPixels_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getData",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (unsigned short *)(arg1)->getData(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getData__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getData",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getData",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (unsigned short *)((ofPixels_< unsigned short > const *)arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_getData(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_getData__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_getData__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_getData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::getData()\n"
  "    ofPixels_< unsigned short >::getData() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getPixels",1,"ofPixels_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (unsigned short *)(arg1)->getPixels(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; unsigned short *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getPixels",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (unsigned short *)((ofPixels_< unsigned short > const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_getPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::getPixels()\n"
  "    ofPixels_< unsigned short >::getPixels() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_getPixelIndex(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getPixelIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getPixelIndex",1,"ofPixels_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::getPixelIndex",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::getPixelIndex",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getPixelIndex",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (int)((ofPixels_< unsigned short > const *)arg1)->getPixelIndex(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ;
  ofColor_< unsigned short > result; SWIG_check_num_args("ofPixels_< unsigned short >::getColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getColor",1,"ofPixels_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::getColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::getColor",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getColor",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofPixels_< unsigned short > const *)arg1)->getColor(arg2,arg3); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; ofColor_< unsigned short > result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getColor",1,"ofPixels_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::getColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getColor",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPixels_< unsigned short > const *)arg1)->getColor(arg2); {
    ofColor_< unsigned short > * resultptr = new ofColor_< unsigned short >((const ofColor_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getColor(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofShortPixels_getColor__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofShortPixels_getColor__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_getColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::getColor(int,int) const\n"
  "    ofPixels_< unsigned short >::getColor(int) const\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; int arg3 ;
  ofColor_< unsigned short > *arg4 = 0 ; SWIG_check_num_args("ofPixels_< unsigned short >::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",4,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setColor",4,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  (arg1)->setColor(arg2,arg3,(ofColor_< unsigned short > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; ofColor_< unsigned short > *arg3 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",3,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setColor",3,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  (arg1)->setColor(arg2,(ofColor_< unsigned short > const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofColor_< unsigned short > *arg2 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",1,"ofPixels_< unsigned short > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setColor",2,"ofColor_< unsigned short > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setColor",2,SWIGTYPE_p_ofColor_T_unsigned_short_t); } 
  (arg1)->setColor((ofColor_< unsigned short > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_setColor__SWIG_2(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_setColor__SWIG_1(L);}  }  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_short_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_setColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::setColor(int,int,ofColor_< unsigned short > const &)\n"
  "    ofPixels_< unsigned short >::setColor(int,ofColor_< unsigned short > const &)\n"
  "    ofPixels_< unsigned short >::setColor(ofColor_< unsigned short > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_getWidth(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getWidth",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getWidth",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getHeight(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getHeight",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getHeight",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getBytesPerPixel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getBytesPerPixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getBytesPerPixel",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getBytesPerPixel",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBytesPerPixel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getBitsPerPixel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getBitsPerPixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getBitsPerPixel",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getBitsPerPixel",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBitsPerPixel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getBytesPerChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getBytesPerChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getBytesPerChannel",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getBytesPerChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBytesPerChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getBitsPerChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getBitsPerChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getBitsPerChannel",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getBitsPerChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBitsPerChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getBytesStride(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getBytesStride",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getBytesStride",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getBytesStride",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getBytesStride();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getNumChannels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getNumChannels",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getNumChannels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getNumChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getTotalBytes(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getTotalBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getTotalBytes",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getTotalBytes",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getTotalBytes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getNumPlanes(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getNumPlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getNumPlanes",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getNumPlanes",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->getNumPlanes(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getPlane(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; ofPixels_< unsigned short > result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getPlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getPlane",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::getPlane",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getPlane",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getPlane(arg2); {
    ofPixels_< unsigned short > * resultptr = new ofPixels_< unsigned short >((const ofPixels_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPixels_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; ofPixels_< unsigned short > result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getChannel",1,"ofPixels_< unsigned short > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::getChannel",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPixels_< unsigned short > const *)arg1)->getChannel(arg2); {
    ofPixels_< unsigned short > * resultptr = new ofPixels_< unsigned short >((const ofPixels_< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPixels_T_unsigned_short_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getPixelFormat(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixelFormat result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getPixelFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getPixelFormat",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getPixelFormat",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixelFormat)((ofPixels_< unsigned short > const *)arg1)->getPixelFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_size(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned short >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::size",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_size",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (int)((ofPixels_< unsigned short > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_getImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofImageType result;
  SWIG_check_num_args("ofPixels_< unsigned short >::getImageType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::getImageType",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_getImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofImageType)((ofPixels_< unsigned short > const *)arg1)->getImageType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_setChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ; ofPixels_< unsigned short > arg3 ;
  ofPixels_< unsigned short > *argp3 ; SWIG_check_num_args("ofPixels_< unsigned short >::setChannel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setChannel",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setChannel",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPixels_< unsigned short >::setChannel",3,"ofPixels_< unsigned short > const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setChannel",3,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = *argp3;
  (arg1)->setChannel(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_setImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofImageType arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::setImageType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setImageType",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setImageType",2,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  arg2 = (ofImageType)(int)lua_tonumber(L, 2); (arg1)->setImageType(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_setNumChannels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned short >::setNumChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::setNumChannels",1,"ofPixels_< unsigned short > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned short >::setNumChannels",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_setNumChannels",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNumChannels(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofShortPixels_begin__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short >::iterator result;
  SWIG_check_num_args("ofPixels_< unsigned short >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::begin",1,"ofPixels_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_begin",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short >::iterator)(arg1)->begin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_c_end__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short >::iterator result;
  SWIG_check_num_args("ofPixels_< unsigned short >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::end",1,"ofPixels_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_c_end",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short >::iterator)(arg1)->end();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_begin__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short >::const_iterator result;
  SWIG_check_num_args("ofPixels_< unsigned short >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::begin",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_begin",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short >::const_iterator)((ofPixels_< unsigned short > const *)arg1)->begin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_begin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_begin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_begin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_begin'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::begin()\n"
  "    ofPixels_< unsigned short >::begin() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_c_end__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short >::const_iterator result;
  SWIG_check_num_args("ofPixels_< unsigned short >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::end",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_c_end",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short >::const_iterator)((ofPixels_< unsigned short > const *)arg1)->end();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_c_end(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_c_end__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_c_end__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_c_end'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::end()\n"
  "    ofPixels_< unsigned short >::end() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_rbegin__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short >::reverse_iterator result;
  SWIG_check_num_args("ofPixels_< unsigned short >::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::rbegin",1,"ofPixels_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_rbegin",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short >::reverse_iterator)(arg1)->rbegin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_rend__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ; ofPixels_< unsigned short >::reverse_iterator result;
  SWIG_check_num_args("ofPixels_< unsigned short >::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::rend",1,"ofPixels_< unsigned short > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_rend",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short >::reverse_iterator)(arg1)->rend();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_rbegin__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short >::const_reverse_iterator result; SWIG_check_num_args("ofPixels_< unsigned short >::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::rbegin",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_rbegin",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short >::const_reverse_iterator)((ofPixels_< unsigned short > const *)arg1)->rbegin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_rbegin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_rbegin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_rbegin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_rbegin'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned short >::rbegin()\n"
  "    ofPixels_< unsigned short >::rbegin() const\n"); lua_error(L);return 0; }
static int _wrap_ofShortPixels_rend__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) 0 ;
  ofPixels_< unsigned short >::const_reverse_iterator result; SWIG_check_num_args("ofPixels_< unsigned short >::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned short >::rend",1,"ofPixels_< unsigned short > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("ofShortPixels_rend",1,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  result = (ofPixels_< unsigned short >::const_reverse_iterator)((ofPixels_< unsigned short > const *)arg1)->rend();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofShortPixels_rend(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_rend__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofShortPixels_rend__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofShortPixels_rend'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned short >::rend()\n" "    ofPixels_< unsigned short >::rend() const\n"); lua_error(L);return 0; }
static void swig_delete_ofShortPixels(void *obj) {
ofPixels_< unsigned short > *arg1 = (ofPixels_< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofShortPixels(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofShortPixels);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofShortPixels_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofShortPixels_methods[]= {
    { "allocate", _wrap_ofShortPixels_allocate},
    { "allocatePixelFormat", _wrap_ofShortPixels_allocatePixelFormat},
    { "allocateImageType", _wrap_ofShortPixels_allocateImageType},
    { "isAllocated", _wrap_ofShortPixels_isAllocated},
    { "clear", _wrap_ofShortPixels_clear},
    { "set", _wrap_ofShortPixels_set},
    { "setFromPixels", _wrap_ofShortPixels_setFromPixels},
    { "setFromPixelsImageType", _wrap_ofShortPixels_setFromPixelsImageType},
    { "setFromExternalPixels", _wrap_ofShortPixels_setFromExternalPixels},
    { "setFromAlignedPixels", _wrap_ofShortPixels_setFromAlignedPixels},
    { "swap", _wrap_ofShortPixels_swap},
    { "crop", _wrap_ofShortPixels_crop},
    { "cropTo", _wrap_ofShortPixels_cropTo},
    { "rotate90", _wrap_ofShortPixels_rotate90},
    { "rotate90To", _wrap_ofShortPixels_rotate90To},
    { "mirrorTo", _wrap_ofShortPixels_mirrorTo},
    { "mirror", _wrap_ofShortPixels_mirror},
    { "resize", _wrap_ofShortPixels_resize},
    { "resizeTo", _wrap_ofShortPixels_resizeTo},
    { "pasteInto", _wrap_ofShortPixels_pasteInto},
    { "blendInto", _wrap_ofShortPixels_blendInto},
    { "swapRgb", _wrap_ofShortPixels_swapRgb},
    { "getData", _wrap_ofShortPixels_getData},
    { "getPixels", _wrap_ofShortPixels_getPixels},
    { "getPixelIndex", _wrap_ofShortPixels_getPixelIndex},
    { "getColor", _wrap_ofShortPixels_getColor},
    { "setColor", _wrap_ofShortPixels_setColor},
    { "getWidth", _wrap_ofShortPixels_getWidth},
    { "getHeight", _wrap_ofShortPixels_getHeight},
    { "getBytesPerPixel", _wrap_ofShortPixels_getBytesPerPixel},
    { "getBitsPerPixel", _wrap_ofShortPixels_getBitsPerPixel},
    { "getBytesPerChannel", _wrap_ofShortPixels_getBytesPerChannel},
    { "getBitsPerChannel", _wrap_ofShortPixels_getBitsPerChannel},
    { "getBytesStride", _wrap_ofShortPixels_getBytesStride},
    { "getNumChannels", _wrap_ofShortPixels_getNumChannels},
    { "getTotalBytes", _wrap_ofShortPixels_getTotalBytes},
    { "getNumPlanes", _wrap_ofShortPixels_getNumPlanes},
    { "getPlane", _wrap_ofShortPixels_getPlane},
    { "getChannel", _wrap_ofShortPixels_getChannel},
    { "getPixelFormat", _wrap_ofShortPixels_getPixelFormat},
    { "size", _wrap_ofShortPixels_size},
    { "getImageType", _wrap_ofShortPixels_getImageType},
    { "setChannel", _wrap_ofShortPixels_setChannel},
    { "setImageType", _wrap_ofShortPixels_setImageType},
    { "setNumChannels", _wrap_ofShortPixels_setNumChannels},
    { "begin", _wrap_ofShortPixels_begin},
    { "c_end", _wrap_ofShortPixels_c_end},
    { "rbegin", _wrap_ofShortPixels_rbegin},
    { "rend", _wrap_ofShortPixels_rend},
    {0,0}
};
static swig_lua_method swig_ofShortPixels_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofShortPixels_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofShortPixels_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofShortPixels_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofShortPixels_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofShortPixels_Sf_SwigStatic = {
    "ofShortPixels",
    swig_ofShortPixels_Sf_SwigStatic_methods,
    swig_ofShortPixels_Sf_SwigStatic_attributes,
    swig_ofShortPixels_Sf_SwigStatic_constants,
    swig_ofShortPixels_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofShortPixels_bases[] = {0};
static const char *swig_ofShortPixels_base_names[] = {0};
static swig_lua_class _wrap_class_ofShortPixels = { "ofShortPixels", "ofShortPixels", &SWIGTYPE_p_ofPixels_T_unsigned_short_t,_proxy__wrap_new_ofShortPixels, swig_delete_ofShortPixels, swig_ofShortPixels_methods, swig_ofShortPixels_attributes, &swig_ofShortPixels_Sf_SwigStatic, swig_ofShortPixels_meta, swig_ofShortPixels_bases, swig_ofShortPixels_base_names };

static int _wrap_new_ofPath(lua_State* L) { int SWIG_arg = 0; ofPath *result = 0 ; SWIG_check_num_args("ofPath::ofPath",0,0)
  result = (ofPath *)new ofPath(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPath,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_clear(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::clear",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_clear",1,SWIGTYPE_p_ofPath); } 
  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_newSubPath(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::newSubPath",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::newSubPath",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_newSubPath",1,SWIGTYPE_p_ofPath); }  (arg1)->newSubPath(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_close(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::close",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::close",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_close",1,SWIGTYPE_p_ofPath); } 
  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_lineTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofPath::lineTo",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::lineTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::lineTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_lineTo",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_lineTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->lineTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_lineTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::lineTo",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::lineTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::lineTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::lineTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_lineTo",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->lineTo(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_lineTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofPath::lineTo",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::lineTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::lineTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::lineTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::lineTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_lineTo",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->lineTo(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_lineTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPath_lineTo__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPath_lineTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofPath_lineTo__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_lineTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::lineTo(ofPoint const &)\n" "    ofPath::lineTo(float,float)\n" "    ofPath::lineTo(float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofPath_moveTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofPath::moveTo",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::moveTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::moveTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_moveTo",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_moveTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->moveTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_moveTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofPath::moveTo",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::moveTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::moveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::moveTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::moveTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_moveTo",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->moveTo(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_moveTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::moveTo",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::moveTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::moveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::moveTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_moveTo",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->moveTo(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_moveTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPath_moveTo__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPath_moveTo__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofPath_moveTo__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_moveTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::moveTo(ofPoint const &)\n" "    ofPath::moveTo(float,float,float)\n" "    ofPath::moveTo(float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofPath_curveTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofPath::curveTo",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::curveTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::curveTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_curveTo",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_curveTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->curveTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_curveTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofPath::curveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::curveTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::curveTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_curveTo",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->curveTo(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_curveTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPath::curveTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::curveTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::curveTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::curveTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_curveTo",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->curveTo(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_curveTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPath_curveTo__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPath_curveTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofPath_curveTo__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_curveTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::curveTo(ofPoint const &)\n" "    ofPath::curveTo(float,float)\n" "    ofPath::curveTo(float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofPath_bezierTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPath::bezierTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::bezierTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::bezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPath::bezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPath::bezierTo",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_bezierTo",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_bezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_bezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_bezierTo",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_bezierTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::bezierTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::bezierTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::bezierTo",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_bezierTo",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_bezierTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPath::bezierTo",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::bezierTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::bezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::bezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPath::bezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPath::bezierTo",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_bezierTo",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10); (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_bezierTo(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofPath_bezierTo__SWIG_0(L);}  }  }  }  }  if (argc == 7) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPath_bezierTo__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofPath_bezierTo__SWIG_2(L);}  }  }  }  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_bezierTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::bezierTo(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofPath::bezierTo(float,float,float,float,float,float)\n"
  "    ofPath::bezierTo(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPath_quadBezierTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPath::quadBezierTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::quadBezierTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::quadBezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPath::quadBezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPath::quadBezierTo",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_quadBezierTo",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_quadBezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_quadBezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_quadBezierTo",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_quadBezierTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::quadBezierTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::quadBezierTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::quadBezierTo",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_quadBezierTo",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_quadBezierTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPath::quadBezierTo",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::quadBezierTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::quadBezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::quadBezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPath::quadBezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPath::quadBezierTo",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_quadBezierTo",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_quadBezierTo(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofPath_quadBezierTo__SWIG_0(L);}  }  }  }  }  if (argc == 7) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPath_quadBezierTo__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofPath_quadBezierTo__SWIG_2(L);}  }  }  }  }  }
             }  }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_quadBezierTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::quadBezierTo(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofPath::quadBezierTo(float,float,float,float,float,float)\n"
  "    ofPath::quadBezierTo(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPath_arc__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::arc",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arc",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arc",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arc",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arc",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_arc",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofPath_arc",2,SWIGTYPE_p_ofVec3f); } 
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_arc__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; bool arg7 ; SWIG_check_num_args("ofPath::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arc",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arc",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arc",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arc",6,"float");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofPath::arc",7,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_arc",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofPath_arc",2,SWIGTYPE_p_ofVec3f); } 
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (lua_toboolean(L, 7)!=0);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_arc__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arc",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::arc",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arc",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arc",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::arc",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_arc",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_arc__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofPath::arc",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arc",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::arc",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arc",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arc",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::arc",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::arc",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_arc",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_arc(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L); if (argc == 6) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofPath_arc__SWIG_0(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isboolean(L,argv[6]); }  if (_v) { return _wrap_ofPath_arc__SWIG_1(L);}  }  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPath_arc__SWIG_2(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofPath_arc__SWIG_3(L);}  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_arc'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::arc(ofPoint const &,float,float,float,float)\n" "    ofPath::arc(ofPoint const &,float,float,float,float,bool)\n"
  "    ofPath::arc(float,float,float,float,float,float)\n" "    ofPath::arc(float,float,float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofPath_arcNegative__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::arcNegative",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arcNegative",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::arcNegative",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arcNegative",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_arcNegative",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_arcNegative",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_arcNegative__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::arcNegative",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arcNegative",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::arcNegative",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_arcNegative",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_arcNegative__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofPath::arcNegative",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arcNegative",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::arcNegative",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::arcNegative",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_arcNegative",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_arcNegative(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofPath_arcNegative__SWIG_0(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPath_arcNegative__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofPath_arcNegative__SWIG_2(L);}  }  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_arcNegative'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::arcNegative(ofPoint const &,float,float,float,float)\n"
  "    ofPath::arcNegative(float,float,float,float,float,float)\n"
  "    ofPath::arcNegative(float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPath_triangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::triangle",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::triangle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::triangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::triangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::triangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::triangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::triangle",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::triangle",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_triangle",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); (arg1)->triangle(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_triangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPath::triangle",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::triangle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::triangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::triangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::triangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::triangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::triangle",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::triangle",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::triangle",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPath::triangle",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPath::triangle",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_triangle",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10); (arg1)->triangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_triangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPath::triangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::triangle",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::triangle",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPath::triangle",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPath::triangle",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_triangle",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_triangle",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_triangle",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_triangle",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->triangle((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_triangle(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofPath_triangle__SWIG_2(L);}  }  }  }  }  if (argc == 7) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPath_triangle__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofPath_triangle__SWIG_1(L);}  }  }  }  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_triangle'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::triangle(float,float,float,float,float,float)\n"
  "    ofPath::triangle(float,float,float,float,float,float,float,float,float)\n"
  "    ofPath::triangle(ofPoint const &,ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofPath_circle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofPath::circle",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::circle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::circle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::circle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::circle",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_circle",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->circle(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_circle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofPath::circle",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::circle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::circle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::circle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::circle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::circle",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_circle",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->circle(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_circle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; SWIG_check_num_args("ofPath::circle",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::circle",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::circle",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::circle",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_circle",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_circle",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->circle((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_circle(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofPath_circle__SWIG_2(L);}  }
       }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofPath_circle__SWIG_0(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofPath_circle__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_circle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::circle(float,float,float)\n" "    ofPath::circle(float,float,float,float)\n"
  "    ofPath::circle(ofPoint const &,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPath_ellipse__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofPath::ellipse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::ellipse",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::ellipse",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::ellipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::ellipse",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::ellipse",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_ellipse",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->ellipse(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_ellipse__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::ellipse",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::ellipse",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::ellipse",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::ellipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::ellipse",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::ellipse",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::ellipse",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_ellipse",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); (arg1)->ellipse(arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_ellipse__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPath::ellipse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::ellipse",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::ellipse",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::ellipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::ellipse",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_ellipse",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_ellipse",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->ellipse((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_ellipse(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofPath_ellipse__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofPath_ellipse__SWIG_0(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofPath_ellipse__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_ellipse'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::ellipse(float,float,float,float)\n" "    ofPath::ellipse(float,float,float,float,float)\n"
  "    ofPath::ellipse(ofPoint const &,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPath_rectangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofPath::rectangle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectangle",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectangle",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectangle",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofPath_rectangle",2,SWIGTYPE_p_ofRectangle); }  (arg1)->rectangle((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_rectangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPath::rectangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectangle",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectangle",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectangle",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectangle",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_rectangle",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); (arg1)->rectangle((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_rectangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofPath::rectangle",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectangle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectangle",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectangle",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rectangle(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_rectangle__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::rectangle",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectangle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectangle",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectangle",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->rectangle(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_rectangle(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPath_rectangle__SWIG_0(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofPath_rectangle__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofPath_rectangle__SWIG_2(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofPath_rectangle__SWIG_3(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_rectangle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::rectangle(ofRectangle const &)\n" "    ofPath::rectangle(ofPoint const &,float,float)\n"
  "    ofPath::rectangle(float,float,float,float)\n" "    ofPath::rectangle(float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofPath_rectRounded__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofRectangle *arg2 = 0 ; float arg3 ; SWIG_check_num_args("ofPath::rectRounded",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectRounded",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofPath_rectRounded",2,SWIGTYPE_p_ofRectangle); }  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->rectRounded((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_rectRounded__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofPath::rectRounded",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectRounded",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_rectRounded",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rectRounded((ofPoint const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_rectRounded__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::rectRounded",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectRounded",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectRounded",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->rectRounded(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_rectRounded__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofPath::rectRounded",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::rectRounded",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::rectRounded",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectRounded",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_rectRounded",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->rectRounded((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_rectRounded__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofRectangle *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::rectRounded",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectRounded",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectRounded",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofPath_rectRounded",2,SWIGTYPE_p_ofRectangle); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  (arg1)->rectRounded((ofRectangle const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_rectRounded__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPath::rectRounded",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::rectRounded",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::rectRounded",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPath::rectRounded",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPath::rectRounded",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_rectRounded",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->rectRounded(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_rectRounded(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofPath_rectRounded__SWIG_0(L);}
         }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofPath_rectRounded__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofPath_rectRounded__SWIG_4(L);}  }  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofPath_rectRounded__SWIG_2(L);}  }  }  }  }  }  } 
  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_ofPath_rectRounded__SWIG_3(L);}  }  }  }  }  }  }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofPath_rectRounded__SWIG_5(L);}  }  }  }  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_rectRounded'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::rectRounded(ofRectangle const &,float)\n"
  "    ofPath::rectRounded(ofPoint const &,float,float,float)\n" "    ofPath::rectRounded(float,float,float,float,float)\n"
  "    ofPath::rectRounded(ofPoint const &,float,float,float,float,float,float)\n"
  "    ofPath::rectRounded(ofRectangle const &,float,float,float,float)\n"
  "    ofPath::rectRounded(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPath_setPolyWindingMode(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofPolyWindingMode arg2 ; SWIG_check_num_args("ofPath::setPolyWindingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setPolyWindingMode",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setPolyWindingMode",2,"ofPolyWindingMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setPolyWindingMode",1,SWIGTYPE_p_ofPath); }  arg2 = (ofPolyWindingMode)(int)lua_tonumber(L, 2);
  (arg1)->setPolyWindingMode(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getWindingMode(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPolyWindingMode result;
  SWIG_check_num_args("ofPath::getWindingMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getWindingMode",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getWindingMode",1,SWIGTYPE_p_ofPath); } 
  result = (ofPolyWindingMode)((ofPath const *)arg1)->getWindingMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_setFilled(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofPath::setFilled",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setFilled",1,"ofPath *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPath::setFilled",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setFilled",1,SWIGTYPE_p_ofPath); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setFilled(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setStrokeWidth(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  SWIG_check_num_args("ofPath::setStrokeWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setStrokeWidth",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setStrokeWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setStrokeWidth",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setStrokeWidth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor *arg2 = 0 ;
  SWIG_check_num_args("ofPath::setColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setColor",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::setColor",2,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setColor",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPath_setColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  (arg1)->setColor((ofColor const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setHexColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setHexColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setHexColor",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setHexColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setHexColor",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->setHexColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setFillColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor *arg2 = 0 ;
  SWIG_check_num_args("ofPath::setFillColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setFillColor",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::setFillColor",2,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setFillColor",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPath_setFillColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setFillColor((ofColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setFillHexColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setFillHexColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setFillHexColor",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setFillHexColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setFillHexColor",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setFillHexColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setStrokeColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor *arg2 = 0 ;
  SWIG_check_num_args("ofPath::setStrokeColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setStrokeColor",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::setStrokeColor",2,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setStrokeColor",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofPath_setStrokeColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setStrokeColor((ofColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setStrokeHexColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setStrokeHexColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setStrokeHexColor",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setStrokeHexColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setStrokeHexColor",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setStrokeHexColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_isFilled(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool result;
  SWIG_check_num_args("ofPath::isFilled",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::isFilled",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_isFilled",1,SWIGTYPE_p_ofPath); }  result = (bool)((ofPath const *)arg1)->isFilled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getFillColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor result;
  SWIG_check_num_args("ofPath::getFillColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getFillColor",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getFillColor",1,SWIGTYPE_p_ofPath); }  result = ((ofPath const *)arg1)->getFillColor(); {
    ofColor * resultptr = new ofColor((const ofColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getStrokeColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor result;
  SWIG_check_num_args("ofPath::getStrokeColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getStrokeColor",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getStrokeColor",1,SWIGTYPE_p_ofPath); }  result = ((ofPath const *)arg1)->getStrokeColor(); {
    ofColor * resultptr = new ofColor((const ofColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getStrokeWidth(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float result;
  SWIG_check_num_args("ofPath::getStrokeWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getStrokeWidth",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getStrokeWidth",1,SWIGTYPE_p_ofPath); }  result = (float)((ofPath const *)arg1)->getStrokeWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_hasOutline(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool result;
  SWIG_check_num_args("ofPath::hasOutline",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::hasOutline",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_hasOutline",1,SWIGTYPE_p_ofPath); }  result = (bool)((ofPath const *)arg1)->hasOutline();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setCurveResolution(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setCurveResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setCurveResolution",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setCurveResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setCurveResolution",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCurveResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setCircleResolution(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setCircleResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setCircleResolution",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setCircleResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setCircleResolution",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCircleResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getCircleResolution(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int result;
  SWIG_check_num_args("ofPath::getCircleResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getCircleResolution",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getCircleResolution",1,SWIGTYPE_p_ofPath); } 
  result = (int)((ofPath const *)arg1)->getCircleResolution(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setUseShapeColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofPath::setUseShapeColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setUseShapeColor",1,"ofPath *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPath::setUseShapeColor",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_setUseShapeColor",1,SWIGTYPE_p_ofPath); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseShapeColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getUseShapeColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool result;
  SWIG_check_num_args("ofPath::getUseShapeColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getUseShapeColor",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getUseShapeColor",1,SWIGTYPE_p_ofPath); }  result = (bool)((ofPath const *)arg1)->getUseShapeColor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::draw",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_draw",1,SWIGTYPE_p_ofPath); } 
  ((ofPath const *)arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::draw",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::draw",1,"ofPath const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_draw",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ((ofPath const *)arg1)->draw(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_draw(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPath_draw__SWIG_0(L);}  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofPath_draw__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::draw() const\n" "    ofPath::draw(float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofPath_getOutline__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  std::vector< ofPolyline > *result = 0 ; SWIG_check_num_args("ofPath::getOutline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getOutline",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getOutline",1,SWIGTYPE_p_ofPath); }  result = (std::vector< ofPolyline > *) &(arg1)->getOutline();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofPolyline_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getOutline__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  std::vector< ofPolyline > *result = 0 ; SWIG_check_num_args("ofPath::getOutline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getOutline",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getOutline",1,SWIGTYPE_p_ofPath); } 
  result = (std::vector< ofPolyline > *) &((ofPath const *)arg1)->getOutline();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofPolyline_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getOutline(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPath_getOutline__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPath_getOutline__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_getOutline'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::getOutline()\n" "    ofPath::getOutline() const\n"); lua_error(L);return 0; }
static int _wrap_ofPath_tessellate(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::tessellate",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::tessellate",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_tessellate",1,SWIGTYPE_p_ofPath); }  (arg1)->tessellate(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getTessellation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofMesh *result = 0 ; SWIG_check_num_args("ofPath::getTessellation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getTessellation",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getTessellation",1,SWIGTYPE_p_ofPath); }  result = (ofMesh *) &(arg1)->getTessellation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_getTessellation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofMesh *result = 0 ; SWIG_check_num_args("ofPath::getTessellation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getTessellation",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getTessellation",1,SWIGTYPE_p_ofPath); } 
  result = (ofMesh *) &((ofPath const *)arg1)->getTessellation(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getTessellation(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPath_getTessellation__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPath_getTessellation__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_getTessellation'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::getTessellation()\n" "    ofPath::getTessellation() const\n");
  lua_error(L);return 0; }
static int _wrap_ofPath_simplify__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  SWIG_check_num_args("ofPath::simplify",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::simplify",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::simplify",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_simplify",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->simplify(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_simplify__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::simplify",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::simplify",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_simplify",1,SWIGTYPE_p_ofPath); }  (arg1)->simplify(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_simplify(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPath_simplify__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofPath_simplify__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_simplify'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::simplify(float)\n" "    ofPath::simplify()\n"); lua_error(L);return 0; }
static int _wrap_ofPath_flagShapeChanged(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::flagShapeChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::flagShapeChanged",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_flagShapeChanged",1,SWIGTYPE_p_ofPath); }  (arg1)->flagShapeChanged(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_hasChanged(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool result;
  SWIG_check_num_args("ofPath::hasChanged",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::hasChanged",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_hasChanged",1,SWIGTYPE_p_ofPath); }  result = (bool)(arg1)->hasChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_translate(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofPath::translate",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::translate",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::translate",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_translate",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_translate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->translate((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_rotate(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; ofVec3f *arg3 = 0 ;
  SWIG_check_num_args("ofPath::rotate",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rotate",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPath::rotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_rotate",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPath_rotate",3,SWIGTYPE_p_ofVec3f); }  (arg1)->rotate(arg2,(ofVec3f const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_scale(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::scale",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::scale",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::scale",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_scale",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->scale(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_setMode(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPath::Mode arg2 ;
  SWIG_check_num_args("ofPath::setMode",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setMode",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setMode",2,"ofPath::Mode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_setMode",1,SWIGTYPE_p_ofPath); }
   arg2 = (ofPath::Mode)(int)lua_tonumber(L, 2); (arg1)->setMode(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPath_getMode(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPath::Mode result;
  SWIG_check_num_args("ofPath::getMode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getMode",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("ofPath_getMode",1,SWIGTYPE_p_ofPath); }
   result = (ofPath::Mode)(arg1)->getMode(); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getCommands__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  std::vector< ofPath::Command > *result = 0 ; SWIG_check_num_args("ofPath::getCommands",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getCommands",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getCommands",1,SWIGTYPE_p_ofPath); } 
  result = (std::vector< ofPath::Command > *) &(arg1)->getCommands();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofPath__Command_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getCommands__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  std::vector< ofPath::Command > *result = 0 ; SWIG_check_num_args("ofPath::getCommands",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getCommands",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("ofPath_getCommands",1,SWIGTYPE_p_ofPath); } 
  result = (std::vector< ofPath::Command > *) &((ofPath const *)arg1)->getCommands();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofPath__Command_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPath_getCommands(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPath_getCommands__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPath_getCommands__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPath_getCommands'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::getCommands()\n" "    ofPath::getCommands() const\n"); lua_error(L);return 0; }
static void swig_delete_ofPath(void *obj) {
ofPath *arg1 = (ofPath *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofPath(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofPath);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofPath_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofPath_methods[]= {
    { "clear", _wrap_ofPath_clear},
    { "newSubPath", _wrap_ofPath_newSubPath},
    { "close", _wrap_ofPath_close},
    { "lineTo", _wrap_ofPath_lineTo},
    { "moveTo", _wrap_ofPath_moveTo},
    { "curveTo", _wrap_ofPath_curveTo},
    { "bezierTo", _wrap_ofPath_bezierTo},
    { "quadBezierTo", _wrap_ofPath_quadBezierTo},
    { "arc", _wrap_ofPath_arc},
    { "arcNegative", _wrap_ofPath_arcNegative},
    { "triangle", _wrap_ofPath_triangle},
    { "circle", _wrap_ofPath_circle},
    { "ellipse", _wrap_ofPath_ellipse},
    { "rectangle", _wrap_ofPath_rectangle},
    { "rectRounded", _wrap_ofPath_rectRounded},
    { "setPolyWindingMode", _wrap_ofPath_setPolyWindingMode},
    { "getWindingMode", _wrap_ofPath_getWindingMode},
    { "setFilled", _wrap_ofPath_setFilled},
    { "setStrokeWidth", _wrap_ofPath_setStrokeWidth},
    { "setColor", _wrap_ofPath_setColor},
    { "setHexColor", _wrap_ofPath_setHexColor},
    { "setFillColor", _wrap_ofPath_setFillColor},
    { "setFillHexColor", _wrap_ofPath_setFillHexColor},
    { "setStrokeColor", _wrap_ofPath_setStrokeColor},
    { "setStrokeHexColor", _wrap_ofPath_setStrokeHexColor},
    { "isFilled", _wrap_ofPath_isFilled},
    { "getFillColor", _wrap_ofPath_getFillColor},
    { "getStrokeColor", _wrap_ofPath_getStrokeColor},
    { "getStrokeWidth", _wrap_ofPath_getStrokeWidth},
    { "hasOutline", _wrap_ofPath_hasOutline},
    { "setCurveResolution", _wrap_ofPath_setCurveResolution},
    { "setCircleResolution", _wrap_ofPath_setCircleResolution},
    { "getCircleResolution", _wrap_ofPath_getCircleResolution},
    { "setUseShapeColor", _wrap_ofPath_setUseShapeColor},
    { "getUseShapeColor", _wrap_ofPath_getUseShapeColor},
    { "draw", _wrap_ofPath_draw},
    { "getOutline", _wrap_ofPath_getOutline},
    { "tessellate", _wrap_ofPath_tessellate},
    { "getTessellation", _wrap_ofPath_getTessellation},
    { "simplify", _wrap_ofPath_simplify},
    { "flagShapeChanged", _wrap_ofPath_flagShapeChanged},
    { "hasChanged", _wrap_ofPath_hasChanged},
    { "translate", _wrap_ofPath_translate},
    { "rotate", _wrap_ofPath_rotate},
    { "scale", _wrap_ofPath_scale},
    { "setMode", _wrap_ofPath_setMode},
    { "getMode", _wrap_ofPath_getMode},
    { "getCommands", _wrap_ofPath_getCommands},
    {0,0}
};
static swig_lua_method swig_ofPath_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofPath_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofPath_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("COMMANDS", ofPath::COMMANDS)},
    {SWIG_LUA_CONSTTAB_INT("POLYLINES", ofPath::POLYLINES)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofPath_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofPath_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofPath_Sf_SwigStatic = {
    "ofPath",
    swig_ofPath_Sf_SwigStatic_methods,
    swig_ofPath_Sf_SwigStatic_attributes,
    swig_ofPath_Sf_SwigStatic_constants,
    swig_ofPath_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofPath_bases[] = {0};
static const char *swig_ofPath_base_names[] = {0};
static swig_lua_class _wrap_class_ofPath = { "ofPath", "ofPath", &SWIGTYPE_p_ofPath,_proxy__wrap_new_ofPath, swig_delete_ofPath, swig_ofPath_methods, swig_ofPath_attributes, &swig_ofPath_Sf_SwigStatic, swig_ofPath_meta, swig_ofPath_bases, swig_ofPath_base_names };

static int _wrap_new_ofPolyline__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *result = 0 ;
  SWIG_check_num_args("ofPolyline::ofPolyline",0,0) result = (ofPolyline *)new ofPolyline();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPolyline,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofPolyline__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::vector< ofPoint > *arg1 = 0 ;
  ofPolyline *result = 0 ; SWIG_check_num_args("ofPolyline::ofPolyline",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPolyline::ofPolyline",1,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("new_ofPolyline",1,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  result = (ofPolyline *)new ofPolyline((std::vector< ofPoint > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPolyline,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofPolyline(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofPolyline__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofPolyline__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofPolyline'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::ofPolyline()\n" "    ofPolyline::ofPolyline(std::vector< ofPoint > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_fromRectangle(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; ofPolyline result;
  SWIG_check_num_args("ofPolyline::fromRectangle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPolyline::fromRectangle",1,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofPolyline_fromRectangle",1,SWIGTYPE_p_ofRectangle); } 
  result = ofPolyline::fromRectangle((ofRectangle const &)*arg1); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_clear(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::clear",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_clear",1,SWIGTYPE_p_ofPolyline); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_addVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofPolyline::addVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertex",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::addVertex",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_addVertex",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_addVertex",2,SWIGTYPE_p_ofVec3f); }  (arg1)->addVertex((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_addVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofPolyline::addVertex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertex",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::addVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::addVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::addVertex",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_addVertex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->addVertex(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_addVertex__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofPolyline::addVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertex",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::addVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::addVertex",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_addVertex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->addVertex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_addVertex(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_addVertex__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofPolyline_addVertex__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofPolyline_addVertex__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_addVertex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::addVertex(ofPoint const &)\n"
  "    ofPolyline::addVertex(float,float,float)\n" "    ofPolyline::addVertex(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_addVertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  std::vector< ofPoint > *arg2 = 0 ; SWIG_check_num_args("ofPolyline::addVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertices",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::addVertices",2,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_addVertices",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("ofPolyline_addVertices",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  (arg1)->addVertices((std::vector< ofPoint > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_addVertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ; int arg3 ; SWIG_check_num_args("ofPolyline::addVertices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertices",1,"ofPolyline *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPolyline::addVertices",2,"ofPoint const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::addVertices",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_addVertices",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_addVertices",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addVertices((ofPoint const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_addVertices(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_addVertices__SWIG_0(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPolyline_addVertices__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_addVertices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::addVertices(std::vector< ofPoint > const &)\n"
  "    ofPolyline::addVertices(ofPoint const *,int)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_insertVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofPolyline::insertVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::insertVertex",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::insertVertex",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::insertVertex",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_insertVertex",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_insertVertex",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->insertVertex((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_insertVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; int arg5 ; SWIG_check_num_args("ofPolyline::insertVertex",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::insertVertex",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::insertVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::insertVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::insertVertex",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::insertVertex",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_insertVertex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->insertVertex(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_insertVertex(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPolyline_insertVertex__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofPolyline_insertVertex__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_insertVertex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::insertVertex(ofPoint const &,int)\n"
  "    ofPolyline::insertVertex(float,float,float,int)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_resize(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; size_t arg2 ;
  SWIG_check_num_args("ofPolyline::resize",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::resize",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::resize",2,"size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_resize",1,SWIGTYPE_p_ofPolyline); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_size(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; size_t result;
  SWIG_check_num_args("ofPolyline::size",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::size",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_size",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getVertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  std::vector< ofPoint > *result = 0 ; SWIG_check_num_args("ofPolyline::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getVertices",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getVertices",1,SWIGTYPE_p_ofPolyline); } 
  result = (std::vector< ofPoint > *) &(arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getVertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  std::vector< ofPoint > *result = 0 ; SWIG_check_num_args("ofPolyline::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getVertices",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getVertices",1,SWIGTYPE_p_ofPolyline); } 
  result = (std::vector< ofPoint > *) &((ofPolyline const *)arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getVertices(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_getVertices__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_getVertices__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_getVertices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::getVertices()\n" "    ofPolyline::getVertices() const\n");
  lua_error(L);return 0; }
static int _wrap_ofPolyline_begin__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f >::iterator > result; SWIG_check_num_args("ofPolyline::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::begin",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_begin",1,SWIGTYPE_p_ofPolyline); }  result = (arg1)->begin(); {
    std::vector< ofPoint >::iterator * resultptr = new std::vector< ofPoint >::iterator((const std::vector< ofPoint >::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t__iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_begin__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f >::const_iterator > result; SWIG_check_num_args("ofPolyline::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::begin",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_begin",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->begin(); {
    std::vector< ofPoint >::const_iterator * resultptr = new std::vector< ofPoint >::const_iterator((const std::vector< ofPoint >::const_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t__const_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_begin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_begin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_begin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_begin'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::begin()\n" "    ofPolyline::begin() const\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_rbegin__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f >::reverse_iterator > result; SWIG_check_num_args("ofPolyline::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::rbegin",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_rbegin",1,SWIGTYPE_p_ofPolyline); }  result = (arg1)->rbegin(); {
    std::vector< ofPoint >::reverse_iterator * resultptr = new std::vector< ofPoint >::reverse_iterator((const std::vector< ofPoint >::reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t__reverse_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_rbegin__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f >::const_reverse_iterator > result; SWIG_check_num_args("ofPolyline::rbegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::rbegin",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_rbegin",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->rbegin(); {
    std::vector< ofPoint >::const_reverse_iterator * resultptr = new std::vector< ofPoint >::const_reverse_iterator((const std::vector< ofPoint >::const_reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t__const_reverse_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_rbegin(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_rbegin__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_rbegin__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_rbegin'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::rbegin()\n" "    ofPolyline::rbegin() const\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_c_end__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f >::iterator > result; SWIG_check_num_args("ofPolyline::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::end",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_c_end",1,SWIGTYPE_p_ofPolyline); }  result = (arg1)->end(); {
    std::vector< ofPoint >::iterator * resultptr = new std::vector< ofPoint >::iterator((const std::vector< ofPoint >::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t__iterator,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_c_end__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f >::const_iterator > result; SWIG_check_num_args("ofPolyline::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::end",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_c_end",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->end(); {
    std::vector< ofPoint >::const_iterator * resultptr = new std::vector< ofPoint >::const_iterator((const std::vector< ofPoint >::const_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t__const_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_c_end(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_c_end__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_c_end__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_c_end'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::end()\n" "    ofPolyline::end() const\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_rend__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f >::reverse_iterator > result; SWIG_check_num_args("ofPolyline::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::rend",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_rend",1,SWIGTYPE_p_ofPolyline); }  result = (arg1)->rend(); {
    std::vector< ofPoint >::reverse_iterator * resultptr = new std::vector< ofPoint >::reverse_iterator((const std::vector< ofPoint >::reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t__reverse_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_rend__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f >::const_reverse_iterator > result; SWIG_check_num_args("ofPolyline::rend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::rend",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_rend",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->rend(); {
    std::vector< ofPoint >::const_reverse_iterator * resultptr = new std::vector< ofPoint >::const_reverse_iterator((const std::vector< ofPoint >::const_reverse_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t__const_reverse_iterator,1); SWIG_arg++; } 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_rend(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_rend__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_rend__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_rend'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::rend()\n" "    ofPolyline::rend() const\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_lineTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofPolyline::lineTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::lineTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::lineTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_lineTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_lineTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->lineTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_lineTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPolyline::lineTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::lineTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::lineTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::lineTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::lineTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_lineTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->lineTo(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_lineTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofPolyline::lineTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::lineTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::lineTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::lineTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_lineTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->lineTo(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_lineTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_lineTo__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPolyline_lineTo__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofPolyline_lineTo__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_lineTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::lineTo(ofPoint const &)\n" "    ofPolyline::lineTo(float,float,float)\n"
  "    ofPolyline::lineTo(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_arc__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; bool arg7 ; int arg8 ;
  SWIG_check_num_args("ofPolyline::arc",8,8) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arc",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arc",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_arc",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (lua_toboolean(L, 7)!=0);
  arg8 = (int)lua_tonumber(L, 8); (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_arc__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; bool arg7 ; SWIG_check_num_args("ofPolyline::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arc",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_arc",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (lua_toboolean(L, 7)!=0);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_arc__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; int arg7 ; SWIG_check_num_args("ofPolyline::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arc",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_arc",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (int)lua_tonumber(L, 7);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_arc__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPolyline::arc",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arc",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_arc",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_arc__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; int arg8 ; SWIG_check_num_args("ofPolyline::arc",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arc",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arc",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_arc__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPolyline::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arc",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_arc__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; int arg9 ;
  SWIG_check_num_args("ofPolyline::arc",9,9) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arc",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::arc",9,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arc",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9); (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_arc(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofPolyline_arc__SWIG_3(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isboolean(L,argv[6]); }  if (_v) { return _wrap_ofPolyline_arc__SWIG_1(L);}  }  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_ofPolyline_arc__SWIG_2(L);}  }  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPolyline_arc__SWIG_5(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isboolean(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_ofPolyline_arc__SWIG_0(L);}  }  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofPolyline_arc__SWIG_4(L);}  }  }  }  }  }  }  }  } 
  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_ofPolyline_arc__SWIG_6(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_arc'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::arc(ofPoint const &,float,float,float,float,bool,int)\n"
  "    ofPolyline::arc(ofPoint const &,float,float,float,float,bool)\n"
  "    ofPolyline::arc(ofPoint const &,float,float,float,float,int)\n"
  "    ofPolyline::arc(ofPoint const &,float,float,float,float)\n"
  "    ofPolyline::arc(float,float,float,float,float,float,int)\n" "    ofPolyline::arc(float,float,float,float,float,float)\n"
  "    ofPolyline::arc(float,float,float,float,float,float,float,int)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_arcNegative__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; int arg7 ;
  SWIG_check_num_args("ofPolyline::arcNegative",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arcNegative",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_arcNegative",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7); (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_arcNegative__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPolyline::arcNegative",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arcNegative",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_arcNegative",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_arcNegative__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; int arg8 ;
  SWIG_check_num_args("ofPolyline::arcNegative",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arcNegative",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arcNegative",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_arcNegative__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
  SWIG_check_num_args("ofPolyline::arcNegative",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arcNegative",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_arcNegative__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; int arg9 ;
  SWIG_check_num_args("ofPolyline::arcNegative",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arcNegative",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::arcNegative",9,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_arcNegative",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9); (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_arcNegative(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofPolyline_arcNegative__SWIG_1(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_ofPolyline_arcNegative__SWIG_0(L);}  }  }  }  }  }  }
     }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPolyline_arcNegative__SWIG_3(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofPolyline_arcNegative__SWIG_2(L);}  }  }  }  }  }  }
       }  }  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_ofPolyline_arcNegative__SWIG_4(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_arcNegative'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::arcNegative(ofPoint const &,float,float,float,float,int)\n"
  "    ofPolyline::arcNegative(ofPoint const &,float,float,float,float)\n"
  "    ofPolyline::arcNegative(float,float,float,float,float,float,int)\n"
  "    ofPolyline::arcNegative(float,float,float,float,float,float)\n"
  "    ofPolyline::arcNegative(float,float,float,float,float,float,float,int)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_curveTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofPolyline::curveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::curveTo",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_curveTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_curveTo",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->curveTo((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_curveTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofPolyline::curveTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_curveTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_curveTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->curveTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_curveTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; int arg5 ; SWIG_check_num_args("ofPolyline::curveTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::curveTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::curveTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::curveTo",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_curveTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->curveTo(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_curveTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPolyline::curveTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::curveTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::curveTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_curveTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->curveTo(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_curveTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofPolyline::curveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::curveTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_curveTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->curveTo(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_curveTo(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_curveTo__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofPolyline_curveTo__SWIG_0(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPolyline_curveTo__SWIG_4(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofPolyline_curveTo__SWIG_3(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofPolyline_curveTo__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_curveTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::curveTo(ofPoint const &,int)\n" "    ofPolyline::curveTo(ofPoint const &)\n"
  "    ofPolyline::curveTo(float,float,float,int)\n" "    ofPolyline::curveTo(float,float,float)\n"
  "    ofPolyline::curveTo(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_bezierTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; int arg5 ; SWIG_check_num_args("ofPolyline::bezierTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"ofPoint const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",4,SWIGTYPE_p_ofVec3f); }  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_bezierTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPolyline::bezierTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_bezierTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; int arg8 ;
  SWIG_check_num_args("ofPolyline::bezierTo",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::bezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::bezierTo",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_bezierTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPolyline::bezierTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::bezierTo",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_bezierTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  int arg11 ; SWIG_check_num_args("ofPolyline::bezierTo",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::bezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::bezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::bezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPolyline::bezierTo",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofPolyline::bezierTo",11,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10); arg11 = (int)lua_tonumber(L, 11);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_bezierTo__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPolyline::bezierTo",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::bezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::bezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::bezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPolyline::bezierTo",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_bezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_bezierTo(lua_State* L) { int argc; int argv[12]={ 1,2,3,4,5,6,7,8,9,10,11,12} ;
  argc = lua_gettop(L); if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_bezierTo__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofPolyline_bezierTo__SWIG_0(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPolyline_bezierTo__SWIG_3(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofPolyline_bezierTo__SWIG_2(L);}  }  }  }  }  }  }  }
     }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofPolyline_bezierTo__SWIG_5(L);}  }  }  }  }  }
             }  }  }  }  }  if (argc == 11) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) {
                          return _wrap_ofPolyline_bezierTo__SWIG_4(L);}  }  }  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_bezierTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::bezierTo(ofPoint const &,ofPoint const &,ofPoint const &,int)\n"
  "    ofPolyline::bezierTo(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofPolyline::bezierTo(float,float,float,float,float,float,int)\n"
  "    ofPolyline::bezierTo(float,float,float,float,float,float)\n"
  "    ofPolyline::bezierTo(float,float,float,float,float,float,float,float,float,int)\n"
  "    ofPolyline::bezierTo(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_quadBezierTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  int arg11 ; SWIG_check_num_args("ofPolyline::quadBezierTo",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::quadBezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::quadBezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::quadBezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPolyline::quadBezierTo",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofPolyline::quadBezierTo",11,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10); arg11 = (int)lua_tonumber(L, 11);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_quadBezierTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPolyline::quadBezierTo",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::quadBezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::quadBezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::quadBezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPolyline::quadBezierTo",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_quadBezierTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; int arg5 ; SWIG_check_num_args("ofPolyline::quadBezierTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"ofPoint const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",4,SWIGTYPE_p_ofVec3f); }  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_quadBezierTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPolyline::quadBezierTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_quadBezierTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; int arg8 ;
  SWIG_check_num_args("ofPolyline::quadBezierTo",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::quadBezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::quadBezierTo",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofPolyline_quadBezierTo__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
  SWIG_check_num_args("ofPolyline::quadBezierTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::quadBezierTo",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_quadBezierTo(lua_State* L) { int argc; int argv[12]={ 1,2,3,4,5,6,7,8,9,10,11,12} ;
  argc = lua_gettop(L); if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_quadBezierTo__SWIG_3(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofPolyline_quadBezierTo__SWIG_2(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofPolyline_quadBezierTo__SWIG_5(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofPolyline_quadBezierTo__SWIG_4(L);}  }  }  }  }  }
         }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_ofPolyline_quadBezierTo__SWIG_1(L);}  }  }  }  }
               }  }  }  }  }  }  if (argc == 11) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) {
                          return _wrap_ofPolyline_quadBezierTo__SWIG_0(L);}  }  }  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_quadBezierTo'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::quadBezierTo(float,float,float,float,float,float,float,float,float,int)\n"
  "    ofPolyline::quadBezierTo(float,float,float,float,float,float,float,float,float)\n"
  "    ofPolyline::quadBezierTo(ofPoint const &,ofPoint const &,ofPoint const &,int)\n"
  "    ofPolyline::quadBezierTo(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofPolyline::quadBezierTo(float,float,float,float,float,float,int)\n"
  "    ofPolyline::quadBezierTo(float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_getSmoothed__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  int arg2 ; float arg3 ; ofPolyline result; SWIG_check_num_args("ofPolyline::getSmoothed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getSmoothed",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getSmoothed",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::getSmoothed",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getSmoothed",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = ((ofPolyline const *)arg1)->getSmoothed(arg2,arg3); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getSmoothed__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  int arg2 ; ofPolyline result; SWIG_check_num_args("ofPolyline::getSmoothed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getSmoothed",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getSmoothed",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getSmoothed",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getSmoothed(arg2); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getSmoothed(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofPolyline_getSmoothed__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPolyline_getSmoothed__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_getSmoothed'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::getSmoothed(int,float) const\n"
  "    ofPolyline::getSmoothed(int) const\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_getResampledBySpacing(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofPolyline result; SWIG_check_num_args("ofPolyline::getResampledBySpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getResampledBySpacing",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getResampledBySpacing",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getResampledBySpacing",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getResampledBySpacing(arg2); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getResampledByCount(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  int arg2 ; ofPolyline result; SWIG_check_num_args("ofPolyline::getResampledByCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getResampledByCount",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getResampledByCount",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getResampledByCount",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getResampledByCount(arg2); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_simplify__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; SWIG_check_num_args("ofPolyline::simplify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::simplify",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::simplify",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_simplify",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->simplify(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_simplify__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::simplify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::simplify",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_simplify",1,SWIGTYPE_p_ofPolyline); }  (arg1)->simplify(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_simplify(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_simplify__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofPolyline_simplify__SWIG_0(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_simplify'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::simplify(float)\n" "    ofPolyline::simplify()\n");
  lua_error(L);return 0; }
static int _wrap_ofPolyline_close(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::close",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::close",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_close",1,SWIGTYPE_p_ofPolyline); }  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_setClosed(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofPolyline::setClosed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::setClosed",1,"ofPolyline *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPolyline::setClosed",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_setClosed",1,SWIGTYPE_p_ofPolyline); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setClosed(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_isClosed(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; bool result;
  SWIG_check_num_args("ofPolyline::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::isClosed",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_isClosed",1,SWIGTYPE_p_ofPolyline); }  result = (bool)((ofPolyline const *)arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_hasChanged(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; bool result;
  SWIG_check_num_args("ofPolyline::hasChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::hasChanged",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_hasChanged",1,SWIGTYPE_p_ofPolyline); }  result = (bool)(arg1)->hasChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_flagHasChanged(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::flagHasChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::flagHasChanged",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_flagHasChanged",1,SWIGTYPE_p_ofPolyline); }  (arg1)->flagHasChanged(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_inside__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofPolyline *arg3 = 0 ;
  bool result; SWIG_check_num_args("ofPolyline::inside",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofPolyline::inside",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::inside",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::inside",3,"ofPolyline const &"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_inside",3,SWIGTYPE_p_ofPolyline); } 
  result = (bool)ofPolyline::inside(arg1,arg2,(ofPolyline const &)*arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_inside__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; bool result; SWIG_check_num_args("ofPolyline::inside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::inside",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::inside",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::inside",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_inside",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofPolyline const *)arg1)->inside(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_inside__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPolyline *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofPolyline::inside",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPolyline::inside",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::inside",2,"ofPolyline const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_inside",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_inside",2,SWIGTYPE_p_ofPolyline); } 
  result = (bool)ofPolyline::inside((ofVec3f const &)*arg1,(ofPolyline const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_inside__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; bool result; SWIG_check_num_args("ofPolyline::inside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::inside",1,"ofPolyline const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::inside",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_inside",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_inside",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofPolyline const *)arg1)->inside((ofPoint const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_inside(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_inside__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_inside__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofPolyline_inside__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_inside__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_inside'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::inside(float,float,ofPolyline const &)\n" "    ofPolyline::inside(float,float) const\n"
  "    ofPolyline::inside(ofPoint const &,ofPolyline const &)\n" "    ofPolyline::inside(ofPoint const &) const\n");
  lua_error(L);return 0; }
static int _wrap_ofPolyline_getBoundingBox(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofRectangle result; SWIG_check_num_args("ofPolyline::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getBoundingBox",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getBoundingBox",1,SWIGTYPE_p_ofPolyline); } 
  result = ((ofPolyline const *)arg1)->getBoundingBox(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getPerimeter(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float result;
  SWIG_check_num_args("ofPolyline::getPerimeter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getPerimeter",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getPerimeter",1,SWIGTYPE_p_ofPolyline); } 
  result = (float)((ofPolyline const *)arg1)->getPerimeter(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getArea(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float result;
  SWIG_check_num_args("ofPolyline::getArea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getArea",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getArea",1,SWIGTYPE_p_ofPolyline); }  result = (float)((ofPolyline const *)arg1)->getArea();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getCentroid2D(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint result; SWIG_check_num_args("ofPolyline::getCentroid2D",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getCentroid2D",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getCentroid2D",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->getCentroid2D();
  { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getClosestPoint__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; unsigned int *arg3 = (unsigned int *) 0 ; ofPoint result;
  SWIG_check_num_args("ofPolyline::getClosestPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getClosestPoint",1,"ofPolyline const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::getClosestPoint",2,"ofPoint const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofPolyline::getClosestPoint",3,"unsigned int *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getClosestPoint",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_getClosestPoint",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("ofPolyline_getClosestPoint",3,SWIGTYPE_p_unsigned_int); } 
  result = ((ofPolyline const *)arg1)->getClosestPoint((ofPoint const &)*arg2,arg3); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getClosestPoint__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint result; SWIG_check_num_args("ofPolyline::getClosestPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getClosestPoint",1,"ofPolyline const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::getClosestPoint",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getClosestPoint",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_getClosestPoint",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofPolyline const *)arg1)->getClosestPoint((ofPoint const &)*arg2); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getClosestPoint(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_getClosestPoint__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_getClosestPoint__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_getClosestPoint'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::getClosestPoint(ofPoint const &,unsigned int *) const\n"
  "    ofPolyline::getClosestPoint(ofPoint const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofPolyline_getIndexAtLength(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float result; SWIG_check_num_args("ofPolyline::getIndexAtLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getIndexAtLength",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getIndexAtLength",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getIndexAtLength",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getIndexAtLength(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getIndexAtPercent(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float result; SWIG_check_num_args("ofPolyline::getIndexAtPercent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getIndexAtPercent",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getIndexAtPercent",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getIndexAtPercent",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getIndexAtPercent(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getLengthAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  float result; SWIG_check_num_args("ofPolyline::getLengthAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getLengthAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getLengthAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getLengthAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getLengthAtIndex(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getLengthAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float result; SWIG_check_num_args("ofPolyline::getLengthAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getLengthAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getLengthAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getLengthAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getLengthAtIndexInterpolated(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getPointAtLength(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofPoint result; SWIG_check_num_args("ofPolyline::getPointAtLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getPointAtLength",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getPointAtLength",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getPointAtLength",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getPointAtLength(arg2); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getPointAtPercent(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofPoint result; SWIG_check_num_args("ofPolyline::getPointAtPercent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getPointAtPercent",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getPointAtPercent",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getPointAtPercent",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getPointAtPercent(arg2); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getPointAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofPoint result; SWIG_check_num_args("ofPolyline::getPointAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getPointAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getPointAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getPointAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getPointAtIndexInterpolated(arg2); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getAngleAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  float result; SWIG_check_num_args("ofPolyline::getAngleAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getAngleAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getAngleAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getAngleAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getAngleAtIndex(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getAngleAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float result; SWIG_check_num_args("ofPolyline::getAngleAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getAngleAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getAngleAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getAngleAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getAngleAtIndexInterpolated(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getRotationAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  int arg2 ; ofVec3f result; SWIG_check_num_args("ofPolyline::getRotationAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getRotationAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getRotationAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getRotationAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getRotationAtIndex(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getRotationAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0;
  ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ; ofVec3f result;
  SWIG_check_num_args("ofPolyline::getRotationAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getRotationAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getRotationAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getRotationAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getRotationAtIndexInterpolated(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getTangentAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  ofVec3f result; SWIG_check_num_args("ofPolyline::getTangentAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getTangentAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getTangentAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getTangentAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getTangentAtIndex(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getTangentAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0;
  ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ; ofVec3f result;
  SWIG_check_num_args("ofPolyline::getTangentAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getTangentAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getTangentAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getTangentAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getTangentAtIndexInterpolated(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getNormalAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  ofVec3f result; SWIG_check_num_args("ofPolyline::getNormalAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getNormalAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getNormalAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getNormalAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getNormalAtIndex(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getNormalAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofVec3f result; SWIG_check_num_args("ofPolyline::getNormalAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getNormalAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getNormalAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getNormalAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getNormalAtIndexInterpolated(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_getWrappedIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  int result; SWIG_check_num_args("ofPolyline::getWrappedIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getWrappedIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getWrappedIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getWrappedIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((ofPolyline const *)arg1)->getWrappedIndex(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_setRightVector__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofVec3f arg2 ; ofVec3f *argp2 ; SWIG_check_num_args("ofPolyline::setRightVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::setRightVector",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::setRightVector",2,"ofVec3f");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_setRightVector",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofPolyline_setRightVector",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2; (arg1)->setRightVector(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_setRightVector__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::setRightVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::setRightVector",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_setRightVector",1,SWIGTYPE_p_ofPolyline); }  (arg1)->setRightVector(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_setRightVector(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_setRightVector__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofPolyline_setRightVector__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofPolyline_setRightVector'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::setRightVector(ofVec3f)\n" "    ofPolyline::setRightVector()\n");
  lua_error(L);return 0; }
static int _wrap_ofPolyline_getRightVector(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofVec3f result; SWIG_check_num_args("ofPolyline::getRightVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getRightVector",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_getRightVector",1,SWIGTYPE_p_ofPolyline); } 
  result = ((ofPolyline const *)arg1)->getRightVector(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPolyline_draw(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::draw",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("ofPolyline_draw",1,SWIGTYPE_p_ofPolyline); }  ((ofPolyline const *)arg1)->draw(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofPolyline(void *obj) {
ofPolyline *arg1 = (ofPolyline *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofPolyline(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofPolyline);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofPolyline_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofPolyline_methods[]= {
    { "clear", _wrap_ofPolyline_clear},
    { "addVertex", _wrap_ofPolyline_addVertex},
    { "addVertices", _wrap_ofPolyline_addVertices},
    { "insertVertex", _wrap_ofPolyline_insertVertex},
    { "resize", _wrap_ofPolyline_resize},
    { "size", _wrap_ofPolyline_size},
    { "getVertices", _wrap_ofPolyline_getVertices},
    { "begin", _wrap_ofPolyline_begin},
    { "rbegin", _wrap_ofPolyline_rbegin},
    { "c_end", _wrap_ofPolyline_c_end},
    { "rend", _wrap_ofPolyline_rend},
    { "lineTo", _wrap_ofPolyline_lineTo},
    { "arc", _wrap_ofPolyline_arc},
    { "arcNegative", _wrap_ofPolyline_arcNegative},
    { "curveTo", _wrap_ofPolyline_curveTo},
    { "bezierTo", _wrap_ofPolyline_bezierTo},
    { "quadBezierTo", _wrap_ofPolyline_quadBezierTo},
    { "getSmoothed", _wrap_ofPolyline_getSmoothed},
    { "getResampledBySpacing", _wrap_ofPolyline_getResampledBySpacing},
    { "getResampledByCount", _wrap_ofPolyline_getResampledByCount},
    { "simplify", _wrap_ofPolyline_simplify},
    { "close", _wrap_ofPolyline_close},
    { "setClosed", _wrap_ofPolyline_setClosed},
    { "isClosed", _wrap_ofPolyline_isClosed},
    { "hasChanged", _wrap_ofPolyline_hasChanged},
    { "flagHasChanged", _wrap_ofPolyline_flagHasChanged},
    { "inside", _wrap_ofPolyline_inside},
    { "getBoundingBox", _wrap_ofPolyline_getBoundingBox},
    { "getPerimeter", _wrap_ofPolyline_getPerimeter},
    { "getArea", _wrap_ofPolyline_getArea},
    { "getCentroid2D", _wrap_ofPolyline_getCentroid2D},
    { "getClosestPoint", _wrap_ofPolyline_getClosestPoint},
    { "getIndexAtLength", _wrap_ofPolyline_getIndexAtLength},
    { "getIndexAtPercent", _wrap_ofPolyline_getIndexAtPercent},
    { "getLengthAtIndex", _wrap_ofPolyline_getLengthAtIndex},
    { "getLengthAtIndexInterpolated", _wrap_ofPolyline_getLengthAtIndexInterpolated},
    { "getPointAtLength", _wrap_ofPolyline_getPointAtLength},
    { "getPointAtPercent", _wrap_ofPolyline_getPointAtPercent},
    { "getPointAtIndexInterpolated", _wrap_ofPolyline_getPointAtIndexInterpolated},
    { "getAngleAtIndex", _wrap_ofPolyline_getAngleAtIndex},
    { "getAngleAtIndexInterpolated", _wrap_ofPolyline_getAngleAtIndexInterpolated},
    { "getRotationAtIndex", _wrap_ofPolyline_getRotationAtIndex},
    { "getRotationAtIndexInterpolated", _wrap_ofPolyline_getRotationAtIndexInterpolated},
    { "getTangentAtIndex", _wrap_ofPolyline_getTangentAtIndex},
    { "getTangentAtIndexInterpolated", _wrap_ofPolyline_getTangentAtIndexInterpolated},
    { "getNormalAtIndex", _wrap_ofPolyline_getNormalAtIndex},
    { "getNormalAtIndexInterpolated", _wrap_ofPolyline_getNormalAtIndexInterpolated},
    { "getWrappedIndex", _wrap_ofPolyline_getWrappedIndex},
    { "setRightVector", _wrap_ofPolyline_setRightVector},
    { "getRightVector", _wrap_ofPolyline_getRightVector},
    { "draw", _wrap_ofPolyline_draw},
    {0,0}
};
static swig_lua_method swig_ofPolyline_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofPolyline_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofPolyline_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofPolyline_Sf_SwigStatic_methods[]= {
    { "fromRectangle", _wrap_ofPolyline_fromRectangle},
    {0,0}
};
static swig_lua_class* swig_ofPolyline_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofPolyline_Sf_SwigStatic = {
    "ofPolyline",
    swig_ofPolyline_Sf_SwigStatic_methods,
    swig_ofPolyline_Sf_SwigStatic_attributes,
    swig_ofPolyline_Sf_SwigStatic_constants,
    swig_ofPolyline_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofPolyline_bases[] = {0};
static const char *swig_ofPolyline_base_names[] = {0};
static swig_lua_class _wrap_class_ofPolyline = { "ofPolyline", "ofPolyline", &SWIGTYPE_p_ofPolyline,_proxy__wrap_new_ofPolyline, swig_delete_ofPolyline, swig_ofPolyline_methods, swig_ofPolyline_attributes, &swig_ofPolyline_Sf_SwigStatic, swig_ofPolyline_meta, swig_ofPolyline_bases, swig_ofPolyline_base_names };

static int _wrap_ofSetColor__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetColor",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetColor",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetColor",3,"int");
  arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetColor(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetColor__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofSetColor",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetColor",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetColor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetColor",4,"int"); arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); ofSetColor(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetColor__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; SWIG_check_num_args("ofSetColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetColor",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofSetColor",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  ofSetColor((ofColor_< unsigned char > const &)*arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetColor__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; int arg2 ;
  SWIG_check_num_args("ofSetColor",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetColor",1,"ofColor const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofSetColor",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  ofSetColor((ofColor_< unsigned char > const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetColor__SWIG_4(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSetColor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetColor",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSetColor(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSetColor__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofSetColor__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofSetColor__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofSetColor__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofSetColor__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetColor(int,int,int)\n" "    ofSetColor(int,int,int,int)\n" "    ofSetColor(ofColor const &)\n"
  "    ofSetColor(ofColor const &,int)\n" "    ofSetColor(int)\n"); lua_error(L);return 0; }
static int _wrap_ofSetHexColor(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSetHexColor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetHexColor",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSetHexColor(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNoFill(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofNoFill",0,0) ofNoFill(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofFill(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofFill",0,0) ofFill(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetFill(lua_State* L) { int SWIG_arg = 0; ofFillFlag result; SWIG_check_num_args("ofGetFill",0,0)
  result = (ofFillFlag)ofGetFill(); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetBackgroundColor(lua_State* L) { int SWIG_arg = 0; ofColor result;
  SWIG_check_num_args("ofGetBackgroundColor",0,0) result = ofGetBackgroundColor(); {
    ofColor * resultptr = new ofColor((const ofColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetBackground(lua_State* L) { int SWIG_arg = 0; ofColor result; SWIG_check_num_args("ofGetBackground",0,0)
  result = ofGetBackground(); { ofColor * resultptr = new ofColor((const ofColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBackground__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofBackground",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackground",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBackground",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBackground",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBackground",4,"int"); arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); ofBackground(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBackground__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofBackground",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackground",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBackground",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBackground",3,"int");
  arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofBackground(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBackground__SWIG_2(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofBackground",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackground",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBackground",2,"int"); arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2);
  ofBackground(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBackground__SWIG_3(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofBackground",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackground",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofBackground(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBackground__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ;
  SWIG_check_num_args("ofBackground",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBackground",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofBackground",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofBackground((ofColor_< unsigned char > const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBackground(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBackground__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofBackground__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofBackground__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofBackground__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofBackground__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBackground'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBackground(int,int,int,int)\n" "    ofBackground(int,int,int)\n" "    ofBackground(int,int)\n"
  "    ofBackground(int)\n" "    ofBackground(ofColor const &)\n"); lua_error(L);return 0; }
static int _wrap_ofBackgroundHex__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofBackgroundHex",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackgroundHex",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBackgroundHex",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofBackgroundHex(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBackgroundHex__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofBackgroundHex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackgroundHex",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofBackgroundHex(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBackgroundHex(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofBackgroundHex__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofBackgroundHex__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBackgroundHex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBackgroundHex(int,int)\n" "    ofBackgroundHex(int)\n"); lua_error(L);return 0; }
static int _wrap_ofBackgroundGradient__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; ofColor *arg2 = 0 ;
  ofGradientMode arg3 ; SWIG_check_num_args("ofBackgroundGradient",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBackgroundGradient",1,"ofColor const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBackgroundGradient",2,"ofColor const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBackgroundGradient",3,"ofGradientMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofBackgroundGradient",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofBackgroundGradient",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  arg3 = (ofGradientMode)(int)lua_tonumber(L, 3);
  ofBackgroundGradient((ofColor_< unsigned char > const &)*arg1,(ofColor_< unsigned char > const &)*arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBackgroundGradient__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; ofColor *arg2 = 0 ;
  SWIG_check_num_args("ofBackgroundGradient",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBackgroundGradient",1,"ofColor const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBackgroundGradient",2,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofBackgroundGradient",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofBackgroundGradient",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofBackgroundGradient((ofColor_< unsigned char > const &)*arg1,(ofColor_< unsigned char > const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBackgroundGradient(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBackgroundGradient__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofBackgroundGradient__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBackgroundGradient'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBackgroundGradient(ofColor const &,ofColor const &,ofGradientMode)\n"
  "    ofBackgroundGradient(ofColor const &,ofColor const &)\n"); lua_error(L);return 0; }
static int _wrap_ofSetBackgroundColor__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofSetBackgroundColor",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBackgroundColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetBackgroundColor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetBackgroundColor",4,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  ofSetBackgroundColor(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetBackgroundColor__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetBackgroundColor",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBackgroundColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetBackgroundColor",3,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetBackgroundColor(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetBackgroundColor__SWIG_2(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetBackgroundColor",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBackgroundColor",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetBackgroundColor(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetBackgroundColor__SWIG_3(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetBackgroundColor",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetBackgroundColor(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetBackgroundColor__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ;
  SWIG_check_num_args("ofSetBackgroundColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofSetBackgroundColor",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofSetBackgroundColor((ofColor_< unsigned char > const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetBackgroundColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSetBackgroundColor__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofSetBackgroundColor__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofSetBackgroundColor__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofSetBackgroundColor__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofSetBackgroundColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetBackgroundColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetBackgroundColor(int,int,int,int)\n" "    ofSetBackgroundColor(int,int,int)\n"
  "    ofSetBackgroundColor(int,int)\n" "    ofSetBackgroundColor(int)\n" "    ofSetBackgroundColor(ofColor const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofSetBackgroundColorHex__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetBackgroundColorHex",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColorHex",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBackgroundColorHex",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetBackgroundColorHex(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetBackgroundColorHex__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetBackgroundColorHex",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColorHex",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetBackgroundColorHex(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetBackgroundColorHex(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofSetBackgroundColorHex__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofSetBackgroundColorHex__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetBackgroundColorHex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetBackgroundColorHex(int,int)\n" "    ofSetBackgroundColorHex(int)\n");
  lua_error(L);return 0; }
static int _wrap_ofSetBackgroundAuto(lua_State* L) { int SWIG_arg = 0; bool arg1 ;
  SWIG_check_num_args("ofSetBackgroundAuto",1,1) if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetBackgroundAuto",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0); ofSetBackgroundAuto(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetBackgroundAuto(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofGetBackgroundAuto",0,0) result = (bool)ofGetBackgroundAuto();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofClear__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofClear",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClear",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofClear",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofClear",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofClear",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ofClear(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofClear__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofClear",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClear",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofClear",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofClear",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofClear(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofClear__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; SWIG_check_num_args("ofClear",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClear",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofClear",2,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); ofClear(arg1,arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofClear__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofClear",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClear",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofClear(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofClear__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; SWIG_check_num_args("ofClear",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofClear",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofClear",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  ofClear((ofColor_< unsigned char > const &)*arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofClear(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofClear__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofClear__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofClear__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofClear__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofClear__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofClear'\n" "  Possible C/C++ prototypes are:\n"
  "    ofClear(float,float,float,float)\n" "    ofClear(float,float,float)\n" "    ofClear(float,float)\n"
  "    ofClear(float)\n" "    ofClear(ofColor const &)\n"); lua_error(L);return 0; }
static int _wrap_ofClearAlpha(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofClearAlpha",0,0) ofClearAlpha();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawTriangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofDrawTriangle",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawTriangle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawTriangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawTriangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawTriangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawTriangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawTriangle",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofDrawTriangle(arg1,arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawTriangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofDrawTriangle",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawTriangle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawTriangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawTriangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawTriangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawTriangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawTriangle",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofDrawTriangle",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofDrawTriangle",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofDrawTriangle",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  ofDrawTriangle(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawTriangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; SWIG_check_num_args("ofDrawTriangle",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawTriangle",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawTriangle",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofDrawTriangle",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawTriangle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawTriangle",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawTriangle",3,SWIGTYPE_p_ofVec3f); } 
  ofDrawTriangle((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawTriangle(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofDrawTriangle__SWIG_2(L);}  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofDrawTriangle__SWIG_0(L);}  }  }  }  }  }  } 
  if (argc == 9) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) { {
                      _v = lua_isnumber(L,argv[8]); }  if (_v) { return _wrap_ofDrawTriangle__SWIG_1(L);}  }  }  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawTriangle'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDrawTriangle(float,float,float,float,float,float)\n"
  "    ofDrawTriangle(float,float,float,float,float,float,float,float,float)\n"
  "    ofDrawTriangle(ofPoint const &,ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofDrawCircle__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawCircle",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCircle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCircle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCircle",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawCircle(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCircle__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawCircle",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCircle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCircle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCircle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCircle",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawCircle(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCircle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofDrawCircle",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawCircle",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCircle",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawCircle",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); ofDrawCircle((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCircle(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofDrawCircle__SWIG_2(L);}  }  } 
  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofDrawCircle__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawCircle__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawCircle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawCircle(float,float,float)\n" "    ofDrawCircle(float,float,float,float)\n"
  "    ofDrawCircle(ofPoint const &,float)\n"); lua_error(L);return 0; }
static int _wrap_ofDrawEllipse__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawEllipse",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawEllipse",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawEllipse",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawEllipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawEllipse",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawEllipse(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawEllipse__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawEllipse",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawEllipse",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawEllipse",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawEllipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawEllipse",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawEllipse",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofDrawEllipse(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawEllipse__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawEllipse",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawEllipse",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawEllipse",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawEllipse",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawEllipse",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofDrawEllipse((ofVec3f const &)*arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawEllipse(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawEllipse__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawEllipse__SWIG_0(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofDrawEllipse__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawEllipse'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawEllipse(float,float,float,float)\n" "    ofDrawEllipse(float,float,float,float,float)\n"
  "    ofDrawEllipse(ofPoint const &,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofDrawLine__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawLine",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawLine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawLine",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawLine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawLine",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawLine(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawLine__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofDrawLine",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawLine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawLine",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawLine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawLine",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawLine",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawLine",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofDrawLine(arg1,arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawLine__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofDrawLine",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawLine",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawLine",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawLine",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawLine",2,SWIGTYPE_p_ofVec3f); } 
  ofDrawLine((ofVec3f const &)*arg1,(ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawLine(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofDrawLine__SWIG_2(L);}  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawLine__SWIG_0(L);}  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofDrawLine__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawLine'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawLine(float,float,float,float)\n" "    ofDrawLine(float,float,float,float,float,float)\n"
  "    ofDrawLine(ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofDrawRectangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawRectangle",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRectangle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawRectangle",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawRectangle(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRectangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ;
  SWIG_check_num_args("ofDrawRectangle",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawRectangle",1,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofDrawRectangle",1,SWIGTYPE_p_ofRectangle); }  ofDrawRectangle((ofRectangle const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRectangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawRectangle",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawRectangle",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectangle",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawRectangle",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ofDrawRectangle((ofVec3f const &)*arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRectangle__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawRectangle",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRectangle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawRectangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawRectangle",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofDrawRectangle(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRectangle(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofDrawRectangle__SWIG_1(L);}  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawRectangle__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawRectangle__SWIG_0(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofDrawRectangle__SWIG_3(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawRectangle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawRectangle(float,float,float,float)\n" "    ofDrawRectangle(ofRectangle const &)\n"
  "    ofDrawRectangle(ofPoint const &,float,float)\n" "    ofDrawRectangle(float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofDrawRectRounded__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofDrawRectRounded",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawRectRounded",1,"ofRectangle const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectRounded",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofDrawRectRounded",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  ofDrawRectRounded((ofRectangle const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRectRounded__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofDrawRectRounded",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawRectRounded",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawRectRounded",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawRectRounded",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ofDrawRectRounded((ofVec3f const &)*arg1,arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRectRounded__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawRectRounded",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRectRounded",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawRectRounded",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofDrawRectRounded(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRectRounded__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofDrawRectRounded",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRectRounded",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawRectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawRectRounded",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofDrawRectRounded(arg1,arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawRectRounded__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofDrawRectRounded",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawRectRounded",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawRectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawRectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofDrawRectRounded",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawRectRounded",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  ofDrawRectRounded((ofVec3f const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawRectRounded__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofDrawRectRounded",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawRectRounded",1,"ofRectangle const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawRectRounded",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofDrawRectRounded",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ofDrawRectRounded((ofRectangle const &)*arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawRectRounded__SWIG_6(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofDrawRectRounded",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRectRounded",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawRectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawRectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofDrawRectRounded",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofDrawRectRounded",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofDrawRectRounded",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  ofDrawRectRounded(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawRectRounded(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofDrawRectRounded__SWIG_0(L);}  }
     }  if (argc == 4) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawRectRounded__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofDrawRectRounded__SWIG_5(L);}  }  }  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofDrawRectRounded__SWIG_2(L);}  }  }  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofDrawRectRounded__SWIG_3(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofDrawRectRounded__SWIG_4(L);}  }  }  }  }  }  }  }  if (argc == 9) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_ofDrawRectRounded__SWIG_6(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawRectRounded'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawRectRounded(ofRectangle const &,float)\n" "    ofDrawRectRounded(ofPoint const &,float,float,float)\n"
  "    ofDrawRectRounded(float,float,float,float,float)\n" "    ofDrawRectRounded(float,float,float,float,float,float)\n"
  "    ofDrawRectRounded(ofPoint const &,float,float,float,float,float,float)\n"
  "    ofDrawRectRounded(ofRectangle const &,float,float,float,float)\n"
  "    ofDrawRectRounded(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofDrawCurve__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofDrawCurve",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCurve",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCurve",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCurve",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCurve",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawCurve",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawCurve",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofDrawCurve",7,"float"); if(!lua_isnumber(L,8)) SWIG_fail_arg("ofDrawCurve",8,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); ofDrawCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCurve__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ;
  SWIG_check_num_args("ofDrawCurve",12,12) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCurve",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCurve",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCurve",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCurve",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawCurve",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawCurve",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofDrawCurve",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofDrawCurve",8,"float"); if(!lua_isnumber(L,9)) SWIG_fail_arg("ofDrawCurve",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofDrawCurve",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofDrawCurve",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofDrawCurve",12,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12);
  ofDrawCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCurve(lua_State* L) { int argc; int argv[13]={ 1,2,3,4,5,6,7,8,9,10,11,12,13} ; argc = lua_gettop(L);
  if (argc == 8) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_ofDrawCurve__SWIG_0(L);}  }  }  }  }  }  }  }  }  if (argc == 12) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { return _wrap_ofDrawCurve__SWIG_1(L);}  }  }  }  }  }  }
               }  }  }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawCurve'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDrawCurve(float,float,float,float,float,float,float,float)\n"
  "    ofDrawCurve(float,float,float,float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofDrawBezier__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofDrawBezier",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBezier",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBezier",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBezier",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBezier",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawBezier",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawBezier",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofDrawBezier",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofDrawBezier",8,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); ofDrawBezier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBezier__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ;
  SWIG_check_num_args("ofDrawBezier",12,12) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBezier",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBezier",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBezier",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBezier",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawBezier",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawBezier",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofDrawBezier",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofDrawBezier",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofDrawBezier",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofDrawBezier",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofDrawBezier",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofDrawBezier",12,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12);
  ofDrawBezier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBezier(lua_State* L) { int argc; int argv[13]={ 1,2,3,4,5,6,7,8,9,10,11,12,13} ; argc = lua_gettop(L);
  if (argc == 8) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_ofDrawBezier__SWIG_0(L);}  }  }  }  }  }  }  }  }  if (argc == 12) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { return _wrap_ofDrawBezier__SWIG_1(L);}  }  }  }  }  }  }
               }  }  }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawBezier'\n"
  "  Possible C/C++ prototypes are:\n" "    ofDrawBezier(float,float,float,float,float,float,float,float)\n"
  "    ofDrawBezier(float,float,float,float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofTriangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofTriangle",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTriangle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTriangle",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTriangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTriangle",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTriangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTriangle",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofTriangle(arg1,arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTriangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofTriangle",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTriangle",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTriangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTriangle",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTriangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTriangle",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTriangle",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTriangle",7,"float"); if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTriangle",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofTriangle",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); ofTriangle(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTriangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; SWIG_check_num_args("ofTriangle",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofTriangle",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTriangle",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofTriangle",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofTriangle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofTriangle",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofTriangle",3,SWIGTYPE_p_ofVec3f); } 
  ofTriangle((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTriangle(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofTriangle__SWIG_2(L);}  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofTriangle__SWIG_0(L);}  }  }  }  }  }  } 
  if (argc == 9) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) { {
                      _v = lua_isnumber(L,argv[8]); }  if (_v) { return _wrap_ofTriangle__SWIG_1(L);}  }  }  }  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTriangle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTriangle(float,float,float,float,float,float)\n"
  "    ofTriangle(float,float,float,float,float,float,float,float,float)\n"
  "    ofTriangle(ofPoint const &,ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofCircle__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofCircle",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCircle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCircle",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCircle",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofCircle(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCircle__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofCircle",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCircle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCircle",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCircle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCircle",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofCircle(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCircle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofCircle",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCircle",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCircle",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofCircle",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); ofCircle((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCircle(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofCircle__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofCircle__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofCircle__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCircle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofCircle(float,float,float)\n" "    ofCircle(float,float,float,float)\n" "    ofCircle(ofPoint const &,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofEllipse__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofEllipse",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofEllipse",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofEllipse",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofEllipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofEllipse",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofEllipse(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEllipse__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofEllipse",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofEllipse",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofEllipse",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofEllipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofEllipse",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofEllipse",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofEllipse(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEllipse__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofEllipse",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofEllipse",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofEllipse",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofEllipse",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofEllipse",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofEllipse((ofVec3f const &)*arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEllipse(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 3) { int _v;
    { void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofEllipse__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofEllipse__SWIG_0(L);}  }  }  }  }  if (argc == 5) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofEllipse__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofEllipse'\n" "  Possible C/C++ prototypes are:\n"
  "    ofEllipse(float,float,float,float)\n" "    ofEllipse(float,float,float,float,float)\n"
  "    ofEllipse(ofPoint const &,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofLine__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofLine",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLine",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofLine",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ofLine(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLine__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofLine",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLine",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofLine",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofLine",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofLine",6,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ofLine(arg1,arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofLine__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofLine",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofLine",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLine",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofLine",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofLine",2,SWIGTYPE_p_ofVec3f); } 
  ofLine((ofVec3f const &)*arg1,(ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLine(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofLine__SWIG_2(L);}  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofLine__SWIG_0(L);}  }  }  }  }  if (argc == 6) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofLine__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofLine'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLine(float,float,float,float)\n" "    ofLine(float,float,float,float,float,float)\n"
  "    ofLine(ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_ofRect__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofRect",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRect",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRect",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRect",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRect",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ofRect(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRect__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; SWIG_check_num_args("ofRect",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRect",1,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRect",1,SWIGTYPE_p_ofRectangle); }  ofRect((ofRectangle const &)*arg1); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRect__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofRect",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRect",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRect",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRect",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofRect",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofRect((ofVec3f const &)*arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRect__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofRect",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRect",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRect",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRect",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRect",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRect",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofRect(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRect(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofRect__SWIG_1(L);}  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofRect__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofRect__SWIG_0(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofRect__SWIG_3(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRect'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRect(float,float,float,float)\n" "    ofRect(ofRectangle const &)\n" "    ofRect(ofPoint const &,float,float)\n"
  "    ofRect(float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofRectRounded__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofRectRounded",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectRounded",1,"ofRectangle const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectRounded",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  ofRectRounded((ofRectangle const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectRounded__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofRectRounded",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectRounded",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectRounded",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ofRectRounded((ofVec3f const &)*arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectRounded__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofRectRounded",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRectRounded",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectRounded",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofRectRounded(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRectRounded__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofRectRounded",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectRounded",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofRectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofRectRounded",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofRectRounded",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); ofRectRounded((ofVec3f const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRectRounded__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofRectRounded",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectRounded",1,"ofRectangle const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectRounded",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofRectRounded",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ofRectRounded((ofRectangle const &)*arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectRounded__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofRectRounded",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRectRounded",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofRectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofRectRounded",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofRectRounded",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofRectRounded",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  ofRectRounded(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofRectRounded(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofRectRounded__SWIG_0(L);}  }  }
   if (argc == 4) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofRectRounded__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofRectRounded__SWIG_4(L);}  }  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofRectRounded__SWIG_2(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofRectRounded__SWIG_3(L);}  }  }  }  }  }  }  }  if (argc == 9) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_ofRectRounded__SWIG_5(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRectRounded'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectRounded(ofRectangle const &,float)\n" "    ofRectRounded(ofPoint const &,float,float,float)\n"
  "    ofRectRounded(float,float,float,float,float)\n"
  "    ofRectRounded(ofPoint const &,float,float,float,float,float,float)\n"
  "    ofRectRounded(ofRectangle const &,float,float,float,float)\n"
  "    ofRectRounded(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofCurve__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofCurve",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCurve",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCurve",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCurve",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCurve",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCurve",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofCurve",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofCurve",7,"float"); if(!lua_isnumber(L,8)) SWIG_fail_arg("ofCurve",8,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); ofCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCurve__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ;
  SWIG_check_num_args("ofCurve",12,12) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCurve",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCurve",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCurve",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCurve",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCurve",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofCurve",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofCurve",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofCurve",8,"float"); if(!lua_isnumber(L,9)) SWIG_fail_arg("ofCurve",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofCurve",10,"float"); if(!lua_isnumber(L,11)) SWIG_fail_arg("ofCurve",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofCurve",12,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12);
  ofCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCurve(lua_State* L) { int argc; int argv[13]={ 1,2,3,4,5,6,7,8,9,10,11,12,13} ; argc = lua_gettop(L);
  if (argc == 8) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_ofCurve__SWIG_0(L);}  }  }  }  }  }  }  }  }  if (argc == 12) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { return _wrap_ofCurve__SWIG_1(L);}  }  }  }  }  }  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCurve'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCurve(float,float,float,float,float,float,float,float)\n"
  "    ofCurve(float,float,float,float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofBezier__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofBezier",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBezier",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBezier",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBezier",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBezier",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezier",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBezier",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofBezier",7,"float"); if(!lua_isnumber(L,8)) SWIG_fail_arg("ofBezier",8,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); ofBezier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBezier__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ;
  SWIG_check_num_args("ofBezier",12,12) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBezier",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBezier",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBezier",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBezier",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezier",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBezier",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofBezier",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofBezier",8,"float"); if(!lua_isnumber(L,9)) SWIG_fail_arg("ofBezier",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofBezier",10,"float"); if(!lua_isnumber(L,11)) SWIG_fail_arg("ofBezier",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofBezier",12,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12);
  ofBezier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBezier(lua_State* L) { int argc; int argv[13]={ 1,2,3,4,5,6,7,8,9,10,11,12,13} ; argc = lua_gettop(L);
  if (argc == 8) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_ofBezier__SWIG_0(L);}  }  }  }  }  }  }  }  }  if (argc == 12) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { return _wrap_ofBezier__SWIG_1(L);}  }  }  }  }  }  }  }
             }  }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBezier'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBezier(float,float,float,float,float,float,float,float)\n"
  "    ofBezier(float,float,float,float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofBeginShape(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofBeginShape",0,0) ofBeginShape();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofVertex",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVertex",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofVertex(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofVertex",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVertex",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVertex",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofVertex(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVertex__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; SWIG_check_num_args("ofVertex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVertex",1,"ofPoint &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVertex",1,SWIGTYPE_p_ofVec3f); } 
  ofVertex(*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVertex(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVertex__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVertex__SWIG_0(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVertex__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVertex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVertex(float,float)\n" "    ofVertex(float,float,float)\n" "    ofVertex(ofPoint &)\n"); lua_error(L);return 0; }
static int _wrap_ofVertices(lua_State* L) { int SWIG_arg = 0; std::vector< ofPoint > *arg1 = 0 ;
  SWIG_check_num_args("ofVertices",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVertices",1,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("ofVertices",1,SWIGTYPE_p_std__vectorT_ofVec3f_t); }  ofVertices((std::vector< ofVec3f > const &)*arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCurveVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofCurveVertex",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCurveVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCurveVertex",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofCurveVertex(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofCurveVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofCurveVertex",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCurveVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCurveVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCurveVertex",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofCurveVertex(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCurveVertex__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ;
  SWIG_check_num_args("ofCurveVertex",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCurveVertex",1,"ofPoint &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCurveVertex",1,SWIGTYPE_p_ofVec3f); }  ofCurveVertex(*arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCurveVertex(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofCurveVertex__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofCurveVertex__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofCurveVertex__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCurveVertex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofCurveVertex(float,float)\n" "    ofCurveVertex(float,float,float)\n" "    ofCurveVertex(ofPoint &)\n");
  lua_error(L);return 0; }
static int _wrap_ofCurveVertices(lua_State* L) { int SWIG_arg = 0; std::vector< ofPoint > *arg1 = 0 ;
  SWIG_check_num_args("ofCurveVertices",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCurveVertices",1,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("ofCurveVertices",1,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  ofCurveVertices((std::vector< ofVec3f > const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBezierVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofBezierVertex",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBezierVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBezierVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBezierVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBezierVertex",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezierVertex",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBezierVertex",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofBezierVertex(arg1,arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBezierVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; SWIG_check_num_args("ofBezierVertex",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBezierVertex",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBezierVertex",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBezierVertex",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierVertex",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierVertex",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierVertex",3,SWIGTYPE_p_ofVec3f); } 
  ofBezierVertex((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBezierVertex__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofBezierVertex",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBezierVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBezierVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBezierVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBezierVertex",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezierVertex",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBezierVertex",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofBezierVertex",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofBezierVertex",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofBezierVertex",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  ofBezierVertex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBezierVertex(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofBezierVertex__SWIG_1(L);}  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofBezierVertex__SWIG_0(L);}  }  }  }  }  }  } 
  if (argc == 9) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) { {
                      _v = lua_isnumber(L,argv[8]); }  if (_v) { return _wrap_ofBezierVertex__SWIG_2(L);}  }  }  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBezierVertex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBezierVertex(float,float,float,float,float,float)\n"
  "    ofBezierVertex(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofBezierVertex(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofEndShape__SWIG_0(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofEndShape",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofEndShape",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofEndShape(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEndShape__SWIG_1(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEndShape",0,0) ofEndShape();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEndShape(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofEndShape__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isboolean(L,argv[0]); }  if (_v) {
      return _wrap_ofEndShape__SWIG_0(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofEndShape'\n"
  "  Possible C/C++ prototypes are:\n" "    ofEndShape(bool)\n" "    ofEndShape()\n"); lua_error(L);return 0; }
static int _wrap_ofNextContour__SWIG_0(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofNextContour",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofNextContour",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofNextContour(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNextContour__SWIG_1(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofNextContour",0,0)
  ofNextContour(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNextContour(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofNextContour__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isboolean(L,argv[0]); }  if (_v) {
      return _wrap_ofNextContour__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNextContour'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNextContour(bool)\n" "    ofNextContour()\n"); lua_error(L);return 0; }
static int _wrap_ofSetDrawBitmapMode(lua_State* L) { int SWIG_arg = 0; ofDrawBitmapMode arg1 ;
  SWIG_check_num_args("ofSetDrawBitmapMode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetDrawBitmapMode",1,"ofDrawBitmapMode");
  arg1 = (ofDrawBitmapMode)(int)lua_tonumber(L, 1); ofSetDrawBitmapMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBitmapStringHighlight__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofPoint *arg2 = 0 ;
  ofColor *arg3 = 0 ; ofColor *arg4 = 0 ; SWIG_check_num_args("ofDrawBitmapStringHighlight",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"ofColor const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofDrawBitmapStringHighlight",4,"ofColor const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2,(ofColor_< unsigned char > const &)*arg3,(ofColor_< unsigned char > const &)*arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBitmapStringHighlight__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofPoint *arg2 = 0 ;
  ofColor *arg3 = 0 ; SWIG_check_num_args("ofDrawBitmapStringHighlight",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"ofColor const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2,(ofColor_< unsigned char > const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBitmapStringHighlight__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofDrawBitmapStringHighlight",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"ofPoint const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",2,SWIGTYPE_p_ofVec3f); } 
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawBitmapStringHighlight__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; int arg2 ; int arg3 ;
  ofColor *arg4 = 0 ; ofColor *arg5 = 0 ; SWIG_check_num_args("ofDrawBitmapStringHighlight",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofDrawBitmapStringHighlight",4,"ofColor const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofDrawBitmapStringHighlight",5,"ofColor const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",5,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofDrawBitmapStringHighlight(arg1,arg2,arg3,(ofColor_< unsigned char > const &)*arg4,(ofColor_< unsigned char > const &)*arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBitmapStringHighlight__SWIG_4(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; int arg2 ; int arg3 ;
  ofColor *arg4 = 0 ; SWIG_check_num_args("ofDrawBitmapStringHighlight",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofDrawBitmapStringHighlight",4,"ofColor const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofDrawBitmapStringHighlight",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofDrawBitmapStringHighlight(arg1,arg2,arg3,(ofColor_< unsigned char > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBitmapStringHighlight__SWIG_5(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofDrawBitmapStringHighlight",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  ofDrawBitmapStringHighlight(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBitmapStringHighlight(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofDrawBitmapStringHighlight__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofDrawBitmapStringHighlight__SWIG_1(L);}  }  }  } 
  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofDrawBitmapStringHighlight__SWIG_5(L);}  }  }  } 
  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofDrawBitmapStringHighlight__SWIG_0(L);}  }  }  }  } 
  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofDrawBitmapStringHighlight__SWIG_4(L);}  }  }  }  } 
  if (argc == 5) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofDrawBitmapStringHighlight__SWIG_3(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawBitmapStringHighlight'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofDrawBitmapStringHighlight(std::string,ofPoint const &,ofColor const &,ofColor const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,ofPoint const &,ofColor const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,ofPoint const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,int,int,ofColor const &,ofColor const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,int,int,ofColor const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofSetupGraphicDefaults(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSetupGraphicDefaults",0,0)
  ofSetupGraphicDefaults(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreen(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSetupScreen",0,0) ofSetupScreen();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetRectMode(lua_State* L) { int SWIG_arg = 0; ofRectMode result; SWIG_check_num_args("ofGetRectMode",0,0)
  result = (ofRectMode)ofGetRectMode(); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetCircleResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetCircleResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCircleResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetCircleResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetCurveResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetCurveResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCurveResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetCurveResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetLineWidth(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofSetLineWidth",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetLineWidth",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofSetLineWidth(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetDepthTest(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSetDepthTest",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetDepthTest",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofSetDepthTest(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableDepthTest(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableDepthTest",0,0)
  ofEnableDepthTest(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableDepthTest(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableDepthTest",0,0)
  ofDisableDepthTest(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableBlendMode(lua_State* L) { int SWIG_arg = 0; ofBlendMode arg1 ;
  SWIG_check_num_args("ofEnableBlendMode",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofEnableBlendMode",1,"ofBlendMode");
  arg1 = (ofBlendMode)(int)lua_tonumber(L, 1); ofEnableBlendMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDisableBlendMode(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableBlendMode",0,0)
  ofDisableBlendMode(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnablePointSprites(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnablePointSprites",0,0)
  ofEnablePointSprites(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisablePointSprites(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisablePointSprites",0,0)
  ofDisablePointSprites(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableAlphaBlending(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableAlphaBlending",0,0)
  ofEnableAlphaBlending(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableAlphaBlending(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableAlphaBlending",0,0)
  ofDisableAlphaBlending(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableSmoothing(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableSmoothing",0,0)
  ofEnableSmoothing(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableSmoothing(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableSmoothing",0,0)
  ofDisableSmoothing(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableAntiAliasing(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableAntiAliasing",0,0)
  ofEnableAntiAliasing(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableAntiAliasing(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableAntiAliasing",0,0)
  ofDisableAntiAliasing(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetStyle(lua_State* L) { int SWIG_arg = 0; ofStyle result; SWIG_check_num_args("ofGetStyle",0,0)
  result = ofGetStyle(); { ofStyle * resultptr = new ofStyle((const ofStyle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofStyle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSetStyle(lua_State* L) { int SWIG_arg = 0; ofStyle arg1 ; ofStyle *argp1 ;
  SWIG_check_num_args("ofSetStyle",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetStyle",1,"ofStyle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofStyle,0))){ SWIG_fail_ptr("ofSetStyle",1,SWIGTYPE_p_ofStyle); }
   arg1 = *argp1; ofSetStyle(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPushStyle(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPushStyle",0,0) ofPushStyle();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPopStyle(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPopStyle",0,0) ofPopStyle();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetPolyMode(lua_State* L) { int SWIG_arg = 0; ofPolyWindingMode arg1 ;
  SWIG_check_num_args("ofSetPolyMode",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetPolyMode",1,"ofPolyWindingMode");
  arg1 = (ofPolyWindingMode)(int)lua_tonumber(L, 1); ofSetPolyMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetRectMode(lua_State* L) { int SWIG_arg = 0; ofRectMode arg1 ; SWIG_check_num_args("ofSetRectMode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetRectMode",1,"ofRectMode"); arg1 = (ofRectMode)(int)lua_tonumber(L, 1);
  ofSetRectMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPushMatrix(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPushMatrix",0,0) ofPushMatrix();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPopMatrix(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPopMatrix",0,0) ofPopMatrix();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetCurrentMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixMode arg1 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofGetCurrentMatrix",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofGetCurrentMatrix",1,"ofMatrixMode");
  arg1 = (ofMatrixMode)(int)lua_tonumber(L, 1); result = ofGetCurrentMatrix(arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetCurrentOrientationMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 result;
  SWIG_check_num_args("ofGetCurrentOrientationMatrix",0,0) result = ofGetCurrentOrientationMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetCurrentNormalMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 result;
  SWIG_check_num_args("ofGetCurrentNormalMatrix",0,0) result = ofGetCurrentNormalMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTranslate__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofTranslate",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTranslate",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTranslate",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTranslate",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofTranslate(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTranslate__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofTranslate",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTranslate",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTranslate",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofTranslate(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTranslate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ;
  SWIG_check_num_args("ofTranslate",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofTranslate",1,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofTranslate",1,SWIGTYPE_p_ofVec3f); }
   ofTranslate((ofVec3f const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTranslate(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTranslate__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofTranslate__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofTranslate__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTranslate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTranslate(float,float,float)\n" "    ofTranslate(float,float)\n" "    ofTranslate(ofPoint const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofScale__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofScale",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofScale",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofScale",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofScale",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofScale(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofScale__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; SWIG_check_num_args("ofScale",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofScale",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofScale",2,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); ofScale(arg1,arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofScale(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofScale__SWIG_1(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofScale__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofScale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofScale(float,float,float)\n" "    ofScale(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofRotate",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotate",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRotate",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRotate",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofRotate(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofRotate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotate",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofRotate(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRotate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofRotate__SWIG_1(L);}  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofRotate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRotate(float,float,float,float)\n" "    ofRotate(float)\n"); lua_error(L);return 0; }
static int _wrap_ofRotateX(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofRotateX",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotateX",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofRotateX(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRotateY(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofRotateY",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotateY",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofRotateY(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRotateZ(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofRotateZ",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotateZ",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofRotateZ(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLoadIdentityMatrix(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofLoadIdentityMatrix",0,0)
  ofLoadIdentityMatrix(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLoadMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ;
  SWIG_check_num_args("ofLoadMatrix",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofLoadMatrix",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofLoadMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  ofLoadMatrix((ofMatrix4x4 const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLoadMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float *arg1 = (float *) 0 ;
  SWIG_check_num_args("ofLoadMatrix",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLoadMatrix",1,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("ofLoadMatrix",1,SWIGTYPE_p_float); } 
  ofLoadMatrix((float const *)arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLoadMatrix(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofLoadMatrix__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofLoadMatrix__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofLoadMatrix'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLoadMatrix(ofMatrix4x4 const &)\n" "    ofLoadMatrix(float const *)\n"); lua_error(L);return 0; }
static int _wrap_ofMultMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ;
  SWIG_check_num_args("ofMultMatrix",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMultMatrix",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMultMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  ofMultMatrix((ofMatrix4x4 const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMultMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float *arg1 = (float *) 0 ;
  SWIG_check_num_args("ofMultMatrix",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMultMatrix",1,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("ofMultMatrix",1,SWIGTYPE_p_float); } 
  ofMultMatrix((float const *)arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMultMatrix(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMultMatrix__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofMultMatrix__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMultMatrix'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMultMatrix(ofMatrix4x4 const &)\n" "    ofMultMatrix(float const *)\n"); lua_error(L);return 0; }
static int _wrap_ofSetMatrixMode(lua_State* L) { int SWIG_arg = 0; ofMatrixMode arg1 ;
  SWIG_check_num_args("ofSetMatrixMode",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetMatrixMode",1,"ofMatrixMode");
  arg1 = (ofMatrixMode)(int)lua_tonumber(L, 1); ofSetMatrixMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofLoadViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ;
  SWIG_check_num_args("ofLoadViewMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofLoadViewMatrix",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofLoadViewMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  ofLoadViewMatrix((ofMatrix4x4 const &)*arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMultViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ;
  SWIG_check_num_args("ofMultViewMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMultViewMatrix",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMultViewMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  ofMultViewMatrix((ofMatrix4x4 const &)*arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetCurrentViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 result;
  SWIG_check_num_args("ofGetCurrentViewMatrix",0,0) result = ofGetCurrentViewMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofPushView(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPushView",0,0) ofPushView();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofPopView(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPopView",0,0) ofPopView(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofViewport__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle arg1 ; ofRectangle *argp1 ;
  SWIG_check_num_args("ofViewport",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofViewport",1,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofViewport",1,SWIGTYPE_p_ofRectangle); }  arg1 = *argp1; ofViewport(arg1); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofViewport__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  bool arg5 ; SWIG_check_num_args("ofViewport",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofViewport",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofViewport",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofViewport",4,"float"); if(!lua_isboolean(L,5)) SWIG_fail_arg("ofViewport",5,"bool");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (lua_toboolean(L, 5)!=0); ofViewport(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofViewport__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofViewport",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofViewport",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofViewport",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofViewport",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofViewport(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofViewport__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofViewport",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofViewport",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofViewport",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofViewport(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofViewport__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofViewport",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofViewport",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofViewport(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofViewport__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofViewport",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofViewport(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofViewport__SWIG_6(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofViewport",0,0) ofViewport();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofViewport(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofViewport__SWIG_6(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofViewport__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofViewport__SWIG_5(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofViewport__SWIG_4(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofViewport__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofViewport__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_ofViewport__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofViewport'\n" "  Possible C/C++ prototypes are:\n"
  "    ofViewport(ofRectangle)\n" "    ofViewport(float,float,float,float,bool)\n" "    ofViewport(float,float,float,float)\n"
  "    ofViewport(float,float,float)\n" "    ofViewport(float,float)\n" "    ofViewport(float)\n" "    ofViewport()\n");
  lua_error(L);return 0; }
static int _wrap_ofGetCurrentViewport(lua_State* L) { int SWIG_arg = 0; ofRectangle result;
  SWIG_check_num_args("ofGetCurrentViewport",0,0) result = ofGetCurrentViewport(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetNativeViewport(lua_State* L) { int SWIG_arg = 0; ofRectangle result;
  SWIG_check_num_args("ofGetNativeViewport",0,0) result = ofGetNativeViewport(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetViewportWidth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetViewportWidth",0,0)
  result = (int)ofGetViewportWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetViewportHeight(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetViewportHeight",0,0) result = (int)ofGetViewportHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenPerspective__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofSetupScreenPerspective",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenPerspective",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenPerspective",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetupScreenPerspective",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSetupScreenPerspective",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofSetupScreenPerspective(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenPerspective__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofSetupScreenPerspective",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenPerspective",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenPerspective",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetupScreenPerspective",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofSetupScreenPerspective(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenPerspective__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofSetupScreenPerspective",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenPerspective",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenPerspective",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofSetupScreenPerspective(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenPerspective__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofSetupScreenPerspective",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenPerspective",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofSetupScreenPerspective(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetupScreenPerspective__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  SWIG_check_num_args("ofSetupScreenPerspective",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  ofSetupScreenPerspective(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenPerspective__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofSetupScreenPerspective",0,0) ofSetupScreenPerspective(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenPerspective(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_ofSetupScreenPerspective__SWIG_5(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { return _wrap_ofSetupScreenPerspective__SWIG_4(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofSetupScreenPerspective__SWIG_3(L);}  }  } 
  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofSetupScreenPerspective__SWIG_2(L);}  }  }  } 
  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofSetupScreenPerspective__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofSetupScreenPerspective__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetupScreenPerspective'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetupScreenPerspective(float,float,float,float,float)\n"
  "    ofSetupScreenPerspective(float,float,float,float)\n" "    ofSetupScreenPerspective(float,float,float)\n"
  "    ofSetupScreenPerspective(float,float)\n" "    ofSetupScreenPerspective(float)\n" "    ofSetupScreenPerspective()\n");
  lua_error(L);return 0; }
static int _wrap_ofSetupScreenOrtho__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofSetupScreenOrtho",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenOrtho",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenOrtho",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenOrtho",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetupScreenOrtho",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofSetupScreenOrtho(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenOrtho__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofSetupScreenOrtho",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenOrtho",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenOrtho",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenOrtho",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofSetupScreenOrtho(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenOrtho__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofSetupScreenOrtho",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenOrtho",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenOrtho",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofSetupScreenOrtho(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetupScreenOrtho__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  SWIG_check_num_args("ofSetupScreenOrtho",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenOrtho",1,"float");
  arg1 = (float)lua_tonumber(L, 1); ofSetupScreenOrtho(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetupScreenOrtho__SWIG_4(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSetupScreenOrtho",0,0)
  ofSetupScreenOrtho(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetupScreenOrtho(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofSetupScreenOrtho__SWIG_4(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_ofSetupScreenOrtho__SWIG_3(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofSetupScreenOrtho__SWIG_2(L);}  }  }  if (argc == 3) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_ofSetupScreenOrtho__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofSetupScreenOrtho__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetupScreenOrtho'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetupScreenOrtho(float,float,float,float)\n" "    ofSetupScreenOrtho(float,float,float)\n"
  "    ofSetupScreenOrtho(float,float)\n" "    ofSetupScreenOrtho(float)\n" "    ofSetupScreenOrtho()\n");
  lua_error(L);return 0; }
static int _wrap_ofOrientationToDegrees(lua_State* L) { int SWIG_arg = 0; ofOrientation arg1 ; int result;
  SWIG_check_num_args("ofOrientationToDegrees",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofOrientationToDegrees",1,"ofOrientation");
  arg1 = (ofOrientation)(int)lua_tonumber(L, 1); result = (int)ofOrientationToDegrees(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetCoordHandedness(lua_State* L) { int SWIG_arg = 0; ofHandednessType arg1 ;
  SWIG_check_num_args("ofSetCoordHandedness",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCoordHandedness",1,"ofHandednessType");
  arg1 = (ofHandednessType)(int)lua_tonumber(L, 1); ofSetCoordHandedness(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetCoordHandedness(lua_State* L) { int SWIG_arg = 0; ofHandednessType result;
  SWIG_check_num_args("ofGetCoordHandedness",0,0) result = (ofHandednessType)ofGetCoordHandedness();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsPDF__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; bool arg3 ;
  ofRectangle arg4 ; ofRectangle *argp4 ; SWIG_check_num_args("ofBeginSaveScreenAsPDF",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",4,"ofRectangle");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofBeginSaveScreenAsPDF",4,SWIGTYPE_p_ofRectangle); }  arg4 = *argp4;
  ofBeginSaveScreenAsPDF(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsPDF__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofBeginSaveScreenAsPDF",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",3,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0); ofBeginSaveScreenAsPDF(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsPDF__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  SWIG_check_num_args("ofBeginSaveScreenAsPDF",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); ofBeginSaveScreenAsPDF(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsPDF__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  SWIG_check_num_args("ofBeginSaveScreenAsPDF",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); ofBeginSaveScreenAsPDF(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsPDF(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofBeginSaveScreenAsPDF__SWIG_3(L);}  } 
  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofBeginSaveScreenAsPDF__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofBeginSaveScreenAsPDF__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBeginSaveScreenAsPDF__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBeginSaveScreenAsPDF'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBeginSaveScreenAsPDF(std::string,bool,bool,ofRectangle)\n"
  "    ofBeginSaveScreenAsPDF(std::string,bool,bool)\n" "    ofBeginSaveScreenAsPDF(std::string,bool)\n"
  "    ofBeginSaveScreenAsPDF(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofEndSaveScreenAsPDF(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEndSaveScreenAsPDF",0,0)
  ofEndSaveScreenAsPDF(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsSVG__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; bool arg3 ;
  ofRectangle arg4 ; ofRectangle *argp4 ; SWIG_check_num_args("ofBeginSaveScreenAsSVG",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",4,"ofRectangle");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofBeginSaveScreenAsSVG",4,SWIGTYPE_p_ofRectangle); }  arg4 = *argp4;
  ofBeginSaveScreenAsSVG(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsSVG__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofBeginSaveScreenAsSVG",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",3,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0); ofBeginSaveScreenAsSVG(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsSVG__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  SWIG_check_num_args("ofBeginSaveScreenAsSVG",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); ofBeginSaveScreenAsSVG(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsSVG__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  SWIG_check_num_args("ofBeginSaveScreenAsSVG",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsSVG",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); ofBeginSaveScreenAsSVG(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBeginSaveScreenAsSVG(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofBeginSaveScreenAsSVG__SWIG_3(L);}  } 
  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_ofBeginSaveScreenAsSVG__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofBeginSaveScreenAsSVG__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofBeginSaveScreenAsSVG__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofBeginSaveScreenAsSVG'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBeginSaveScreenAsSVG(std::string,bool,bool,ofRectangle)\n"
  "    ofBeginSaveScreenAsSVG(std::string,bool,bool)\n" "    ofBeginSaveScreenAsSVG(std::string,bool)\n"
  "    ofBeginSaveScreenAsSVG(std::string)\n"); lua_error(L);return 0; }
static int _wrap_ofEndSaveScreenAsSVG(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEndSaveScreenAsSVG",0,0)
  ofEndSaveScreenAsSVG(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetPlaneResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetPlaneResolution",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetPlaneResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetPlaneResolution",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetPlaneResolution(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetPlaneResolution(lua_State* L) { int SWIG_arg = 0; ofVec2f result;
  SWIG_check_num_args("ofGetPlaneResolution",0,0) result = ofGetPlaneResolution(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawPlane__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawPlane",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawPlane",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawPlane",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawPlane",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawPlane(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawPlane__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawPlane",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawPlane",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawPlane",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawPlane",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawPlane",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofDrawPlane(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawPlane__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawPlane",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawPlane",1,"ofPoint &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawPlane",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawPlane",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawPlane",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawPlane(*arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawPlane__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawPlane",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawPlane",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawPlane(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawPlane(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofDrawPlane__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawPlane__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofDrawPlane__SWIG_0(L);}  }  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofDrawPlane__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawPlane'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawPlane(float,float,float,float)\n" "    ofDrawPlane(float,float,float,float,float)\n"
  "    ofDrawPlane(ofPoint &,float,float)\n" "    ofDrawPlane(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofSetSphereResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetSphereResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetSphereResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetSphereResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetSphereResolution(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetSphereResolution",0,0) result = (int)ofGetSphereResolution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawSphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawSphere",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawSphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawSphere",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawSphere(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawSphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawSphere",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawSphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawSphere",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawSphere",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawSphere(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawSphere__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofDrawSphere",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawSphere",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawSphere",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawSphere",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); ofDrawSphere((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawSphere__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawSphere",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawSphere",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawSphere(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawSphere(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofDrawSphere__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofDrawSphere__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawSphere__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofDrawSphere__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawSphere'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawSphere(float,float,float)\n" "    ofDrawSphere(float,float,float,float)\n"
  "    ofDrawSphere(ofPoint const &,float)\n" "    ofDrawSphere(float)\n"); lua_error(L);return 0; }
static int _wrap_ofSetIcoSphereResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetIcoSphereResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetIcoSphereResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetIcoSphereResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofGetIcoSphereResolution(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetIcoSphereResolution",0,0) result = (int)ofGetIcoSphereResolution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawIcoSphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawIcoSphere",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawIcoSphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawIcoSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawIcoSphere",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawIcoSphere",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawIcoSphere(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawIcoSphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawIcoSphere",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawIcoSphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawIcoSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawIcoSphere",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawIcoSphere(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawIcoSphere__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofDrawIcoSphere",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawIcoSphere",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawIcoSphere",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawIcoSphere",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  ofDrawIcoSphere((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawIcoSphere__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  SWIG_check_num_args("ofDrawIcoSphere",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawIcoSphere",1,"float");
  arg1 = (float)lua_tonumber(L, 1); ofDrawIcoSphere(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawIcoSphere(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofDrawIcoSphere__SWIG_3(L);}  }  if (argc == 2) { int _v;
    { void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofDrawIcoSphere__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawIcoSphere__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawIcoSphere__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawIcoSphere'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawIcoSphere(float,float,float,float)\n" "    ofDrawIcoSphere(float,float,float)\n"
  "    ofDrawIcoSphere(ofPoint const &,float)\n" "    ofDrawIcoSphere(float)\n"); lua_error(L);return 0; }
static int _wrap_ofSetCylinderResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetCylinderResolution",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCylinderResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetCylinderResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetCylinderResolution",3,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetCylinderResolution(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetCylinderResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetCylinderResolution",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCylinderResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetCylinderResolution",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetCylinderResolution(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetCylinderResolution(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofSetCylinderResolution__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofSetCylinderResolution__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetCylinderResolution'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetCylinderResolution(int,int,int)\n" "    ofSetCylinderResolution(int,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofGetCylinderResolution(lua_State* L) { int SWIG_arg = 0; ofVec3f result;
  SWIG_check_num_args("ofGetCylinderResolution",0,0) result = ofGetCylinderResolution(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCylinder__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawCylinder",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCylinder",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCylinder",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawCylinder(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCylinder__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawCylinder",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCylinder",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCylinder",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawCylinder",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofDrawCylinder(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCylinder__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawCylinder",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawCylinder",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCylinder",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDrawCylinder",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofDrawCylinder((ofVec3f const &)*arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCylinder__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawCylinder",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCylinder",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawCylinder(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawCylinder(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofDrawCylinder__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawCylinder__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawCylinder__SWIG_0(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_ofDrawCylinder__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawCylinder'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawCylinder(float,float,float,float)\n" "    ofDrawCylinder(float,float,float,float,float)\n"
  "    ofDrawCylinder(ofPoint const &,float,float)\n" "    ofDrawCylinder(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofSetConeResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetConeResolution",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetConeResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetConeResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetConeResolution",3,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetConeResolution(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetConeResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetConeResolution",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetConeResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetConeResolution",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetConeResolution(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetConeResolution(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofSetConeResolution__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofSetConeResolution__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetConeResolution'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetConeResolution(int,int,int)\n" "    ofSetConeResolution(int,int)\n");
  lua_error(L);return 0; }
static int _wrap_ofGetConeResolution(lua_State* L) { int SWIG_arg = 0; ofVec3f result;
  SWIG_check_num_args("ofGetConeResolution",0,0) result = ofGetConeResolution(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCone__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawCone",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCone",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawCone",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofDrawCone(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCone__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawCone",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCone",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawCone(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCone__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawCone",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawCone",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCone",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawCone",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawCone((ofVec3f const &)*arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawCone__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawCone",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCone",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawCone(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofDrawCone(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofDrawCone__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawCone__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofDrawCone__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofDrawCone__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawCone'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawCone(float,float,float,float,float)\n" "    ofDrawCone(float,float,float,float)\n"
  "    ofDrawCone(ofPoint const &,float,float)\n" "    ofDrawCone(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofSetBoxResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetBoxResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBoxResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetBoxResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetBoxResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetBoxResolution",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBoxResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBoxResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetBoxResolution",3,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetBoxResolution(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetBoxResolution(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofSetBoxResolution__SWIG_0(L);}  }  if (argc == 3) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofSetBoxResolution__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSetBoxResolution'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetBoxResolution(int)\n" "    ofSetBoxResolution(int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_ofGetBoxResolution(lua_State* L) { int SWIG_arg = 0; ofVec3f result;
  SWIG_check_num_args("ofGetBoxResolution",0,0) result = ofGetBoxResolution(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBox__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofDrawBox",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBox",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBox",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawBox",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawBox",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofDrawBox(arg1,arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBox__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawBox",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBox",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBox",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawBox(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBox__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawBox",4,4) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawBox",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBox",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawBox",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawBox((ofVec3f const &)*arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBox__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofDrawBox",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawBox",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofDrawBox",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); ofDrawBox((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBox__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawBox",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBox",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawBox(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBox__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawBox",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBox",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBox",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofDrawBox(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDrawBox(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofDrawBox__SWIG_4(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofDrawBox__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofDrawBox__SWIG_5(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawBox__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDrawBox__SWIG_1(L);}  }  }  }  }  if (argc == 6) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofDrawBox__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDrawBox'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawBox(float,float,float,float,float,float)\n" "    ofDrawBox(float,float,float,float)\n"
  "    ofDrawBox(ofPoint const &,float,float,float)\n" "    ofDrawBox(ofPoint const &,float)\n" "    ofDrawBox(float)\n"
  "    ofDrawBox(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_new_of3dGraphics(lua_State* L) { int SWIG_arg = 0; ofBaseRenderer *arg1 = (ofBaseRenderer *) 0 ;
  of3dGraphics *result = 0 ; SWIG_check_num_args("of3dGraphics::of3dGraphics",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::of3dGraphics",1,"ofBaseRenderer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseRenderer,0))){
    SWIG_fail_ptr("new_of3dGraphics",1,SWIGTYPE_p_ofBaseRenderer); }  result = (of3dGraphics *)new of3dGraphics(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_of3dGraphics,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_setPlaneResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  int arg2 ; int arg3 ; SWIG_check_num_args("of3dGraphics::setPlaneResolution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setPlaneResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setPlaneResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::setPlaneResolution",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setPlaneResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->setPlaneResolution(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_getPlaneResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofVec2f result; SWIG_check_num_args("of3dGraphics::getPlaneResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::getPlaneResolution",1,"of3dGraphics const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_getPlaneResolution",1,SWIGTYPE_p_of3dGraphics); } 
  result = ((of3dGraphics const *)arg1)->getPlaneResolution(); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawPlane__SWIG_0(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("of3dGraphics::drawPlane",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawPlane",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawPlane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawPlane",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawPlane",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawPlane",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawPlane",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((of3dGraphics const *)arg1)->drawPlane(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawPlane__SWIG_1(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("of3dGraphics::drawPlane",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawPlane",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawPlane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawPlane",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawPlane",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawPlane",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("of3dGraphics::drawPlane",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawPlane",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ((of3dGraphics const *)arg1)->drawPlane(arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawPlane__SWIG_2(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("of3dGraphics::drawPlane",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawPlane",1,"of3dGraphics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("of3dGraphics::drawPlane",2,"ofPoint &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawPlane",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawPlane",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawPlane",1,SWIGTYPE_p_of3dGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawPlane",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ((of3dGraphics const *)arg1)->drawPlane(*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawPlane__SWIG_3(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("of3dGraphics::drawPlane",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawPlane",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawPlane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawPlane",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawPlane",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((of3dGraphics const *)arg1)->drawPlane(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawPlane(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_of3dGraphics_drawPlane__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_of3dGraphics_drawPlane__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_of3dGraphics_drawPlane__SWIG_0(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_of3dGraphics_drawPlane__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_drawPlane'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::drawPlane(float,float,float,float) const\n"
  "    of3dGraphics::drawPlane(float,float,float,float,float) const\n"
  "    of3dGraphics::drawPlane(ofPoint &,float,float) const\n" "    of3dGraphics::drawPlane(float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_of3dGraphics_setSphereResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  int arg2 ; SWIG_check_num_args("of3dGraphics::setSphereResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setSphereResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setSphereResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setSphereResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setSphereResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_getSphereResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  int result; SWIG_check_num_args("of3dGraphics::getSphereResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::getSphereResolution",1,"of3dGraphics const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_getSphereResolution",1,SWIGTYPE_p_of3dGraphics); } 
  result = (int)((of3dGraphics const *)arg1)->getSphereResolution(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawSphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("of3dGraphics::drawSphere",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawSphere",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawSphere",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawSphere",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawSphere",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ((of3dGraphics const *)arg1)->drawSphere(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawSphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("of3dGraphics::drawSphere",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawSphere",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawSphere",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawSphere",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawSphere",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawSphere",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((of3dGraphics const *)arg1)->drawSphere(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawSphere__SWIG_2(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; SWIG_check_num_args("of3dGraphics::drawSphere",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawSphere",1,"of3dGraphics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("of3dGraphics::drawSphere",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawSphere",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawSphere",1,SWIGTYPE_p_of3dGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawSphere",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  ((of3dGraphics const *)arg1)->drawSphere((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawSphere__SWIG_3(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; SWIG_check_num_args("of3dGraphics::drawSphere",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawSphere",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawSphere",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawSphere",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  ((of3dGraphics const *)arg1)->drawSphere(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawSphere(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_of3dGraphics_drawSphere__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_of3dGraphics_drawSphere__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_of3dGraphics_drawSphere__SWIG_0(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_of3dGraphics_drawSphere__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_drawSphere'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::drawSphere(float,float,float) const\n"
  "    of3dGraphics::drawSphere(float,float,float,float) const\n" "    of3dGraphics::drawSphere(ofPoint const &,float) const\n"
  "    of3dGraphics::drawSphere(float) const\n"); lua_error(L);return 0; }
static int _wrap_of3dGraphics_setIcoSphereResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  int arg2 ; SWIG_check_num_args("of3dGraphics::setIcoSphereResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setIcoSphereResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setIcoSphereResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setIcoSphereResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setIcoSphereResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_getIcoSphereResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  int result; SWIG_check_num_args("of3dGraphics::getIcoSphereResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::getIcoSphereResolution",1,"of3dGraphics const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_getIcoSphereResolution",1,SWIGTYPE_p_of3dGraphics); } 
  result = (int)((of3dGraphics const *)arg1)->getIcoSphereResolution(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawIcoSphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("of3dGraphics::drawIcoSphere",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawIcoSphere",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((of3dGraphics const *)arg1)->drawIcoSphere(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawIcoSphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("of3dGraphics::drawIcoSphere",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawIcoSphere",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ((of3dGraphics const *)arg1)->drawIcoSphere(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawIcoSphere__SWIG_2(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; SWIG_check_num_args("of3dGraphics::drawIcoSphere",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",1,"of3dGraphics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawIcoSphere",1,SWIGTYPE_p_of3dGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawIcoSphere",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  ((of3dGraphics const *)arg1)->drawIcoSphere((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawIcoSphere__SWIG_3(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; SWIG_check_num_args("of3dGraphics::drawIcoSphere",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawIcoSphere",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawIcoSphere",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  ((of3dGraphics const *)arg1)->drawIcoSphere(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawIcoSphere(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_of3dGraphics_drawIcoSphere__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_of3dGraphics_drawIcoSphere__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_of3dGraphics_drawIcoSphere__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_of3dGraphics_drawIcoSphere__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_drawIcoSphere'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::drawIcoSphere(float,float,float,float) const\n"
  "    of3dGraphics::drawIcoSphere(float,float,float) const\n" "    of3dGraphics::drawIcoSphere(ofPoint const &,float) const\n"
  "    of3dGraphics::drawIcoSphere(float) const\n"); lua_error(L);return 0; }
static int _wrap_of3dGraphics_setCylinderResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  of3dGraphics *arg1 = (of3dGraphics *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("of3dGraphics::setCylinderResolution",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setCylinderResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setCylinderResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::setCylinderResolution",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::setCylinderResolution",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setCylinderResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setCylinderResolution(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_setCylinderResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  of3dGraphics *arg1 = (of3dGraphics *) 0 ; int arg2 ; int arg3 ; SWIG_check_num_args("of3dGraphics::setCylinderResolution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setCylinderResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setCylinderResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::setCylinderResolution",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setCylinderResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->setCylinderResolution(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_setCylinderResolution(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_of3dGraphics_setCylinderResolution__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_of3dGraphics_setCylinderResolution__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_setCylinderResolution'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::setCylinderResolution(int,int,int)\n"
  "    of3dGraphics::setCylinderResolution(int,int)\n"); lua_error(L);return 0; }
static int _wrap_of3dGraphics_getCylinderResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofVec3f result; SWIG_check_num_args("of3dGraphics::getCylinderResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::getCylinderResolution",1,"of3dGraphics const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_getCylinderResolution",1,SWIGTYPE_p_of3dGraphics); } 
  result = ((of3dGraphics const *)arg1)->getCylinderResolution(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawCylinder__SWIG_0(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("of3dGraphics::drawCylinder",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawCylinder",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawCylinder",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawCylinder",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawCylinder",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawCylinder",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((of3dGraphics const *)arg1)->drawCylinder(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawCylinder__SWIG_1(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("of3dGraphics::drawCylinder",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawCylinder",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawCylinder",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawCylinder",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawCylinder",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("of3dGraphics::drawCylinder",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawCylinder",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ((of3dGraphics const *)arg1)->drawCylinder(arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawCylinder__SWIG_2(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("of3dGraphics::drawCylinder",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawCylinder",1,"of3dGraphics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("of3dGraphics::drawCylinder",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawCylinder",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawCylinder",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawCylinder",1,SWIGTYPE_p_of3dGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawCylinder",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ((of3dGraphics const *)arg1)->drawCylinder((ofPoint const &)*arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawCylinder__SWIG_3(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("of3dGraphics::drawCylinder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawCylinder",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawCylinder",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawCylinder",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((of3dGraphics const *)arg1)->drawCylinder(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawCylinder(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_of3dGraphics_drawCylinder__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_of3dGraphics_drawCylinder__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_of3dGraphics_drawCylinder__SWIG_0(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_of3dGraphics_drawCylinder__SWIG_1(L);}  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_drawCylinder'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::drawCylinder(float,float,float,float) const\n"
  "    of3dGraphics::drawCylinder(float,float,float,float,float) const\n"
  "    of3dGraphics::drawCylinder(ofPoint const &,float,float) const\n" "    of3dGraphics::drawCylinder(float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_of3dGraphics_setConeResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  of3dGraphics *arg1 = (of3dGraphics *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("of3dGraphics::setConeResolution",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setConeResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setConeResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::setConeResolution",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::setConeResolution",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setConeResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setConeResolution(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_setConeResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  of3dGraphics *arg1 = (of3dGraphics *) 0 ; int arg2 ; int arg3 ; SWIG_check_num_args("of3dGraphics::setConeResolution",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setConeResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setConeResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::setConeResolution",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setConeResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->setConeResolution(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_setConeResolution(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_of3dGraphics_setConeResolution__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_of3dGraphics_setConeResolution__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_setConeResolution'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::setConeResolution(int,int,int)\n"
  "    of3dGraphics::setConeResolution(int,int)\n"); lua_error(L);return 0; }
static int _wrap_of3dGraphics_getConeResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofVec3f result; SWIG_check_num_args("of3dGraphics::getConeResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::getConeResolution",1,"of3dGraphics const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_getConeResolution",1,SWIGTYPE_p_of3dGraphics); } 
  result = ((of3dGraphics const *)arg1)->getConeResolution(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawCone__SWIG_0(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("of3dGraphics::drawCone",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawCone",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawCone",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawCone",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawCone",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("of3dGraphics::drawCone",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawCone",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ((of3dGraphics const *)arg1)->drawCone(arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawCone__SWIG_1(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("of3dGraphics::drawCone",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawCone",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawCone",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawCone",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawCone",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawCone",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((of3dGraphics const *)arg1)->drawCone(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawCone__SWIG_2(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("of3dGraphics::drawCone",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawCone",1,"of3dGraphics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("of3dGraphics::drawCone",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawCone",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawCone",1,SWIGTYPE_p_of3dGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawCone",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ((of3dGraphics const *)arg1)->drawCone((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawCone__SWIG_3(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("of3dGraphics::drawCone",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawCone",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawCone",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawCone",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawCone",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((of3dGraphics const *)arg1)->drawCone(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawCone(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_of3dGraphics_drawCone__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_of3dGraphics_drawCone__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_of3dGraphics_drawCone__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_of3dGraphics_drawCone__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_drawCone'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::drawCone(float,float,float,float,float) const\n"
  "    of3dGraphics::drawCone(float,float,float,float) const\n"
  "    of3dGraphics::drawCone(ofPoint const &,float,float) const\n" "    of3dGraphics::drawCone(float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_of3dGraphics_setBoxResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  of3dGraphics *arg1 = (of3dGraphics *) 0 ; int arg2 ; SWIG_check_num_args("of3dGraphics::setBoxResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setBoxResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setBoxResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setBoxResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setBoxResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_setBoxResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  of3dGraphics *arg1 = (of3dGraphics *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("of3dGraphics::setBoxResolution",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::setBoxResolution",1,"of3dGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::setBoxResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::setBoxResolution",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::setBoxResolution",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_setBoxResolution",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setBoxResolution(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_setBoxResolution(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_of3dGraphics_setBoxResolution__SWIG_0(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_of3dGraphics_setBoxResolution__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_setBoxResolution'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::setBoxResolution(int)\n"
  "    of3dGraphics::setBoxResolution(int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_of3dGraphics_getBoxResolution(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofVec3f result; SWIG_check_num_args("of3dGraphics::getBoxResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::getBoxResolution",1,"of3dGraphics const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_getBoxResolution",1,SWIGTYPE_p_of3dGraphics); } 
  result = ((of3dGraphics const *)arg1)->getBoxResolution(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawBox__SWIG_0(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("of3dGraphics::drawBox",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawBox",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawBox",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawBox",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawBox",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("of3dGraphics::drawBox",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("of3dGraphics::drawBox",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawBox",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  ((of3dGraphics const *)arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawBox__SWIG_1(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("of3dGraphics::drawBox",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawBox",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawBox",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawBox",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawBox",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawBox",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((of3dGraphics const *)arg1)->drawBox(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawBox__SWIG_2(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("of3dGraphics::drawBox",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawBox",1,"of3dGraphics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("of3dGraphics::drawBox",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawBox",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("of3dGraphics::drawBox",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawBox",1,SWIGTYPE_p_of3dGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawBox",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((of3dGraphics const *)arg1)->drawBox((ofPoint const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawBox__SWIG_3(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; SWIG_check_num_args("of3dGraphics::drawBox",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawBox",1,"of3dGraphics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("of3dGraphics::drawBox",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawBox",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawBox",1,SWIGTYPE_p_of3dGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawBox",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  ((of3dGraphics const *)arg1)->drawBox((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_of3dGraphics_drawBox__SWIG_4(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; SWIG_check_num_args("of3dGraphics::drawBox",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawBox",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawBox",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawBox",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  ((of3dGraphics const *)arg1)->drawBox(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawBox__SWIG_5(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("of3dGraphics::drawBox",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawBox",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawBox",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawBox",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawBox",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ((of3dGraphics const *)arg1)->drawBox(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawBox(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_of3dGraphics_drawBox__SWIG_4(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_of3dGraphics_drawBox__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_of3dGraphics_drawBox__SWIG_5(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_of3dGraphics_drawBox__SWIG_2(L);}  }  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_of3dGraphics_drawBox__SWIG_1(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_of3dGraphics, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_of3dGraphics_drawBox__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'of3dGraphics_drawBox'\n"
  "  Possible C/C++ prototypes are:\n" "    of3dGraphics::drawBox(float,float,float,float,float,float) const\n"
  "    of3dGraphics::drawBox(float,float,float,float) const\n"
  "    of3dGraphics::drawBox(ofPoint const &,float,float,float) const\n"
  "    of3dGraphics::drawBox(ofPoint const &,float) const\n" "    of3dGraphics::drawBox(float) const\n"
  "    of3dGraphics::drawBox(float,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_of3dGraphics_drawAxis(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ; float arg2 ;
  SWIG_check_num_args("of3dGraphics::drawAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawAxis",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawAxis",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawAxis",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  ((of3dGraphics const *)arg1)->drawAxis(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawGrid(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ; float arg2 ;
  size_t arg3 ; bool arg4 ; bool arg5 ; bool arg6 ; bool arg7 ; SWIG_check_num_args("of3dGraphics::drawGrid",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawGrid",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawGrid",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawGrid",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("of3dGraphics::drawGrid",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("of3dGraphics::drawGrid",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("of3dGraphics::drawGrid",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("of3dGraphics::drawGrid",7,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawGrid",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0); arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0); ((of3dGraphics const *)arg1)->drawGrid(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawGridPlane(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; size_t arg3 ; bool arg4 ; SWIG_check_num_args("of3dGraphics::drawGridPlane",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawGridPlane",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawGridPlane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawGridPlane",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("of3dGraphics::drawGridPlane",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawGridPlane",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0); ((of3dGraphics const *)arg1)->drawGridPlane(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawArrow(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; float arg4 ; SWIG_check_num_args("of3dGraphics::drawArrow",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawArrow",1,"of3dGraphics const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("of3dGraphics::drawArrow",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("of3dGraphics::drawArrow",3,"ofVec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawArrow",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawArrow",1,SWIGTYPE_p_of3dGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawArrow",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("of3dGraphics_drawArrow",3,SWIGTYPE_p_ofVec3f); }  arg4 = (float)lua_tonumber(L, 4);
  ((of3dGraphics const *)arg1)->drawArrow((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_of3dGraphics_drawRotationAxes(lua_State* L) { int SWIG_arg = 0; of3dGraphics *arg1 = (of3dGraphics *) 0 ;
  float arg2 ; float arg3 ; int arg4 ; SWIG_check_num_args("of3dGraphics::drawRotationAxes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("of3dGraphics::drawRotationAxes",1,"of3dGraphics const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("of3dGraphics::drawRotationAxes",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("of3dGraphics::drawRotationAxes",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("of3dGraphics::drawRotationAxes",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_of3dGraphics,0))){
    SWIG_fail_ptr("of3dGraphics_drawRotationAxes",1,SWIGTYPE_p_of3dGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  ((of3dGraphics const *)arg1)->drawRotationAxes(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_of3dGraphics(void *obj) {
of3dGraphics *arg1 = (of3dGraphics *) obj;
delete arg1;
}
static int _proxy__wrap_new_of3dGraphics(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_of3dGraphics);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_of3dGraphics_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_of3dGraphics_methods[]= {
    { "setPlaneResolution", _wrap_of3dGraphics_setPlaneResolution},
    { "getPlaneResolution", _wrap_of3dGraphics_getPlaneResolution},
    { "drawPlane", _wrap_of3dGraphics_drawPlane},
    { "setSphereResolution", _wrap_of3dGraphics_setSphereResolution},
    { "getSphereResolution", _wrap_of3dGraphics_getSphereResolution},
    { "drawSphere", _wrap_of3dGraphics_drawSphere},
    { "setIcoSphereResolution", _wrap_of3dGraphics_setIcoSphereResolution},
    { "getIcoSphereResolution", _wrap_of3dGraphics_getIcoSphereResolution},
    { "drawIcoSphere", _wrap_of3dGraphics_drawIcoSphere},
    { "setCylinderResolution", _wrap_of3dGraphics_setCylinderResolution},
    { "getCylinderResolution", _wrap_of3dGraphics_getCylinderResolution},
    { "drawCylinder", _wrap_of3dGraphics_drawCylinder},
    { "setConeResolution", _wrap_of3dGraphics_setConeResolution},
    { "getConeResolution", _wrap_of3dGraphics_getConeResolution},
    { "drawCone", _wrap_of3dGraphics_drawCone},
    { "setBoxResolution", _wrap_of3dGraphics_setBoxResolution},
    { "getBoxResolution", _wrap_of3dGraphics_getBoxResolution},
    { "drawBox", _wrap_of3dGraphics_drawBox},
    { "drawAxis", _wrap_of3dGraphics_drawAxis},
    { "drawGrid", _wrap_of3dGraphics_drawGrid},
    { "drawGridPlane", _wrap_of3dGraphics_drawGridPlane},
    { "drawArrow", _wrap_of3dGraphics_drawArrow},
    { "drawRotationAxes", _wrap_of3dGraphics_drawRotationAxes},
    {0,0}
};
static swig_lua_method swig_of3dGraphics_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_of3dGraphics_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_of3dGraphics_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_of3dGraphics_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_of3dGraphics_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_of3dGraphics_Sf_SwigStatic = {
    "of3dGraphics",
    swig_of3dGraphics_Sf_SwigStatic_methods,
    swig_of3dGraphics_Sf_SwigStatic_attributes,
    swig_of3dGraphics_Sf_SwigStatic_constants,
    swig_of3dGraphics_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_of3dGraphics_bases[] = {0};
static const char *swig_of3dGraphics_base_names[] = {0};
static swig_lua_class _wrap_class_of3dGraphics = { "of3dGraphics", "of3dGraphics", &SWIGTYPE_p_of3dGraphics,_proxy__wrap_new_of3dGraphics, swig_delete_of3dGraphics, swig_of3dGraphics_methods, swig_of3dGraphics_attributes, &swig_of3dGraphics_Sf_SwigStatic, swig_of3dGraphics_meta, swig_of3dGraphics_bases, swig_of3dGraphics_base_names };

static int _wrap_new_ofTrueTypeFont(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *result = 0 ;
  SWIG_check_num_args("ofTrueTypeFont::ofTrueTypeFont",0,0) result = (ofTrueTypeFont *)new ofTrueTypeFont();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTrueTypeFont,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrueTypeFont_setGlobalDpi(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofTrueTypeFont::setGlobalDpi",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTrueTypeFont::setGlobalDpi",1,"int"); arg1 = (int)lua_tonumber(L, 1);
  ofTrueTypeFont::setGlobalDpi(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_load__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool arg5 ; bool arg6 ; float arg7 ; int arg8 ; bool result;
  SWIG_check_num_args("ofTrueTypeFont::load",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::load",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::load",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::load",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::load",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::load",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofTrueTypeFont::load",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTrueTypeFont::load",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTrueTypeFont::load",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_load",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  result = (bool)(arg1)->load(arg2,arg3,arg4,arg5,arg6,arg7,arg8); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_load__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool arg5 ; bool arg6 ; float arg7 ; bool result;
  SWIG_check_num_args("ofTrueTypeFont::load",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::load",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::load",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::load",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::load",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::load",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofTrueTypeFont::load",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTrueTypeFont::load",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_load",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); arg7 = (float)lua_tonumber(L, 7); result = (bool)(arg1)->load(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_load__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool arg5 ; bool arg6 ; bool result; SWIG_check_num_args("ofTrueTypeFont::load",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::load",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::load",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::load",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::load",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::load",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofTrueTypeFont::load",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_load",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); result = (bool)(arg1)->load(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_load__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool arg5 ; bool result; SWIG_check_num_args("ofTrueTypeFont::load",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::load",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::load",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::load",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::load",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::load",5,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_load",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  result = (bool)(arg1)->load(arg2,arg3,arg4,arg5); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_load__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofTrueTypeFont::load",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::load",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::load",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::load",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::load",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_load",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->load(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_load__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool result; SWIG_check_num_args("ofTrueTypeFont::load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::load",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::load",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::load",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_load",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->load(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_load(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofTrueTypeFont_load__SWIG_5(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofTrueTypeFont_load__SWIG_4(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_ofTrueTypeFont_load__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { return _wrap_ofTrueTypeFont_load__SWIG_2(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_ofTrueTypeFont_load__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_ofTrueTypeFont_load__SWIG_0(L);}  }  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrueTypeFont_load'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTrueTypeFont::load(std::string,int,bool,bool,bool,float,int)\n"
  "    ofTrueTypeFont::load(std::string,int,bool,bool,bool,float)\n"
  "    ofTrueTypeFont::load(std::string,int,bool,bool,bool)\n" "    ofTrueTypeFont::load(std::string,int,bool,bool)\n"
  "    ofTrueTypeFont::load(std::string,int,bool)\n" "    ofTrueTypeFont::load(std::string,int)\n"); lua_error(L);return 0; }
static int _wrap_ofTrueTypeFont_isLoaded(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  bool result; SWIG_check_num_args("ofTrueTypeFont::isLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::isLoaded",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_isLoaded",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (bool)(arg1)->isLoaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_isAntiAliased(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  bool result; SWIG_check_num_args("ofTrueTypeFont::isAntiAliased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::isAntiAliased",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_isAntiAliased",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (bool)(arg1)->isAntiAliased();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_hasFullCharacterSet(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; bool result; SWIG_check_num_args("ofTrueTypeFont::hasFullCharacterSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::hasFullCharacterSet",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_hasFullCharacterSet",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (bool)(arg1)->hasFullCharacterSet(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getNumCharacters__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; int result; SWIG_check_num_args("ofTrueTypeFont::getNumCharacters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getNumCharacters",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getNumCharacters",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (int)(arg1)->getNumCharacters();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getSize(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  int result; SWIG_check_num_args("ofTrueTypeFont::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getSize",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getSize",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (int)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getLineHeight(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float result; SWIG_check_num_args("ofTrueTypeFont::getLineHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getLineHeight",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getLineHeight",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (float)(arg1)->getLineHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_setLineHeight(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTrueTypeFont::setLineHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::setLineHeight",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::setLineHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_setLineHeight",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLineHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getAscenderHeight(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; float result; SWIG_check_num_args("ofTrueTypeFont::getAscenderHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getAscenderHeight",1,"ofTrueTypeFont const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getAscenderHeight",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (float)((ofTrueTypeFont const *)arg1)->getAscenderHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getDescenderHeight(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; float result; SWIG_check_num_args("ofTrueTypeFont::getDescenderHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getDescenderHeight",1,"ofTrueTypeFont const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getDescenderHeight",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (float)((ofTrueTypeFont const *)arg1)->getDescenderHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getGlyphBBox(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  ofRectangle *result = 0 ; SWIG_check_num_args("ofTrueTypeFont::getGlyphBBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getGlyphBBox",1,"ofTrueTypeFont const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getGlyphBBox",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (ofRectangle *) &((ofTrueTypeFont const *)arg1)->getGlyphBBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getLetterSpacing(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float result; SWIG_check_num_args("ofTrueTypeFont::getLetterSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getLetterSpacing",1,"ofTrueTypeFont const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getLetterSpacing",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (float)((ofTrueTypeFont const *)arg1)->getLetterSpacing(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_setLetterSpacing(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTrueTypeFont::setLetterSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::setLetterSpacing",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::setLetterSpacing",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_setLetterSpacing",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLetterSpacing(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getSpaceSize(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float result; SWIG_check_num_args("ofTrueTypeFont::getSpaceSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getSpaceSize",1,"ofTrueTypeFont const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getSpaceSize",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (float)((ofTrueTypeFont const *)arg1)->getSpaceSize(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_setSpaceSize(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTrueTypeFont::setSpaceSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::setSpaceSize",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::setSpaceSize",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_setSpaceSize",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpaceSize(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_stringWidth(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float result; SWIG_check_num_args("ofTrueTypeFont::stringWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::stringWidth",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::stringWidth",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_stringWidth",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (float)((ofTrueTypeFont const *)arg1)->stringWidth(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_stringHeight(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float result; SWIG_check_num_args("ofTrueTypeFont::stringHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::stringHeight",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::stringHeight",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_stringHeight",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (float)((ofTrueTypeFont const *)arg1)->stringHeight(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getStringBoundingBox__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; std::string arg2 ; float arg3 ; float arg4 ; bool arg5 ; ofRectangle result;
  SWIG_check_num_args("ofTrueTypeFont::getStringBoundingBox",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",5,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getStringBoundingBox",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0); result = ((ofTrueTypeFont const *)arg1)->getStringBoundingBox(arg2,arg3,arg4,arg5); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getStringBoundingBox__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; std::string arg2 ; float arg3 ; float arg4 ; ofRectangle result;
  SWIG_check_num_args("ofTrueTypeFont::getStringBoundingBox",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getStringBoundingBox",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ((ofTrueTypeFont const *)arg1)->getStringBoundingBox(arg2,arg3,arg4); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getStringBoundingBox(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ;
  argc = lua_gettop(L); if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofTrueTypeFont_getStringBoundingBox__SWIG_1(L);}  }  }  }  }
   if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_ofTrueTypeFont_getStringBoundingBox__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrueTypeFont_getStringBoundingBox'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTrueTypeFont::getStringBoundingBox(std::string,float,float,bool) const\n"
  "    ofTrueTypeFont::getStringBoundingBox(std::string,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofTrueTypeFont_drawString(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofTrueTypeFont::drawString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::drawString",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::drawString",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::drawString",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::drawString",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_drawString",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ((ofTrueTypeFont const *)arg1)->drawString(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrueTypeFont_drawStringAsShapes(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; std::string arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofTrueTypeFont::drawStringAsShapes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::drawStringAsShapes",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::drawStringAsShapes",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::drawStringAsShapes",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::drawStringAsShapes",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_drawStringAsShapes",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ((ofTrueTypeFont const *)arg1)->drawStringAsShapes(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getNumCharacters__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; int result; SWIG_check_num_args("ofTrueTypeFont::getNumCharacters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getNumCharacters",1,"ofTrueTypeFont const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getNumCharacters",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (int)((ofTrueTypeFont const *)arg1)->getNumCharacters(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getNumCharacters(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofTrueTypeFont_getNumCharacters__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofTrueTypeFont_getNumCharacters__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrueTypeFont_getNumCharacters'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTrueTypeFont::getNumCharacters()\n"
  "    ofTrueTypeFont::getNumCharacters() const\n"); lua_error(L);return 0; }
static int _wrap_ofTrueTypeFont_getCharacterAsPoints__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; int arg2 ; bool arg3 ; bool arg4 ; ofTTFCharacter result;
  SWIG_check_num_args("ofTrueTypeFont::getCharacterAsPoints",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",1,"ofTrueTypeFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getCharacterAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  result = ((ofTrueTypeFont const *)arg1)->getCharacterAsPoints(arg2,arg3,arg4); {
    ofTTFCharacter * resultptr = new ofTTFCharacter((const ofTTFCharacter &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofTTFCharacter,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getCharacterAsPoints__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; int arg2 ; bool arg3 ; ofTTFCharacter result;
  SWIG_check_num_args("ofTrueTypeFont::getCharacterAsPoints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",1,"ofTrueTypeFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getCharacterAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); result = ((ofTrueTypeFont const *)arg1)->getCharacterAsPoints(arg2,arg3); {
    ofTTFCharacter * resultptr = new ofTTFCharacter((const ofTTFCharacter &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofTTFCharacter,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getCharacterAsPoints__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; int arg2 ; ofTTFCharacter result;
  SWIG_check_num_args("ofTrueTypeFont::getCharacterAsPoints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",1,"ofTrueTypeFont const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getCharacterAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofTrueTypeFont const *)arg1)->getCharacterAsPoints(arg2); {
    ofTTFCharacter * resultptr = new ofTTFCharacter((const ofTTFCharacter &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofTTFCharacter,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getCharacterAsPoints(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofTrueTypeFont_getCharacterAsPoints__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofTrueTypeFont_getCharacterAsPoints__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofTrueTypeFont_getCharacterAsPoints__SWIG_0(L);}  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrueTypeFont_getCharacterAsPoints'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTrueTypeFont::getCharacterAsPoints(int,bool,bool) const\n"
  "    ofTrueTypeFont::getCharacterAsPoints(int,bool) const\n" "    ofTrueTypeFont::getCharacterAsPoints(int) const\n");
  lua_error(L);return 0; }
static int _wrap_ofTrueTypeFont_getStringAsPoints__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; std::string arg2 ; bool arg3 ; bool arg4 ;
  SwigValueWrapper< std::vector< ofTTFCharacter > > result; SWIG_check_num_args("ofTrueTypeFont::getStringAsPoints",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getStringAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  result = ((ofTrueTypeFont const *)arg1)->getStringAsPoints(arg2,arg3,arg4); {
    std::vector< ofTTFCharacter > * resultptr = new std::vector< ofTTFCharacter >((const std::vector< ofTTFCharacter > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofTTFCharacter_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getStringAsPoints__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; std::string arg2 ; bool arg3 ;
  SwigValueWrapper< std::vector< ofTTFCharacter > > result; SWIG_check_num_args("ofTrueTypeFont::getStringAsPoints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getStringAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0);
  result = ((ofTrueTypeFont const *)arg1)->getStringAsPoints(arg2,arg3); {
    std::vector< ofTTFCharacter > * resultptr = new std::vector< ofTTFCharacter >((const std::vector< ofTTFCharacter > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofTTFCharacter_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getStringAsPoints__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; std::string arg2 ; SwigValueWrapper< std::vector< ofTTFCharacter > > result;
  SWIG_check_num_args("ofTrueTypeFont::getStringAsPoints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getStringAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = ((ofTrueTypeFont const *)arg1)->getStringAsPoints(arg2); {
    std::vector< ofTTFCharacter > * resultptr = new std::vector< ofTTFCharacter >((const std::vector< ofTTFCharacter > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofTTFCharacter_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getStringAsPoints(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_ofTrueTypeFont_getStringAsPoints__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_ofTrueTypeFont_getStringAsPoints__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofTrueTypeFont_getStringAsPoints__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrueTypeFont_getStringAsPoints'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTrueTypeFont::getStringAsPoints(std::string,bool,bool) const\n"
  "    ofTrueTypeFont::getStringAsPoints(std::string,bool) const\n"
  "    ofTrueTypeFont::getStringAsPoints(std::string) const\n"); lua_error(L);return 0; }
static int _wrap_ofTrueTypeFont_getStringMesh__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; std::string arg2 ; float arg3 ; float arg4 ; bool arg5 ; ofMesh *result = 0 ;
  SWIG_check_num_args("ofTrueTypeFont::getStringMesh",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",4,"float");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",5,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getStringMesh",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0); result = (ofMesh *) &((ofTrueTypeFont const *)arg1)->getStringMesh(arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getStringMesh__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; std::string arg2 ; float arg3 ; float arg4 ; ofMesh *result = 0 ;
  SWIG_check_num_args("ofTrueTypeFont::getStringMesh",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",1,"ofTrueTypeFont const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getStringMesh",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofMesh *) &((ofTrueTypeFont const *)arg1)->getStringMesh(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrueTypeFont_getStringMesh(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofTrueTypeFont_getStringMesh__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_ofTrueTypeFont_getStringMesh__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofTrueTypeFont_getStringMesh'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTrueTypeFont::getStringMesh(std::string,float,float,bool) const\n"
  "    ofTrueTypeFont::getStringMesh(std::string,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofTrueTypeFont_getFontTexture(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofTrueTypeFont::getFontTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getFontTexture",1,"ofTrueTypeFont const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_getFontTexture",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (ofTexture *) &((ofTrueTypeFont const *)arg1)->getFontTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofTrueTypeFont_lineHeight_set(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTrueTypeFont::lineHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::lineHeight",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::lineHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_lineHeight_set",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  ofTrueTypeFont_lineHeight_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_lineHeight_get(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float result; SWIG_check_num_args("ofTrueTypeFont::lineHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::lineHeight",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_lineHeight_get",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (float)ofTrueTypeFont_lineHeight_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_letterSpacing_set(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; float arg2 ; SWIG_check_num_args("ofTrueTypeFont::letterSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::letterSpacing",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::letterSpacing",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_letterSpacing_set",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  ofTrueTypeFont_letterSpacing_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_letterSpacing_get(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; float result; SWIG_check_num_args("ofTrueTypeFont::letterSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::letterSpacing",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_letterSpacing_get",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (float)ofTrueTypeFont_letterSpacing_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_spaceSize_set(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTrueTypeFont::spaceSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::spaceSize",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::spaceSize",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_spaceSize_set",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  ofTrueTypeFont_spaceSize_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTrueTypeFont_spaceSize_get(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float result; SWIG_check_num_args("ofTrueTypeFont::spaceSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::spaceSize",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("ofTrueTypeFont_spaceSize_get",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (float)ofTrueTypeFont_spaceSize_get(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofTrueTypeFont(void *obj) {
ofTrueTypeFont *arg1 = (ofTrueTypeFont *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofTrueTypeFont(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofTrueTypeFont);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofTrueTypeFont_attributes[] = {
    { "lineHeight", _wrap_ofTrueTypeFont_lineHeight_get, _wrap_ofTrueTypeFont_lineHeight_set },
    { "letterSpacing", _wrap_ofTrueTypeFont_letterSpacing_get, _wrap_ofTrueTypeFont_letterSpacing_set },
    { "spaceSize", _wrap_ofTrueTypeFont_spaceSize_get, _wrap_ofTrueTypeFont_spaceSize_set },
    {0,0,0}
};
static swig_lua_method swig_ofTrueTypeFont_methods[]= {
    { "load", _wrap_ofTrueTypeFont_load},
    { "isLoaded", _wrap_ofTrueTypeFont_isLoaded},
    { "isAntiAliased", _wrap_ofTrueTypeFont_isAntiAliased},
    { "hasFullCharacterSet", _wrap_ofTrueTypeFont_hasFullCharacterSet},
    { "getSize", _wrap_ofTrueTypeFont_getSize},
    { "getLineHeight", _wrap_ofTrueTypeFont_getLineHeight},
    { "setLineHeight", _wrap_ofTrueTypeFont_setLineHeight},
    { "getAscenderHeight", _wrap_ofTrueTypeFont_getAscenderHeight},
    { "getDescenderHeight", _wrap_ofTrueTypeFont_getDescenderHeight},
    { "getGlyphBBox", _wrap_ofTrueTypeFont_getGlyphBBox},
    { "getLetterSpacing", _wrap_ofTrueTypeFont_getLetterSpacing},
    { "setLetterSpacing", _wrap_ofTrueTypeFont_setLetterSpacing},
    { "getSpaceSize", _wrap_ofTrueTypeFont_getSpaceSize},
    { "setSpaceSize", _wrap_ofTrueTypeFont_setSpaceSize},
    { "stringWidth", _wrap_ofTrueTypeFont_stringWidth},
    { "stringHeight", _wrap_ofTrueTypeFont_stringHeight},
    { "getStringBoundingBox", _wrap_ofTrueTypeFont_getStringBoundingBox},
    { "drawString", _wrap_ofTrueTypeFont_drawString},
    { "drawStringAsShapes", _wrap_ofTrueTypeFont_drawStringAsShapes},
    { "getNumCharacters", _wrap_ofTrueTypeFont_getNumCharacters},
    { "getCharacterAsPoints", _wrap_ofTrueTypeFont_getCharacterAsPoints},
    { "getStringAsPoints", _wrap_ofTrueTypeFont_getStringAsPoints},
    { "getStringMesh", _wrap_ofTrueTypeFont_getStringMesh},
    { "getFontTexture", _wrap_ofTrueTypeFont_getFontTexture},
    {0,0}
};
static swig_lua_method swig_ofTrueTypeFont_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofTrueTypeFont_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofTrueTypeFont_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofTrueTypeFont_Sf_SwigStatic_methods[]= {
    { "setGlobalDpi", _wrap_ofTrueTypeFont_setGlobalDpi},
    {0,0}
};
static swig_lua_class* swig_ofTrueTypeFont_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofTrueTypeFont_Sf_SwigStatic = {
    "ofTrueTypeFont",
    swig_ofTrueTypeFont_Sf_SwigStatic_methods,
    swig_ofTrueTypeFont_Sf_SwigStatic_attributes,
    swig_ofTrueTypeFont_Sf_SwigStatic_constants,
    swig_ofTrueTypeFont_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofTrueTypeFont_bases[] = {0};
static const char *swig_ofTrueTypeFont_base_names[] = {0};
static swig_lua_class _wrap_class_ofTrueTypeFont = { "ofTrueTypeFont", "ofTrueTypeFont", &SWIGTYPE_p_ofTrueTypeFont,_proxy__wrap_new_ofTrueTypeFont, swig_delete_ofTrueTypeFont, swig_ofTrueTypeFont_methods, swig_ofTrueTypeFont_attributes, &swig_ofTrueTypeFont_Sf_SwigStatic, swig_ofTrueTypeFont_meta, swig_ofTrueTypeFont_bases, swig_ofTrueTypeFont_base_names };

static int _wrap_ofMatrix3x3_a_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::a",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::a",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::a",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_a_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_a_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::a",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::a",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_a_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_b_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::b",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::b",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::b",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_b_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_b_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::b",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::b",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_b_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_c_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::c",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::c",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::c",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_c_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->c = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_c_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::c",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::c",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_c_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->c);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_d_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::d",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::d",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::d",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_d_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_d_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::d",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::d",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_d_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_e_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::e",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::e",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::e",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_e_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->e = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_e_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::e",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::e",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_e_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->e);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_f_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::f",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::f",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::f",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_f_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_f_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::f",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::f",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_f_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_g_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::g",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::g",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::g",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_g_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_g_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::g",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::g",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_g_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_h_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::h",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::h",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::h",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_h_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->h = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_h_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::h",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::h",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_h_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->h);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_i_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::i",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::i",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::i",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_i_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->i = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_i_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::i",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::i",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_i_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->i);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",8,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",7,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_6(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_7(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_8(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofMatrix3x3__SWIG_9(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",0,0) result = (ofMatrix3x3 *)new ofMatrix3x3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix3x3(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofMatrix3x3__SWIG_9(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { return _wrap_new_ofMatrix3x3__SWIG_8(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_ofMatrix3x3__SWIG_7(L);}  }  }  if (argc == 3) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_new_ofMatrix3x3__SWIG_6(L);}  }  }  }  if (argc == 4) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_new_ofMatrix3x3__SWIG_5(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_new_ofMatrix3x3__SWIG_4(L);}  }  }  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_new_ofMatrix3x3__SWIG_3(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_new_ofMatrix3x3__SWIG_2(L);}  }  }  }  }  }  }  } 
  if (argc == 8) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_new_ofMatrix3x3__SWIG_1(L);}  }  }  }  }  }  }  }  }  if (argc == 9) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_new_ofMatrix3x3__SWIG_0(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofMatrix3x3'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float,float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float)\n" "    ofMatrix3x3::ofMatrix3x3(float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float)\n" "    ofMatrix3x3::ofMatrix3x3(float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float)\n" "    ofMatrix3x3::ofMatrix3x3()\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix3x3_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofMatrix3x3::set",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::set",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::set",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::set",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix3x3::set",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix3x3::set",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofMatrix3x3::set",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofMatrix3x3::set",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix3x3_transpose__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  SWIG_check_num_args("ofMatrix3x3::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::transpose",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_transpose",1,SWIGTYPE_p_ofMatrix3x3); }  (arg1)->transpose(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_transpose__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::transpose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::transpose",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::transpose",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_transpose",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_transpose",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->transpose((ofMatrix3x3 const &)*arg2);
  { ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_transpose(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix3x3_transpose__SWIG_0(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix3x3_transpose__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix3x3_transpose'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix3x3::transpose()\n" "    ofMatrix3x3::transpose(ofMatrix3x3 const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofMatrix3x3_determinant__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float result; SWIG_check_num_args("ofMatrix3x3::determinant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::determinant",1,"ofMatrix3x3 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_determinant",1,SWIGTYPE_p_ofMatrix3x3); } 
  result = (float)((ofMatrix3x3 const *)arg1)->determinant(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_determinant__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; float result; SWIG_check_num_args("ofMatrix3x3::determinant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::determinant",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::determinant",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_determinant",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_determinant",2,SWIGTYPE_p_ofMatrix3x3); } 
  result = (float)(arg1)->determinant((ofMatrix3x3 const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_determinant(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix3x3_determinant__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix3x3_determinant__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix3x3_determinant'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix3x3::determinant() const\n"
  "    ofMatrix3x3::determinant(ofMatrix3x3 const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix3x3_inverse(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::inverse",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::inverse",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_inverse",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_inverse",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->inverse((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_invert(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  SWIG_check_num_args("ofMatrix3x3::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::invert",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_invert",1,SWIGTYPE_p_ofMatrix3x3); }  (arg1)->invert(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3_entrywiseTimes(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::entrywiseTimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::entrywiseTimes",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::entrywiseTimes",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_entrywiseTimes",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3_entrywiseTimes",2,SWIGTYPE_p_ofMatrix3x3); } 
  result = (arg1)->entrywiseTimes((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3___add(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator +",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::operator +",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___add",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___add",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->operator +((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3___sub(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator -",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::operator -",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___sub",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___sub",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->operator -((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float arg2 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator *",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::operator *",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___mul",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2); { ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator *",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::operator *",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___mul",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___mul",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->operator *((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix3x3___mul__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofMatrix3x3___mul__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix3x3___mul'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix3x3::operator *(float)\n"
  "    ofMatrix3x3::operator *(ofMatrix3x3 const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix3x3___div(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator /",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::operator /",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___div",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2); { ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix3x3___tostring(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  char *result = 0 ; SWIG_check_num_args("ofMatrix3x3::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::__str__",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("ofMatrix3x3___tostring",1,SWIGTYPE_p_ofMatrix3x3); }  result = (char *)ofMatrix3x3___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofMatrix3x3(void *obj) {
ofMatrix3x3 *arg1 = (ofMatrix3x3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofMatrix3x3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofMatrix3x3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofMatrix3x3_attributes[] = {
    { "a", _wrap_ofMatrix3x3_a_get, _wrap_ofMatrix3x3_a_set },
    { "b", _wrap_ofMatrix3x3_b_get, _wrap_ofMatrix3x3_b_set },
    { "c", _wrap_ofMatrix3x3_c_get, _wrap_ofMatrix3x3_c_set },
    { "d", _wrap_ofMatrix3x3_d_get, _wrap_ofMatrix3x3_d_set },
    { "e", _wrap_ofMatrix3x3_e_get, _wrap_ofMatrix3x3_e_set },
    { "f", _wrap_ofMatrix3x3_f_get, _wrap_ofMatrix3x3_f_set },
    { "g", _wrap_ofMatrix3x3_g_get, _wrap_ofMatrix3x3_g_set },
    { "h", _wrap_ofMatrix3x3_h_get, _wrap_ofMatrix3x3_h_set },
    { "i", _wrap_ofMatrix3x3_i_get, _wrap_ofMatrix3x3_i_set },
    {0,0,0}
};
static swig_lua_method swig_ofMatrix3x3_methods[]= {
    { "set", _wrap_ofMatrix3x3_set},
    { "transpose", _wrap_ofMatrix3x3_transpose},
    { "determinant", _wrap_ofMatrix3x3_determinant},
    { "inverse", _wrap_ofMatrix3x3_inverse},
    { "invert", _wrap_ofMatrix3x3_invert},
    { "entrywiseTimes", _wrap_ofMatrix3x3_entrywiseTimes},
    { "__add", _wrap_ofMatrix3x3___add},
    { "__sub", _wrap_ofMatrix3x3___sub},
    { "__mul", _wrap_ofMatrix3x3___mul},
    { "__div", _wrap_ofMatrix3x3___div},
    { "__tostring", _wrap_ofMatrix3x3___tostring},
    {0,0}
};
static swig_lua_method swig_ofMatrix3x3_meta[] = {
    { "__add", _wrap_ofMatrix3x3___add},
    { "__sub", _wrap_ofMatrix3x3___sub},
    { "__mul", _wrap_ofMatrix3x3___mul},
    { "__div", _wrap_ofMatrix3x3___div},
    { "__tostring", _wrap_ofMatrix3x3___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofMatrix3x3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofMatrix3x3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofMatrix3x3_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofMatrix3x3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofMatrix3x3_Sf_SwigStatic = {
    "ofMatrix3x3",
    swig_ofMatrix3x3_Sf_SwigStatic_methods,
    swig_ofMatrix3x3_Sf_SwigStatic_attributes,
    swig_ofMatrix3x3_Sf_SwigStatic_constants,
    swig_ofMatrix3x3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofMatrix3x3_bases[] = {0};
static const char *swig_ofMatrix3x3_base_names[] = {0};
static swig_lua_class _wrap_class_ofMatrix3x3 = { "ofMatrix3x3", "ofMatrix3x3", &SWIGTYPE_p_ofMatrix3x3,_proxy__wrap_new_ofMatrix3x3, swig_delete_ofMatrix3x3, swig_ofMatrix3x3_methods, swig_ofMatrix3x3_attributes, &swig_ofMatrix3x3_Sf_SwigStatic, swig_ofMatrix3x3_meta, swig_ofMatrix3x3_bases, swig_ofMatrix3x3_base_names };

static int _wrap_ofMatrix4x4__mat_set(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; ofVec4f *arg2 ;
  SWIG_check_num_args("ofMatrix4x4::_mat",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::_mat",1,"ofMatrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMatrix4x4::_mat",2,"ofVec4f [4]");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4__mat_set",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofMatrix4x4__mat_set",2,SWIGTYPE_p_ofVec4f); }  { size_t ii; ofVec4f *b = (ofVec4f *) arg1->_mat;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((ofVec4f *) arg2 + ii); }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4__mat_get(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofMatrix4x4::_mat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::_mat",1,"ofMatrix4x4 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4__mat_get",1,SWIGTYPE_p_ofMatrix4x4); }  result = (ofVec4f *)(ofVec4f *) ((arg1)->_mat);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix4x4__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",0,0) result = (ofMatrix4x4 *)new ofMatrix4x4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix4x4__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("new_ofMatrix4x4",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = (ofMatrix4x4 *)new ofMatrix4x4((ofMatrix4x4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix4x4__SWIG_2(lua_State* L) { int SWIG_arg = 0; float *arg1 = (float *) (float *)0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",1,"float const *const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("new_ofMatrix4x4",1,SWIGTYPE_p_float); }
   result = (ofMatrix4x4 *)new ofMatrix4x4((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix4x4__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = 0 ; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",1,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("new_ofMatrix4x4",1,SWIGTYPE_p_ofQuaternion); } 
  result = (ofMatrix4x4 *)new ofMatrix4x4((ofQuaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix4x4__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ; float arg13 ;
  float arg14 ; float arg15 ; float arg16 ; ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",16,16)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",12,"float");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",13,"float");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",14,"float");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",15,"float");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",16,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12); arg13 = (float)lua_tonumber(L, 13);
  arg14 = (float)lua_tonumber(L, 14); arg15 = (float)lua_tonumber(L, 15); arg16 = (float)lua_tonumber(L, 16);
  result = (ofMatrix4x4 *)new ofMatrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofMatrix4x4(lua_State* L) { int argc; int argv[17]={ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17} ;
  argc = lua_gettop(L); if (argc == 0) { return _wrap_new_ofMatrix4x4__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_ofMatrix4x4__SWIG_1(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofMatrix4x4__SWIG_2(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_ofMatrix4x4__SWIG_3(L);}  }  if (argc == 16) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { { _v = lua_isnumber(L,argv[12]); }  if (_v) { {
                                _v = lua_isnumber(L,argv[13]); }  if (_v) { { _v = lua_isnumber(L,argv[14]); }  if (_v) { {
                                    _v = lua_isnumber(L,argv[15]); }  if (_v) { return _wrap_new_ofMatrix4x4__SWIG_4(L);}  }  }
                               }  }  }  }  }  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofMatrix4x4'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::ofMatrix4x4()\n" "    ofMatrix4x4::ofMatrix4x4(ofMatrix4x4 const &)\n"
  "    ofMatrix4x4::ofMatrix4x4(float const *const)\n" "    ofMatrix4x4::ofMatrix4x4(ofQuaternion const &)\n"
  "    ofMatrix4x4::ofMatrix4x4(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_makeIdentityMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  SWIG_check_num_args("ofMatrix4x4::makeIdentityMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeIdentityMatrix",1,"ofMatrix4x4 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeIdentityMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->makeIdentityMatrix(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeScaleMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeScaleMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeScaleMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeScaleMatrix",2,SWIGTYPE_p_ofVec3f); }  (arg1)->makeScaleMatrix((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeScaleMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::makeScaleMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeScaleMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->makeScaleMatrix(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeScaleMatrix(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_makeScaleMatrix__SWIG_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_makeScaleMatrix__SWIG_1(L);}  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_makeScaleMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::makeScaleMatrix(ofVec3f const &)\n"
  "    ofMatrix4x4::makeScaleMatrix(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_makeTranslationMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeTranslationMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeTranslationMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeTranslationMatrix",2,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeTranslationMatrix((ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeTranslationMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofMatrix4x4::makeTranslationMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeTranslationMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->makeTranslationMatrix(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeTranslationMatrix(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_makeTranslationMatrix__SWIG_0(L);}  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_makeTranslationMatrix__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_makeTranslationMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::makeTranslationMatrix(ofVec3f const &)\n"
  "    ofMatrix4x4::makeTranslationMatrix(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ;
  SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotationMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ; ofVec3f *arg3 = 0 ;
  SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotationMatrix(arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->makeRotationMatrix(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",2,SWIGTYPE_p_ofQuaternion); } 
  (arg1)->makeRotationMatrix((ofQuaternion const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ; ofVec3f *arg3 = 0 ; float arg4 ; ofVec3f *arg5 = 0 ; float arg6 ;
  ofVec3f *arg7 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",3,"ofVec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",5,"ofVec3f const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",6,"float");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",7,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",3,SWIGTYPE_p_ofVec3f); }  arg4 = (float)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",5,SWIGTYPE_p_ofVec3f); }  arg6 = (float)lua_tonumber(L, 6);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeRotationMatrix",7,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotationMatrix(arg2,(ofVec3f const &)*arg3,arg4,(ofVec3f const &)*arg5,arg6,(ofVec3f const &)*arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeRotationMatrix(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_3(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_0(L);}  }  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_1(L);}  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_2(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_makeRotationMatrix__SWIG_4(L);}  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_makeRotationMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::makeRotationMatrix(ofVec3f const &,ofVec3f const &)\n"
  "    ofMatrix4x4::makeRotationMatrix(float,ofVec3f const &)\n"
  "    ofMatrix4x4::makeRotationMatrix(float,float,float,float)\n" "    ofMatrix4x4::makeRotationMatrix(ofQuaternion const &)\n"
  "    ofMatrix4x4::makeRotationMatrix(float,ofVec3f const &,float,ofVec3f const &,float,ofVec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_makeInvertOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; bool result; SWIG_check_num_args("ofMatrix4x4::makeInvertOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeInvertOf",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeInvertOf",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeInvertOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeInvertOf",2,SWIGTYPE_p_ofMatrix4x4); } 
  result = (bool)(arg1)->makeInvertOf((ofMatrix4x4 const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeOrthoNormalOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeOrthoNormalOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeOrthoNormalOf",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeOrthoNormalOf",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeOrthoNormalOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeOrthoNormalOf",2,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->makeOrthoNormalOf((ofMatrix4x4 const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeFromMultiplicationOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; ofMatrix4x4 *arg3 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeFromMultiplicationOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeFromMultiplicationOf",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeFromMultiplicationOf",2,"ofMatrix4x4 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeFromMultiplicationOf",3,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeFromMultiplicationOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeFromMultiplicationOf",2,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeFromMultiplicationOf",3,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->makeFromMultiplicationOf((ofMatrix4x4 const &)*arg2,(ofMatrix4x4 const &)*arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeOrthoMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; double arg6 ; double arg7 ;
  SWIG_check_num_args("ofMatrix4x4::makeOrthoMatrix",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",6,"double");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",7,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeOrthoMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6); arg7 = (double)lua_tonumber(L, 7); (arg1)->makeOrthoMatrix(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeOrtho2DMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; SWIG_check_num_args("ofMatrix4x4::makeOrtho2DMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",5,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeOrtho2DMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  (arg1)->makeOrtho2DMatrix(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeFrustumMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; double arg6 ; double arg7 ;
  SWIG_check_num_args("ofMatrix4x4::makeFrustumMatrix",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",6,"double");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",7,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeFrustumMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6); arg7 = (double)lua_tonumber(L, 7);
  (arg1)->makeFrustumMatrix(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix4x4_makePerspectiveMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; SWIG_check_num_args("ofMatrix4x4::makePerspectiveMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",5,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makePerspectiveMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  (arg1)->makePerspectiveMatrix(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeLookAtMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeLookAtMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeLookAtMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeLookAtMatrix",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeLookAtMatrix",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::makeLookAtMatrix",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeLookAtMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeLookAtMatrix",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeLookAtMatrix",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeLookAtMatrix",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeLookAtMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_makeLookAtViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeLookAtViewMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeLookAtViewMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeLookAtViewMatrix",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeLookAtViewMatrix",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::makeLookAtViewMatrix",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeLookAtViewMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeLookAtViewMatrix",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeLookAtViewMatrix",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_makeLookAtViewMatrix",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeLookAtViewMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newIdentityMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::newIdentityMatrix",0,0) result = ofMatrix4x4::newIdentityMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newScaleMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::newScaleMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newScaleMatrix",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newScaleMatrix",1,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newScaleMatrix((ofVec3f const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newScaleMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newScaleMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newScaleMatrix",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newScaleMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newScaleMatrix",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = ofMatrix4x4::newScaleMatrix(arg1,arg2,arg3); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newScaleMatrix(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_newScaleMatrix__SWIG_0(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_ofMatrix4x4_newScaleMatrix__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_newScaleMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::newScaleMatrix(ofVec3f const &)\n"
  "    ofMatrix4x4::newScaleMatrix(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_newTranslationMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newTranslationMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newTranslationMatrix",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newTranslationMatrix",1,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newTranslationMatrix((ofVec3f const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newTranslationMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  float arg3 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newTranslationMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newTranslationMatrix",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newTranslationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newTranslationMatrix",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = ofMatrix4x4::newTranslationMatrix(arg1,arg2,arg3); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newTranslationMatrix(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_newTranslationMatrix__SWIG_0(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_ofMatrix4x4_newTranslationMatrix__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_newTranslationMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::newTranslationMatrix(ofVec3f const &)\n"
  "    ofMatrix4x4::newTranslationMatrix(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_newRotationMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec3f *arg2 = 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newRotationMatrix",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newRotationMatrix",2,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newRotationMatrix((ofVec3f const &)*arg1,(ofVec3f const &)*arg2); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newRotationMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ofMatrix4x4::newRotationMatrix(arg1,arg2,arg3,arg4); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newRotationMatrix__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *arg2 = 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",2,"ofVec3f const &");
  arg1 = (float)lua_tonumber(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newRotationMatrix",2,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newRotationMatrix(arg1,(ofVec3f const &)*arg2); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newRotationMatrix__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *arg2 = 0 ;
  float arg3 ; ofVec3f *arg4 = 0 ; float arg5 ; ofVec3f *arg6 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",4,"ofVec3f const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",6,"ofVec3f const &");
  arg1 = (float)lua_tonumber(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newRotationMatrix",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newRotationMatrix",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newRotationMatrix",6,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newRotationMatrix(arg1,(ofVec3f const &)*arg2,arg3,(ofVec3f const &)*arg4,arg5,(ofVec3f const &)*arg6);
  { ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newRotationMatrix__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_newRotationMatrix",1,SWIGTYPE_p_ofQuaternion); } 
  result = ofMatrix4x4::newRotationMatrix((ofQuaternion const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newRotationMatrix(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_newRotationMatrix__SWIG_4(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_newRotationMatrix__SWIG_0(L);}  }  }  if (argc == 2) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_newRotationMatrix__SWIG_2(L);}  }  }  if (argc == 4) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_newRotationMatrix__SWIG_1(L);}  }  }  }
     }  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_newRotationMatrix__SWIG_3(L);}  }  }  }  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_newRotationMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::newRotationMatrix(ofVec3f const &,ofVec3f const &)\n"
  "    ofMatrix4x4::newRotationMatrix(float,float,float,float)\n" "    ofMatrix4x4::newRotationMatrix(float,ofVec3f const &)\n"
  "    ofMatrix4x4::newRotationMatrix(float,ofVec3f const &,float,ofVec3f const &,float,ofVec3f const &)\n"
  "    ofMatrix4x4::newRotationMatrix(ofQuaternion const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_newOrthoMatrix(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; double arg5 ; double arg6 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newOrthoMatrix",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",6,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5); arg6 = (double)lua_tonumber(L, 6);
  result = ofMatrix4x4::newOrthoMatrix(arg1,arg2,arg3,arg4,arg5,arg6); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newOrtho2DMatrix(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newOrtho2DMatrix",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newOrtho2DMatrix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newOrtho2DMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newOrtho2DMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newOrtho2DMatrix",4,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  result = ofMatrix4x4::newOrtho2DMatrix(arg1,arg2,arg3,arg4); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newFrustumMatrix(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; double arg5 ; double arg6 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newFrustumMatrix",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",6,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5); arg6 = (double)lua_tonumber(L, 6);
  result = ofMatrix4x4::newFrustumMatrix(arg1,arg2,arg3,arg4,arg5,arg6); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newPerspectiveMatrix(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newPerspectiveMatrix",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newPerspectiveMatrix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newPerspectiveMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newPerspectiveMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newPerspectiveMatrix",4,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  result = ofMatrix4x4::newPerspectiveMatrix(arg1,arg2,arg3,arg4); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_newLookAtMatrix(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newLookAtMatrix",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newLookAtMatrix",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::newLookAtMatrix",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::newLookAtMatrix",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newLookAtMatrix",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newLookAtMatrix",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_newLookAtMatrix",3,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newLookAtMatrix((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4___call(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; int arg2 ;
  int arg3 ; float *result = 0 ; SWIG_check_num_args("ofMatrix4x4::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator ()",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::operator ()",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4___call",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix4x4_getRowAsVec3f(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; int arg2 ;
  ofVec3f result; SWIG_check_num_args("ofMatrix4x4::getRowAsVec3f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getRowAsVec3f",1,"ofMatrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::getRowAsVec3f",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getRowAsVec3f",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofMatrix4x4 const *)arg1)->getRowAsVec3f(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getRowAsVec4f(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; int arg2 ;
  ofVec4f result; SWIG_check_num_args("ofMatrix4x4::getRowAsVec4f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getRowAsVec4f",1,"ofMatrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::getRowAsVec4f",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getRowAsVec4f",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofMatrix4x4 const *)arg1)->getRowAsVec4f(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getPtr__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float *result = 0 ; SWIG_check_num_args("ofMatrix4x4::getPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getPtr",1,"ofMatrix4x4 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getPtr",1,SWIGTYPE_p_ofMatrix4x4); }  result = (float *)(arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix4x4_getPtr__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float *result = 0 ; SWIG_check_num_args("ofMatrix4x4::getPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getPtr",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getPtr",1,SWIGTYPE_p_ofMatrix4x4); }  result = (float *)((ofMatrix4x4 const *)arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix4x4_getPtr(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_getPtr__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_getPtr__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_getPtr'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::getPtr()\n" "    ofMatrix4x4::getPtr() const\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_isValid(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::isValid",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_isValid",1,SWIGTYPE_p_ofMatrix4x4); }  result = (bool)((ofMatrix4x4 const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_isNaN(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::isNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::isNaN",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_isNaN",1,SWIGTYPE_p_ofMatrix4x4); }  result = (bool)((ofMatrix4x4 const *)arg1)->isNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_isIdentity(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::isIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::isIdentity",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_isIdentity",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = (bool)((ofMatrix4x4 const *)arg1)->isIdentity(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::set",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::set",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_set",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_set",2,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->set((ofMatrix4x4 const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float *arg2 = (float *) (float *)0 ; SWIG_check_num_args("ofMatrix4x4::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::set",1,"ofMatrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMatrix4x4::set",2,"float const *const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_set",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("ofMatrix4x4_set",2,SWIGTYPE_p_float); }
   (arg1)->set((float const *)arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = (double *) (double *)0 ; SWIG_check_num_args("ofMatrix4x4::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::set",1,"ofMatrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMatrix4x4::set",2,"double const *const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_set",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_set",2,SWIGTYPE_p_double); }  (arg1)->set((double const *)arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_set__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ;
  float arg12 ; float arg13 ; float arg14 ; float arg15 ; float arg16 ; float arg17 ;
  SWIG_check_num_args("ofMatrix4x4::set",17,17) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::set",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::set",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::set",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix4x4::set",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix4x4::set",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofMatrix4x4::set",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofMatrix4x4::set",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofMatrix4x4::set",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofMatrix4x4::set",12,"float");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("ofMatrix4x4::set",13,"float");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("ofMatrix4x4::set",14,"float");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("ofMatrix4x4::set",15,"float");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("ofMatrix4x4::set",16,"float");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("ofMatrix4x4::set",17,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_set",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10); arg11 = (float)lua_tonumber(L, 11);
  arg12 = (float)lua_tonumber(L, 12); arg13 = (float)lua_tonumber(L, 13); arg14 = (float)lua_tonumber(L, 14);
  arg15 = (float)lua_tonumber(L, 15); arg16 = (float)lua_tonumber(L, 16); arg17 = (float)lua_tonumber(L, 17);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_set(lua_State* L) { int argc; int argv[18]={ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18} ;
  argc = lua_gettop(L); if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_set__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_set__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_set__SWIG_2(L);}  }  }  if (argc == 17) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { { _v = lua_isnumber(L,argv[12]); }  if (_v) { {
                                _v = lua_isnumber(L,argv[13]); }  if (_v) { { _v = lua_isnumber(L,argv[14]); }  if (_v) { {
                                    _v = lua_isnumber(L,argv[15]); }  if (_v) { { _v = lua_isnumber(L,argv[16]); }  if (_v) {
                                      return _wrap_ofMatrix4x4_set__SWIG_3(L);}  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_set'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::set(ofMatrix4x4 const &)\n"
  "    ofMatrix4x4::set(float const *const)\n" "    ofMatrix4x4::set(double const *const)\n"
  "    ofMatrix4x4::set(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_getInverse(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::getInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getInverse",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getInverse",1,SWIGTYPE_p_ofMatrix4x4); }  result = ((ofMatrix4x4 const *)arg1)->getInverse(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getOrtho(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = 0 ; double *arg3 = 0 ; double *arg4 = 0 ; double *arg5 = 0 ; double *arg6 = 0 ; double *arg7 = 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::getOrtho",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getOrtho",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getOrtho",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getOrtho",3,"double &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getOrtho",4,"double &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::getOrtho",5,"double &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofMatrix4x4::getOrtho",6,"double &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofMatrix4x4::getOrtho",7,"double &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getOrtho",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getOrtho",2,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getOrtho",3,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getOrtho",4,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getOrtho",5,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getOrtho",6,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getOrtho",7,SWIGTYPE_p_double); } 
  result = (bool)((ofMatrix4x4 const *)arg1)->getOrtho(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getFrustum(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = 0 ; double *arg3 = 0 ; double *arg4 = 0 ; double *arg5 = 0 ; double *arg6 = 0 ; double *arg7 = 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::getFrustum",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getFrustum",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getFrustum",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getFrustum",3,"double &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getFrustum",4,"double &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::getFrustum",5,"double &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofMatrix4x4::getFrustum",6,"double &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofMatrix4x4::getFrustum",7,"double &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getFrustum",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getFrustum",2,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getFrustum",3,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getFrustum",4,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getFrustum",5,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getFrustum",6,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getFrustum",7,SWIGTYPE_p_double); } 
  result = (bool)((ofMatrix4x4 const *)arg1)->getFrustum(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getPerspective(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = 0 ; double *arg3 = 0 ; double *arg4 = 0 ; double *arg5 = 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::getPerspective",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getPerspective",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getPerspective",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getPerspective",3,"double &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getPerspective",4,"double &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::getPerspective",5,"double &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getPerspective",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getPerspective",2,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getPerspective",3,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getPerspective",4,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ofMatrix4x4_getPerspective",5,SWIGTYPE_p_double); } 
  result = (bool)((ofMatrix4x4 const *)arg1)->getPerspective(*arg2,*arg3,*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getLookAt__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::getLookAt",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getLookAt",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getLookAt",2,"ofVec3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getLookAt",3,"ofVec3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getLookAt",4,"ofVec3f &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::getLookAt",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getLookAt",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_getLookAt",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_getLookAt",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_getLookAt",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  ((ofMatrix4x4 const *)arg1)->getLookAt(*arg2,*arg3,*arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix4x4_getLookAt__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofMatrix4x4::getLookAt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getLookAt",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getLookAt",2,"ofVec3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getLookAt",3,"ofVec3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getLookAt",4,"ofVec3f &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getLookAt",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_getLookAt",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_getLookAt",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_getLookAt",4,SWIGTYPE_p_ofVec3f); }  ((ofMatrix4x4 const *)arg1)->getLookAt(*arg2,*arg3,*arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getLookAt(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_getLookAt__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofMatrix4x4_getLookAt__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_getLookAt'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::getLookAt(ofVec3f &,ofVec3f &,ofVec3f &,float) const\n"
  "    ofMatrix4x4::getLookAt(ofVec3f &,ofVec3f &,ofVec3f &) const\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_decompose(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofQuaternion *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofQuaternion *arg5 = 0 ;
  SWIG_check_num_args("ofMatrix4x4::decompose",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::decompose",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::decompose",2,"ofVec3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::decompose",3,"ofQuaternion &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::decompose",4,"ofVec3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::decompose",5,"ofQuaternion &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_decompose",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_decompose",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_decompose",3,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_decompose",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_decompose",5,SWIGTYPE_p_ofQuaternion); } 
  ((ofMatrix4x4 const *)arg1)->decompose(*arg2,*arg3,*arg4,*arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrix4x4_getInverseOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::getInverseOf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::getInverseOf",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getInverseOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = ofMatrix4x4::getInverseOf((ofMatrix4x4 const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getTransposedOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::getTransposedOf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::getTransposedOf",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getTransposedOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = ofMatrix4x4::getTransposedOf((ofMatrix4x4 const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getOrthoNormalOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::getOrthoNormalOf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::getOrthoNormalOf",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getOrthoNormalOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = ofMatrix4x4::getOrthoNormalOf((ofMatrix4x4 const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMult__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f result; SWIG_check_num_args("ofMatrix4x4::postMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMult",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMult",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMult",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofMatrix4x4 const *)arg1)->postMult((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMult__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 = 0 ; ofVec4f result; SWIG_check_num_args("ofMatrix4x4::postMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMult",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMult",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMult",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofMatrix4x4 const *)arg1)->postMult((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMult__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::postMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMult",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMult",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMult",2,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->postMult((ofMatrix4x4 const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMult(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_postMult__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_postMult__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_postMult__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_postMult'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::postMult(ofVec3f const &) const\n"
  "    ofMatrix4x4::postMult(ofVec4f const &) const\n" "    ofMatrix4x4::postMult(ofMatrix4x4 const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_preMult__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f result; SWIG_check_num_args("ofMatrix4x4::preMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMult",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMult",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMult",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofMatrix4x4 const *)arg1)->preMult((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_preMult__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 = 0 ; ofVec4f result; SWIG_check_num_args("ofMatrix4x4::preMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMult",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMult",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMult",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofMatrix4x4 const *)arg1)->preMult((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_preMult__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::preMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMult",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMult",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMult",2,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->preMult((ofMatrix4x4 const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_preMult(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_preMult__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_preMult__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_preMult__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_preMult'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::preMult(ofVec3f const &) const\n"
  "    ofMatrix4x4::preMult(ofVec4f const &) const\n" "    ofMatrix4x4::preMult(ofMatrix4x4 const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofMatrix4x4___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator *",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::operator *",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4___mul",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4___mul",2,SWIGTYPE_p_ofMatrix4x4); } 
  result = ((ofMatrix4x4 const *)arg1)->operator *((ofMatrix4x4 const &)*arg2); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f result; SWIG_check_num_args("ofMatrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator *",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::operator *",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4___mul",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4___mul",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofMatrix4x4 const *)arg1)->operator *((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4___mul__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 = 0 ; ofVec4f result; SWIG_check_num_args("ofMatrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator *",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::operator *",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4___mul",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofMatrix4x4___mul",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofMatrix4x4 const *)arg1)->operator *((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4___mul__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4___mul__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::operator *(ofMatrix4x4 const &) const\n" "    ofMatrix4x4::operator *(ofVec3f const &) const\n"
  "    ofMatrix4x4::operator *(ofVec4f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_postMultTranslate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::postMultTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultTranslate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultTranslate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->postMultTranslate((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMultScale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::postMultScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultScale",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultScale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultScale",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultScale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->postMultScale((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMultRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::postMultRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultRotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultRotate",2,SWIGTYPE_p_ofQuaternion); } 
  (arg1)->postMultRotate((ofQuaternion const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMultTranslate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::postMultTranslate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultTranslate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->postMultTranslate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMultTranslate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_postMultTranslate__SWIG_0(L);}  }  }  if (argc == 4) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_postMultTranslate__SWIG_1(L);}  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_postMultTranslate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::postMultTranslate(ofVec3f const &)\n"
  "    ofMatrix4x4::postMultTranslate(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_postMultRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::postMultRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultRotate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->postMultRotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMultRotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_postMultRotate__SWIG_0(L);}  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofMatrix4x4_postMultRotate__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_postMultRotate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::postMultRotate(ofQuaternion const &)\n"
  "    ofMatrix4x4::postMultRotate(float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_postMultScale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::postMultScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultScale",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::postMultScale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::postMultScale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_postMultScale",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->postMultScale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_postMultScale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_postMultScale__SWIG_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_postMultScale__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_postMultScale'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::postMultScale(ofVec3f const &)\n"
  "    ofMatrix4x4::postMultScale(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_preMultScale(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::preMultScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMultScale",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMultScale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMultScale",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMultScale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->preMultScale((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_preMultTranslate(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::preMultTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMultTranslate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMultTranslate",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMultTranslate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMultTranslate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->preMultTranslate((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_preMultRotate(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::preMultRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMultRotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMultRotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMultRotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_preMultRotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->preMultRotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_setRotate(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::setRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::setRotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::setRotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_setRotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_setRotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->setRotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_setTranslation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::setTranslation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::setTranslation",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::setTranslation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::setTranslation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::setTranslation",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_setTranslation",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setTranslation(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_setTranslation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::setTranslation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::setTranslation",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::setTranslation",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_setTranslation",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_setTranslation",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setTranslation((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_setTranslation(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_setTranslation__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_setTranslation__SWIG_0(L);}  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_setTranslation'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::setTranslation(float,float,float)\n"
  "    ofMatrix4x4::setTranslation(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::rotate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::rotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_rotate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_rotateRad(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::rotateRad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::rotateRad",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::rotateRad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::rotateRad",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::rotateRad",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::rotateRad",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_rotateRad",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rotateRad(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::rotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::rotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_rotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_rotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->rotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_rotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_rotate__SWIG_1(L);}  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofMatrix4x4_rotate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::rotate(float,float,float,float)\n" "    ofMatrix4x4::rotate(ofQuaternion const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::translate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::translate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::translate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_translate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->translate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::translate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::translate",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_translate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_translate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->translate((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_translate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_translate__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_translate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_translate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::translate(float,float,float)\n"
  "    ofMatrix4x4::translate(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_scale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::scale",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::scale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::scale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_scale",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->scale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_scale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::scale",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::scale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_scale",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_scale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->scale((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_scale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_scale__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_scale__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_scale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::scale(float,float,float)\n" "    ofMatrix4x4::scale(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_glRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::glRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glRotate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::glRotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::glRotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::glRotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::glRotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_glRotate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->glRotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_glRotateRad(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::glRotateRad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_glRotateRad",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->glRotateRad(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_glRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::glRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glRotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::glRotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_glRotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofMatrix4x4_glRotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->glRotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_glRotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_glRotate__SWIG_1(L);}  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofMatrix4x4_glRotate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_glRotate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::glRotate(float,float,float,float)\n"
  "    ofMatrix4x4::glRotate(ofQuaternion const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_glTranslate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::glTranslate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glTranslate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::glTranslate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::glTranslate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::glTranslate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_glTranslate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->glTranslate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_glTranslate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::glTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glTranslate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::glTranslate",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_glTranslate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_glTranslate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->glTranslate((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_glTranslate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_glTranslate__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_glTranslate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_glTranslate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::glTranslate(float,float,float)\n"
  "    ofMatrix4x4::glTranslate(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_glScale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::glScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glScale",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::glScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::glScale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::glScale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_glScale",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->glScale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_glScale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::glScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glScale",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::glScale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_glScale",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_glScale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->glScale((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_glScale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_glScale__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrix4x4_glScale__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_glScale'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::glScale(float,float,float)\n"
  "    ofMatrix4x4::glScale(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4_getRotate(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofMatrix4x4::getRotate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getRotate",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getRotate",1,SWIGTYPE_p_ofMatrix4x4); }  result = ((ofMatrix4x4 const *)arg1)->getRotate(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getTranslation(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f result; SWIG_check_num_args("ofMatrix4x4::getTranslation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getTranslation",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getTranslation",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = ((ofMatrix4x4 const *)arg1)->getTranslation(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_getScale(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofMatrix4x4::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getScale",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_getScale",1,SWIGTYPE_p_ofMatrix4x4); }  result = ((ofMatrix4x4 const *)arg1)->getScale(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_transform3x3__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofMatrix4x4 *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofMatrix4x4::transform3x3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::transform3x3",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::transform3x3",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_transform3x3",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_transform3x3",2,SWIGTYPE_p_ofMatrix4x4); } 
  result = ofMatrix4x4::transform3x3((ofVec3f const &)*arg1,(ofMatrix4x4 const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_transform3x3__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofMatrix4x4::transform3x3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::transform3x3",1,"ofMatrix4x4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::transform3x3",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4_transform3x3",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMatrix4x4_transform3x3",2,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::transform3x3((ofMatrix4x4 const &)*arg1,(ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrix4x4_transform3x3(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_transform3x3__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofMatrix4x4_transform3x3__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrix4x4_transform3x3'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::transform3x3(ofVec3f const &,ofMatrix4x4 const &)\n"
  "    ofMatrix4x4::transform3x3(ofMatrix4x4 const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrix4x4___tostring(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  char *result = 0 ; SWIG_check_num_args("ofMatrix4x4::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::__str__",1,"ofMatrix4x4 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrix4x4___tostring",1,SWIGTYPE_p_ofMatrix4x4); }  result = (char *)ofMatrix4x4___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofMatrix4x4(void *obj) {
ofMatrix4x4 *arg1 = (ofMatrix4x4 *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofMatrix4x4(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofMatrix4x4);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofMatrix4x4_attributes[] = {
    { "_mat", _wrap_ofMatrix4x4__mat_get, _wrap_ofMatrix4x4__mat_set },
    {0,0,0}
};
static swig_lua_method swig_ofMatrix4x4_methods[]= {
    { "makeIdentityMatrix", _wrap_ofMatrix4x4_makeIdentityMatrix},
    { "makeScaleMatrix", _wrap_ofMatrix4x4_makeScaleMatrix},
    { "makeTranslationMatrix", _wrap_ofMatrix4x4_makeTranslationMatrix},
    { "makeRotationMatrix", _wrap_ofMatrix4x4_makeRotationMatrix},
    { "makeInvertOf", _wrap_ofMatrix4x4_makeInvertOf},
    { "makeOrthoNormalOf", _wrap_ofMatrix4x4_makeOrthoNormalOf},
    { "makeFromMultiplicationOf", _wrap_ofMatrix4x4_makeFromMultiplicationOf},
    { "makeOrthoMatrix", _wrap_ofMatrix4x4_makeOrthoMatrix},
    { "makeOrtho2DMatrix", _wrap_ofMatrix4x4_makeOrtho2DMatrix},
    { "makeFrustumMatrix", _wrap_ofMatrix4x4_makeFrustumMatrix},
    { "makePerspectiveMatrix", _wrap_ofMatrix4x4_makePerspectiveMatrix},
    { "makeLookAtMatrix", _wrap_ofMatrix4x4_makeLookAtMatrix},
    { "makeLookAtViewMatrix", _wrap_ofMatrix4x4_makeLookAtViewMatrix},
    { "__call", _wrap_ofMatrix4x4___call},
    { "getRowAsVec3f", _wrap_ofMatrix4x4_getRowAsVec3f},
    { "getRowAsVec4f", _wrap_ofMatrix4x4_getRowAsVec4f},
    { "getPtr", _wrap_ofMatrix4x4_getPtr},
    { "isValid", _wrap_ofMatrix4x4_isValid},
    { "isNaN", _wrap_ofMatrix4x4_isNaN},
    { "isIdentity", _wrap_ofMatrix4x4_isIdentity},
    { "set", _wrap_ofMatrix4x4_set},
    { "getInverse", _wrap_ofMatrix4x4_getInverse},
    { "getOrtho", _wrap_ofMatrix4x4_getOrtho},
    { "getFrustum", _wrap_ofMatrix4x4_getFrustum},
    { "getPerspective", _wrap_ofMatrix4x4_getPerspective},
    { "getLookAt", _wrap_ofMatrix4x4_getLookAt},
    { "decompose", _wrap_ofMatrix4x4_decompose},
    { "postMult", _wrap_ofMatrix4x4_postMult},
    { "preMult", _wrap_ofMatrix4x4_preMult},
    { "__mul", _wrap_ofMatrix4x4___mul},
    { "postMultTranslate", _wrap_ofMatrix4x4_postMultTranslate},
    { "postMultRotate", _wrap_ofMatrix4x4_postMultRotate},
    { "postMultScale", _wrap_ofMatrix4x4_postMultScale},
    { "preMultScale", _wrap_ofMatrix4x4_preMultScale},
    { "preMultTranslate", _wrap_ofMatrix4x4_preMultTranslate},
    { "preMultRotate", _wrap_ofMatrix4x4_preMultRotate},
    { "setRotate", _wrap_ofMatrix4x4_setRotate},
    { "setTranslation", _wrap_ofMatrix4x4_setTranslation},
    { "rotateRad", _wrap_ofMatrix4x4_rotateRad},
    { "rotate", _wrap_ofMatrix4x4_rotate},
    { "translate", _wrap_ofMatrix4x4_translate},
    { "scale", _wrap_ofMatrix4x4_scale},
    { "glRotateRad", _wrap_ofMatrix4x4_glRotateRad},
    { "glRotate", _wrap_ofMatrix4x4_glRotate},
    { "glTranslate", _wrap_ofMatrix4x4_glTranslate},
    { "glScale", _wrap_ofMatrix4x4_glScale},
    { "getRotate", _wrap_ofMatrix4x4_getRotate},
    { "getTranslation", _wrap_ofMatrix4x4_getTranslation},
    { "getScale", _wrap_ofMatrix4x4_getScale},
    { "__tostring", _wrap_ofMatrix4x4___tostring},
    {0,0}
};
static swig_lua_method swig_ofMatrix4x4_meta[] = {
    { "__call", _wrap_ofMatrix4x4___call},
    { "__mul", _wrap_ofMatrix4x4___mul},
    { "__tostring", _wrap_ofMatrix4x4___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofMatrix4x4_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofMatrix4x4_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofMatrix4x4_Sf_SwigStatic_methods[]= {
    { "newIdentityMatrix", _wrap_ofMatrix4x4_newIdentityMatrix},
    { "newScaleMatrix", _wrap_ofMatrix4x4_newScaleMatrix},
    { "newTranslationMatrix", _wrap_ofMatrix4x4_newTranslationMatrix},
    { "newRotationMatrix", _wrap_ofMatrix4x4_newRotationMatrix},
    { "newOrthoMatrix", _wrap_ofMatrix4x4_newOrthoMatrix},
    { "newOrtho2DMatrix", _wrap_ofMatrix4x4_newOrtho2DMatrix},
    { "newFrustumMatrix", _wrap_ofMatrix4x4_newFrustumMatrix},
    { "newPerspectiveMatrix", _wrap_ofMatrix4x4_newPerspectiveMatrix},
    { "newLookAtMatrix", _wrap_ofMatrix4x4_newLookAtMatrix},
    { "getInverseOf", _wrap_ofMatrix4x4_getInverseOf},
    { "getTransposedOf", _wrap_ofMatrix4x4_getTransposedOf},
    { "getOrthoNormalOf", _wrap_ofMatrix4x4_getOrthoNormalOf},
    { "transform3x3", _wrap_ofMatrix4x4_transform3x3},
    {0,0}
};
static swig_lua_class* swig_ofMatrix4x4_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofMatrix4x4_Sf_SwigStatic = {
    "ofMatrix4x4",
    swig_ofMatrix4x4_Sf_SwigStatic_methods,
    swig_ofMatrix4x4_Sf_SwigStatic_attributes,
    swig_ofMatrix4x4_Sf_SwigStatic_constants,
    swig_ofMatrix4x4_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofMatrix4x4_bases[] = {0};
static const char *swig_ofMatrix4x4_base_names[] = {0};
static swig_lua_class _wrap_class_ofMatrix4x4 = { "ofMatrix4x4", "ofMatrix4x4", &SWIGTYPE_p_ofMatrix4x4,_proxy__wrap_new_ofMatrix4x4, swig_delete_ofMatrix4x4, swig_ofMatrix4x4_methods, swig_ofMatrix4x4_attributes, &swig_ofMatrix4x4_Sf_SwigStatic, swig_ofMatrix4x4_meta, swig_ofMatrix4x4_bases, swig_ofMatrix4x4_base_names };

static int _wrap_ofQuaternion__v_set(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec4f *arg2 = (ofVec4f *) 0 ; SWIG_check_num_args("ofQuaternion::_v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::_v",1,"ofQuaternion *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofQuaternion::_v",2,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion__v_set",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofQuaternion__v_set",2,SWIGTYPE_p_ofVec4f); }  if (arg1) (arg1)->_v = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion__v_get(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofQuaternion::_v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::_v",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion__v_get",1,SWIGTYPE_p_ofQuaternion); }  result = (ofVec4f *)& ((arg1)->_v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofQuaternion__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *result = 0 ;
  SWIG_check_num_args("ofQuaternion::ofQuaternion",0,0) result = (ofQuaternion *)new ofQuaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofQuaternion__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofQuaternion *result = 0 ; SWIG_check_num_args("ofQuaternion::ofQuaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofQuaternion::ofQuaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::ofQuaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofQuaternion::ofQuaternion",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofQuaternion::ofQuaternion",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofQuaternion *)new ofQuaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofQuaternion__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; ofQuaternion *result = 0 ;
  SWIG_check_num_args("ofQuaternion::ofQuaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofQuaternion::ofQuaternion",1,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("new_ofQuaternion",1,SWIGTYPE_p_ofVec4f); } 
  result = (ofQuaternion *)new ofQuaternion((ofVec4f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofQuaternion__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *arg2 = 0 ;
  ofQuaternion *result = 0 ; SWIG_check_num_args("ofQuaternion::ofQuaternion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofQuaternion::ofQuaternion",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::ofQuaternion",2,"ofVec3f const &"); arg1 = (float)lua_tonumber(L, 1);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_ofQuaternion",2,SWIGTYPE_p_ofVec3f); } 
  result = (ofQuaternion *)new ofQuaternion(arg1,(ofVec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofQuaternion__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *arg2 = 0 ; float arg3 ;
  ofVec3f *arg4 = 0 ; float arg5 ; ofVec3f *arg6 = 0 ; ofQuaternion *result = 0 ;
  SWIG_check_num_args("ofQuaternion::ofQuaternion",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofQuaternion::ofQuaternion",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::ofQuaternion",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofQuaternion::ofQuaternion",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofQuaternion::ofQuaternion",4,"ofVec3f const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofQuaternion::ofQuaternion",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofQuaternion::ofQuaternion",6,"ofVec3f const &"); arg1 = (float)lua_tonumber(L, 1);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_ofQuaternion",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_ofQuaternion",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_ofQuaternion",6,SWIGTYPE_p_ofVec3f); } 
  result = (ofQuaternion *)new ofQuaternion(arg1,(ofVec3f const &)*arg2,arg3,(ofVec3f const &)*arg4,arg5,(ofVec3f const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofQuaternion(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofQuaternion__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofQuaternion__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_new_ofQuaternion__SWIG_3(L);}  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofQuaternion__SWIG_1(L);}  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_ofQuaternion__SWIG_4(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofQuaternion'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::ofQuaternion()\n" "    ofQuaternion::ofQuaternion(float,float,float,float)\n"
  "    ofQuaternion::ofQuaternion(ofVec4f const &)\n" "    ofQuaternion::ofQuaternion(float,ofVec3f const &)\n"
  "    ofQuaternion::ofQuaternion(float,ofVec3f const &,float,ofVec3f const &,float,ofVec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofQuaternion_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofQuaternion::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::set",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofQuaternion::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofQuaternion::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofQuaternion::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_set",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec4f *arg2 = 0 ; SWIG_check_num_args("ofQuaternion::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::set",1,"ofQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::set",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_set",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofQuaternion_set",2,SWIGTYPE_p_ofVec4f); }  (arg1)->set((ofVec4f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofQuaternion::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::set",1,"ofQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::set",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_set",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofQuaternion_set",2,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->set((ofMatrix4x4 const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion_set__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion_set__SWIG_2(L);}  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofQuaternion_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofQuaternion_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::set(float,float,float,float)\n" "    ofQuaternion::set(ofVec4f const &)\n"
  "    ofQuaternion::set(ofMatrix4x4 const &)\n"); lua_error(L);return 0; }
static int _wrap_ofQuaternion_get(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofQuaternion::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::get",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::get",2,"ofMatrix4x4 &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_get",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofQuaternion_get",2,SWIGTYPE_p_ofMatrix4x4); }  ((ofQuaternion const *)arg1)->get(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_x(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofQuaternion::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::x",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_x",1,SWIGTYPE_p_ofQuaternion); }  result = (float *) &(arg1)->x();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofQuaternion_y(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofQuaternion::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::y",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_y",1,SWIGTYPE_p_ofQuaternion); }  result = (float *) &(arg1)->y();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofQuaternion_z(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofQuaternion::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::z",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_z",1,SWIGTYPE_p_ofQuaternion); }  result = (float *) &(arg1)->z();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofQuaternion_w(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofQuaternion::w",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::w",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_w",1,SWIGTYPE_p_ofQuaternion); }  result = (float *) &(arg1)->w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofQuaternion_asVec4(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; ofVec4f result;
  SWIG_check_num_args("ofQuaternion::asVec4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::asVec4",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_asVec4",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->asVec4(); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_asVec3(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofQuaternion::asVec3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::asVec3",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_asVec3",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->asVec3(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_zeroRotation(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  bool result; SWIG_check_num_args("ofQuaternion::zeroRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::zeroRotation",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_zeroRotation",1,SWIGTYPE_p_ofQuaternion); } 
  result = (bool)((ofQuaternion const *)arg1)->zeroRotation(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_length(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float result;
  SWIG_check_num_args("ofQuaternion::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::length",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_length",1,SWIGTYPE_p_ofQuaternion); }  result = (float)((ofQuaternion const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_length2(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float result;
  SWIG_check_num_args("ofQuaternion::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::length2",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_length2",1,SWIGTYPE_p_ofQuaternion); }  result = (float)((ofQuaternion const *)arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_conj(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofQuaternion::conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::conj",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_conj",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->conj(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_inverse(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofQuaternion::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::inverse",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_inverse",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->inverse(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_makeRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofQuaternion::makeRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofQuaternion::makeRotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofQuaternion::makeRotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->makeRotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_makeRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofQuaternion::makeRotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",3,SWIGTYPE_p_ofVec3f); }  (arg1)->makeRotate(arg2,(ofVec3f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_makeRotate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; ofVec3f *arg3 = 0 ; float arg4 ; ofVec3f *arg5 = 0 ; float arg6 ; ofVec3f *arg7 = 0 ;
  SWIG_check_num_args("ofQuaternion::makeRotate",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate",3,"ofVec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofQuaternion::makeRotate",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofQuaternion::makeRotate",5,"ofVec3f const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofQuaternion::makeRotate",6,"float");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofQuaternion::makeRotate",7,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",3,SWIGTYPE_p_ofVec3f); }  arg4 = (float)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",5,SWIGTYPE_p_ofVec3f); }  arg6 = (float)lua_tonumber(L, 6);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",7,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotate(arg2,(ofVec3f const &)*arg3,arg4,(ofVec3f const &)*arg5,arg6,(ofVec3f const &)*arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_makeRotate__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofQuaternion::makeRotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate",1,"ofQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotate((ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofQuaternion_makeRotate(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion_makeRotate__SWIG_3(L);}  }  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion_makeRotate__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofQuaternion_makeRotate__SWIG_0(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion_makeRotate__SWIG_2(L);}  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofQuaternion_makeRotate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofQuaternion::makeRotate(float,float,float,float)\n"
  "    ofQuaternion::makeRotate(float,ofVec3f const &)\n"
  "    ofQuaternion::makeRotate(float,ofVec3f const &,float,ofVec3f const &,float,ofVec3f const &)\n"
  "    ofQuaternion::makeRotate(ofVec3f const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofQuaternion_makeRotate_original(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofQuaternion::makeRotate_original",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate_original",1,"ofQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate_original",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate_original",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate_original",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate_original",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_makeRotate_original",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotate_original((ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_getRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ; float *arg5 = 0 ; SWIG_check_num_args("ofQuaternion::getRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::getRotate",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::getRotate",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::getRotate",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofQuaternion::getRotate",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofQuaternion::getRotate",5,"float &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_getRotate",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofQuaternion_getRotate",2,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofQuaternion_getRotate",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofQuaternion_getRotate",4,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofQuaternion_getRotate",5,SWIGTYPE_p_float); } 
  ((ofQuaternion const *)arg1)->getRotate(*arg2,*arg3,*arg4,*arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofQuaternion_getRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofQuaternion::getRotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::getRotate",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::getRotate",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::getRotate",3,"ofVec3f &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_getRotate",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofQuaternion_getRotate",2,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion_getRotate",3,SWIGTYPE_p_ofVec3f); }  ((ofQuaternion const *)arg1)->getRotate(*arg2,*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_getRotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion_getRotate__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion_getRotate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofQuaternion_getRotate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofQuaternion::getRotate(float &,float &,float &,float &) const\n"
  "    ofQuaternion::getRotate(float &,ofVec3f &) const\n"); lua_error(L);return 0; }
static int _wrap_ofQuaternion_getEuler(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f result; SWIG_check_num_args("ofQuaternion::getEuler",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::getEuler",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_getEuler",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->getEuler(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_slerp(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float arg2 ;
  ofQuaternion *arg3 = 0 ; ofQuaternion *arg4 = 0 ; SWIG_check_num_args("ofQuaternion::slerp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::slerp",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::slerp",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::slerp",3,"ofQuaternion const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofQuaternion::slerp",4,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_slerp",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_slerp",3,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_slerp",4,SWIGTYPE_p_ofQuaternion); } 
  (arg1)->slerp(arg2,(ofQuaternion const &)*arg3,(ofQuaternion const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion_normalize(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  SWIG_check_num_args("ofQuaternion::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::normalize",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion_normalize",1,SWIGTYPE_p_ofQuaternion); }  (arg1)->normalize(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___eq(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; bool result; SWIG_check_num_args("ofQuaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator ==",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator ==",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___eq",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___eq",2,SWIGTYPE_p_ofQuaternion); } 
  result = (bool)((ofQuaternion const *)arg1)->operator ==((ofQuaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator *",1,"ofQuaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::operator *",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___mul",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofQuaternion const *)arg1)->operator *(arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator *",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator *",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___mul",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___mul",2,SWIGTYPE_p_ofQuaternion); } 
  result = ((ofQuaternion const *)arg1)->operator *((ofQuaternion const &)*arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___mul__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f result; SWIG_check_num_args("ofQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator *",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator *",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___mul",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofQuaternion___mul",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofQuaternion const *)arg1)->operator *((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion___mul__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion___mul__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofQuaternion___mul__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofQuaternion___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::operator *(float) const\n" "    ofQuaternion::operator *(ofQuaternion const &) const\n"
  "    ofQuaternion::operator *(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofQuaternion___div__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator /",1,"ofQuaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::operator /",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___div",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofQuaternion const *)arg1)->operator /(arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___div__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator /",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator /",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___div",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___div",2,SWIGTYPE_p_ofQuaternion); } 
  result = ((ofQuaternion const *)arg1)->operator /((ofQuaternion const &)*arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofQuaternion___div__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofQuaternion___div__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofQuaternion___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::operator /(float) const\n" "    ofQuaternion::operator /(ofQuaternion const &) const\n");
  lua_error(L);return 0; }
static int _wrap_ofQuaternion___add(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator +",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator +",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___add",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___add",2,SWIGTYPE_p_ofQuaternion); } 
  result = ((ofQuaternion const *)arg1)->operator +((ofQuaternion const &)*arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___sub(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator -",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator -",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___sub",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___sub",2,SWIGTYPE_p_ofQuaternion); } 
  result = ((ofQuaternion const *)arg1)->operator -((ofQuaternion const &)*arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___unm(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator -",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___unm",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->operator -(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofQuaternion___tostring(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  char *result = 0 ; SWIG_check_num_args("ofQuaternion::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::__str__",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("ofQuaternion___tostring",1,SWIGTYPE_p_ofQuaternion); }  result = (char *)ofQuaternion___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofQuaternion(void *obj) {
ofQuaternion *arg1 = (ofQuaternion *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofQuaternion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofQuaternion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofQuaternion_attributes[] = {
    { "_v", _wrap_ofQuaternion__v_get, _wrap_ofQuaternion__v_set },
    {0,0,0}
};
static swig_lua_method swig_ofQuaternion_methods[]= {
    { "set", _wrap_ofQuaternion_set},
    { "get", _wrap_ofQuaternion_get},
    { "x", _wrap_ofQuaternion_x},
    { "y", _wrap_ofQuaternion_y},
    { "z", _wrap_ofQuaternion_z},
    { "w", _wrap_ofQuaternion_w},
    { "asVec4", _wrap_ofQuaternion_asVec4},
    { "asVec3", _wrap_ofQuaternion_asVec3},
    { "zeroRotation", _wrap_ofQuaternion_zeroRotation},
    { "length", _wrap_ofQuaternion_length},
    { "length2", _wrap_ofQuaternion_length2},
    { "conj", _wrap_ofQuaternion_conj},
    { "inverse", _wrap_ofQuaternion_inverse},
    { "makeRotate", _wrap_ofQuaternion_makeRotate},
    { "makeRotate_original", _wrap_ofQuaternion_makeRotate_original},
    { "getRotate", _wrap_ofQuaternion_getRotate},
    { "getEuler", _wrap_ofQuaternion_getEuler},
    { "slerp", _wrap_ofQuaternion_slerp},
    { "normalize", _wrap_ofQuaternion_normalize},
    { "__eq", _wrap_ofQuaternion___eq},
    { "__mul", _wrap_ofQuaternion___mul},
    { "__div", _wrap_ofQuaternion___div},
    { "__add", _wrap_ofQuaternion___add},
    { "__sub", _wrap_ofQuaternion___sub},
    { "__unm", _wrap_ofQuaternion___unm},
    { "__tostring", _wrap_ofQuaternion___tostring},
    {0,0}
};
static swig_lua_method swig_ofQuaternion_meta[] = {
    { "__eq", _wrap_ofQuaternion___eq},
    { "__mul", _wrap_ofQuaternion___mul},
    { "__div", _wrap_ofQuaternion___div},
    { "__add", _wrap_ofQuaternion___add},
    { "__sub", _wrap_ofQuaternion___sub},
    { "__unm", _wrap_ofQuaternion___unm},
    { "__tostring", _wrap_ofQuaternion___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofQuaternion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofQuaternion_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofQuaternion_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofQuaternion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofQuaternion_Sf_SwigStatic = {
    "ofQuaternion",
    swig_ofQuaternion_Sf_SwigStatic_methods,
    swig_ofQuaternion_Sf_SwigStatic_attributes,
    swig_ofQuaternion_Sf_SwigStatic_constants,
    swig_ofQuaternion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofQuaternion_bases[] = {0};
static const char *swig_ofQuaternion_base_names[] = {0};
static swig_lua_class _wrap_class_ofQuaternion = { "ofQuaternion", "ofQuaternion", &SWIGTYPE_p_ofQuaternion,_proxy__wrap_new_ofQuaternion, swig_delete_ofQuaternion, swig_ofQuaternion_methods, swig_ofQuaternion_attributes, &swig_ofQuaternion_Sf_SwigStatic, swig_ofQuaternion_meta, swig_ofQuaternion_bases, swig_ofQuaternion_base_names };

static int _wrap_ofVec2f_x_set(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec2f::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::x",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::x",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_x_set",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->x = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_x_get(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float result;
  SWIG_check_num_args("ofVec2f::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::x",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_x_get",1,SWIGTYPE_p_ofVec2f); }  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_y_set(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec2f::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::y",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::y",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_y_set",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->y = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_y_get(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float result;
  SWIG_check_num_args("ofVec2f::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::y",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_y_get",1,SWIGTYPE_p_ofVec2f); }  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec2f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",0,0) result = (ofVec2f *)new ofVec2f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec2f__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec2f::ofVec2f",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (ofVec2f *)new ofVec2f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec2f__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec2f::ofVec2f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::ofVec2f",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofVec2f *)new ofVec2f(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec2f__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec2f::ofVec2f",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("new_ofVec2f",1,SWIGTYPE_p_ofVec3f); }
   result = (ofVec2f *)new ofVec2f((ofVec3f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec2f__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec2f::ofVec2f",1,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("new_ofVec2f",1,SWIGTYPE_p_ofVec4f); }
   result = (ofVec2f *)new ofVec2f((ofVec4f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec2f(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofVec2f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofVec2f__SWIG_3(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofVec2f__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_ofVec2f__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ofVec2f__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofVec2f'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::ofVec2f()\n" "    ofVec2f::ofVec2f(float)\n" "    ofVec2f::ofVec2f(float,float)\n"
  "    ofVec2f::ofVec2f(ofVec3f const &)\n" "    ofVec2f::ofVec2f(ofVec4f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_getPtr__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec2f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getPtr",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getPtr",1,SWIGTYPE_p_ofVec2f); }  result = (float *)(arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_getPtr__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec2f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getPtr",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getPtr",1,SWIGTYPE_p_ofVec2f); }  result = (float *)((ofVec2f const *)arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_getPtr(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_getPtr__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_getPtr__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_getPtr'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::getPtr()\n" "    ofVec2f::getPtr() const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofVec2f::set",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::set",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_set",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  SWIG_check_num_args("ofVec2f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::set",1,"ofVec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::set",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_set",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_set",2,SWIGTYPE_p_ofVec2f); }
   (arg1)->set((ofVec2f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec2f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::set",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_set",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_set(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_set__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f_set__SWIG_2(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVec2f_set__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::set(float,float)\n" "    ofVec2f::set(ofVec2f const &)\n" "    ofVec2f::set(float)\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f___eq(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofVec2f::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator ==",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator ==",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f___eq",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___eq",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->operator ==((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_match__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec2f::match",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::match",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::match",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::match",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_match",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_match",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec2f const *)arg1)->match((ofVec2f const &)*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_match__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec2f::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::match",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::match",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_match",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_match",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->match((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_match(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_match__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec2f_match__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_match'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::match(ofVec2f const &,float) const\n"
  "    ofVec2f::match(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_isAligned__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec2f::isAligned",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::isAligned",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::isAligned",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::isAligned",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_isAligned",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_isAligned",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec2f const *)arg1)->isAligned((ofVec2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_isAligned__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec2f::isAligned",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::isAligned",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::isAligned",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_isAligned",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_isAligned",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->isAligned((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_isAligned(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_isAligned__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec2f_isAligned__SWIG_0(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_isAligned'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::isAligned(ofVec2f const &,float) const\n"
  "    ofVec2f::isAligned(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_isAlignedRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ; float arg3 ; bool result; SWIG_check_num_args("ofVec2f::isAlignedRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::isAlignedRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::isAlignedRad",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::isAlignedRad",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_isAlignedRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_isAlignedRad",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec2f const *)arg1)->isAlignedRad((ofVec2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_isAlignedRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ; bool result; SWIG_check_num_args("ofVec2f::isAlignedRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::isAlignedRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::isAlignedRad",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_isAlignedRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_isAlignedRad",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->isAlignedRad((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_isAlignedRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_isAlignedRad__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVec2f_isAlignedRad__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_isAlignedRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::isAlignedRad(ofVec2f const &,float) const\n"
  "    ofVec2f::isAlignedRad(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_align__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec2f::align",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::align",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::align",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::align",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_align",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_align",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec2f const *)arg1)->align((ofVec2f const &)*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_align__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec2f::align",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::align",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::align",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_align",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_align",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->align((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_align(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_align__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec2f_align__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_align'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::align(ofVec2f const &,float) const\n"
  "    ofVec2f::align(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_alignRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec2f::alignRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::alignRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::alignRad",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::alignRad",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_alignRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_alignRad",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec2f const *)arg1)->alignRad((ofVec2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_alignRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec2f::alignRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::alignRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::alignRad",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_alignRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_alignRad",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->alignRad((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_alignRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_alignRad__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec2f_alignRad__SWIG_0(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_alignRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::alignRad(ofVec2f const &,float) const\n"
  "    ofVec2f::alignRad(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f___add__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator +",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator +",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___add",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___add",2,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->operator +((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___add__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator +",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::operator +",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___add",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->operator +(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::operator +(ofVec2f const &) const\n" "    ofVec2f::operator +(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator -",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator -",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___sub",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___sub",2,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->operator -((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator -",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::operator -",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___sub",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->operator -(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f___sub__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f___sub__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::operator -(ofVec2f const &) const\n" "    ofVec2f::operator -(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f___unm(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator -",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___unm",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->operator -(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator *",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator *",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___mul",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___mul",2,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->operator *((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator *",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::operator *",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___mul",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->operator *(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::operator *(ofVec2f const &) const\n" "    ofVec2f::operator *(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f___div__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator /",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator /",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___div",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___div",2,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->operator /((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___div__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator /",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::operator /",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___div",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->operator /(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::operator /(ofVec2f const &) const\n" "    ofVec2f::operator /(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_getScaled(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::getScaled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getScaled",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getScaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getScaled",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->getScaled(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_scale(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::scale",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::scale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_scale",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec2f *) &(arg1)->scale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getRotated__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::getRotated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getRotated",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getRotated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getRotated",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->getRotated(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getRotated__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::getRotated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getRotated",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getRotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::getRotated",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getRotated",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getRotated",3,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->getRotated(arg2,(ofVec2f const &)*arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getRotated(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f_getRotated__SWIG_0(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_getRotated__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_getRotated'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::getRotated(float) const\n" "    ofVec2f::getRotated(float,ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_getRotatedRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::getRotatedRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getRotatedRad",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getRotatedRad",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getRotatedRad",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->getRotatedRad(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getRotatedRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::getRotatedRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getRotatedRad",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getRotatedRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::getRotatedRad",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getRotatedRad",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getRotatedRad",3,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->getRotatedRad(arg2,(ofVec2f const &)*arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getRotatedRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f_getRotatedRad__SWIG_0(L);}  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_getRotatedRad__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_getRotatedRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::getRotatedRad(float) const\n"
  "    ofVec2f::getRotatedRad(float,ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotate",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotate",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotate",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofVec2f *) &(arg1)->rotate(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotate",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::rotate",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotate",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotate",3,SWIGTYPE_p_ofVec2f); }  result = (ofVec2f *) &(arg1)->rotate(arg2,(ofVec2f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_rotate(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f_rotate__SWIG_0(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_rotate__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::rotate(float)\n" "    ofVec2f::rotate(float,ofVec2f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_rotateRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rotateRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotateRad",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotateRad",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotateRad",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofVec2f *) &(arg1)->rotateRad(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_rotateRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rotateRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotateRad",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotateRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::rotateRad",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotateRad",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotateRad",3,SWIGTYPE_p_ofVec2f); } 
  result = (ofVec2f *) &(arg1)->rotateRad(arg2,(ofVec2f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_rotateRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f_rotateRad__SWIG_0(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_rotateRad__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_rotateRad'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::rotateRad(float)\n" "    ofVec2f::rotateRad(float,ofVec2f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_getMapped(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ; ofVec2f *arg4 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::getMapped",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getMapped",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::getMapped",2,"ofVec2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::getMapped",3,"ofVec2f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec2f::getMapped",4,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getMapped",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getMapped",2,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getMapped",3,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getMapped",4,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->getMapped((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_map(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ; ofVec2f *arg4 = 0 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::map",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::map",1,"ofVec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::map",2,"ofVec2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::map",3,"ofVec2f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec2f::map",4,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_map",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_map",2,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_map",3,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_map",4,SWIGTYPE_p_ofVec2f); }
   result = (ofVec2f *) &(arg1)->map((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_distance(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::distance",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::distance",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_distance",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_distance",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->distance((ofVec2f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_squareDistance(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::squareDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::squareDistance",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::squareDistance",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_squareDistance",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_squareDistance",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->squareDistance((ofVec2f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getInterpolated(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; ofVec2f result; SWIG_check_num_args("ofVec2f::getInterpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getInterpolated",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::getInterpolated",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::getInterpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getInterpolated",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getInterpolated",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec2f const *)arg1)->getInterpolated((ofVec2f const &)*arg2,arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_interpolate(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::interpolate",1,"ofVec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::interpolate",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::interpolate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_interpolate",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_interpolate",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofVec2f *) &(arg1)->interpolate((ofVec2f const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_getMiddle(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::getMiddle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getMiddle",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::getMiddle",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getMiddle",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getMiddle",2,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->getMiddle((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_middle(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::middle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::middle",1,"ofVec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::middle",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_middle",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_middle",2,SWIGTYPE_p_ofVec2f); }  result = (ofVec2f *) &(arg1)->middle((ofVec2f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_average(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::average",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::average",1,"ofVec2f *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVec2f::average",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::average",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_average",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_average",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  result = (ofVec2f *) &(arg1)->average((ofVec2f const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_getNormalized(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getNormalized",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getNormalized",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->getNormalized(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_normalize(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::normalize",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::normalize",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_normalize",1,SWIGTYPE_p_ofVec2f); }  result = (ofVec2f *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_getLimited__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::getLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getLimited",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getLimited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getLimited",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->getLimited(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getLimited__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::getLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getLimited",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getLimited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getLimited",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofVec2f *) &(arg1)->getLimited(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getLimited(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f_getLimited__SWIG_0(L);}  }  } 
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f_getLimited__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_getLimited'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::getLimited(float) const\n" "    ofVec2f::getLimited(float)\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_limit(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::limit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::limit",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::limit",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_limit",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofVec2f *) &(arg1)->limit(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_length(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float result;
  SWIG_check_num_args("ofVec2f::length",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::length",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_length",1,SWIGTYPE_p_ofVec2f); }  result = (float)((ofVec2f const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_lengthSquared(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float result;
  SWIG_check_num_args("ofVec2f::lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::lengthSquared",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_lengthSquared",1,SWIGTYPE_p_ofVec2f); }  result = (float)((ofVec2f const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_angle(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::angle",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::angle",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_angle",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_angle",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->angle((ofVec2f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_angleRad(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::angleRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::angleRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::angleRad",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_angleRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_angleRad",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->angleRad((ofVec2f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_getPerpendicular(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::getPerpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getPerpendicular",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_getPerpendicular",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->getPerpendicular(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_perpendicular(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::perpendicular",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_perpendicular",1,SWIGTYPE_p_ofVec2f); }  result = (ofVec2f *) &(arg1)->perpendicular();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec2f_dot(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ; float result;
  SWIG_check_num_args("ofVec2f::dot",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::dot",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::dot",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_dot",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofVec2f_dot",2,SWIGTYPE_p_ofVec2f); }
   result = (float)((ofVec2f const *)arg1)->dot((ofVec2f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_rescaled(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::rescaled",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rescaled",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rescaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rescaled",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->rescaled(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_rescale(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rescale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rescale",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rescale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rescale",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec2f *) &(arg1)->rescale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_rotated__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::rotated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotated",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotated",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->rotated(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_normalized(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::normalized",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_normalized",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->normalized(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_limited(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::limited",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::limited",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::limited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_limited",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->limited(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_perpendiculared(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::perpendiculared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::perpendiculared",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_perpendiculared",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->perpendiculared(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_interpolated(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; ofVec2f result; SWIG_check_num_args("ofVec2f::interpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::interpolated",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::interpolated",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::interpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_interpolated",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_interpolated",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec2f const *)arg1)->interpolated((ofVec2f const &)*arg2,arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_middled(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::middled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::middled",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::middled",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_middled",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_middled",2,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->middled((ofVec2f const &)*arg2);
  { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_mapped(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ; ofVec2f *arg4 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::mapped",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::mapped",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::mapped",2,"ofVec2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::mapped",3,"ofVec2f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec2f::mapped",4,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_mapped",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_mapped",2,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_mapped",3,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_mapped",4,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->mapped((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_distanceSquared(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::distanceSquared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::distanceSquared",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::distanceSquared",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_distanceSquared",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_distanceSquared",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->distanceSquared((ofVec2f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_rotated__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::rotated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotated",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::rotated",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotated",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f_rotated",3,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->rotated(arg2,(ofVec2f const &)*arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_rotated(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec2f_rotated__SWIG_0(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec2f_rotated__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec2f_rotated'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::rotated(float) const\n" "    ofVec2f::rotated(float,ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec2f_zero(lua_State* L) { int SWIG_arg = 0; ofVec2f result; SWIG_check_num_args("ofVec2f::zero",0,0)
  result = ofVec2f::zero(); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f_one(lua_State* L) { int SWIG_arg = 0; ofVec2f result; SWIG_check_num_args("ofVec2f::one",0,0)
  result = ofVec2f::one(); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec2f___tostring(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; char *result = 0 ;
  SWIG_check_num_args("ofVec2f::__str__",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::__str__",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofVec2f___tostring",1,SWIGTYPE_p_ofVec2f); }  result = (char *)ofVec2f___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofVec2f(void *obj) {
ofVec2f *arg1 = (ofVec2f *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofVec2f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofVec2f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofVec2f_attributes[] = {
    { "x", _wrap_ofVec2f_x_get, _wrap_ofVec2f_x_set },
    { "y", _wrap_ofVec2f_y_get, _wrap_ofVec2f_y_set },
    {0,0,0}
};
static swig_lua_method swig_ofVec2f_methods[]= {
    { "getPtr", _wrap_ofVec2f_getPtr},
    { "set", _wrap_ofVec2f_set},
    { "__eq", _wrap_ofVec2f___eq},
    { "match", _wrap_ofVec2f_match},
    { "isAligned", _wrap_ofVec2f_isAligned},
    { "isAlignedRad", _wrap_ofVec2f_isAlignedRad},
    { "align", _wrap_ofVec2f_align},
    { "alignRad", _wrap_ofVec2f_alignRad},
    { "__add", _wrap_ofVec2f___add},
    { "__sub", _wrap_ofVec2f___sub},
    { "__unm", _wrap_ofVec2f___unm},
    { "__mul", _wrap_ofVec2f___mul},
    { "__div", _wrap_ofVec2f___div},
    { "getScaled", _wrap_ofVec2f_getScaled},
    { "scale", _wrap_ofVec2f_scale},
    { "getRotated", _wrap_ofVec2f_getRotated},
    { "getRotatedRad", _wrap_ofVec2f_getRotatedRad},
    { "rotate", _wrap_ofVec2f_rotate},
    { "rotateRad", _wrap_ofVec2f_rotateRad},
    { "getMapped", _wrap_ofVec2f_getMapped},
    { "map", _wrap_ofVec2f_map},
    { "distance", _wrap_ofVec2f_distance},
    { "squareDistance", _wrap_ofVec2f_squareDistance},
    { "getInterpolated", _wrap_ofVec2f_getInterpolated},
    { "interpolate", _wrap_ofVec2f_interpolate},
    { "getMiddle", _wrap_ofVec2f_getMiddle},
    { "middle", _wrap_ofVec2f_middle},
    { "average", _wrap_ofVec2f_average},
    { "getNormalized", _wrap_ofVec2f_getNormalized},
    { "normalize", _wrap_ofVec2f_normalize},
    { "getLimited", _wrap_ofVec2f_getLimited},
    { "limit", _wrap_ofVec2f_limit},
    { "length", _wrap_ofVec2f_length},
    { "lengthSquared", _wrap_ofVec2f_lengthSquared},
    { "angle", _wrap_ofVec2f_angle},
    { "angleRad", _wrap_ofVec2f_angleRad},
    { "getPerpendicular", _wrap_ofVec2f_getPerpendicular},
    { "perpendicular", _wrap_ofVec2f_perpendicular},
    { "dot", _wrap_ofVec2f_dot},
    { "rescaled", _wrap_ofVec2f_rescaled},
    { "rescale", _wrap_ofVec2f_rescale},
    { "normalized", _wrap_ofVec2f_normalized},
    { "limited", _wrap_ofVec2f_limited},
    { "perpendiculared", _wrap_ofVec2f_perpendiculared},
    { "interpolated", _wrap_ofVec2f_interpolated},
    { "middled", _wrap_ofVec2f_middled},
    { "mapped", _wrap_ofVec2f_mapped},
    { "distanceSquared", _wrap_ofVec2f_distanceSquared},
    { "rotated", _wrap_ofVec2f_rotated},
    { "__tostring", _wrap_ofVec2f___tostring},
    {0,0}
};
static swig_lua_method swig_ofVec2f_meta[] = {
    { "__eq", _wrap_ofVec2f___eq},
    { "__add", _wrap_ofVec2f___add},
    { "__sub", _wrap_ofVec2f___sub},
    { "__unm", _wrap_ofVec2f___unm},
    { "__mul", _wrap_ofVec2f___mul},
    { "__div", _wrap_ofVec2f___div},
    { "__tostring", _wrap_ofVec2f___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofVec2f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofVec2f_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("DIM", ofVec2f::DIM)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofVec2f_Sf_SwigStatic_methods[]= {
    { "zero", _wrap_ofVec2f_zero},
    { "one", _wrap_ofVec2f_one},
    {0,0}
};
static swig_lua_class* swig_ofVec2f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofVec2f_Sf_SwigStatic = {
    "ofVec2f",
    swig_ofVec2f_Sf_SwigStatic_methods,
    swig_ofVec2f_Sf_SwigStatic_attributes,
    swig_ofVec2f_Sf_SwigStatic_constants,
    swig_ofVec2f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofVec2f_bases[] = {0};
static const char *swig_ofVec2f_base_names[] = {0};
static swig_lua_class _wrap_class_ofVec2f = { "ofVec2f", "ofVec2f", &SWIGTYPE_p_ofVec2f,_proxy__wrap_new_ofVec2f, swig_delete_ofVec2f, swig_ofVec2f_methods, swig_ofVec2f_attributes, &swig_ofVec2f_Sf_SwigStatic, swig_ofVec2f_meta, swig_ofVec2f_bases, swig_ofVec2f_base_names };

static int _wrap_ofVec3f_x_set(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec3f::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::x",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::x",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_x_set",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->x = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_x_get(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::x",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_x_get",1,SWIGTYPE_p_ofVec3f); }  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_y_set(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec3f::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::y",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::y",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_y_set",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->y = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_y_get(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::y",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_y_get",1,SWIGTYPE_p_ofVec3f); }  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_z_set(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec3f::z",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::z",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::z",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_z_set",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->z = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_z_get(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::z",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_z_get",1,SWIGTYPE_p_ofVec3f); }  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec3f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",0,0) result = (ofVec3f *)new ofVec3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec3f__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::ofVec3f",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::ofVec3f",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::ofVec3f",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (ofVec3f *)new ofVec3f(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec3f__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::ofVec3f",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofVec3f *)new ofVec3f(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec3f__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (ofVec3f *)new ofVec3f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec3f__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = 0 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("new_ofVec3f",1,SWIGTYPE_p_ofVec2f); }
   result = (ofVec3f *)new ofVec3f((ofVec2f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec3f__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("new_ofVec3f",1,SWIGTYPE_p_ofVec4f); }
   result = (ofVec3f *)new ofVec3f((ofVec4f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec3f(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofVec3f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofVec3f__SWIG_4(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofVec3f__SWIG_5(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_ofVec3f__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_ofVec3f__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_new_ofVec3f__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofVec3f'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::ofVec3f()\n" "    ofVec3f::ofVec3f(float,float,float)\n" "    ofVec3f::ofVec3f(float,float)\n"
  "    ofVec3f::ofVec3f(float)\n" "    ofVec3f::ofVec3f(ofVec2f const &)\n" "    ofVec3f::ofVec3f(ofVec4f const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofVec3f_getPtr__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec3f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getPtr",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getPtr",1,SWIGTYPE_p_ofVec3f); }  result = (float *)(arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_getPtr__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec3f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getPtr",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getPtr",1,SWIGTYPE_p_ofVec3f); }  result = (float *)((ofVec3f const *)arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_getPtr(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_getPtr__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_getPtr__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_getPtr'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::getPtr()\n" "    ofVec3f::getPtr() const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofVec3f::set",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::set",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_set",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofVec3f::set",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::set",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_set",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofVec3f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::set",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::set",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_set",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_set",2,SWIGTYPE_p_ofVec3f); }
   (arg1)->set((ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_set__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec3f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::set",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_set",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_set(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_set__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec3f_set__SWIG_3(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVec3f_set__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofVec3f_set__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::set(float,float,float)\n" "    ofVec3f::set(float,float)\n" "    ofVec3f::set(ofVec3f const &)\n"
  "    ofVec3f::set(float)\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f___eq(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofVec3f::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator ==",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator ==",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f___eq",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___eq",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->operator ==((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_match__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec3f::match",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::match",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::match",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::match",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_match",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_match",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec3f const *)arg1)->match((ofVec3f const &)*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_match__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec3f::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::match",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::match",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_match",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_match",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->match((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_match(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_match__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec3f_match__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_match'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::match(ofVec3f const &,float) const\n"
  "    ofVec3f::match(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_isAligned__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec3f::isAligned",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::isAligned",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::isAligned",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::isAligned",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_isAligned",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_isAligned",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec3f const *)arg1)->isAligned((ofVec3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_isAligned__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec3f::isAligned",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::isAligned",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::isAligned",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_isAligned",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_isAligned",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->isAligned((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_isAligned(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_isAligned__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec3f_isAligned__SWIG_0(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_isAligned'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::isAligned(ofVec3f const &,float) const\n"
  "    ofVec3f::isAligned(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_isAlignedRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ; float arg3 ; bool result; SWIG_check_num_args("ofVec3f::isAlignedRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::isAlignedRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::isAlignedRad",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::isAlignedRad",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_isAlignedRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_isAlignedRad",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec3f const *)arg1)->isAlignedRad((ofVec3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_isAlignedRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ; bool result; SWIG_check_num_args("ofVec3f::isAlignedRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::isAlignedRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::isAlignedRad",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_isAlignedRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_isAlignedRad",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->isAlignedRad((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_isAlignedRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_isAlignedRad__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVec3f_isAlignedRad__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_isAlignedRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::isAlignedRad(ofVec3f const &,float) const\n"
  "    ofVec3f::isAlignedRad(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_align__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec3f::align",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::align",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::align",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::align",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_align",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_align",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec3f const *)arg1)->align((ofVec3f const &)*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_align__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec3f::align",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::align",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::align",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_align",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_align",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->align((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_align(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_align__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec3f_align__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_align'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::align(ofVec3f const &,float) const\n"
  "    ofVec3f::align(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_alignRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec3f::alignRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::alignRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::alignRad",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::alignRad",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_alignRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_alignRad",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec3f const *)arg1)->alignRad((ofVec3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_alignRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec3f::alignRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::alignRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::alignRad",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_alignRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_alignRad",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->alignRad((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_alignRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_alignRad__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec3f_alignRad__SWIG_0(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_alignRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::alignRad(ofVec3f const &,float) const\n"
  "    ofVec3f::alignRad(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f___add__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator +",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator +",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___add",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___add",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->operator +((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___add__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator +",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::operator +",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___add",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->operator +(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec3f___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::operator +(ofVec3f const &) const\n" "    ofVec3f::operator +(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator -",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator -",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___sub",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___sub",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->operator -((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator -",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::operator -",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___sub",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->operator -(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f___sub__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec3f___sub__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::operator -(ofVec3f const &) const\n" "    ofVec3f::operator -(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f___unm(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator -",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___unm",1,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->operator -(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator *",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator *",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___mul",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___mul",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->operator *((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator *",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::operator *",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___mul",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->operator *(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec3f___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::operator *(ofVec3f const &) const\n" "    ofVec3f::operator *(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f___div__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator /",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator /",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___div",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___div",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->operator /((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___div__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator /",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::operator /",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___div",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->operator /(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec3f___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::operator /(ofVec3f const &) const\n" "    ofVec3f::operator /(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_getScaled(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::getScaled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getScaled",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getScaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getScaled",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->getScaled(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_scale(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::scale",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::scale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_scale",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec3f *) &(arg1)->scale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getRotated__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getRotated",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotated",3,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getRotated(arg2,(ofVec3f const &)*arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getRotated__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotated",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotated",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::getRotated",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::getRotated",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ((ofVec3f const *)arg1)->getRotated(arg2,arg3,arg4); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getRotated__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotated",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getRotated",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::getRotated",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotated",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotated",4,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getRotated(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getRotated(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_getRotated__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_getRotated__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofVec3f_getRotated__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_getRotated'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::getRotated(float,ofVec3f const &) const\n" "    ofVec3f::getRotated(float,float,float) const\n"
  "    ofVec3f::getRotated(float,ofVec3f const &,ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_getRotatedRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotatedRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotatedRad",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotatedRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getRotatedRad",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotatedRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotatedRad",3,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,(ofVec3f const &)*arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getRotatedRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotatedRad",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotatedRad",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotatedRad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::getRotatedRad",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::getRotatedRad",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotatedRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,arg3,arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getRotatedRad__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotatedRad",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotatedRad",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotatedRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getRotatedRad",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::getRotatedRad",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotatedRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotatedRad",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getRotatedRad",4,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getRotatedRad(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_getRotatedRad__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_getRotatedRad__SWIG_2(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofVec3f_getRotatedRad__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_getRotatedRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::getRotatedRad(float,ofVec3f const &) const\n"
  "    ofVec3f::getRotatedRad(float,float,float) const\n"
  "    ofVec3f::getRotatedRad(float,ofVec3f const &,ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotate",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotate",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotate",3,SWIGTYPE_p_ofVec3f); }  result = (ofVec3f *) &(arg1)->rotate(arg2,(ofVec3f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotate",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::rotate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotate",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); result = (ofVec3f *) &(arg1)->rotate(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_rotate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotate",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotate",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::rotate",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotate",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotate",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotate",4,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec3f *) &(arg1)->rotate(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_rotate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_rotate__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_rotate__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofVec3f_rotate__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::rotate(float,ofVec3f const &)\n" "    ofVec3f::rotate(float,float,float)\n"
  "    ofVec3f::rotate(float,ofVec3f const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_rotateRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotateRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotateRad",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotateRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotateRad",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotateRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotateRad",3,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec3f *) &(arg1)->rotateRad(arg2,(ofVec3f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_rotateRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotateRad",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotateRad",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotateRad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::rotateRad",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::rotateRad",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotateRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); result = (ofVec3f *) &(arg1)->rotateRad(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_rotateRad__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotateRad",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotateRad",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotateRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotateRad",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::rotateRad",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotateRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotateRad",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotateRad",4,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec3f *) &(arg1)->rotateRad(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_rotateRad(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_rotateRad__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_rotateRad__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofVec3f_rotateRad__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_rotateRad'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::rotateRad(float,ofVec3f const &)\n" "    ofVec3f::rotateRad(float,float,float)\n"
  "    ofVec3f::rotateRad(float,ofVec3f const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_getMapped(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *arg5 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getMapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getMapped",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getMapped",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getMapped",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::getMapped",4,"ofVec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofVec3f::getMapped",5,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getMapped",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getMapped",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getMapped",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getMapped",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getMapped",5,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getMapped((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_map(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *arg5 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::map",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::map",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::map",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::map",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::map",4,"ofVec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofVec3f::map",5,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_map",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_map",2,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_map",3,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_map",4,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_map",5,SWIGTYPE_p_ofVec3f); }
  
  result = (ofVec3f *) &(arg1)->map((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_distance(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::distance",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::distance",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_distance",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_distance",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->distance((ofVec3f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_squareDistance(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::squareDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::squareDistance",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::squareDistance",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_squareDistance",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_squareDistance",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->squareDistance((ofVec3f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getInterpolated(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getInterpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getInterpolated",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getInterpolated",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::getInterpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getInterpolated",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getInterpolated",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec3f const *)arg1)->getInterpolated((ofVec3f const &)*arg2,arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_interpolate(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::interpolate",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::interpolate",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::interpolate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_interpolate",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_interpolate",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofVec3f *) &(arg1)->interpolate((ofVec3f const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_getMiddle(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::getMiddle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getMiddle",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getMiddle",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getMiddle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getMiddle",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getMiddle((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_middle(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::middle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::middle",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::middle",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_middle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_middle",2,SWIGTYPE_p_ofVec3f); }  result = (ofVec3f *) &(arg1)->middle((ofVec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_average(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::average",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::average",1,"ofVec3f *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVec3f::average",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::average",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_average",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_average",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  result = (ofVec3f *) &(arg1)->average((ofVec3f const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_getNormalized(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getNormalized",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getNormalized",1,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->getNormalized(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_normalize(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::normalize",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::normalize",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_normalize",1,SWIGTYPE_p_ofVec3f); }  result = (ofVec3f *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_getLimited(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::getLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getLimited",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getLimited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getLimited",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->getLimited(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_limit(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::limit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::limit",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::limit",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_limit",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofVec3f *) &(arg1)->limit(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_length(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::length",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::length",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_length",1,SWIGTYPE_p_ofVec3f); }  result = (float)((ofVec3f const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_lengthSquared(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::lengthSquared",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_lengthSquared",1,SWIGTYPE_p_ofVec3f); }  result = (float)((ofVec3f const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_angle(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::angle",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::angle",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_angle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_angle",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->angle((ofVec3f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_angleRad(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::angleRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::angleRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::angleRad",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_angleRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_angleRad",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->angleRad((ofVec3f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_getPerpendicular(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::getPerpendicular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getPerpendicular",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getPerpendicular",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getPerpendicular",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getPerpendicular",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getPerpendicular((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_perpendicular(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::perpendicular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::perpendicular",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::perpendicular",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_perpendicular",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_perpendicular",2,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec3f *) &(arg1)->perpendicular((ofVec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_getCrossed(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::getCrossed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getCrossed",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getCrossed",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getCrossed",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_getCrossed",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getCrossed((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_cross(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::cross",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::cross",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_cross",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_cross",2,SWIGTYPE_p_ofVec3f); }  result = (ofVec3f *) &(arg1)->cross((ofVec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec3f_dot(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ; float result;
  SWIG_check_num_args("ofVec3f::dot",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::dot",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::dot",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_dot",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofVec3f_dot",2,SWIGTYPE_p_ofVec3f); }
   result = (float)((ofVec3f const *)arg1)->dot((ofVec3f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_rescaled(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::rescaled",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rescaled",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rescaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rescaled",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->rescaled(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_rescale(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rescale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rescale",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rescale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rescale",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec3f *) &(arg1)->rescale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_rotated__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::rotated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotated",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotated",3,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->rotated(arg2,(ofVec3f const &)*arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_rotated__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f result; SWIG_check_num_args("ofVec3f::rotated",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotated",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotated",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::rotated",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::rotated",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); result = (arg1)->rotated(arg2,arg3,arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_normalized(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::normalized",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_normalized",1,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->normalized(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_limited(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::limited",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::limited",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::limited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_limited",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->limited(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_crossed(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::crossed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::crossed",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::crossed",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_crossed",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_crossed",2,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->crossed((ofVec3f const &)*arg2);
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_perpendiculared(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::perpendiculared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::perpendiculared",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::perpendiculared",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_perpendiculared",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_perpendiculared",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->perpendiculared((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_mapped(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *arg5 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::mapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::mapped",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::mapped",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::mapped",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::mapped",4,"ofVec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofVec3f::mapped",5,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_mapped",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_mapped",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_mapped",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_mapped",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_mapped",5,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->mapped((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_distanceSquared(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::distanceSquared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::distanceSquared",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::distanceSquared",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_distanceSquared",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_distanceSquared",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->distanceSquared((ofVec3f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_interpolated(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; ofVec3f result; SWIG_check_num_args("ofVec3f::interpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::interpolated",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::interpolated",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::interpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_interpolated",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_interpolated",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec3f const *)arg1)->interpolated((ofVec3f const &)*arg2,arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_middled(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::middled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::middled",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::middled",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_middled",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_middled",2,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->middled((ofVec3f const &)*arg2);
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_rotated__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::rotated",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotated",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::rotated",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotated",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f_rotated",4,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->rotated(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_rotated(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_rotated__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_ofVec3f_rotated__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofVec3f_rotated__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec3f_rotated'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::rotated(float,ofVec3f const &) const\n" "    ofVec3f::rotated(float,float,float)\n"
  "    ofVec3f::rotated(float,ofVec3f const &,ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec3f_zero(lua_State* L) { int SWIG_arg = 0; ofVec3f result; SWIG_check_num_args("ofVec3f::zero",0,0)
  result = ofVec3f::zero(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f_one(lua_State* L) { int SWIG_arg = 0; ofVec3f result; SWIG_check_num_args("ofVec3f::one",0,0)
  result = ofVec3f::one(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec3f___tostring(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; char *result = 0 ;
  SWIG_check_num_args("ofVec3f::__str__",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::__str__",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVec3f___tostring",1,SWIGTYPE_p_ofVec3f); }  result = (char *)ofVec3f___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofVec3f(void *obj) {
ofVec3f *arg1 = (ofVec3f *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofVec3f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofVec3f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofVec3f_attributes[] = {
    { "x", _wrap_ofVec3f_x_get, _wrap_ofVec3f_x_set },
    { "y", _wrap_ofVec3f_y_get, _wrap_ofVec3f_y_set },
    { "z", _wrap_ofVec3f_z_get, _wrap_ofVec3f_z_set },
    {0,0,0}
};
static swig_lua_method swig_ofVec3f_methods[]= {
    { "getPtr", _wrap_ofVec3f_getPtr},
    { "set", _wrap_ofVec3f_set},
    { "__eq", _wrap_ofVec3f___eq},
    { "match", _wrap_ofVec3f_match},
    { "isAligned", _wrap_ofVec3f_isAligned},
    { "isAlignedRad", _wrap_ofVec3f_isAlignedRad},
    { "align", _wrap_ofVec3f_align},
    { "alignRad", _wrap_ofVec3f_alignRad},
    { "__add", _wrap_ofVec3f___add},
    { "__sub", _wrap_ofVec3f___sub},
    { "__unm", _wrap_ofVec3f___unm},
    { "__mul", _wrap_ofVec3f___mul},
    { "__div", _wrap_ofVec3f___div},
    { "getScaled", _wrap_ofVec3f_getScaled},
    { "scale", _wrap_ofVec3f_scale},
    { "getRotated", _wrap_ofVec3f_getRotated},
    { "getRotatedRad", _wrap_ofVec3f_getRotatedRad},
    { "rotate", _wrap_ofVec3f_rotate},
    { "rotateRad", _wrap_ofVec3f_rotateRad},
    { "getMapped", _wrap_ofVec3f_getMapped},
    { "map", _wrap_ofVec3f_map},
    { "distance", _wrap_ofVec3f_distance},
    { "squareDistance", _wrap_ofVec3f_squareDistance},
    { "getInterpolated", _wrap_ofVec3f_getInterpolated},
    { "interpolate", _wrap_ofVec3f_interpolate},
    { "getMiddle", _wrap_ofVec3f_getMiddle},
    { "middle", _wrap_ofVec3f_middle},
    { "average", _wrap_ofVec3f_average},
    { "getNormalized", _wrap_ofVec3f_getNormalized},
    { "normalize", _wrap_ofVec3f_normalize},
    { "getLimited", _wrap_ofVec3f_getLimited},
    { "limit", _wrap_ofVec3f_limit},
    { "length", _wrap_ofVec3f_length},
    { "lengthSquared", _wrap_ofVec3f_lengthSquared},
    { "angle", _wrap_ofVec3f_angle},
    { "angleRad", _wrap_ofVec3f_angleRad},
    { "getPerpendicular", _wrap_ofVec3f_getPerpendicular},
    { "perpendicular", _wrap_ofVec3f_perpendicular},
    { "getCrossed", _wrap_ofVec3f_getCrossed},
    { "cross", _wrap_ofVec3f_cross},
    { "dot", _wrap_ofVec3f_dot},
    { "rescaled", _wrap_ofVec3f_rescaled},
    { "rescale", _wrap_ofVec3f_rescale},
    { "normalized", _wrap_ofVec3f_normalized},
    { "limited", _wrap_ofVec3f_limited},
    { "crossed", _wrap_ofVec3f_crossed},
    { "perpendiculared", _wrap_ofVec3f_perpendiculared},
    { "mapped", _wrap_ofVec3f_mapped},
    { "distanceSquared", _wrap_ofVec3f_distanceSquared},
    { "interpolated", _wrap_ofVec3f_interpolated},
    { "middled", _wrap_ofVec3f_middled},
    { "rotated", _wrap_ofVec3f_rotated},
    { "__tostring", _wrap_ofVec3f___tostring},
    {0,0}
};
static swig_lua_method swig_ofVec3f_meta[] = {
    { "__eq", _wrap_ofVec3f___eq},
    { "__add", _wrap_ofVec3f___add},
    { "__sub", _wrap_ofVec3f___sub},
    { "__unm", _wrap_ofVec3f___unm},
    { "__mul", _wrap_ofVec3f___mul},
    { "__div", _wrap_ofVec3f___div},
    { "__tostring", _wrap_ofVec3f___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofVec3f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofVec3f_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("DIM", ofVec3f::DIM)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofVec3f_Sf_SwigStatic_methods[]= {
    { "zero", _wrap_ofVec3f_zero},
    { "one", _wrap_ofVec3f_one},
    {0,0}
};
static swig_lua_class* swig_ofVec3f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofVec3f_Sf_SwigStatic = {
    "ofVec3f",
    swig_ofVec3f_Sf_SwigStatic_methods,
    swig_ofVec3f_Sf_SwigStatic_attributes,
    swig_ofVec3f_Sf_SwigStatic_constants,
    swig_ofVec3f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofVec3f_bases[] = {0};
static const char *swig_ofVec3f_base_names[] = {0};
static swig_lua_class _wrap_class_ofVec3f = { "ofVec3f", "ofVec3f", &SWIGTYPE_p_ofVec3f,_proxy__wrap_new_ofVec3f, swig_delete_ofVec3f, swig_ofVec3f_methods, swig_ofVec3f_attributes, &swig_ofVec3f_Sf_SwigStatic, swig_ofVec3f_meta, swig_ofVec3f_bases, swig_ofVec3f_base_names };

static int _wrap_ofVec4f_x_set(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec4f::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::x",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::x",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_x_set",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->x = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_x_get(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::x",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_x_get",1,SWIGTYPE_p_ofVec4f); }  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_y_set(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec4f::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::y",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::y",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_y_set",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->y = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_y_get(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::y",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_y_get",1,SWIGTYPE_p_ofVec4f); }  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_z_set(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec4f::z",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::z",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::z",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_z_set",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->z = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_z_get(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::z",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_z_get",1,SWIGTYPE_p_ofVec4f); }  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_w_set(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec4f::w",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::w",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::w",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_w_set",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->w = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_w_get(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::w",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::w",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_w_get",1,SWIGTYPE_p_ofVec4f); }  result = (float) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec4f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::ofVec4f",0,0) result = (ofVec4f *)new ofVec4f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec4f__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::ofVec4f",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec4f::ofVec4f",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (ofVec4f *)new ofVec4f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofVec4f__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::ofVec4f",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec4f::ofVec4f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::ofVec4f",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::ofVec4f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec4f::ofVec4f",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofVec4f *)new ofVec4f(arg1,arg2,arg3,arg4); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec4f__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = 0 ; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::ofVec4f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec4f::ofVec4f",1,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("new_ofVec4f",1,SWIGTYPE_p_ofVec2f); }
   result = (ofVec4f *)new ofVec4f((ofVec2f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec4f__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::ofVec4f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec4f::ofVec4f",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("new_ofVec4f",1,SWIGTYPE_p_ofVec3f); }
   result = (ofVec4f *)new ofVec4f((ofVec3f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofVec4f(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_ofVec4f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofVec4f__SWIG_3(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_ofVec4f__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_ofVec4f__SWIG_1(L);}  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofVec4f__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofVec4f'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::ofVec4f()\n" "    ofVec4f::ofVec4f(float)\n" "    ofVec4f::ofVec4f(float,float,float,float)\n"
  "    ofVec4f::ofVec4f(ofVec2f const &)\n" "    ofVec4f::ofVec4f(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVec4f_getPtr__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec4f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getPtr",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getPtr",1,SWIGTYPE_p_ofVec4f); }  result = (float *)(arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec4f_getPtr__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec4f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getPtr",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getPtr",1,SWIGTYPE_p_ofVec4f); }  result = (float *)((ofVec4f const *)arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec4f_getPtr(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVec4f_getPtr__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVec4f_getPtr__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec4f_getPtr'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::getPtr()\n" "    ofVec4f::getPtr() const\n"); lua_error(L);return 0; }
static int _wrap_ofVec4f_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofVec4f::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::set",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec4f::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVec4f::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("ofVec4f_set",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec4f_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  SWIG_check_num_args("ofVec4f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::set",1,"ofVec4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::set",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("ofVec4f_set",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("ofVec4f_set",2,SWIGTYPE_p_ofVec4f); }
   (arg1)->set((ofVec4f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec4f_set__SWIG_1(L);}  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofVec4f_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec4f_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::set(float,float,float,float)\n" "    ofVec4f::set(ofVec4f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofVec4f___eq(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofVec4f::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator ==",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator ==",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("ofVec4f___eq",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___eq",2,SWIGTYPE_p_ofVec4f); } 
  result = (bool)((ofVec4f const *)arg1)->operator ==((ofVec4f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_match__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec4f::match",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::match",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::match",2,"ofVec4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::match",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_match",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_match",2,SWIGTYPE_p_ofVec4f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec4f const *)arg1)->match((ofVec4f const &)*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_match__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec4f::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::match",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::match",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_match",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_match",2,SWIGTYPE_p_ofVec4f); } 
  result = (bool)((ofVec4f const *)arg1)->match((ofVec4f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_match(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec4f_match__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_ofVec4f_match__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec4f_match'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec4f::match(ofVec4f const &,float) const\n"
  "    ofVec4f::match(ofVec4f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec4f___add__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator +",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator +",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___add",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___add",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofVec4f const *)arg1)->operator +((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___add__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator +",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::operator +",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___add",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->operator +(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec4f___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec4f___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec4f___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::operator +(ofVec4f const &) const\n" "    ofVec4f::operator +(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec4f___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator -",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::operator -",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___sub",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->operator -(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator -",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator -",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___sub",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___sub",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofVec4f const *)arg1)->operator -((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec4f___sub__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec4f___sub__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec4f___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::operator -(float const) const\n" "    ofVec4f::operator -(ofVec4f const &) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec4f___unm(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator -",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___unm",1,SWIGTYPE_p_ofVec4f); }  result = ((ofVec4f const *)arg1)->operator -(); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator *",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator *",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___mul",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___mul",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofVec4f const *)arg1)->operator *((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator *",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::operator *",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___mul",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->operator *(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec4f___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec4f___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec4f___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::operator *(ofVec4f const &) const\n" "    ofVec4f::operator *(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec4f___div__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator /",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator /",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___div",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___div",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofVec4f const *)arg1)->operator /((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___div__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator /",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::operator /",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___div",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->operator /(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVec4f___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofVec4f___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVec4f___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::operator /(ofVec4f const &) const\n" "    ofVec4f::operator /(float const) const\n"); lua_error(L);return 0; }
static int _wrap_ofVec4f_getScaled(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::getScaled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getScaled",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::getScaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getScaled",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->getScaled(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_scale(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::scale",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::scale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_scale",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec4f *) &(arg1)->scale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_distance(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec4f::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::distance",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::distance",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_distance",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_distance",2,SWIGTYPE_p_ofVec4f); } 
  result = (float)((ofVec4f const *)arg1)->distance((ofVec4f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_squareDistance(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec4f::squareDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::squareDistance",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::squareDistance",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_squareDistance",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_squareDistance",2,SWIGTYPE_p_ofVec4f); } 
  result = (float)((ofVec4f const *)arg1)->squareDistance((ofVec4f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_getInterpolated(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float arg3 ; ofVec4f result; SWIG_check_num_args("ofVec4f::getInterpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getInterpolated",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::getInterpolated",2,"ofVec4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::getInterpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getInterpolated",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getInterpolated",2,SWIGTYPE_p_ofVec4f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec4f const *)arg1)->getInterpolated((ofVec4f const &)*arg2,arg3); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_interpolate(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float arg3 ; ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::interpolate",1,"ofVec4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::interpolate",2,"ofVec4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::interpolate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_interpolate",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_interpolate",2,SWIGTYPE_p_ofVec4f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofVec4f *) &(arg1)->interpolate((ofVec4f const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec4f_getMiddle(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::getMiddle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getMiddle",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::getMiddle",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getMiddle",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getMiddle",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofVec4f const *)arg1)->getMiddle((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_middle(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::middle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::middle",1,"ofVec4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::middle",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_middle",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_middle",2,SWIGTYPE_p_ofVec4f); }  result = (ofVec4f *) &(arg1)->middle((ofVec4f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec4f_average(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ;
  ofVec4f *arg2 = (ofVec4f *) 0 ; int arg3 ; ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::average",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::average",1,"ofVec4f *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVec4f::average",2,"ofVec4f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::average",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_average",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_average",2,SWIGTYPE_p_ofVec4f); }  arg3 = (int)lua_tonumber(L, 3);
  result = (ofVec4f *) &(arg1)->average((ofVec4f const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec4f_getNormalized(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getNormalized",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getNormalized",1,SWIGTYPE_p_ofVec4f); }  result = ((ofVec4f const *)arg1)->getNormalized(); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_normalize(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::normalize",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::normalize",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_normalize",1,SWIGTYPE_p_ofVec4f); }  result = (ofVec4f *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVec4f_getLimited(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::getLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getLimited",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::getLimited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_getLimited",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->getLimited(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_limit(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::limit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::limit",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::limit",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_limit",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofVec4f *) &(arg1)->limit(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_length(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::length",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::length",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_length",1,SWIGTYPE_p_ofVec4f); }  result = (float)((ofVec4f const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_lengthSquared(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::lengthSquared",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_lengthSquared",1,SWIGTYPE_p_ofVec4f); }  result = (float)((ofVec4f const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_dot(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ; float result;
  SWIG_check_num_args("ofVec4f::dot",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::dot",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::dot",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("ofVec4f_dot",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("ofVec4f_dot",2,SWIGTYPE_p_ofVec4f); }
   result = (float)((ofVec4f const *)arg1)->dot((ofVec4f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_rescaled(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::rescaled",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::rescaled",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::rescaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_rescaled",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->rescaled(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_rescale(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::rescale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::rescale",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::rescale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_rescale",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec4f *) &(arg1)->rescale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_normalized(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::normalized",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_normalized",1,SWIGTYPE_p_ofVec4f); }  result = ((ofVec4f const *)arg1)->normalized(); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_limited(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::limited",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::limited",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::limited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_limited",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->limited(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_distanceSquared(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec4f::distanceSquared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::distanceSquared",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::distanceSquared",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_distanceSquared",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_distanceSquared",2,SWIGTYPE_p_ofVec4f); } 
  result = (float)((ofVec4f const *)arg1)->distanceSquared((ofVec4f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_interpolated(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float arg3 ; ofVec4f result; SWIG_check_num_args("ofVec4f::interpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::interpolated",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::interpolated",2,"ofVec4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::interpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_interpolated",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_interpolated",2,SWIGTYPE_p_ofVec4f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec4f const *)arg1)->interpolated((ofVec4f const &)*arg2,arg3); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_middled(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::middled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::middled",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::middled",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_middled",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f_middled",2,SWIGTYPE_p_ofVec4f); }  result = ((ofVec4f const *)arg1)->middled((ofVec4f const &)*arg2);
  { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_zero(lua_State* L) { int SWIG_arg = 0; ofVec4f result; SWIG_check_num_args("ofVec4f::zero",0,0)
  result = ofVec4f::zero(); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f_one(lua_State* L) { int SWIG_arg = 0; ofVec4f result; SWIG_check_num_args("ofVec4f::one",0,0)
  result = ofVec4f::one(); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVec4f___tostring(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; char *result = 0 ;
  SWIG_check_num_args("ofVec4f::__str__",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::__str__",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofVec4f___tostring",1,SWIGTYPE_p_ofVec4f); }  result = (char *)ofVec4f___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofVec4f(void *obj) {
ofVec4f *arg1 = (ofVec4f *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofVec4f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofVec4f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofVec4f_attributes[] = {
    { "x", _wrap_ofVec4f_x_get, _wrap_ofVec4f_x_set },
    { "y", _wrap_ofVec4f_y_get, _wrap_ofVec4f_y_set },
    { "z", _wrap_ofVec4f_z_get, _wrap_ofVec4f_z_set },
    { "w", _wrap_ofVec4f_w_get, _wrap_ofVec4f_w_set },
    {0,0,0}
};
static swig_lua_method swig_ofVec4f_methods[]= {
    { "getPtr", _wrap_ofVec4f_getPtr},
    { "set", _wrap_ofVec4f_set},
    { "__eq", _wrap_ofVec4f___eq},
    { "match", _wrap_ofVec4f_match},
    { "__add", _wrap_ofVec4f___add},
    { "__sub", _wrap_ofVec4f___sub},
    { "__unm", _wrap_ofVec4f___unm},
    { "__mul", _wrap_ofVec4f___mul},
    { "__div", _wrap_ofVec4f___div},
    { "getScaled", _wrap_ofVec4f_getScaled},
    { "scale", _wrap_ofVec4f_scale},
    { "distance", _wrap_ofVec4f_distance},
    { "squareDistance", _wrap_ofVec4f_squareDistance},
    { "getInterpolated", _wrap_ofVec4f_getInterpolated},
    { "interpolate", _wrap_ofVec4f_interpolate},
    { "getMiddle", _wrap_ofVec4f_getMiddle},
    { "middle", _wrap_ofVec4f_middle},
    { "average", _wrap_ofVec4f_average},
    { "getNormalized", _wrap_ofVec4f_getNormalized},
    { "normalize", _wrap_ofVec4f_normalize},
    { "getLimited", _wrap_ofVec4f_getLimited},
    { "limit", _wrap_ofVec4f_limit},
    { "length", _wrap_ofVec4f_length},
    { "lengthSquared", _wrap_ofVec4f_lengthSquared},
    { "dot", _wrap_ofVec4f_dot},
    { "rescaled", _wrap_ofVec4f_rescaled},
    { "rescale", _wrap_ofVec4f_rescale},
    { "normalized", _wrap_ofVec4f_normalized},
    { "limited", _wrap_ofVec4f_limited},
    { "distanceSquared", _wrap_ofVec4f_distanceSquared},
    { "interpolated", _wrap_ofVec4f_interpolated},
    { "middled", _wrap_ofVec4f_middled},
    { "__tostring", _wrap_ofVec4f___tostring},
    {0,0}
};
static swig_lua_method swig_ofVec4f_meta[] = {
    { "__eq", _wrap_ofVec4f___eq},
    { "__add", _wrap_ofVec4f___add},
    { "__sub", _wrap_ofVec4f___sub},
    { "__unm", _wrap_ofVec4f___unm},
    { "__mul", _wrap_ofVec4f___mul},
    { "__div", _wrap_ofVec4f___div},
    { "__tostring", _wrap_ofVec4f___tostring},
    {0,0}
};

static swig_lua_attribute swig_ofVec4f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofVec4f_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("DIM", ofVec4f::DIM)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofVec4f_Sf_SwigStatic_methods[]= {
    { "zero", _wrap_ofVec4f_zero},
    { "one", _wrap_ofVec4f_one},
    {0,0}
};
static swig_lua_class* swig_ofVec4f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofVec4f_Sf_SwigStatic = {
    "ofVec4f",
    swig_ofVec4f_Sf_SwigStatic_methods,
    swig_ofVec4f_Sf_SwigStatic_attributes,
    swig_ofVec4f_Sf_SwigStatic_constants,
    swig_ofVec4f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofVec4f_bases[] = {0};
static const char *swig_ofVec4f_base_names[] = {0};
static swig_lua_class _wrap_class_ofVec4f = { "ofVec4f", "ofVec4f", &SWIGTYPE_p_ofVec4f,_proxy__wrap_new_ofVec4f, swig_delete_ofVec4f, swig_ofVec4f_methods, swig_ofVec4f_attributes, &swig_ofVec4f_Sf_SwigStatic, swig_ofVec4f_meta, swig_ofVec4f_bases, swig_ofVec4f_base_names };

static int _wrap_ofRandom__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result;
  SWIG_check_num_args("ofRandom",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRandom",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (float)ofRandom(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRandom__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofRandom",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRandom",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRandom",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofRandom(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRandom(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofRandom__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofRandom__SWIG_1(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofRandom'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRandom(float)\n" "    ofRandom(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofRandomf(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofRandomf",0,0)
  result = (float)ofRandomf(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofRandomuf(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofRandomuf",0,0)
  result = (float)ofRandomuf(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofSeedRandom__SWIG_0(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSeedRandom",0,0) ofSeedRandom();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSeedRandom__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSeedRandom",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSeedRandom",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSeedRandom(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSeedRandom(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofSeedRandom__SWIG_0(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_ofSeedRandom__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSeedRandom'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSeedRandom()\n" "    ofSeedRandom(int)\n"); lua_error(L);return 0; }
static int _wrap_ofNormalize(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofNormalize",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNormalize",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNormalize",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNormalize",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofNormalize(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMap__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; bool arg6 ; float result; SWIG_check_num_args("ofMap",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMap",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMap",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMap",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMap",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMap",5,"float"); if(!lua_isboolean(L,6)) SWIG_fail_arg("ofMap",6,"bool");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  result = (float)ofMap(arg1,arg2,arg3,arg4,arg5,arg6); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMap__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float result; SWIG_check_num_args("ofMap",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMap",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMap",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMap",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMap",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMap",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); result = (float)ofMap(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMap(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofMap__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { return _wrap_ofMap__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMap'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMap(float,float,float,float,float,bool)\n" "    ofMap(float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofClamp(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofClamp",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClamp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofClamp",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofClamp",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofClamp(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofInRange(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; bool result;
  SWIG_check_num_args("ofInRange",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofInRange",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofInRange",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofInRange",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ofInRange(arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLerp(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofLerp",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLerp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLerp",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLerp",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofLerp(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDist__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float result; SWIG_check_num_args("ofDist",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDist",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDist",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDist",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDist",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); result = (float)ofDist(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDist__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float result; SWIG_check_num_args("ofDist",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDist",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDist",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDist",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDist",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDist",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDist",6,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  result = (float)ofDist(arg1,arg2,arg3,arg4,arg5,arg6); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDist(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 4) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofDist__SWIG_0(L);}  }  }  }  }  if (argc == 6) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_ofDist__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDist'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDist(float,float,float,float)\n" "    ofDist(float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofDistSquared__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float result; SWIG_check_num_args("ofDistSquared",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDistSquared",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDistSquared",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDistSquared",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDistSquared",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (float)ofDistSquared(arg1,arg2,arg3,arg4); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDistSquared__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float result; SWIG_check_num_args("ofDistSquared",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDistSquared",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDistSquared",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDistSquared",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDistSquared",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDistSquared",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDistSquared",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  result = (float)ofDistSquared(arg1,arg2,arg3,arg4,arg5,arg6); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDistSquared(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_ofDistSquared__SWIG_0(L);}  }  }  }  }  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_ofDistSquared__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofDistSquared'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDistSquared(float,float,float,float)\n" "    ofDistSquared(float,float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_ofRadToDeg(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result; SWIG_check_num_args("ofRadToDeg",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRadToDeg",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (float)ofRadToDeg(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDegToRad(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result; SWIG_check_num_args("ofDegToRad",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDegToRad",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (float)ofDegToRad(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofLerpDegrees(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofLerpDegrees",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLerpDegrees",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLerpDegrees",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLerpDegrees",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofLerpDegrees(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofLerpRadians(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofLerpRadians",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLerpRadians",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLerpRadians",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLerpRadians",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofLerpRadians(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofAngleDifferenceDegrees(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofAngleDifferenceDegrees",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofAngleDifferenceDegrees",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofAngleDifferenceDegrees",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofAngleDifferenceDegrees(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofAngleDifferenceRadians(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofAngleDifferenceRadians",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofAngleDifferenceRadians",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofAngleDifferenceRadians",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofAngleDifferenceRadians(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofWrap(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofWrap",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrap",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrap",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofWrap",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofWrap(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofWrapRadians__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofWrapRadians",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapRadians",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrapRadians",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofWrapRadians",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofWrapRadians(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofWrapRadians__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofWrapRadians",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapRadians",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrapRadians",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofWrapRadians(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofWrapRadians__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result;
  SWIG_check_num_args("ofWrapRadians",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapRadians",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (float)ofWrapRadians(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofWrapRadians(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofWrapRadians__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofWrapRadians__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofWrapRadians__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofWrapRadians'\n" "  Possible C/C++ prototypes are:\n"
  "    ofWrapRadians(float,float,float)\n" "    ofWrapRadians(float,float)\n" "    ofWrapRadians(float)\n");
  lua_error(L);return 0; }
static int _wrap_ofWrapDegrees__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofWrapDegrees",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapDegrees",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrapDegrees",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofWrapDegrees",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofWrapDegrees(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofWrapDegrees__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofWrapDegrees",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapDegrees",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrapDegrees",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofWrapDegrees(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofWrapDegrees__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result;
  SWIG_check_num_args("ofWrapDegrees",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapDegrees",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (float)ofWrapDegrees(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofWrapDegrees(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofWrapDegrees__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofWrapDegrees__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofWrapDegrees__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofWrapDegrees'\n" "  Possible C/C++ prototypes are:\n"
  "    ofWrapDegrees(float,float,float)\n" "    ofWrapDegrees(float,float)\n" "    ofWrapDegrees(float)\n");
  lua_error(L);return 0; }
static int _wrap_ofNoise__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result; SWIG_check_num_args("ofNoise",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNoise",1,"float"); arg1 = (float)lua_tonumber(L, 1); result = (float)ofNoise(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNoise__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofNoise",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNoise",2,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  result = (float)ofNoise(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNoise__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = 0 ; float result;
  SWIG_check_num_args("ofNoise",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofNoise",1,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("ofNoise",1,SWIGTYPE_p_ofVec2f); } 
  result = (float)ofNoise((ofVec2f const &)*arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNoise__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofNoise",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNoise",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNoise",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofNoise(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNoise__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; float result;
  SWIG_check_num_args("ofNoise",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofNoise",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofNoise",1,SWIGTYPE_p_ofVec3f); } 
  result = (float)ofNoise((ofVec3f const &)*arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNoise__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float result; SWIG_check_num_args("ofNoise",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNoise",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNoise",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNoise",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); result = (float)ofNoise(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNoise__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; float result;
  SWIG_check_num_args("ofNoise",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofNoise",1,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("ofNoise",1,SWIGTYPE_p_ofVec4f); } 
  result = (float)ofNoise((ofVec4f const &)*arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofNoise(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofNoise__SWIG_2(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofNoise__SWIG_4(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofNoise__SWIG_6(L);}  }  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { return _wrap_ofNoise__SWIG_0(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofNoise__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_ofNoise__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofNoise__SWIG_5(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofNoise'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNoise(float)\n" "    ofNoise(float,float)\n" "    ofNoise(ofVec2f const &)\n" "    ofNoise(float,float,float)\n"
  "    ofNoise(ofVec3f const &)\n" "    ofNoise(float,float,float,float)\n" "    ofNoise(ofVec4f const &)\n");
  lua_error(L);return 0; }
static int _wrap_ofSignedNoise__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result;
  SWIG_check_num_args("ofSignedNoise",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSignedNoise",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (float)ofSignedNoise(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSignedNoise__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofSignedNoise",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSignedNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSignedNoise",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofSignedNoise(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSignedNoise__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = 0 ; float result;
  SWIG_check_num_args("ofSignedNoise",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSignedNoise",1,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofSignedNoise",1,SWIGTYPE_p_ofVec2f); }  result = (float)ofSignedNoise((ofVec2f const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSignedNoise__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofSignedNoise",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSignedNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSignedNoise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSignedNoise",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofSignedNoise(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSignedNoise__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; float result;
  SWIG_check_num_args("ofSignedNoise",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSignedNoise",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofSignedNoise",1,SWIGTYPE_p_ofVec3f); }  result = (float)ofSignedNoise((ofVec3f const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSignedNoise__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float result; SWIG_check_num_args("ofSignedNoise",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSignedNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSignedNoise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSignedNoise",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSignedNoise",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (float)ofSignedNoise(arg1,arg2,arg3,arg4); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSignedNoise__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; float result;
  SWIG_check_num_args("ofSignedNoise",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSignedNoise",1,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("ofSignedNoise",1,SWIGTYPE_p_ofVec4f); }  result = (float)ofSignedNoise((ofVec4f const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSignedNoise(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofSignedNoise__SWIG_2(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofSignedNoise__SWIG_4(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_ofSignedNoise__SWIG_6(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_ofSignedNoise__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_ofSignedNoise__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofSignedNoise__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofSignedNoise__SWIG_5(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSignedNoise'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSignedNoise(float)\n" "    ofSignedNoise(float,float)\n" "    ofSignedNoise(ofVec2f const &)\n"
  "    ofSignedNoise(float,float,float)\n" "    ofSignedNoise(ofVec3f const &)\n" "    ofSignedNoise(float,float,float,float)\n"
  "    ofSignedNoise(ofVec4f const &)\n"); lua_error(L);return 0; }
static int _wrap_ofInsidePoly__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  std::vector< ofPoint > *arg3 = 0 ; bool result; SWIG_check_num_args("ofInsidePoly",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofInsidePoly",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofInsidePoly",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofInsidePoly",3,"std::vector< ofPoint > const &"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("ofInsidePoly",3,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  result = (bool)ofInsidePoly(arg1,arg2,(std::vector< ofVec3f > const &)*arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofInsidePoly__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; std::vector< ofPoint > *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofInsidePoly",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofInsidePoly",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofInsidePoly",2,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofInsidePoly",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("ofInsidePoly",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  result = (bool)ofInsidePoly((ofVec3f const &)*arg1,(std::vector< ofVec3f > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofInsidePoly(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofInsidePoly__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofInsidePoly__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofInsidePoly'\n" "  Possible C/C++ prototypes are:\n"
  "    ofInsidePoly(float,float,std::vector< ofPoint > const &)\n"
  "    ofInsidePoly(ofPoint const &,std::vector< ofPoint > const &)\n"); lua_error(L);return 0; }
static int _wrap_ofLineSegmentIntersection(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; ofPoint *arg5 = 0 ; bool result; SWIG_check_num_args("ofLineSegmentIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofLineSegmentIntersection",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLineSegmentIntersection",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofLineSegmentIntersection",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofLineSegmentIntersection",4,"ofPoint const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofLineSegmentIntersection",5,"ofPoint &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofLineSegmentIntersection",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofLineSegmentIntersection",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofLineSegmentIntersection",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofLineSegmentIntersection",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofLineSegmentIntersection",5,SWIGTYPE_p_ofVec3f); } 
  result = (bool)ofLineSegmentIntersection((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBezierPoint(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ; float arg5 ; ofPoint result; SWIG_check_num_args("ofBezierPoint",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBezierPoint",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBezierPoint",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBezierPoint",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofBezierPoint",4,"ofPoint const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezierPoint",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierPoint",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierPoint",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierPoint",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierPoint",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  result = ofBezierPoint((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,arg5); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCurvePoint(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ; float arg5 ; ofPoint result; SWIG_check_num_args("ofCurvePoint",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCurvePoint",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCurvePoint",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCurvePoint",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofCurvePoint",4,"ofPoint const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCurvePoint",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofCurvePoint",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCurvePoint",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofCurvePoint",3,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCurvePoint",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  result = ofCurvePoint((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,arg5); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBezierTangent(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ; float arg5 ; ofPoint result; SWIG_check_num_args("ofBezierTangent",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBezierTangent",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBezierTangent",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBezierTangent",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofBezierTangent",4,"ofPoint const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezierTangent",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierTangent",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierTangent",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierTangent",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofBezierTangent",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  result = ofBezierTangent((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,arg5); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCurveTangent(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ;
  ofPoint *arg4 = 0 ; float arg5 ; ofPoint result; SWIG_check_num_args("ofCurveTangent",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCurveTangent",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCurveTangent",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCurveTangent",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofCurveTangent",4,"ofPoint const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCurveTangent",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCurveTangent",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCurveTangent",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCurveTangent",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofCurveTangent",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  result = ofCurveTangent((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,arg5); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofNextPow2(lua_State* L) { int SWIG_arg = 0; int arg1 ; int result; SWIG_check_num_args("ofNextPow2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNextPow2",1,"int"); arg1 = (int)lua_tonumber(L, 1); result = (int)ofNextPow2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSign(lua_State* L) { int SWIG_arg = 0; float arg1 ; int result; SWIG_check_num_args("ofSign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSign",1,"float"); arg1 = (float)lua_tonumber(L, 1); result = (int)ofSign(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_ofMatrixStack(lua_State* L) { int SWIG_arg = 0; ofAppBaseWindow *arg1 = (ofAppBaseWindow *) 0 ;
  ofMatrixStack *result = 0 ; SWIG_check_num_args("ofMatrixStack::ofMatrixStack",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::ofMatrixStack",1,"ofAppBaseWindow const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofAppBaseWindow,0))){
    SWIG_fail_ptr("new_ofMatrixStack",1,SWIGTYPE_p_ofAppBaseWindow); } 
  result = (ofMatrixStack *)new ofMatrixStack((ofAppBaseWindow const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrixStack,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_setRenderSurface__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; ofFbo *arg2 = 0 ; SWIG_check_num_args("ofMatrixStack::setRenderSurface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::setRenderSurface",1,"ofMatrixStack *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrixStack::setRenderSurface",2,"ofFbo const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_setRenderSurface",1,SWIGTYPE_p_ofMatrixStack); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofMatrixStack_setRenderSurface",2,SWIGTYPE_p_ofFbo); }  (arg1)->setRenderSurface((ofFbo const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_setRenderSurface__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; ofAppBaseWindow *arg2 = 0 ;
  SWIG_check_num_args("ofMatrixStack::setRenderSurface",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::setRenderSurface",1,"ofMatrixStack *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrixStack::setRenderSurface",2,"ofAppBaseWindow const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_setRenderSurface",1,SWIGTYPE_p_ofMatrixStack); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofAppBaseWindow,0))){
    SWIG_fail_ptr("ofMatrixStack_setRenderSurface",2,SWIGTYPE_p_ofAppBaseWindow); } 
  (arg1)->setRenderSurface((ofAppBaseWindow const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_setRenderSurface(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrixStack, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { return _wrap_ofMatrixStack_setRenderSurface__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrixStack, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofAppBaseWindow, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofMatrixStack_setRenderSurface__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrixStack_setRenderSurface'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrixStack::setRenderSurface(ofFbo const &)\n"
  "    ofMatrixStack::setRenderSurface(ofAppBaseWindow const &)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrixStack_setOrientation(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofOrientation arg2 ; bool arg3 ; SWIG_check_num_args("ofMatrixStack::setOrientation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::setOrientation",1,"ofMatrixStack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrixStack::setOrientation",2,"ofOrientation");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofMatrixStack::setOrientation",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_setOrientation",1,SWIGTYPE_p_ofMatrixStack); }  arg2 = (ofOrientation)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->setOrientation(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getOrientation(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofOrientation result; SWIG_check_num_args("ofMatrixStack::getOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getOrientation",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getOrientation",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofOrientation)((ofMatrixStack const *)arg1)->getOrientation();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_viewport(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; bool arg6 ; SWIG_check_num_args("ofMatrixStack::viewport",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::viewport",1,"ofMatrixStack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrixStack::viewport",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrixStack::viewport",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrixStack::viewport",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrixStack::viewport",5,"float");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofMatrixStack::viewport",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_viewport",1,SWIGTYPE_p_ofMatrixStack); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0); (arg1)->viewport(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_nativeViewport(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofRectangle arg2 ; ofRectangle *argp2 ; SWIG_check_num_args("ofMatrixStack::nativeViewport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::nativeViewport",1,"ofMatrixStack *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrixStack::nativeViewport",2,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_nativeViewport",1,SWIGTYPE_p_ofMatrixStack); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofMatrixStack_nativeViewport",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2; (arg1)->nativeViewport(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_getCurrentViewport(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofRectangle result; SWIG_check_num_args("ofMatrixStack::getCurrentViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getCurrentViewport",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getCurrentViewport",1,SWIGTYPE_p_ofMatrixStack); } 
  result = ((ofMatrixStack const *)arg1)->getCurrentViewport(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_getNativeViewport(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofRectangle result; SWIG_check_num_args("ofMatrixStack::getNativeViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getNativeViewport",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getNativeViewport",1,SWIGTYPE_p_ofMatrixStack); } 
  result = ((ofMatrixStack const *)arg1)->getNativeViewport(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_getFullSurfaceViewport(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; ofRectangle result;
  SWIG_check_num_args("ofMatrixStack::getFullSurfaceViewport",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getFullSurfaceViewport",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getFullSurfaceViewport",1,SWIGTYPE_p_ofMatrixStack); } 
  result = ((ofMatrixStack const *)arg1)->getFullSurfaceViewport(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_getProjectionMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrixStack::getProjectionMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getProjectionMatrix",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getProjectionMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getProjectionMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrixStack::getViewMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getViewMatrix",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getViewMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getViewMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getModelViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrixStack::getModelViewMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getModelViewMatrix",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getModelViewMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getModelViewMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getModelViewProjectionMatrix(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrixStack::getModelViewProjectionMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getModelViewProjectionMatrix",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getModelViewProjectionMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getModelViewProjectionMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getTextureMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrixStack::getTextureMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getTextureMatrix",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getTextureMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getTextureMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getCurrentMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrixStack::getCurrentMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getCurrentMatrix",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getCurrentMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getCurrentMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getProjectionMatrixNoOrientation(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrixStack::getProjectionMatrixNoOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getProjectionMatrixNoOrientation",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getProjectionMatrixNoOrientation",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getProjectionMatrixNoOrientation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getOrientationMatrix(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrixStack::getOrientationMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getOrientationMatrix",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getOrientationMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getOrientationMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getOrientationMatrixInverse(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrixStack::getOrientationMatrixInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getOrientationMatrixInverse",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getOrientationMatrixInverse",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrix4x4 *) &((ofMatrixStack const *)arg1)->getOrientationMatrixInverse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getCurrentMatrixMode(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; ofMatrixMode result;
  SWIG_check_num_args("ofMatrixStack::getCurrentMatrixMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getCurrentMatrixMode",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getCurrentMatrixMode",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofMatrixMode)((ofMatrixStack const *)arg1)->getCurrentMatrixMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_getHandedness(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofHandednessType result; SWIG_check_num_args("ofMatrixStack::getHandedness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::getHandedness",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_getHandedness",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (ofHandednessType)((ofMatrixStack const *)arg1)->getHandedness();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_isVFlipped(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  bool result; SWIG_check_num_args("ofMatrixStack::isVFlipped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::isVFlipped",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_isVFlipped",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (bool)((ofMatrixStack const *)arg1)->isVFlipped(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_customMatrixNeedsFlip(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; bool result; SWIG_check_num_args("ofMatrixStack::customMatrixNeedsFlip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::customMatrixNeedsFlip",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_customMatrixNeedsFlip",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (bool)((ofMatrixStack const *)arg1)->customMatrixNeedsFlip(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_pushView(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  SWIG_check_num_args("ofMatrixStack::pushView",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::pushView",1,"ofMatrixStack *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_pushView",1,SWIGTYPE_p_ofMatrixStack); }  (arg1)->pushView(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_popView(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  SWIG_check_num_args("ofMatrixStack::popView",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::popView",1,"ofMatrixStack *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_popView",1,SWIGTYPE_p_ofMatrixStack); }  (arg1)->popView(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_pushMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  SWIG_check_num_args("ofMatrixStack::pushMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::pushMatrix",1,"ofMatrixStack *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_pushMatrix",1,SWIGTYPE_p_ofMatrixStack); }  (arg1)->pushMatrix(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_popMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  SWIG_check_num_args("ofMatrixStack::popMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::popMatrix",1,"ofMatrixStack *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_popMatrix",1,SWIGTYPE_p_ofMatrixStack); }  (arg1)->popMatrix(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrixStack::translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::translate",1,"ofMatrixStack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrixStack::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrixStack::translate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrixStack::translate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_translate",1,SWIGTYPE_p_ofMatrixStack); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->translate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofMatrixStack::translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::translate",1,"ofMatrixStack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrixStack::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrixStack::translate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_translate",1,SWIGTYPE_p_ofMatrixStack); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->translate(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_translate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrixStack, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofMatrixStack_translate__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrixStack, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrixStack_translate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrixStack_translate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrixStack::translate(float,float,float)\n"
  "    ofMatrixStack::translate(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrixStack_scale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrixStack::scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::scale",1,"ofMatrixStack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrixStack::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrixStack::scale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrixStack::scale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_scale",1,SWIGTYPE_p_ofMatrixStack); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->scale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_scale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofMatrixStack::scale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::scale",1,"ofMatrixStack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrixStack::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrixStack::scale",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_scale",1,SWIGTYPE_p_ofMatrixStack); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->scale(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMatrixStack_scale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrixStack, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofMatrixStack_scale__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrixStack, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ofMatrixStack_scale__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofMatrixStack_scale'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrixStack::scale(float,float,float)\n"
  "    ofMatrixStack::scale(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofMatrixStack_rotate(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrixStack::rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::rotate",1,"ofMatrixStack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrixStack::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrixStack::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrixStack::rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrixStack::rotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_rotate",1,SWIGTYPE_p_ofMatrixStack); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_matrixMode(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofMatrixMode arg2 ; SWIG_check_num_args("ofMatrixStack::matrixMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::matrixMode",1,"ofMatrixStack *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrixStack::matrixMode",2,"ofMatrixMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_matrixMode",1,SWIGTYPE_p_ofMatrixStack); }  arg2 = (ofMatrixMode)(int)lua_tonumber(L, 2);
  (arg1)->matrixMode(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_loadIdentityMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  SWIG_check_num_args("ofMatrixStack::loadIdentityMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::loadIdentityMatrix",1,"ofMatrixStack *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_loadIdentityMatrix",1,SWIGTYPE_p_ofMatrixStack); }  (arg1)->loadIdentityMatrix();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_loadMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  float *arg2 = (float *) 0 ; SWIG_check_num_args("ofMatrixStack::loadMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::loadMatrix",1,"ofMatrixStack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMatrixStack::loadMatrix",2,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_loadMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofMatrixStack_loadMatrix",2,SWIGTYPE_p_float); }  (arg1)->loadMatrix((float const *)arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_multMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  float *arg2 = (float *) 0 ; SWIG_check_num_args("ofMatrixStack::multMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::multMatrix",1,"ofMatrixStack *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMatrixStack::multMatrix",2,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_multMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ofMatrixStack_multMatrix",2,SWIGTYPE_p_float); }  (arg1)->multMatrix((float const *)arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_loadViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrixStack::loadViewMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::loadViewMatrix",1,"ofMatrixStack *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrixStack::loadViewMatrix",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_loadViewMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrixStack_loadViewMatrix",2,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->loadViewMatrix((ofMatrix4x4 const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_multViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrixStack::multViewMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::multViewMatrix",1,"ofMatrixStack *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrixStack::multViewMatrix",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_multViewMatrix",1,SWIGTYPE_p_ofMatrixStack); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("ofMatrixStack_multViewMatrix",2,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->multViewMatrix((ofMatrix4x4 const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_clearStacks(lua_State* L) { int SWIG_arg = 0; ofMatrixStack *arg1 = (ofMatrixStack *) 0 ;
  SWIG_check_num_args("ofMatrixStack::clearStacks",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::clearStacks",1,"ofMatrixStack *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_clearStacks",1,SWIGTYPE_p_ofMatrixStack); }  (arg1)->clearStacks(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMatrixStack_doesHardwareOrientation(lua_State* L) { int SWIG_arg = 0;
  ofMatrixStack *arg1 = (ofMatrixStack *) 0 ; bool result; SWIG_check_num_args("ofMatrixStack::doesHardwareOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrixStack::doesHardwareOrientation",1,"ofMatrixStack const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrixStack,0))){
    SWIG_fail_ptr("ofMatrixStack_doesHardwareOrientation",1,SWIGTYPE_p_ofMatrixStack); } 
  result = (bool)((ofMatrixStack const *)arg1)->doesHardwareOrientation(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofMatrixStack(void *obj) {
ofMatrixStack *arg1 = (ofMatrixStack *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofMatrixStack(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofMatrixStack);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofMatrixStack_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMatrixStack_methods[]= {
    { "setRenderSurface", _wrap_ofMatrixStack_setRenderSurface},
    { "setOrientation", _wrap_ofMatrixStack_setOrientation},
    { "getOrientation", _wrap_ofMatrixStack_getOrientation},
    { "viewport", _wrap_ofMatrixStack_viewport},
    { "nativeViewport", _wrap_ofMatrixStack_nativeViewport},
    { "getCurrentViewport", _wrap_ofMatrixStack_getCurrentViewport},
    { "getNativeViewport", _wrap_ofMatrixStack_getNativeViewport},
    { "getFullSurfaceViewport", _wrap_ofMatrixStack_getFullSurfaceViewport},
    { "getProjectionMatrix", _wrap_ofMatrixStack_getProjectionMatrix},
    { "getViewMatrix", _wrap_ofMatrixStack_getViewMatrix},
    { "getModelViewMatrix", _wrap_ofMatrixStack_getModelViewMatrix},
    { "getModelViewProjectionMatrix", _wrap_ofMatrixStack_getModelViewProjectionMatrix},
    { "getTextureMatrix", _wrap_ofMatrixStack_getTextureMatrix},
    { "getCurrentMatrix", _wrap_ofMatrixStack_getCurrentMatrix},
    { "getProjectionMatrixNoOrientation", _wrap_ofMatrixStack_getProjectionMatrixNoOrientation},
    { "getOrientationMatrix", _wrap_ofMatrixStack_getOrientationMatrix},
    { "getOrientationMatrixInverse", _wrap_ofMatrixStack_getOrientationMatrixInverse},
    { "getCurrentMatrixMode", _wrap_ofMatrixStack_getCurrentMatrixMode},
    { "getHandedness", _wrap_ofMatrixStack_getHandedness},
    { "isVFlipped", _wrap_ofMatrixStack_isVFlipped},
    { "customMatrixNeedsFlip", _wrap_ofMatrixStack_customMatrixNeedsFlip},
    { "pushView", _wrap_ofMatrixStack_pushView},
    { "popView", _wrap_ofMatrixStack_popView},
    { "pushMatrix", _wrap_ofMatrixStack_pushMatrix},
    { "popMatrix", _wrap_ofMatrixStack_popMatrix},
    { "translate", _wrap_ofMatrixStack_translate},
    { "scale", _wrap_ofMatrixStack_scale},
    { "rotate", _wrap_ofMatrixStack_rotate},
    { "matrixMode", _wrap_ofMatrixStack_matrixMode},
    { "loadIdentityMatrix", _wrap_ofMatrixStack_loadIdentityMatrix},
    { "loadMatrix", _wrap_ofMatrixStack_loadMatrix},
    { "multMatrix", _wrap_ofMatrixStack_multMatrix},
    { "loadViewMatrix", _wrap_ofMatrixStack_loadViewMatrix},
    { "multViewMatrix", _wrap_ofMatrixStack_multViewMatrix},
    { "clearStacks", _wrap_ofMatrixStack_clearStacks},
    { "doesHardwareOrientation", _wrap_ofMatrixStack_doesHardwareOrientation},
    {0,0}
};
static swig_lua_method swig_ofMatrixStack_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofMatrixStack_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofMatrixStack_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofMatrixStack_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofMatrixStack_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofMatrixStack_Sf_SwigStatic = {
    "ofMatrixStack",
    swig_ofMatrixStack_Sf_SwigStatic_methods,
    swig_ofMatrixStack_Sf_SwigStatic_attributes,
    swig_ofMatrixStack_Sf_SwigStatic_constants,
    swig_ofMatrixStack_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofMatrixStack_bases[] = {0};
static const char *swig_ofMatrixStack_base_names[] = {0};
static swig_lua_class _wrap_class_ofMatrixStack = { "ofMatrixStack", "ofMatrixStack", &SWIGTYPE_p_ofMatrixStack,_proxy__wrap_new_ofMatrixStack, swig_delete_ofMatrixStack, swig_ofMatrixStack_methods, swig_ofMatrixStack_attributes, &swig_ofMatrixStack_Sf_SwigStatic, swig_ofMatrixStack_meta, swig_ofMatrixStack_bases, swig_ofMatrixStack_base_names };

static int _wrap_new_ofVideoGrabber(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *result = 0 ;
  SWIG_check_num_args("ofVideoGrabber::ofVideoGrabber",0,0) result = (ofVideoGrabber *)new ofVideoGrabber();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVideoGrabber,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_listDevices(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SwigValueWrapper< std::vector< ofVideoDevice > > result; SWIG_check_num_args("ofVideoGrabber::listDevices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::listDevices",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_listDevices",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = ((ofVideoGrabber const *)arg1)->listDevices(); {
    std::vector< ofVideoDevice > * resultptr = new std::vector< ofVideoDevice >((const std::vector< ofVideoDevice > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVideoDevice_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_isFrameNew(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  bool result; SWIG_check_num_args("ofVideoGrabber::isFrameNew",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::isFrameNew",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_isFrameNew",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (bool)((ofVideoGrabber const *)arg1)->isFrameNew(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_update(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SWIG_check_num_args("ofVideoGrabber::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::update",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_update",1,SWIGTYPE_p_ofVideoGrabber); }  (arg1)->update(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_close(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SWIG_check_num_args("ofVideoGrabber::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::close",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_close",1,SWIGTYPE_p_ofVideoGrabber); }  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ; int arg3 ; bool result; SWIG_check_num_args("ofVideoGrabber::setup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setup",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::setup",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoGrabber::setup",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setup",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->setup(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ; int arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofVideoGrabber::setup",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setup",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::setup",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoGrabber::setup",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofVideoGrabber::setup",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setup",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->setup(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_setup(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVideoGrabber_setup__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofVideoGrabber_setup__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_setup'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::setup(int,int)\n" "    ofVideoGrabber::setup(int,int,bool)\n");
  lua_error(L);return 0; }
static int _wrap_ofVideoGrabber_initGrabber__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; int arg2 ; int arg3 ; bool result;
  SWIG_check_num_args("ofVideoGrabber::initGrabber",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::initGrabber",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::initGrabber",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoGrabber::initGrabber",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_initGrabber",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->initGrabber(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_initGrabber__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; int arg2 ; int arg3 ; bool arg4 ; bool result;
  SWIG_check_num_args("ofVideoGrabber::initGrabber",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::initGrabber",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::initGrabber",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoGrabber::initGrabber",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofVideoGrabber::initGrabber",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_initGrabber",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->initGrabber(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_initGrabber(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofVideoGrabber_initGrabber__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_ofVideoGrabber_initGrabber__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_initGrabber'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::initGrabber(int,int)\n"
  "    ofVideoGrabber::initGrabber(int,int,bool)\n"); lua_error(L);return 0; }
static int _wrap_ofVideoGrabber_setPixelFormat(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  ofPixelFormat arg2 ; bool result; SWIG_check_num_args("ofVideoGrabber::setPixelFormat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setPixelFormat",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::setPixelFormat",2,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setPixelFormat",1,SWIGTYPE_p_ofVideoGrabber); } 
  arg2 = (ofPixelFormat)(int)lua_tonumber(L, 2); result = (bool)(arg1)->setPixelFormat(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getPixelFormat(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  ofPixelFormat result; SWIG_check_num_args("ofVideoGrabber::getPixelFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getPixelFormat",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getPixelFormat",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (ofPixelFormat)((ofVideoGrabber const *)arg1)->getPixelFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_videoSettings(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SWIG_check_num_args("ofVideoGrabber::videoSettings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::videoSettings",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_videoSettings",1,SWIGTYPE_p_ofVideoGrabber); }  (arg1)->videoSettings(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; ofPixels *result = 0 ; SWIG_check_num_args("ofVideoGrabber::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getPixels",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getPixels",1,SWIGTYPE_p_ofVideoGrabber); }  result = (ofPixels *) &(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; ofPixels *result = 0 ; SWIG_check_num_args("ofVideoGrabber::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getPixels",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getPixels",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (ofPixels *) &((ofVideoGrabber const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_getPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::getPixels()\n" "    ofVideoGrabber::getPixels() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVideoGrabber_getPixelsRef__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; ofPixels *result = 0 ; SWIG_check_num_args("ofVideoGrabber::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getPixelsRef",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getPixelsRef",1,SWIGTYPE_p_ofVideoGrabber); }  result = (ofPixels *) &(arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getPixelsRef__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; ofPixels *result = 0 ; SWIG_check_num_args("ofVideoGrabber::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getPixelsRef",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getPixelsRef",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (ofPixels *) &((ofVideoGrabber const *)arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getPixelsRef(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getPixelsRef__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getPixelsRef__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_getPixelsRef'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::getPixelsRef()\n" "    ofVideoGrabber::getPixelsRef() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVideoGrabber_getTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; ofTexture *result = 0 ; SWIG_check_num_args("ofVideoGrabber::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getTexture",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getTexture",1,SWIGTYPE_p_ofVideoGrabber); }  result = (ofTexture *) &(arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_getTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; ofTexture *result = 0 ; SWIG_check_num_args("ofVideoGrabber::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getTexture",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getTexture",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (ofTexture *) &((ofVideoGrabber const *)arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_getTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getTexture__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_getTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::getTexture()\n" "    ofVideoGrabber::getTexture() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVideoGrabber_getTextureReference__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofVideoGrabber::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getTextureReference",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getTextureReference",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (ofTexture *) &(arg1)->getTextureReference(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getTextureReference__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofVideoGrabber::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getTextureReference",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getTextureReference",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (ofTexture *) &((ofVideoGrabber const *)arg1)->getTextureReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_getTextureReference(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getTextureReference__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getTextureReference__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_getTextureReference'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::getTextureReference()\n"
  "    ofVideoGrabber::getTextureReference() const\n"); lua_error(L);return 0; }
static int _wrap_ofVideoGrabber_getTexturePlanes__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; std::vector< ofTexture > *result = 0 ;
  SWIG_check_num_args("ofVideoGrabber::getTexturePlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getTexturePlanes",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getTexturePlanes",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (std::vector< ofTexture > *) &(arg1)->getTexturePlanes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofTexture_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getTexturePlanes__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; std::vector< ofTexture > *result = 0 ;
  SWIG_check_num_args("ofVideoGrabber::getTexturePlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getTexturePlanes",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getTexturePlanes",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (std::vector< ofTexture > *) &((ofVideoGrabber const *)arg1)->getTexturePlanes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofTexture_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getTexturePlanes(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getTexturePlanes__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getTexturePlanes__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_getTexturePlanes'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::getTexturePlanes()\n"
  "    ofVideoGrabber::getTexturePlanes() const\n"); lua_error(L);return 0; }
static int _wrap_ofVideoGrabber_setVerbose(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofVideoGrabber::setVerbose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setVerbose",1,"ofVideoGrabber *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofVideoGrabber::setVerbose",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setVerbose",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVerbose(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_setDeviceID(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  int arg2 ; SWIG_check_num_args("ofVideoGrabber::setDeviceID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setDeviceID",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::setDeviceID",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setDeviceID",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDeviceID(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_setDesiredFrameRate(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; int arg2 ; SWIG_check_num_args("ofVideoGrabber::setDesiredFrameRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setDesiredFrameRate",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::setDesiredFrameRate",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setDesiredFrameRate",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDesiredFrameRate(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_setUseTexture(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofVideoGrabber::setUseTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setUseTexture",1,"ofVideoGrabber *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofVideoGrabber::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setUseTexture",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseTexture(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_isUsingTexture(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  bool result; SWIG_check_num_args("ofVideoGrabber::isUsingTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::isUsingTexture",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_isUsingTexture",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (bool)((ofVideoGrabber const *)arg1)->isUsingTexture(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofVideoGrabber::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::draw",1,"ofVideoGrabber const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoGrabber::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVideoGrabber::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVideoGrabber::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_draw",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofVideoGrabber const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofVideoGrabber::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::draw",1,"ofVideoGrabber const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoGrabber::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_draw",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofVideoGrabber const *)arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_draw__SWIG_2_0(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofVideoGrabber const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_draw",1,SWIGTYPE_p_ofVideoGrabber); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVideoGrabber_draw",2,SWIGTYPE_p_ofVec3f); }  ((ofVideoGrabber const *)arg1)->draw((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_draw__SWIG_2_1(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofVideoGrabber const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_draw",1,SWIGTYPE_p_ofVideoGrabber); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofVideoGrabber_draw",2,SWIGTYPE_p_ofRectangle); } 
  ((ofVideoGrabber const *)arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_draw__SWIG_2_2(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofVideoGrabber const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_draw",1,SWIGTYPE_p_ofVideoGrabber); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVideoGrabber_draw",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ((ofVideoGrabber const *)arg1)->draw((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_draw(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_draw__SWIG_2_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_draw__SWIG_2_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofVideoGrabber_draw__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVideoGrabber_draw__SWIG_2_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofVideoGrabber_draw__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_draw'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::draw(float,float,float,float) const\n"
  "    ofVideoGrabber::draw(float,float) const\n" "    draw(ofPoint const &) const\n" "    draw(ofRectangle const &) const\n"
  "    draw(ofPoint const &,float,float) const\n"); lua_error(L);return 0; }
static int _wrap_ofVideoGrabber_bind(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SWIG_check_num_args("ofVideoGrabber::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::bind",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_bind",1,SWIGTYPE_p_ofVideoGrabber); }  ((ofVideoGrabber const *)arg1)->bind();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_unbind(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SWIG_check_num_args("ofVideoGrabber::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::unbind",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_unbind",1,SWIGTYPE_p_ofVideoGrabber); }  ((ofVideoGrabber const *)arg1)->unbind();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_setAnchorPercent(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofVideoGrabber::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setAnchorPercent",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoGrabber::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setAnchorPercent",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_setAnchorPoint(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofVideoGrabber::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setAnchorPoint",1,"ofVideoGrabber *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoGrabber::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoGrabber::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setAnchorPoint",1,SWIGTYPE_p_ofVideoGrabber); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoGrabber_resetAnchor(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SWIG_check_num_args("ofVideoGrabber::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::resetAnchor",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_resetAnchor",1,SWIGTYPE_p_ofVideoGrabber); }  (arg1)->resetAnchor(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getHeight(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float result; SWIG_check_num_args("ofVideoGrabber::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getHeight",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getHeight",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (float)((ofVideoGrabber const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getWidth(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  float result; SWIG_check_num_args("ofVideoGrabber::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getWidth",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getWidth",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (float)((ofVideoGrabber const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_isInitialized(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  bool result; SWIG_check_num_args("ofVideoGrabber::isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::isInitialized",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_isInitialized",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = (bool)((ofVideoGrabber const *)arg1)->isInitialized(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_setGrabber(lua_State* L) { int SWIG_arg = 0; ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ;
  SwigValueWrapper< shared_ptr< ofBaseVideoGrabber > > arg2 ; shared_ptr< ofBaseVideoGrabber > *argp2 ;
  SWIG_check_num_args("ofVideoGrabber::setGrabber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::setGrabber",1,"ofVideoGrabber *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVideoGrabber::setGrabber",2,"shared_ptr< ofBaseVideoGrabber >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_setGrabber",1,SWIGTYPE_p_ofVideoGrabber); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_shared_ptrT_ofBaseVideoGrabber_t,0))){
    SWIG_fail_ptr("ofVideoGrabber_setGrabber",2,SWIGTYPE_p_shared_ptrT_ofBaseVideoGrabber_t); }  arg2 = *argp2;
  (arg1)->setGrabber(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getGrabber__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; SwigValueWrapper< shared_ptr< ofBaseVideoGrabber > > result;
  SWIG_check_num_args("ofVideoGrabber::getGrabber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getGrabber",1,"ofVideoGrabber *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getGrabber",1,SWIGTYPE_p_ofVideoGrabber); }  result = (arg1)->getGrabber(); {
    shared_ptr< ofBaseVideoGrabber > * resultptr = new shared_ptr< ofBaseVideoGrabber >((const shared_ptr< ofBaseVideoGrabber > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_ofBaseVideoGrabber_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getGrabber__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoGrabber *arg1 = (ofVideoGrabber *) 0 ; SwigValueWrapper< shared_ptr< ofBaseVideoGrabber > > result;
  SWIG_check_num_args("ofVideoGrabber::getGrabber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoGrabber::getGrabber",1,"ofVideoGrabber const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoGrabber,0))){
    SWIG_fail_ptr("ofVideoGrabber_getGrabber",1,SWIGTYPE_p_ofVideoGrabber); } 
  result = ((ofVideoGrabber const *)arg1)->getGrabber(); {
    shared_ptr< ofBaseVideoGrabber > * resultptr = new shared_ptr< ofBaseVideoGrabber >((const shared_ptr< ofBaseVideoGrabber > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_ofBaseVideoGrabber_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoGrabber_getGrabber(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getGrabber__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoGrabber, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoGrabber_getGrabber__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoGrabber_getGrabber'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoGrabber::getGrabber()\n" "    ofVideoGrabber::getGrabber() const\n");
  lua_error(L);return 0; }
static void swig_delete_ofVideoGrabber(void *obj) {
ofVideoGrabber *arg1 = (ofVideoGrabber *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofVideoGrabber(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofVideoGrabber);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofVideoGrabber_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVideoGrabber_methods[]= {
    { "listDevices", _wrap_ofVideoGrabber_listDevices},
    { "isFrameNew", _wrap_ofVideoGrabber_isFrameNew},
    { "update", _wrap_ofVideoGrabber_update},
    { "close", _wrap_ofVideoGrabber_close},
    { "setup", _wrap_ofVideoGrabber_setup},
    { "initGrabber", _wrap_ofVideoGrabber_initGrabber},
    { "setPixelFormat", _wrap_ofVideoGrabber_setPixelFormat},
    { "getPixelFormat", _wrap_ofVideoGrabber_getPixelFormat},
    { "videoSettings", _wrap_ofVideoGrabber_videoSettings},
    { "getPixels", _wrap_ofVideoGrabber_getPixels},
    { "getPixelsRef", _wrap_ofVideoGrabber_getPixelsRef},
    { "getTexture", _wrap_ofVideoGrabber_getTexture},
    { "getTextureReference", _wrap_ofVideoGrabber_getTextureReference},
    { "getTexturePlanes", _wrap_ofVideoGrabber_getTexturePlanes},
    { "setVerbose", _wrap_ofVideoGrabber_setVerbose},
    { "setDeviceID", _wrap_ofVideoGrabber_setDeviceID},
    { "setDesiredFrameRate", _wrap_ofVideoGrabber_setDesiredFrameRate},
    { "setUseTexture", _wrap_ofVideoGrabber_setUseTexture},
    { "isUsingTexture", _wrap_ofVideoGrabber_isUsingTexture},
    { "draw", _wrap_ofVideoGrabber_draw},
    { "bind", _wrap_ofVideoGrabber_bind},
    { "unbind", _wrap_ofVideoGrabber_unbind},
    { "setAnchorPercent", _wrap_ofVideoGrabber_setAnchorPercent},
    { "setAnchorPoint", _wrap_ofVideoGrabber_setAnchorPoint},
    { "resetAnchor", _wrap_ofVideoGrabber_resetAnchor},
    { "getHeight", _wrap_ofVideoGrabber_getHeight},
    { "getWidth", _wrap_ofVideoGrabber_getWidth},
    { "isInitialized", _wrap_ofVideoGrabber_isInitialized},
    { "setGrabber", _wrap_ofVideoGrabber_setGrabber},
    { "getGrabber", _wrap_ofVideoGrabber_getGrabber},
    {0,0}
};
static swig_lua_method swig_ofVideoGrabber_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofVideoGrabber_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofVideoGrabber_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofVideoGrabber_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofVideoGrabber_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofVideoGrabber_Sf_SwigStatic = {
    "ofVideoGrabber",
    swig_ofVideoGrabber_Sf_SwigStatic_methods,
    swig_ofVideoGrabber_Sf_SwigStatic_attributes,
    swig_ofVideoGrabber_Sf_SwigStatic_constants,
    swig_ofVideoGrabber_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofVideoGrabber_bases[] = {0};
static const char *swig_ofVideoGrabber_base_names[] = {0};
static swig_lua_class _wrap_class_ofVideoGrabber = { "ofVideoGrabber", "ofVideoGrabber", &SWIGTYPE_p_ofVideoGrabber,_proxy__wrap_new_ofVideoGrabber, swig_delete_ofVideoGrabber, swig_ofVideoGrabber_methods, swig_ofVideoGrabber_attributes, &swig_ofVideoGrabber_Sf_SwigStatic, swig_ofVideoGrabber_meta, swig_ofVideoGrabber_bases, swig_ofVideoGrabber_base_names };

static int _wrap_new_ofVideoPlayer(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *result = 0 ;
  SWIG_check_num_args("ofVideoPlayer::ofVideoPlayer",0,0) result = (ofVideoPlayer *)new ofVideoPlayer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVideoPlayer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_load(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofVideoPlayer::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::load",1,"ofVideoPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofVideoPlayer::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_load",1,SWIGTYPE_p_ofVideoPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->load(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_loadAsync(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  std::string arg2 ; SWIG_check_num_args("ofVideoPlayer::loadAsync",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::loadAsync",1,"ofVideoPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofVideoPlayer::loadAsync",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_loadAsync",1,SWIGTYPE_p_ofVideoPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->loadAsync(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_loadMovie(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofVideoPlayer::loadMovie",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::loadMovie",1,"ofVideoPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofVideoPlayer::loadMovie",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_loadMovie",1,SWIGTYPE_p_ofVideoPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->loadMovie(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getMoviePath(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  std::string result; SWIG_check_num_args("ofVideoPlayer::getMoviePath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getMoviePath",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getMoviePath",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = ((ofVideoPlayer const *)arg1)->getMoviePath(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setPixelFormat(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofPixelFormat arg2 ; bool result; SWIG_check_num_args("ofVideoPlayer::setPixelFormat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setPixelFormat",1,"ofVideoPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::setPixelFormat",2,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setPixelFormat",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (ofPixelFormat)(int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setPixelFormat(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPixelFormat(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofPixelFormat result; SWIG_check_num_args("ofVideoPlayer::getPixelFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getPixelFormat",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getPixelFormat",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (ofPixelFormat)((ofVideoPlayer const *)arg1)->getPixelFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_closeMovie(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::closeMovie",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::closeMovie",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_closeMovie",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->closeMovie(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_close(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::close",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_close",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_update(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::update",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_update",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->update(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_play(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::play",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_play",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->play(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_stop(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::stop",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_stop",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->stop(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_isFrameNew(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofVideoPlayer::isFrameNew",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::isFrameNew",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_isFrameNew",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (bool)((ofVideoPlayer const *)arg1)->isFrameNew(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofPixels *result = 0 ; SWIG_check_num_args("ofVideoPlayer::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getPixels",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getPixels",1,SWIGTYPE_p_ofVideoPlayer); }  result = (ofPixels *) &(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofPixels *result = 0 ; SWIG_check_num_args("ofVideoPlayer::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getPixels",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getPixels",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (ofPixels *) &((ofVideoPlayer const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoPlayer_getPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoPlayer::getPixels()\n" "    ofVideoPlayer::getPixels() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVideoPlayer_getPixelsRef__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ; ofPixels *result = 0 ; SWIG_check_num_args("ofVideoPlayer::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getPixelsRef",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getPixelsRef",1,SWIGTYPE_p_ofVideoPlayer); }  result = (ofPixels *) &(arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPixelsRef__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ; ofPixels *result = 0 ; SWIG_check_num_args("ofVideoPlayer::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getPixelsRef",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getPixelsRef",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (ofPixels *) &((ofVideoPlayer const *)arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPixelsRef(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getPixelsRef__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getPixelsRef__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoPlayer_getPixelsRef'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoPlayer::getPixelsRef()\n" "    ofVideoPlayer::getPixelsRef() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVideoPlayer_getPosition(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float result; SWIG_check_num_args("ofVideoPlayer::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getPosition",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getPosition",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (float)((ofVideoPlayer const *)arg1)->getPosition(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getSpeed(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float result; SWIG_check_num_args("ofVideoPlayer::getSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getSpeed",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getSpeed",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (float)((ofVideoPlayer const *)arg1)->getSpeed(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getDuration(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float result; SWIG_check_num_args("ofVideoPlayer::getDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getDuration",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getDuration",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (float)((ofVideoPlayer const *)arg1)->getDuration(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getIsMovieDone(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofVideoPlayer::getIsMovieDone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getIsMovieDone",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getIsMovieDone",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (bool)((ofVideoPlayer const *)arg1)->getIsMovieDone(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setPosition(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ; SWIG_check_num_args("ofVideoPlayer::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setPosition",1,"ofVideoPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::setPosition",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setPosition",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setPosition(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setVolume(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ; SWIG_check_num_args("ofVideoPlayer::setVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setVolume",1,"ofVideoPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::setVolume",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setVolume",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setVolume(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setLoopState(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofLoopType arg2 ; SWIG_check_num_args("ofVideoPlayer::setLoopState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setLoopState",1,"ofVideoPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::setLoopState",2,"ofLoopType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setLoopState",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (ofLoopType)(int)lua_tonumber(L, 2);
  (arg1)->setLoopState(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getLoopState(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofLoopType result; SWIG_check_num_args("ofVideoPlayer::getLoopState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getLoopState",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getLoopState",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (ofLoopType)((ofVideoPlayer const *)arg1)->getLoopState(); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setSpeed(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ; SWIG_check_num_args("ofVideoPlayer::setSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setSpeed",1,"ofVideoPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::setSpeed",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setSpeed",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpeed(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setFrame(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ; int arg2 ;
  SWIG_check_num_args("ofVideoPlayer::setFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setFrame",1,"ofVideoPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::setFrame",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setFrame",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setFrame(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setUseTexture(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofVideoPlayer::setUseTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setUseTexture",1,"ofVideoPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofVideoPlayer::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setUseTexture",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseTexture(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_isUsingTexture(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofVideoPlayer::isUsingTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::isUsingTexture",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_isUsingTexture",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (bool)((ofVideoPlayer const *)arg1)->isUsingTexture(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofVideoPlayer::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getTexture",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getTexture",1,SWIGTYPE_p_ofVideoPlayer); }  result = (ofTexture *) &(arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_getTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofVideoPlayer::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getTexture",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getTexture",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (ofTexture *) &((ofVideoPlayer const *)arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_getTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getTexture__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoPlayer_getTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoPlayer::getTexture()\n" "    ofVideoPlayer::getTexture() const\n");
  lua_error(L);return 0; }
static int _wrap_ofVideoPlayer_getTextureReference__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofVideoPlayer::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getTextureReference",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getTextureReference",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (ofTexture *) &(arg1)->getTextureReference(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getTextureReference__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofVideoPlayer::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getTextureReference",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getTextureReference",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (ofTexture *) &((ofVideoPlayer const *)arg1)->getTextureReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_getTextureReference(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getTextureReference__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getTextureReference__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoPlayer_getTextureReference'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoPlayer::getTextureReference()\n"
  "    ofVideoPlayer::getTextureReference() const\n"); lua_error(L);return 0; }
static int _wrap_ofVideoPlayer_getTexturePlanes__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ; std::vector< ofTexture > *result = 0 ;
  SWIG_check_num_args("ofVideoPlayer::getTexturePlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getTexturePlanes",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getTexturePlanes",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (std::vector< ofTexture > *) &(arg1)->getTexturePlanes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofTexture_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getTexturePlanes__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ; std::vector< ofTexture > *result = 0 ;
  SWIG_check_num_args("ofVideoPlayer::getTexturePlanes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getTexturePlanes",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getTexturePlanes",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (std::vector< ofTexture > *) &((ofVideoPlayer const *)arg1)->getTexturePlanes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofTexture_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getTexturePlanes(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getTexturePlanes__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getTexturePlanes__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoPlayer_getTexturePlanes'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoPlayer::getTexturePlanes()\n"
  "    ofVideoPlayer::getTexturePlanes() const\n"); lua_error(L);return 0; }
static int _wrap_ofVideoPlayer_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofVideoPlayer::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::draw",1,"ofVideoPlayer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoPlayer::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVideoPlayer::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVideoPlayer::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_draw",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofVideoPlayer const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofVideoPlayer::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::draw",1,"ofVideoPlayer const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoPlayer::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_draw",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofVideoPlayer const *)arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_draw__SWIG_2_0(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofVideoPlayer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_draw",1,SWIGTYPE_p_ofVideoPlayer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVideoPlayer_draw",2,SWIGTYPE_p_ofVec3f); }  ((ofVideoPlayer const *)arg1)->draw((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_draw__SWIG_2_1(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofVideoPlayer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_draw",1,SWIGTYPE_p_ofVideoPlayer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("ofVideoPlayer_draw",2,SWIGTYPE_p_ofRectangle); } 
  ((ofVideoPlayer const *)arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_draw__SWIG_2_2(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofVideoPlayer const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_draw",1,SWIGTYPE_p_ofVideoPlayer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofVideoPlayer_draw",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); ((ofVideoPlayer const *)arg1)->draw((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_draw(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_draw__SWIG_2_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_draw__SWIG_2_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ofVideoPlayer_draw__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_ofVideoPlayer_draw__SWIG_2_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofVideoPlayer_draw__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoPlayer_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVideoPlayer::draw(float,float,float,float) const\n" "    ofVideoPlayer::draw(float,float) const\n"
  "    draw(ofPoint const &) const\n" "    draw(ofRectangle const &) const\n" "    draw(ofPoint const &,float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_ofVideoPlayer_bind(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::bind",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_bind",1,SWIGTYPE_p_ofVideoPlayer); }  ((ofVideoPlayer const *)arg1)->bind(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_unbind(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::unbind",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_unbind",1,SWIGTYPE_p_ofVideoPlayer); }  ((ofVideoPlayer const *)arg1)->unbind();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setAnchorPercent(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofVideoPlayer::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setAnchorPercent",1,"ofVideoPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoPlayer::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setAnchorPercent",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_setAnchorPoint(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofVideoPlayer::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setAnchorPoint",1,"ofVideoPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVideoPlayer::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVideoPlayer::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setAnchorPoint",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofVideoPlayer_resetAnchor(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::resetAnchor",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_resetAnchor",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->resetAnchor(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setPaused(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofVideoPlayer::setPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setPaused",1,"ofVideoPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofVideoPlayer::setPaused",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setPaused",1,SWIGTYPE_p_ofVideoPlayer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setPaused(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getCurrentFrame(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  int result; SWIG_check_num_args("ofVideoPlayer::getCurrentFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getCurrentFrame",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getCurrentFrame",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (int)((ofVideoPlayer const *)arg1)->getCurrentFrame(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getTotalNumFrames(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  int result; SWIG_check_num_args("ofVideoPlayer::getTotalNumFrames",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getTotalNumFrames",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getTotalNumFrames",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (int)((ofVideoPlayer const *)arg1)->getTotalNumFrames(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_firstFrame(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::firstFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::firstFrame",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_firstFrame",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->firstFrame(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_nextFrame(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::nextFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::nextFrame",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_nextFrame",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->nextFrame(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_previousFrame(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SWIG_check_num_args("ofVideoPlayer::previousFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::previousFrame",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_previousFrame",1,SWIGTYPE_p_ofVideoPlayer); }  (arg1)->previousFrame(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getHeight(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float result; SWIG_check_num_args("ofVideoPlayer::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getHeight",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getHeight",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (float)((ofVideoPlayer const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getWidth(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  float result; SWIG_check_num_args("ofVideoPlayer::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getWidth",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getWidth",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (float)((ofVideoPlayer const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_isPaused(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofVideoPlayer::isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::isPaused",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_isPaused",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (bool)((ofVideoPlayer const *)arg1)->isPaused(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_isLoaded(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofVideoPlayer::isLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::isLoaded",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_isLoaded",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (bool)((ofVideoPlayer const *)arg1)->isLoaded(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_isPlaying(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofVideoPlayer::isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::isPlaying",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_isPlaying",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (bool)((ofVideoPlayer const *)arg1)->isPlaying(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_isInitialized(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofVideoPlayer::isInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::isInitialized",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_isInitialized",1,SWIGTYPE_p_ofVideoPlayer); } 
  result = (bool)((ofVideoPlayer const *)arg1)->isInitialized(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_setPlayer(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SwigValueWrapper< shared_ptr< ofBaseVideoPlayer > > arg2 ; shared_ptr< ofBaseVideoPlayer > *argp2 ;
  SWIG_check_num_args("ofVideoPlayer::setPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::setPlayer",1,"ofVideoPlayer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVideoPlayer::setPlayer",2,"shared_ptr< ofBaseVideoPlayer >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_setPlayer",1,SWIGTYPE_p_ofVideoPlayer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_shared_ptrT_ofBaseVideoPlayer_t,0))){
    SWIG_fail_ptr("ofVideoPlayer_setPlayer",2,SWIGTYPE_p_shared_ptrT_ofBaseVideoPlayer_t); }  arg2 = *argp2;
  (arg1)->setPlayer(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPlayer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SwigValueWrapper< shared_ptr< ofBaseVideoPlayer > > result; SWIG_check_num_args("ofVideoPlayer::getPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getPlayer",1,"ofVideoPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getPlayer",1,SWIGTYPE_p_ofVideoPlayer); }  result = (arg1)->getPlayer(); {
    shared_ptr< ofBaseVideoPlayer > * resultptr = new shared_ptr< ofBaseVideoPlayer >((const shared_ptr< ofBaseVideoPlayer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_ofBaseVideoPlayer_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPlayer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVideoPlayer *arg1 = (ofVideoPlayer *) 0 ;
  SwigValueWrapper< shared_ptr< ofBaseVideoPlayer > > result; SWIG_check_num_args("ofVideoPlayer::getPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVideoPlayer::getPlayer",1,"ofVideoPlayer const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVideoPlayer,0))){
    SWIG_fail_ptr("ofVideoPlayer_getPlayer",1,SWIGTYPE_p_ofVideoPlayer); }  result = ((ofVideoPlayer const *)arg1)->getPlayer();
  {
    shared_ptr< ofBaseVideoPlayer > * resultptr = new shared_ptr< ofBaseVideoPlayer >((const shared_ptr< ofBaseVideoPlayer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_shared_ptrT_ofBaseVideoPlayer_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofVideoPlayer_getPlayer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getPlayer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVideoPlayer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofVideoPlayer_getPlayer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofVideoPlayer_getPlayer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVideoPlayer::getPlayer()\n" "    ofVideoPlayer::getPlayer() const\n");
  lua_error(L);return 0; }
static void swig_delete_ofVideoPlayer(void *obj) {
ofVideoPlayer *arg1 = (ofVideoPlayer *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofVideoPlayer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofVideoPlayer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofVideoPlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVideoPlayer_methods[]= {
    { "load", _wrap_ofVideoPlayer_load},
    { "loadAsync", _wrap_ofVideoPlayer_loadAsync},
    { "loadMovie", _wrap_ofVideoPlayer_loadMovie},
    { "getMoviePath", _wrap_ofVideoPlayer_getMoviePath},
    { "setPixelFormat", _wrap_ofVideoPlayer_setPixelFormat},
    { "getPixelFormat", _wrap_ofVideoPlayer_getPixelFormat},
    { "closeMovie", _wrap_ofVideoPlayer_closeMovie},
    { "close", _wrap_ofVideoPlayer_close},
    { "update", _wrap_ofVideoPlayer_update},
    { "play", _wrap_ofVideoPlayer_play},
    { "stop", _wrap_ofVideoPlayer_stop},
    { "isFrameNew", _wrap_ofVideoPlayer_isFrameNew},
    { "getPixels", _wrap_ofVideoPlayer_getPixels},
    { "getPixelsRef", _wrap_ofVideoPlayer_getPixelsRef},
    { "getPosition", _wrap_ofVideoPlayer_getPosition},
    { "getSpeed", _wrap_ofVideoPlayer_getSpeed},
    { "getDuration", _wrap_ofVideoPlayer_getDuration},
    { "getIsMovieDone", _wrap_ofVideoPlayer_getIsMovieDone},
    { "setPosition", _wrap_ofVideoPlayer_setPosition},
    { "setVolume", _wrap_ofVideoPlayer_setVolume},
    { "setLoopState", _wrap_ofVideoPlayer_setLoopState},
    { "getLoopState", _wrap_ofVideoPlayer_getLoopState},
    { "setSpeed", _wrap_ofVideoPlayer_setSpeed},
    { "setFrame", _wrap_ofVideoPlayer_setFrame},
    { "setUseTexture", _wrap_ofVideoPlayer_setUseTexture},
    { "isUsingTexture", _wrap_ofVideoPlayer_isUsingTexture},
    { "getTexture", _wrap_ofVideoPlayer_getTexture},
    { "getTextureReference", _wrap_ofVideoPlayer_getTextureReference},
    { "getTexturePlanes", _wrap_ofVideoPlayer_getTexturePlanes},
    { "draw", _wrap_ofVideoPlayer_draw},
    { "bind", _wrap_ofVideoPlayer_bind},
    { "unbind", _wrap_ofVideoPlayer_unbind},
    { "setAnchorPercent", _wrap_ofVideoPlayer_setAnchorPercent},
    { "setAnchorPoint", _wrap_ofVideoPlayer_setAnchorPoint},
    { "resetAnchor", _wrap_ofVideoPlayer_resetAnchor},
    { "setPaused", _wrap_ofVideoPlayer_setPaused},
    { "getCurrentFrame", _wrap_ofVideoPlayer_getCurrentFrame},
    { "getTotalNumFrames", _wrap_ofVideoPlayer_getTotalNumFrames},
    { "firstFrame", _wrap_ofVideoPlayer_firstFrame},
    { "nextFrame", _wrap_ofVideoPlayer_nextFrame},
    { "previousFrame", _wrap_ofVideoPlayer_previousFrame},
    { "getHeight", _wrap_ofVideoPlayer_getHeight},
    { "getWidth", _wrap_ofVideoPlayer_getWidth},
    { "isPaused", _wrap_ofVideoPlayer_isPaused},
    { "isLoaded", _wrap_ofVideoPlayer_isLoaded},
    { "isPlaying", _wrap_ofVideoPlayer_isPlaying},
    { "isInitialized", _wrap_ofVideoPlayer_isInitialized},
    { "setPlayer", _wrap_ofVideoPlayer_setPlayer},
    { "getPlayer", _wrap_ofVideoPlayer_getPlayer},
    {0,0}
};
static swig_lua_method swig_ofVideoPlayer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofVideoPlayer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofVideoPlayer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofVideoPlayer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofVideoPlayer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofVideoPlayer_Sf_SwigStatic = {
    "ofVideoPlayer",
    swig_ofVideoPlayer_Sf_SwigStatic_methods,
    swig_ofVideoPlayer_Sf_SwigStatic_attributes,
    swig_ofVideoPlayer_Sf_SwigStatic_constants,
    swig_ofVideoPlayer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofVideoPlayer_bases[] = {0};
static const char *swig_ofVideoPlayer_base_names[] = {0};
static swig_lua_class _wrap_class_ofVideoPlayer = { "ofVideoPlayer", "ofVideoPlayer", &SWIGTYPE_p_ofVideoPlayer,_proxy__wrap_new_ofVideoPlayer, swig_delete_ofVideoPlayer, swig_ofVideoPlayer_methods, swig_ofVideoPlayer_attributes, &swig_ofVideoPlayer_Sf_SwigStatic, swig_ofVideoPlayer_meta, swig_ofVideoPlayer_bases, swig_ofVideoPlayer_base_names };

static int _wrap_ofGetMousePressed__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; bool result;
  SWIG_check_num_args("ofGetMousePressed",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofGetMousePressed",1,"int");
  arg1 = (int)lua_tonumber(L, 1); result = (bool)ofGetMousePressed(arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetMousePressed__SWIG_1(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofGetMousePressed",0,0) result = (bool)ofGetMousePressed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetMousePressed(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofGetMousePressed__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_ofGetMousePressed__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofGetMousePressed'\n" "  Possible C/C++ prototypes are:\n"
  "    ofGetMousePressed(int)\n" "    ofGetMousePressed()\n"); lua_error(L);return 0; }
static int _wrap_ofGetKeyPressed__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; bool result;
  SWIG_check_num_args("ofGetKeyPressed",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofGetKeyPressed",1,"int");
  arg1 = (int)lua_tonumber(L, 1); result = (bool)ofGetKeyPressed(arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetKeyPressed__SWIG_1(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofGetKeyPressed",0,0) result = (bool)ofGetKeyPressed(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetKeyPressed(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_ofGetKeyPressed__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_ofGetKeyPressed__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofGetKeyPressed'\n" "  Possible C/C++ prototypes are:\n"
  "    ofGetKeyPressed(int)\n" "    ofGetKeyPressed()\n"); lua_error(L);return 0; }
static int _wrap_ofGetMouseX(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetMouseX",0,0)
  result = (int)ofGetMouseX(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetMouseY(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetMouseY",0,0)
  result = (int)ofGetMouseY(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofGetPreviousMouseX(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetPreviousMouseX",0,0) result = (int)ofGetPreviousMouseX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetPreviousMouseY(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetPreviousMouseY",0,0) result = (int)ofGetPreviousMouseY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDragInfo_files_set(lua_State* L) { int SWIG_arg = 0; ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ; SWIG_check_num_args("ofDragInfo::files",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDragInfo::files",1,"ofDragInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofDragInfo::files",2,"std::vector< std::string > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDragInfo,0))){
    SWIG_fail_ptr("ofDragInfo_files_set",1,SWIGTYPE_p_ofDragInfo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("ofDragInfo_files_set",2,SWIGTYPE_p_std__vectorT_std__string_t); }  if (arg1) (arg1)->files = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDragInfo_files_get(lua_State* L) { int SWIG_arg = 0; ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("ofDragInfo::files",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDragInfo::files",1,"ofDragInfo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDragInfo,0))){
    SWIG_fail_ptr("ofDragInfo_files_get",1,SWIGTYPE_p_ofDragInfo); }  result = (std::vector< std::string > *)& ((arg1)->files);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofDragInfo_position_set(lua_State* L) { int SWIG_arg = 0; ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ; SWIG_check_num_args("ofDragInfo::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDragInfo::position",1,"ofDragInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofDragInfo::position",2,"ofPoint *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDragInfo,0))){
    SWIG_fail_ptr("ofDragInfo_position_set",1,SWIGTYPE_p_ofDragInfo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofDragInfo_position_set",2,SWIGTYPE_p_ofVec3f); }  if (arg1) (arg1)->position = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDragInfo_position_get(lua_State* L) { int SWIG_arg = 0; ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  ofPoint *result = 0 ; SWIG_check_num_args("ofDragInfo::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDragInfo::position",1,"ofDragInfo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDragInfo,0))){
    SWIG_fail_ptr("ofDragInfo_position_get",1,SWIGTYPE_p_ofDragInfo); }  result = (ofPoint *)& ((arg1)->position);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofDragInfo(lua_State* L) { int SWIG_arg = 0; ofDragInfo *result = 0 ;
  SWIG_check_num_args("ofDragInfo::ofDragInfo",0,0) result = (ofDragInfo *)new ofDragInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofDragInfo,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_ofDragInfo(void *obj) {
ofDragInfo *arg1 = (ofDragInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofDragInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofDragInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofDragInfo_attributes[] = {
    { "files", _wrap_ofDragInfo_files_get, _wrap_ofDragInfo_files_set },
    { "position", _wrap_ofDragInfo_position_get, _wrap_ofDragInfo_position_set },
    {0,0,0}
};
static swig_lua_method swig_ofDragInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofDragInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofDragInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofDragInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofDragInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofDragInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofDragInfo_Sf_SwigStatic = {
    "ofDragInfo",
    swig_ofDragInfo_Sf_SwigStatic_methods,
    swig_ofDragInfo_Sf_SwigStatic_attributes,
    swig_ofDragInfo_Sf_SwigStatic_constants,
    swig_ofDragInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofDragInfo_bases[] = {0};
static const char *swig_ofDragInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ofDragInfo = { "ofDragInfo", "ofDragInfo", &SWIGTYPE_p_ofDragInfo,_proxy__wrap_new_ofDragInfo, swig_delete_ofDragInfo, swig_ofDragInfo_methods, swig_ofDragInfo_attributes, &swig_ofDragInfo_Sf_SwigStatic, swig_ofDragInfo_meta, swig_ofDragInfo_bases, swig_ofDragInfo_base_names };

static int _wrap_new_ofTouchEventArgs__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *result = 0 ;
  SWIG_check_num_args("ofTouchEventArgs::ofTouchEventArgs",0,0) result = (ofTouchEventArgs *)new ofTouchEventArgs();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTouchEventArgs,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofTouchEventArgs__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs::Type arg1 ; float arg2 ;
  float arg3 ; int arg4 ; ofTouchEventArgs *result = 0 ; SWIG_check_num_args("ofTouchEventArgs::ofTouchEventArgs",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTouchEventArgs::ofTouchEventArgs",1,"ofTouchEventArgs::Type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::ofTouchEventArgs",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTouchEventArgs::ofTouchEventArgs",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTouchEventArgs::ofTouchEventArgs",4,"int");
  arg1 = (ofTouchEventArgs::Type)(int)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (ofTouchEventArgs *)new ofTouchEventArgs(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTouchEventArgs,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_ofTouchEventArgs(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_ofTouchEventArgs__SWIG_0(L);}  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_ofTouchEventArgs__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ofTouchEventArgs'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTouchEventArgs::ofTouchEventArgs()\n"
  "    ofTouchEventArgs::ofTouchEventArgs(ofTouchEventArgs::Type,float,float,int)\n"); lua_error(L);return 0; }
static int _wrap_ofTouchEventArgs_type_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  ofTouchEventArgs::Type arg2 ; SWIG_check_num_args("ofTouchEventArgs::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::type",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::type",2,"ofTouchEventArgs::Type");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_type_set",1,SWIGTYPE_p_ofTouchEventArgs); } 
  arg2 = (ofTouchEventArgs::Type)(int)lua_tonumber(L, 2); if (arg1) (arg1)->type = arg2; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_type_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  ofTouchEventArgs::Type result; SWIG_check_num_args("ofTouchEventArgs::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::type",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_type_get",1,SWIGTYPE_p_ofTouchEventArgs); } 
  result = (ofTouchEventArgs::Type) ((arg1)->type); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_id_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  int arg2 ; SWIG_check_num_args("ofTouchEventArgs::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::id",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::id",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_id_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_id_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  int result; SWIG_check_num_args("ofTouchEventArgs::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::id",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_id_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (int) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_time_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  int arg2 ; SWIG_check_num_args("ofTouchEventArgs::time",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::time",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::time",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_time_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->time = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_time_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  int result; SWIG_check_num_args("ofTouchEventArgs::time",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::time",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_time_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (int) ((arg1)->time);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_numTouches_set(lua_State* L) { int SWIG_arg = 0;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ; int arg2 ; SWIG_check_num_args("ofTouchEventArgs::numTouches",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::numTouches",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::numTouches",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_numTouches_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->numTouches = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_numTouches_get(lua_State* L) { int SWIG_arg = 0;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ; int result; SWIG_check_num_args("ofTouchEventArgs::numTouches",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::numTouches",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_numTouches_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (int) ((arg1)->numTouches);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_width_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTouchEventArgs::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::width",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::width",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_width_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_width_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float result; SWIG_check_num_args("ofTouchEventArgs::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::width",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_width_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_height_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTouchEventArgs::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::height",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::height",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_height_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_height_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float result; SWIG_check_num_args("ofTouchEventArgs::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::height",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_height_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_angle_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTouchEventArgs::angle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::angle",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::angle",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_angle_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->angle = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_angle_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float result; SWIG_check_num_args("ofTouchEventArgs::angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::angle",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_angle_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->angle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_minoraxis_set(lua_State* L) { int SWIG_arg = 0;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ; float arg2 ; SWIG_check_num_args("ofTouchEventArgs::minoraxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::minoraxis",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::minoraxis",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_minoraxis_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->minoraxis = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_minoraxis_get(lua_State* L) { int SWIG_arg = 0;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ; float result; SWIG_check_num_args("ofTouchEventArgs::minoraxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::minoraxis",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_minoraxis_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->minoraxis);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_majoraxis_set(lua_State* L) { int SWIG_arg = 0;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ; float arg2 ; SWIG_check_num_args("ofTouchEventArgs::majoraxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::majoraxis",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::majoraxis",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_majoraxis_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->majoraxis = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_majoraxis_get(lua_State* L) { int SWIG_arg = 0;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ; float result; SWIG_check_num_args("ofTouchEventArgs::majoraxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::majoraxis",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_majoraxis_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->majoraxis);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_pressure_set(lua_State* L) { int SWIG_arg = 0;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ; float arg2 ; SWIG_check_num_args("ofTouchEventArgs::pressure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::pressure",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::pressure",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_pressure_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->pressure = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_pressure_get(lua_State* L) { int SWIG_arg = 0;
  ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ; float result; SWIG_check_num_args("ofTouchEventArgs::pressure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::pressure",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_pressure_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->pressure);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_xspeed_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTouchEventArgs::xspeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::xspeed",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::xspeed",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_xspeed_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xspeed = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_xspeed_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float result; SWIG_check_num_args("ofTouchEventArgs::xspeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::xspeed",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_xspeed_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->xspeed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_yspeed_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTouchEventArgs::yspeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::yspeed",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::yspeed",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_yspeed_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->yspeed = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_yspeed_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float result; SWIG_check_num_args("ofTouchEventArgs::yspeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::yspeed",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_yspeed_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->yspeed);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_xaccel_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTouchEventArgs::xaccel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::xaccel",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::xaccel",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_xaccel_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->xaccel = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_xaccel_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float result; SWIG_check_num_args("ofTouchEventArgs::xaccel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::xaccel",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_xaccel_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->xaccel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_yaccel_set(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTouchEventArgs::yaccel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::yaccel",1,"ofTouchEventArgs *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTouchEventArgs::yaccel",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_yaccel_set",1,SWIGTYPE_p_ofTouchEventArgs); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->yaccel = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofTouchEventArgs_yaccel_get(lua_State* L) { int SWIG_arg = 0; ofTouchEventArgs *arg1 = (ofTouchEventArgs *) 0 ;
  float result; SWIG_check_num_args("ofTouchEventArgs::yaccel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTouchEventArgs::yaccel",1,"ofTouchEventArgs *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTouchEventArgs,0))){
    SWIG_fail_ptr("ofTouchEventArgs_yaccel_get",1,SWIGTYPE_p_ofTouchEventArgs); }  result = (float) ((arg1)->yaccel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofTouchEventArgs(void *obj) {
ofTouchEventArgs *arg1 = (ofTouchEventArgs *) obj;
delete arg1;
}
static int _proxy__wrap_new_ofTouchEventArgs(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ofTouchEventArgs);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ofTouchEventArgs_attributes[] = {
    { "type", _wrap_ofTouchEventArgs_type_get, _wrap_ofTouchEventArgs_type_set },
    { "id", _wrap_ofTouchEventArgs_id_get, _wrap_ofTouchEventArgs_id_set },
    { "time", _wrap_ofTouchEventArgs_time_get, _wrap_ofTouchEventArgs_time_set },
    { "numTouches", _wrap_ofTouchEventArgs_numTouches_get, _wrap_ofTouchEventArgs_numTouches_set },
    { "width", _wrap_ofTouchEventArgs_width_get, _wrap_ofTouchEventArgs_width_set },
    { "height", _wrap_ofTouchEventArgs_height_get, _wrap_ofTouchEventArgs_height_set },
    { "angle", _wrap_ofTouchEventArgs_angle_get, _wrap_ofTouchEventArgs_angle_set },
    { "minoraxis", _wrap_ofTouchEventArgs_minoraxis_get, _wrap_ofTouchEventArgs_minoraxis_set },
    { "majoraxis", _wrap_ofTouchEventArgs_majoraxis_get, _wrap_ofTouchEventArgs_majoraxis_set },
    { "pressure", _wrap_ofTouchEventArgs_pressure_get, _wrap_ofTouchEventArgs_pressure_set },
    { "xspeed", _wrap_ofTouchEventArgs_xspeed_get, _wrap_ofTouchEventArgs_xspeed_set },
    { "yspeed", _wrap_ofTouchEventArgs_yspeed_get, _wrap_ofTouchEventArgs_yspeed_set },
    { "xaccel", _wrap_ofTouchEventArgs_xaccel_get, _wrap_ofTouchEventArgs_xaccel_set },
    { "yaccel", _wrap_ofTouchEventArgs_yaccel_get, _wrap_ofTouchEventArgs_yaccel_set },
    {0,0,0}
};
static swig_lua_method swig_ofTouchEventArgs_methods[]= {
    {0,0}
};
static swig_lua_method swig_ofTouchEventArgs_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ofTouchEventArgs_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ofTouchEventArgs_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("down", ofTouchEventArgs::down)},
    {SWIG_LUA_CONSTTAB_INT("up", ofTouchEventArgs::up)},
    {SWIG_LUA_CONSTTAB_INT("move", ofTouchEventArgs::move)},
    {SWIG_LUA_CONSTTAB_INT("doubleTap", ofTouchEventArgs::doubleTap)},
    {SWIG_LUA_CONSTTAB_INT("cancel", ofTouchEventArgs::cancel)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ofTouchEventArgs_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ofTouchEventArgs_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ofTouchEventArgs_Sf_SwigStatic = {
    "ofTouchEventArgs",
    swig_ofTouchEventArgs_Sf_SwigStatic_methods,
    swig_ofTouchEventArgs_Sf_SwigStatic_attributes,
    swig_ofTouchEventArgs_Sf_SwigStatic_constants,
    swig_ofTouchEventArgs_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ofTouchEventArgs_bases[] = {0,0};
static const char *swig_ofTouchEventArgs_base_names[] = {"ofVec2f *",0};
static swig_lua_class _wrap_class_ofTouchEventArgs = { "ofTouchEventArgs", "ofTouchEventArgs", &SWIGTYPE_p_ofTouchEventArgs,_proxy__wrap_new_ofTouchEventArgs, swig_delete_ofTouchEventArgs, swig_ofTouchEventArgs_methods, swig_ofTouchEventArgs_attributes, &swig_ofTouchEventArgs_Sf_SwigStatic, swig_ofTouchEventArgs_meta, swig_ofTouchEventArgs_bases, swig_ofTouchEventArgs_base_names };

static int _wrap_ofSendMessage__SWIG_0(lua_State* L) { int SWIG_arg = 0; SwigValueWrapper< ofMessage > arg1 ; ofMessage *argp1 ;
  SWIG_check_num_args("ofSendMessage",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSendMessage",1,"ofMessage");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofMessage,0))){
    SWIG_fail_ptr("ofSendMessage",1,SWIGTYPE_p_ofMessage); }  arg1 = *argp1; ofSendMessage(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSendMessage__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  SWIG_check_num_args("ofSendMessage",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSendMessage",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); ofSendMessage(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSendMessage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMessage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_ofSendMessage__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_ofSendMessage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofSendMessage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSendMessage(ofMessage)\n" "    ofSendMessage(std::string)\n"); lua_error(L);return 0; }
static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "ofColor_white", _wrap_ofColor_white_get, SWIG_Lua_set_immutable },
    { "ofColor_gray", _wrap_ofColor_gray_get, SWIG_Lua_set_immutable },
    { "ofColor_black", _wrap_ofColor_black_get, SWIG_Lua_set_immutable },
    { "ofColor_red", _wrap_ofColor_red_get, SWIG_Lua_set_immutable },
    { "ofColor_green", _wrap_ofColor_green_get, SWIG_Lua_set_immutable },
    { "ofColor_blue", _wrap_ofColor_blue_get, SWIG_Lua_set_immutable },
    { "ofColor_cyan", _wrap_ofColor_cyan_get, SWIG_Lua_set_immutable },
    { "ofColor_magenta", _wrap_ofColor_magenta_get, SWIG_Lua_set_immutable },
    { "ofColor_yellow", _wrap_ofColor_yellow_get, SWIG_Lua_set_immutable },
    { "ofColor_aliceBlue", _wrap_ofColor_aliceBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_antiqueWhite", _wrap_ofColor_antiqueWhite_get, SWIG_Lua_set_immutable },
    { "ofColor_aqua", _wrap_ofColor_aqua_get, SWIG_Lua_set_immutable },
    { "ofColor_aquamarine", _wrap_ofColor_aquamarine_get, SWIG_Lua_set_immutable },
    { "ofColor_azure", _wrap_ofColor_azure_get, SWIG_Lua_set_immutable },
    { "ofColor_beige", _wrap_ofColor_beige_get, SWIG_Lua_set_immutable },
    { "ofColor_bisque", _wrap_ofColor_bisque_get, SWIG_Lua_set_immutable },
    { "ofColor_blanchedAlmond", _wrap_ofColor_blanchedAlmond_get, SWIG_Lua_set_immutable },
    { "ofColor_blueViolet", _wrap_ofColor_blueViolet_get, SWIG_Lua_set_immutable },
    { "ofColor_brown", _wrap_ofColor_brown_get, SWIG_Lua_set_immutable },
    { "ofColor_burlyWood", _wrap_ofColor_burlyWood_get, SWIG_Lua_set_immutable },
    { "ofColor_cadetBlue", _wrap_ofColor_cadetBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_chartreuse", _wrap_ofColor_chartreuse_get, SWIG_Lua_set_immutable },
    { "ofColor_chocolate", _wrap_ofColor_chocolate_get, SWIG_Lua_set_immutable },
    { "ofColor_coral", _wrap_ofColor_coral_get, SWIG_Lua_set_immutable },
    { "ofColor_cornflowerBlue", _wrap_ofColor_cornflowerBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_cornsilk", _wrap_ofColor_cornsilk_get, SWIG_Lua_set_immutable },
    { "ofColor_crimson", _wrap_ofColor_crimson_get, SWIG_Lua_set_immutable },
    { "ofColor_darkBlue", _wrap_ofColor_darkBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_darkCyan", _wrap_ofColor_darkCyan_get, SWIG_Lua_set_immutable },
    { "ofColor_darkGoldenRod", _wrap_ofColor_darkGoldenRod_get, SWIG_Lua_set_immutable },
    { "ofColor_darkGray", _wrap_ofColor_darkGray_get, SWIG_Lua_set_immutable },
    { "ofColor_darkGrey", _wrap_ofColor_darkGrey_get, SWIG_Lua_set_immutable },
    { "ofColor_darkGreen", _wrap_ofColor_darkGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_darkKhaki", _wrap_ofColor_darkKhaki_get, SWIG_Lua_set_immutable },
    { "ofColor_darkMagenta", _wrap_ofColor_darkMagenta_get, SWIG_Lua_set_immutable },
    { "ofColor_darkOliveGreen", _wrap_ofColor_darkOliveGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_darkorange", _wrap_ofColor_darkorange_get, SWIG_Lua_set_immutable },
    { "ofColor_darkOrchid", _wrap_ofColor_darkOrchid_get, SWIG_Lua_set_immutable },
    { "ofColor_darkRed", _wrap_ofColor_darkRed_get, SWIG_Lua_set_immutable },
    { "ofColor_darkSalmon", _wrap_ofColor_darkSalmon_get, SWIG_Lua_set_immutable },
    { "ofColor_darkSeaGreen", _wrap_ofColor_darkSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_darkSlateBlue", _wrap_ofColor_darkSlateBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_darkSlateGray", _wrap_ofColor_darkSlateGray_get, SWIG_Lua_set_immutable },
    { "ofColor_darkSlateGrey", _wrap_ofColor_darkSlateGrey_get, SWIG_Lua_set_immutable },
    { "ofColor_darkTurquoise", _wrap_ofColor_darkTurquoise_get, SWIG_Lua_set_immutable },
    { "ofColor_darkViolet", _wrap_ofColor_darkViolet_get, SWIG_Lua_set_immutable },
    { "ofColor_deepPink", _wrap_ofColor_deepPink_get, SWIG_Lua_set_immutable },
    { "ofColor_deepSkyBlue", _wrap_ofColor_deepSkyBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_dimGray", _wrap_ofColor_dimGray_get, SWIG_Lua_set_immutable },
    { "ofColor_dimGrey", _wrap_ofColor_dimGrey_get, SWIG_Lua_set_immutable },
    { "ofColor_dodgerBlue", _wrap_ofColor_dodgerBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_fireBrick", _wrap_ofColor_fireBrick_get, SWIG_Lua_set_immutable },
    { "ofColor_floralWhite", _wrap_ofColor_floralWhite_get, SWIG_Lua_set_immutable },
    { "ofColor_forestGreen", _wrap_ofColor_forestGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_fuchsia", _wrap_ofColor_fuchsia_get, SWIG_Lua_set_immutable },
    { "ofColor_gainsboro", _wrap_ofColor_gainsboro_get, SWIG_Lua_set_immutable },
    { "ofColor_ghostWhite", _wrap_ofColor_ghostWhite_get, SWIG_Lua_set_immutable },
    { "ofColor_gold", _wrap_ofColor_gold_get, SWIG_Lua_set_immutable },
    { "ofColor_goldenRod", _wrap_ofColor_goldenRod_get, SWIG_Lua_set_immutable },
    { "ofColor_grey", _wrap_ofColor_grey_get, SWIG_Lua_set_immutable },
    { "ofColor_greenYellow", _wrap_ofColor_greenYellow_get, SWIG_Lua_set_immutable },
    { "ofColor_honeyDew", _wrap_ofColor_honeyDew_get, SWIG_Lua_set_immutable },
    { "ofColor_hotPink", _wrap_ofColor_hotPink_get, SWIG_Lua_set_immutable },
    { "ofColor_indianRed", _wrap_ofColor_indianRed_get, SWIG_Lua_set_immutable },
    { "ofColor_indigo", _wrap_ofColor_indigo_get, SWIG_Lua_set_immutable },
    { "ofColor_ivory", _wrap_ofColor_ivory_get, SWIG_Lua_set_immutable },
    { "ofColor_khaki", _wrap_ofColor_khaki_get, SWIG_Lua_set_immutable },
    { "ofColor_lavender", _wrap_ofColor_lavender_get, SWIG_Lua_set_immutable },
    { "ofColor_lavenderBlush", _wrap_ofColor_lavenderBlush_get, SWIG_Lua_set_immutable },
    { "ofColor_lawnGreen", _wrap_ofColor_lawnGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_lemonChiffon", _wrap_ofColor_lemonChiffon_get, SWIG_Lua_set_immutable },
    { "ofColor_lightBlue", _wrap_ofColor_lightBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_lightCoral", _wrap_ofColor_lightCoral_get, SWIG_Lua_set_immutable },
    { "ofColor_lightCyan", _wrap_ofColor_lightCyan_get, SWIG_Lua_set_immutable },
    { "ofColor_lightGoldenRodYellow", _wrap_ofColor_lightGoldenRodYellow_get, SWIG_Lua_set_immutable },
    { "ofColor_lightGray", _wrap_ofColor_lightGray_get, SWIG_Lua_set_immutable },
    { "ofColor_lightGrey", _wrap_ofColor_lightGrey_get, SWIG_Lua_set_immutable },
    { "ofColor_lightGreen", _wrap_ofColor_lightGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_lightPink", _wrap_ofColor_lightPink_get, SWIG_Lua_set_immutable },
    { "ofColor_lightSalmon", _wrap_ofColor_lightSalmon_get, SWIG_Lua_set_immutable },
    { "ofColor_lightSeaGreen", _wrap_ofColor_lightSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_lightSkyBlue", _wrap_ofColor_lightSkyBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_lightSlateGray", _wrap_ofColor_lightSlateGray_get, SWIG_Lua_set_immutable },
    { "ofColor_lightSlateGrey", _wrap_ofColor_lightSlateGrey_get, SWIG_Lua_set_immutable },
    { "ofColor_lightSteelBlue", _wrap_ofColor_lightSteelBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_lightYellow", _wrap_ofColor_lightYellow_get, SWIG_Lua_set_immutable },
    { "ofColor_lime", _wrap_ofColor_lime_get, SWIG_Lua_set_immutable },
    { "ofColor_limeGreen", _wrap_ofColor_limeGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_linen", _wrap_ofColor_linen_get, SWIG_Lua_set_immutable },
    { "ofColor_maroon", _wrap_ofColor_maroon_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumAquaMarine", _wrap_ofColor_mediumAquaMarine_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumBlue", _wrap_ofColor_mediumBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumOrchid", _wrap_ofColor_mediumOrchid_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumPurple", _wrap_ofColor_mediumPurple_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumSeaGreen", _wrap_ofColor_mediumSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumSlateBlue", _wrap_ofColor_mediumSlateBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumSpringGreen", _wrap_ofColor_mediumSpringGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumTurquoise", _wrap_ofColor_mediumTurquoise_get, SWIG_Lua_set_immutable },
    { "ofColor_mediumVioletRed", _wrap_ofColor_mediumVioletRed_get, SWIG_Lua_set_immutable },
    { "ofColor_midnightBlue", _wrap_ofColor_midnightBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_mintCream", _wrap_ofColor_mintCream_get, SWIG_Lua_set_immutable },
    { "ofColor_mistyRose", _wrap_ofColor_mistyRose_get, SWIG_Lua_set_immutable },
    { "ofColor_moccasin", _wrap_ofColor_moccasin_get, SWIG_Lua_set_immutable },
    { "ofColor_navajoWhite", _wrap_ofColor_navajoWhite_get, SWIG_Lua_set_immutable },
    { "ofColor_navy", _wrap_ofColor_navy_get, SWIG_Lua_set_immutable },
    { "ofColor_oldLace", _wrap_ofColor_oldLace_get, SWIG_Lua_set_immutable },
    { "ofColor_olive", _wrap_ofColor_olive_get, SWIG_Lua_set_immutable },
    { "ofColor_oliveDrab", _wrap_ofColor_oliveDrab_get, SWIG_Lua_set_immutable },
    { "ofColor_orange", _wrap_ofColor_orange_get, SWIG_Lua_set_immutable },
    { "ofColor_orangeRed", _wrap_ofColor_orangeRed_get, SWIG_Lua_set_immutable },
    { "ofColor_orchid", _wrap_ofColor_orchid_get, SWIG_Lua_set_immutable },
    { "ofColor_paleGoldenRod", _wrap_ofColor_paleGoldenRod_get, SWIG_Lua_set_immutable },
    { "ofColor_paleGreen", _wrap_ofColor_paleGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_paleTurquoise", _wrap_ofColor_paleTurquoise_get, SWIG_Lua_set_immutable },
    { "ofColor_paleVioletRed", _wrap_ofColor_paleVioletRed_get, SWIG_Lua_set_immutable },
    { "ofColor_papayaWhip", _wrap_ofColor_papayaWhip_get, SWIG_Lua_set_immutable },
    { "ofColor_peachPuff", _wrap_ofColor_peachPuff_get, SWIG_Lua_set_immutable },
    { "ofColor_peru", _wrap_ofColor_peru_get, SWIG_Lua_set_immutable },
    { "ofColor_pink", _wrap_ofColor_pink_get, SWIG_Lua_set_immutable },
    { "ofColor_plum", _wrap_ofColor_plum_get, SWIG_Lua_set_immutable },
    { "ofColor_powderBlue", _wrap_ofColor_powderBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_purple", _wrap_ofColor_purple_get, SWIG_Lua_set_immutable },
    { "ofColor_rosyBrown", _wrap_ofColor_rosyBrown_get, SWIG_Lua_set_immutable },
    { "ofColor_royalBlue", _wrap_ofColor_royalBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_saddleBrown", _wrap_ofColor_saddleBrown_get, SWIG_Lua_set_immutable },
    { "ofColor_salmon", _wrap_ofColor_salmon_get, SWIG_Lua_set_immutable },
    { "ofColor_sandyBrown", _wrap_ofColor_sandyBrown_get, SWIG_Lua_set_immutable },
    { "ofColor_seaGreen", _wrap_ofColor_seaGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_seaShell", _wrap_ofColor_seaShell_get, SWIG_Lua_set_immutable },
    { "ofColor_sienna", _wrap_ofColor_sienna_get, SWIG_Lua_set_immutable },
    { "ofColor_silver", _wrap_ofColor_silver_get, SWIG_Lua_set_immutable },
    { "ofColor_skyBlue", _wrap_ofColor_skyBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_slateBlue", _wrap_ofColor_slateBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_slateGray", _wrap_ofColor_slateGray_get, SWIG_Lua_set_immutable },
    { "ofColor_slateGrey", _wrap_ofColor_slateGrey_get, SWIG_Lua_set_immutable },
    { "ofColor_snow", _wrap_ofColor_snow_get, SWIG_Lua_set_immutable },
    { "ofColor_springGreen", _wrap_ofColor_springGreen_get, SWIG_Lua_set_immutable },
    { "ofColor_steelBlue", _wrap_ofColor_steelBlue_get, SWIG_Lua_set_immutable },
    { "ofColor_blueSteel", _wrap_ofColor_blueSteel_get, SWIG_Lua_set_immutable },
    { "ofColor_tan", _wrap_ofColor_tan_get, SWIG_Lua_set_immutable },
    { "ofColor_teal", _wrap_ofColor_teal_get, SWIG_Lua_set_immutable },
    { "ofColor_thistle", _wrap_ofColor_thistle_get, SWIG_Lua_set_immutable },
    { "ofColor_tomato", _wrap_ofColor_tomato_get, SWIG_Lua_set_immutable },
    { "ofColor_turquoise", _wrap_ofColor_turquoise_get, SWIG_Lua_set_immutable },
    { "ofColor_violet", _wrap_ofColor_violet_get, SWIG_Lua_set_immutable },
    { "ofColor_wheat", _wrap_ofColor_wheat_get, SWIG_Lua_set_immutable },
    { "ofColor_whiteSmoke", _wrap_ofColor_whiteSmoke_get, SWIG_Lua_set_immutable },
    { "ofColor_yellowGreen", _wrap_ofColor_yellowGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_white", _wrap_ofFloatColor_white_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_gray", _wrap_ofFloatColor_gray_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_black", _wrap_ofFloatColor_black_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_red", _wrap_ofFloatColor_red_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_green", _wrap_ofFloatColor_green_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_blue", _wrap_ofFloatColor_blue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_cyan", _wrap_ofFloatColor_cyan_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_magenta", _wrap_ofFloatColor_magenta_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_yellow", _wrap_ofFloatColor_yellow_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_aliceBlue", _wrap_ofFloatColor_aliceBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_antiqueWhite", _wrap_ofFloatColor_antiqueWhite_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_aqua", _wrap_ofFloatColor_aqua_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_aquamarine", _wrap_ofFloatColor_aquamarine_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_azure", _wrap_ofFloatColor_azure_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_beige", _wrap_ofFloatColor_beige_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_bisque", _wrap_ofFloatColor_bisque_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_blanchedAlmond", _wrap_ofFloatColor_blanchedAlmond_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_blueViolet", _wrap_ofFloatColor_blueViolet_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_brown", _wrap_ofFloatColor_brown_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_burlyWood", _wrap_ofFloatColor_burlyWood_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_cadetBlue", _wrap_ofFloatColor_cadetBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_chartreuse", _wrap_ofFloatColor_chartreuse_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_chocolate", _wrap_ofFloatColor_chocolate_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_coral", _wrap_ofFloatColor_coral_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_cornflowerBlue", _wrap_ofFloatColor_cornflowerBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_cornsilk", _wrap_ofFloatColor_cornsilk_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_crimson", _wrap_ofFloatColor_crimson_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkBlue", _wrap_ofFloatColor_darkBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkCyan", _wrap_ofFloatColor_darkCyan_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkGoldenRod", _wrap_ofFloatColor_darkGoldenRod_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkGray", _wrap_ofFloatColor_darkGray_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkGrey", _wrap_ofFloatColor_darkGrey_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkGreen", _wrap_ofFloatColor_darkGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkKhaki", _wrap_ofFloatColor_darkKhaki_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkMagenta", _wrap_ofFloatColor_darkMagenta_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkOliveGreen", _wrap_ofFloatColor_darkOliveGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkorange", _wrap_ofFloatColor_darkorange_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkOrchid", _wrap_ofFloatColor_darkOrchid_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkRed", _wrap_ofFloatColor_darkRed_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkSalmon", _wrap_ofFloatColor_darkSalmon_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkSeaGreen", _wrap_ofFloatColor_darkSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkSlateBlue", _wrap_ofFloatColor_darkSlateBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkSlateGray", _wrap_ofFloatColor_darkSlateGray_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkSlateGrey", _wrap_ofFloatColor_darkSlateGrey_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkTurquoise", _wrap_ofFloatColor_darkTurquoise_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_darkViolet", _wrap_ofFloatColor_darkViolet_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_deepPink", _wrap_ofFloatColor_deepPink_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_deepSkyBlue", _wrap_ofFloatColor_deepSkyBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_dimGray", _wrap_ofFloatColor_dimGray_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_dimGrey", _wrap_ofFloatColor_dimGrey_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_dodgerBlue", _wrap_ofFloatColor_dodgerBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_fireBrick", _wrap_ofFloatColor_fireBrick_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_floralWhite", _wrap_ofFloatColor_floralWhite_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_forestGreen", _wrap_ofFloatColor_forestGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_fuchsia", _wrap_ofFloatColor_fuchsia_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_gainsboro", _wrap_ofFloatColor_gainsboro_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_ghostWhite", _wrap_ofFloatColor_ghostWhite_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_gold", _wrap_ofFloatColor_gold_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_goldenRod", _wrap_ofFloatColor_goldenRod_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_grey", _wrap_ofFloatColor_grey_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_greenYellow", _wrap_ofFloatColor_greenYellow_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_honeyDew", _wrap_ofFloatColor_honeyDew_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_hotPink", _wrap_ofFloatColor_hotPink_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_indianRed", _wrap_ofFloatColor_indianRed_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_indigo", _wrap_ofFloatColor_indigo_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_ivory", _wrap_ofFloatColor_ivory_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_khaki", _wrap_ofFloatColor_khaki_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lavender", _wrap_ofFloatColor_lavender_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lavenderBlush", _wrap_ofFloatColor_lavenderBlush_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lawnGreen", _wrap_ofFloatColor_lawnGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lemonChiffon", _wrap_ofFloatColor_lemonChiffon_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightBlue", _wrap_ofFloatColor_lightBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightCoral", _wrap_ofFloatColor_lightCoral_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightCyan", _wrap_ofFloatColor_lightCyan_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightGoldenRodYellow", _wrap_ofFloatColor_lightGoldenRodYellow_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightGray", _wrap_ofFloatColor_lightGray_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightGrey", _wrap_ofFloatColor_lightGrey_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightGreen", _wrap_ofFloatColor_lightGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightPink", _wrap_ofFloatColor_lightPink_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightSalmon", _wrap_ofFloatColor_lightSalmon_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightSeaGreen", _wrap_ofFloatColor_lightSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightSkyBlue", _wrap_ofFloatColor_lightSkyBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightSlateGray", _wrap_ofFloatColor_lightSlateGray_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightSlateGrey", _wrap_ofFloatColor_lightSlateGrey_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightSteelBlue", _wrap_ofFloatColor_lightSteelBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lightYellow", _wrap_ofFloatColor_lightYellow_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_lime", _wrap_ofFloatColor_lime_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_limeGreen", _wrap_ofFloatColor_limeGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_linen", _wrap_ofFloatColor_linen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_maroon", _wrap_ofFloatColor_maroon_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumAquaMarine", _wrap_ofFloatColor_mediumAquaMarine_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumBlue", _wrap_ofFloatColor_mediumBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumOrchid", _wrap_ofFloatColor_mediumOrchid_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumPurple", _wrap_ofFloatColor_mediumPurple_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumSeaGreen", _wrap_ofFloatColor_mediumSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumSlateBlue", _wrap_ofFloatColor_mediumSlateBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumSpringGreen", _wrap_ofFloatColor_mediumSpringGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumTurquoise", _wrap_ofFloatColor_mediumTurquoise_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mediumVioletRed", _wrap_ofFloatColor_mediumVioletRed_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_midnightBlue", _wrap_ofFloatColor_midnightBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mintCream", _wrap_ofFloatColor_mintCream_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_mistyRose", _wrap_ofFloatColor_mistyRose_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_moccasin", _wrap_ofFloatColor_moccasin_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_navajoWhite", _wrap_ofFloatColor_navajoWhite_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_navy", _wrap_ofFloatColor_navy_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_oldLace", _wrap_ofFloatColor_oldLace_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_olive", _wrap_ofFloatColor_olive_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_oliveDrab", _wrap_ofFloatColor_oliveDrab_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_orange", _wrap_ofFloatColor_orange_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_orangeRed", _wrap_ofFloatColor_orangeRed_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_orchid", _wrap_ofFloatColor_orchid_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_paleGoldenRod", _wrap_ofFloatColor_paleGoldenRod_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_paleGreen", _wrap_ofFloatColor_paleGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_paleTurquoise", _wrap_ofFloatColor_paleTurquoise_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_paleVioletRed", _wrap_ofFloatColor_paleVioletRed_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_papayaWhip", _wrap_ofFloatColor_papayaWhip_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_peachPuff", _wrap_ofFloatColor_peachPuff_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_peru", _wrap_ofFloatColor_peru_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_pink", _wrap_ofFloatColor_pink_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_plum", _wrap_ofFloatColor_plum_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_powderBlue", _wrap_ofFloatColor_powderBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_purple", _wrap_ofFloatColor_purple_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_rosyBrown", _wrap_ofFloatColor_rosyBrown_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_royalBlue", _wrap_ofFloatColor_royalBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_saddleBrown", _wrap_ofFloatColor_saddleBrown_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_salmon", _wrap_ofFloatColor_salmon_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_sandyBrown", _wrap_ofFloatColor_sandyBrown_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_seaGreen", _wrap_ofFloatColor_seaGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_seaShell", _wrap_ofFloatColor_seaShell_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_sienna", _wrap_ofFloatColor_sienna_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_silver", _wrap_ofFloatColor_silver_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_skyBlue", _wrap_ofFloatColor_skyBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_slateBlue", _wrap_ofFloatColor_slateBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_slateGray", _wrap_ofFloatColor_slateGray_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_slateGrey", _wrap_ofFloatColor_slateGrey_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_snow", _wrap_ofFloatColor_snow_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_springGreen", _wrap_ofFloatColor_springGreen_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_steelBlue", _wrap_ofFloatColor_steelBlue_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_blueSteel", _wrap_ofFloatColor_blueSteel_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_tan", _wrap_ofFloatColor_tan_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_teal", _wrap_ofFloatColor_teal_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_thistle", _wrap_ofFloatColor_thistle_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_tomato", _wrap_ofFloatColor_tomato_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_turquoise", _wrap_ofFloatColor_turquoise_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_violet", _wrap_ofFloatColor_violet_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_wheat", _wrap_ofFloatColor_wheat_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_whiteSmoke", _wrap_ofFloatColor_whiteSmoke_get, SWIG_Lua_set_immutable },
    { "ofFloatColor_yellowGreen", _wrap_ofFloatColor_yellowGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_white", _wrap_ofShortColor_white_get, SWIG_Lua_set_immutable },
    { "ofShortColor_gray", _wrap_ofShortColor_gray_get, SWIG_Lua_set_immutable },
    { "ofShortColor_black", _wrap_ofShortColor_black_get, SWIG_Lua_set_immutable },
    { "ofShortColor_red", _wrap_ofShortColor_red_get, SWIG_Lua_set_immutable },
    { "ofShortColor_green", _wrap_ofShortColor_green_get, SWIG_Lua_set_immutable },
    { "ofShortColor_blue", _wrap_ofShortColor_blue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_cyan", _wrap_ofShortColor_cyan_get, SWIG_Lua_set_immutable },
    { "ofShortColor_magenta", _wrap_ofShortColor_magenta_get, SWIG_Lua_set_immutable },
    { "ofShortColor_yellow", _wrap_ofShortColor_yellow_get, SWIG_Lua_set_immutable },
    { "ofShortColor_aliceBlue", _wrap_ofShortColor_aliceBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_antiqueWhite", _wrap_ofShortColor_antiqueWhite_get, SWIG_Lua_set_immutable },
    { "ofShortColor_aqua", _wrap_ofShortColor_aqua_get, SWIG_Lua_set_immutable },
    { "ofShortColor_aquamarine", _wrap_ofShortColor_aquamarine_get, SWIG_Lua_set_immutable },
    { "ofShortColor_azure", _wrap_ofShortColor_azure_get, SWIG_Lua_set_immutable },
    { "ofShortColor_beige", _wrap_ofShortColor_beige_get, SWIG_Lua_set_immutable },
    { "ofShortColor_bisque", _wrap_ofShortColor_bisque_get, SWIG_Lua_set_immutable },
    { "ofShortColor_blanchedAlmond", _wrap_ofShortColor_blanchedAlmond_get, SWIG_Lua_set_immutable },
    { "ofShortColor_blueViolet", _wrap_ofShortColor_blueViolet_get, SWIG_Lua_set_immutable },
    { "ofShortColor_brown", _wrap_ofShortColor_brown_get, SWIG_Lua_set_immutable },
    { "ofShortColor_burlyWood", _wrap_ofShortColor_burlyWood_get, SWIG_Lua_set_immutable },
    { "ofShortColor_cadetBlue", _wrap_ofShortColor_cadetBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_chartreuse", _wrap_ofShortColor_chartreuse_get, SWIG_Lua_set_immutable },
    { "ofShortColor_chocolate", _wrap_ofShortColor_chocolate_get, SWIG_Lua_set_immutable },
    { "ofShortColor_coral", _wrap_ofShortColor_coral_get, SWIG_Lua_set_immutable },
    { "ofShortColor_cornflowerBlue", _wrap_ofShortColor_cornflowerBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_cornsilk", _wrap_ofShortColor_cornsilk_get, SWIG_Lua_set_immutable },
    { "ofShortColor_crimson", _wrap_ofShortColor_crimson_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkBlue", _wrap_ofShortColor_darkBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkCyan", _wrap_ofShortColor_darkCyan_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkGoldenRod", _wrap_ofShortColor_darkGoldenRod_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkGray", _wrap_ofShortColor_darkGray_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkGrey", _wrap_ofShortColor_darkGrey_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkGreen", _wrap_ofShortColor_darkGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkKhaki", _wrap_ofShortColor_darkKhaki_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkMagenta", _wrap_ofShortColor_darkMagenta_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkOliveGreen", _wrap_ofShortColor_darkOliveGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkorange", _wrap_ofShortColor_darkorange_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkOrchid", _wrap_ofShortColor_darkOrchid_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkRed", _wrap_ofShortColor_darkRed_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkSalmon", _wrap_ofShortColor_darkSalmon_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkSeaGreen", _wrap_ofShortColor_darkSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkSlateBlue", _wrap_ofShortColor_darkSlateBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkSlateGray", _wrap_ofShortColor_darkSlateGray_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkSlateGrey", _wrap_ofShortColor_darkSlateGrey_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkTurquoise", _wrap_ofShortColor_darkTurquoise_get, SWIG_Lua_set_immutable },
    { "ofShortColor_darkViolet", _wrap_ofShortColor_darkViolet_get, SWIG_Lua_set_immutable },
    { "ofShortColor_deepPink", _wrap_ofShortColor_deepPink_get, SWIG_Lua_set_immutable },
    { "ofShortColor_deepSkyBlue", _wrap_ofShortColor_deepSkyBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_dimGray", _wrap_ofShortColor_dimGray_get, SWIG_Lua_set_immutable },
    { "ofShortColor_dimGrey", _wrap_ofShortColor_dimGrey_get, SWIG_Lua_set_immutable },
    { "ofShortColor_dodgerBlue", _wrap_ofShortColor_dodgerBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_fireBrick", _wrap_ofShortColor_fireBrick_get, SWIG_Lua_set_immutable },
    { "ofShortColor_floralWhite", _wrap_ofShortColor_floralWhite_get, SWIG_Lua_set_immutable },
    { "ofShortColor_forestGreen", _wrap_ofShortColor_forestGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_fuchsia", _wrap_ofShortColor_fuchsia_get, SWIG_Lua_set_immutable },
    { "ofShortColor_gainsboro", _wrap_ofShortColor_gainsboro_get, SWIG_Lua_set_immutable },
    { "ofShortColor_ghostWhite", _wrap_ofShortColor_ghostWhite_get, SWIG_Lua_set_immutable },
    { "ofShortColor_gold", _wrap_ofShortColor_gold_get, SWIG_Lua_set_immutable },
    { "ofShortColor_goldenRod", _wrap_ofShortColor_goldenRod_get, SWIG_Lua_set_immutable },
    { "ofShortColor_grey", _wrap_ofShortColor_grey_get, SWIG_Lua_set_immutable },
    { "ofShortColor_greenYellow", _wrap_ofShortColor_greenYellow_get, SWIG_Lua_set_immutable },
    { "ofShortColor_honeyDew", _wrap_ofShortColor_honeyDew_get, SWIG_Lua_set_immutable },
    { "ofShortColor_hotPink", _wrap_ofShortColor_hotPink_get, SWIG_Lua_set_immutable },
    { "ofShortColor_indianRed", _wrap_ofShortColor_indianRed_get, SWIG_Lua_set_immutable },
    { "ofShortColor_indigo", _wrap_ofShortColor_indigo_get, SWIG_Lua_set_immutable },
    { "ofShortColor_ivory", _wrap_ofShortColor_ivory_get, SWIG_Lua_set_immutable },
    { "ofShortColor_khaki", _wrap_ofShortColor_khaki_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lavender", _wrap_ofShortColor_lavender_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lavenderBlush", _wrap_ofShortColor_lavenderBlush_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lawnGreen", _wrap_ofShortColor_lawnGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lemonChiffon", _wrap_ofShortColor_lemonChiffon_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightBlue", _wrap_ofShortColor_lightBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightCoral", _wrap_ofShortColor_lightCoral_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightCyan", _wrap_ofShortColor_lightCyan_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightGoldenRodYellow", _wrap_ofShortColor_lightGoldenRodYellow_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightGray", _wrap_ofShortColor_lightGray_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightGrey", _wrap_ofShortColor_lightGrey_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightGreen", _wrap_ofShortColor_lightGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightPink", _wrap_ofShortColor_lightPink_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightSalmon", _wrap_ofShortColor_lightSalmon_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightSeaGreen", _wrap_ofShortColor_lightSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightSkyBlue", _wrap_ofShortColor_lightSkyBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightSlateGray", _wrap_ofShortColor_lightSlateGray_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightSlateGrey", _wrap_ofShortColor_lightSlateGrey_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightSteelBlue", _wrap_ofShortColor_lightSteelBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lightYellow", _wrap_ofShortColor_lightYellow_get, SWIG_Lua_set_immutable },
    { "ofShortColor_lime", _wrap_ofShortColor_lime_get, SWIG_Lua_set_immutable },
    { "ofShortColor_limeGreen", _wrap_ofShortColor_limeGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_linen", _wrap_ofShortColor_linen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_maroon", _wrap_ofShortColor_maroon_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumAquaMarine", _wrap_ofShortColor_mediumAquaMarine_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumBlue", _wrap_ofShortColor_mediumBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumOrchid", _wrap_ofShortColor_mediumOrchid_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumPurple", _wrap_ofShortColor_mediumPurple_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumSeaGreen", _wrap_ofShortColor_mediumSeaGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumSlateBlue", _wrap_ofShortColor_mediumSlateBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumSpringGreen", _wrap_ofShortColor_mediumSpringGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumTurquoise", _wrap_ofShortColor_mediumTurquoise_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mediumVioletRed", _wrap_ofShortColor_mediumVioletRed_get, SWIG_Lua_set_immutable },
    { "ofShortColor_midnightBlue", _wrap_ofShortColor_midnightBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mintCream", _wrap_ofShortColor_mintCream_get, SWIG_Lua_set_immutable },
    { "ofShortColor_mistyRose", _wrap_ofShortColor_mistyRose_get, SWIG_Lua_set_immutable },
    { "ofShortColor_moccasin", _wrap_ofShortColor_moccasin_get, SWIG_Lua_set_immutable },
    { "ofShortColor_navajoWhite", _wrap_ofShortColor_navajoWhite_get, SWIG_Lua_set_immutable },
    { "ofShortColor_navy", _wrap_ofShortColor_navy_get, SWIG_Lua_set_immutable },
    { "ofShortColor_oldLace", _wrap_ofShortColor_oldLace_get, SWIG_Lua_set_immutable },
    { "ofShortColor_olive", _wrap_ofShortColor_olive_get, SWIG_Lua_set_immutable },
    { "ofShortColor_oliveDrab", _wrap_ofShortColor_oliveDrab_get, SWIG_Lua_set_immutable },
    { "ofShortColor_orange", _wrap_ofShortColor_orange_get, SWIG_Lua_set_immutable },
    { "ofShortColor_orangeRed", _wrap_ofShortColor_orangeRed_get, SWIG_Lua_set_immutable },
    { "ofShortColor_orchid", _wrap_ofShortColor_orchid_get, SWIG_Lua_set_immutable },
    { "ofShortColor_paleGoldenRod", _wrap_ofShortColor_paleGoldenRod_get, SWIG_Lua_set_immutable },
    { "ofShortColor_paleGreen", _wrap_ofShortColor_paleGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_paleTurquoise", _wrap_ofShortColor_paleTurquoise_get, SWIG_Lua_set_immutable },
    { "ofShortColor_paleVioletRed", _wrap_ofShortColor_paleVioletRed_get, SWIG_Lua_set_immutable },
    { "ofShortColor_papayaWhip", _wrap_ofShortColor_papayaWhip_get, SWIG_Lua_set_immutable },
    { "ofShortColor_peachPuff", _wrap_ofShortColor_peachPuff_get, SWIG_Lua_set_immutable },
    { "ofShortColor_peru", _wrap_ofShortColor_peru_get, SWIG_Lua_set_immutable },
    { "ofShortColor_pink", _wrap_ofShortColor_pink_get, SWIG_Lua_set_immutable },
    { "ofShortColor_plum", _wrap_ofShortColor_plum_get, SWIG_Lua_set_immutable },
    { "ofShortColor_powderBlue", _wrap_ofShortColor_powderBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_purple", _wrap_ofShortColor_purple_get, SWIG_Lua_set_immutable },
    { "ofShortColor_rosyBrown", _wrap_ofShortColor_rosyBrown_get, SWIG_Lua_set_immutable },
    { "ofShortColor_royalBlue", _wrap_ofShortColor_royalBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_saddleBrown", _wrap_ofShortColor_saddleBrown_get, SWIG_Lua_set_immutable },
    { "ofShortColor_salmon", _wrap_ofShortColor_salmon_get, SWIG_Lua_set_immutable },
    { "ofShortColor_sandyBrown", _wrap_ofShortColor_sandyBrown_get, SWIG_Lua_set_immutable },
    { "ofShortColor_seaGreen", _wrap_ofShortColor_seaGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_seaShell", _wrap_ofShortColor_seaShell_get, SWIG_Lua_set_immutable },
    { "ofShortColor_sienna", _wrap_ofShortColor_sienna_get, SWIG_Lua_set_immutable },
    { "ofShortColor_silver", _wrap_ofShortColor_silver_get, SWIG_Lua_set_immutable },
    { "ofShortColor_skyBlue", _wrap_ofShortColor_skyBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_slateBlue", _wrap_ofShortColor_slateBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_slateGray", _wrap_ofShortColor_slateGray_get, SWIG_Lua_set_immutable },
    { "ofShortColor_slateGrey", _wrap_ofShortColor_slateGrey_get, SWIG_Lua_set_immutable },
    { "ofShortColor_snow", _wrap_ofShortColor_snow_get, SWIG_Lua_set_immutable },
    { "ofShortColor_springGreen", _wrap_ofShortColor_springGreen_get, SWIG_Lua_set_immutable },
    { "ofShortColor_steelBlue", _wrap_ofShortColor_steelBlue_get, SWIG_Lua_set_immutable },
    { "ofShortColor_blueSteel", _wrap_ofShortColor_blueSteel_get, SWIG_Lua_set_immutable },
    { "ofShortColor_tan", _wrap_ofShortColor_tan_get, SWIG_Lua_set_immutable },
    { "ofShortColor_teal", _wrap_ofShortColor_teal_get, SWIG_Lua_set_immutable },
    { "ofShortColor_thistle", _wrap_ofShortColor_thistle_get, SWIG_Lua_set_immutable },
    { "ofShortColor_tomato", _wrap_ofShortColor_tomato_get, SWIG_Lua_set_immutable },
    { "ofShortColor_turquoise", _wrap_ofShortColor_turquoise_get, SWIG_Lua_set_immutable },
    { "ofShortColor_violet", _wrap_ofShortColor_violet_get, SWIG_Lua_set_immutable },
    { "ofShortColor_wheat", _wrap_ofShortColor_wheat_get, SWIG_Lua_set_immutable },
    { "ofShortColor_whiteSmoke", _wrap_ofShortColor_whiteSmoke_get, SWIG_Lua_set_immutable },
    { "ofShortColor_yellowGreen", _wrap_ofShortColor_yellowGreen_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("OF_VERSION_MAJOR", 0)},
    {SWIG_LUA_CONSTTAB_INT("OF_VERSION_MINOR", 9)},
    {SWIG_LUA_CONSTTAB_INT("OF_VERSION_PATCH", 0)},
    {SWIG_LUA_CONSTTAB_STRING("OF_VERSION_PRE_RELEASE", "master")},
    {SWIG_LUA_CONSTTAB_INT("OF_LOOP_NONE", OF_LOOP_NONE)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOOP_PALINDROME", OF_LOOP_PALINDROME)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOOP_NORMAL", OF_LOOP_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_OSX", OF_TARGET_OSX)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_WINGCC", OF_TARGET_WINGCC)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_WINVS", OF_TARGET_WINVS)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_IOS", OF_TARGET_IOS)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_ANDROID", OF_TARGET_ANDROID)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_LINUX", OF_TARGET_LINUX)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_LINUX64", OF_TARGET_LINUX64)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_LINUXARMV6L", OF_TARGET_LINUXARMV6L)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_LINUXARMV7L", OF_TARGET_LINUXARMV7L)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_EMSCRIPTEN", OF_TARGET_EMSCRIPTEN)},
    {SWIG_LUA_CONSTTAB_INT("OF_SERIAL_NO_DATA", -2)},
    {SWIG_LUA_CONSTTAB_INT("OF_SERIAL_ERROR", -1)},
    {SWIG_LUA_CONSTTAB_FLOAT("PI", 3.14159265358979323846)},
    {SWIG_LUA_CONSTTAB_FLOAT("TWO_PI", 6.28318530717958647693)},
    {SWIG_LUA_CONSTTAB_FLOAT("M_TWO_PI", 6.28318530717958647693)},
    {SWIG_LUA_CONSTTAB_FLOAT("FOUR_PI", 12.56637061435917295385)},
    {SWIG_LUA_CONSTTAB_FLOAT("HALF_PI", 1.57079632679489661923)},
    {SWIG_LUA_CONSTTAB_FLOAT("DEG_TO_RAD", (3.14159265358979323846/180.0))},
    {SWIG_LUA_CONSTTAB_FLOAT("RAD_TO_DEG", (180.0/3.14159265358979323846))},
    {SWIG_LUA_CONSTTAB_INT("OF_OUTLINE", OF_OUTLINE)},
    {SWIG_LUA_CONSTTAB_INT("OF_FILLED", OF_FILLED)},
    {SWIG_LUA_CONSTTAB_INT("OF_WINDOW", OF_WINDOW)},
    {SWIG_LUA_CONSTTAB_INT("OF_FULLSCREEN", OF_FULLSCREEN)},
    {SWIG_LUA_CONSTTAB_INT("OF_GAME_MODE", OF_GAME_MODE)},
    {SWIG_LUA_CONSTTAB_INT("OF_ASPECT_RATIO_IGNORE", OF_ASPECT_RATIO_IGNORE)},
    {SWIG_LUA_CONSTTAB_INT("OF_ASPECT_RATIO_KEEP", OF_ASPECT_RATIO_KEEP)},
    {SWIG_LUA_CONSTTAB_INT("OF_ASPECT_RATIO_KEEP_BY_EXPANDING", OF_ASPECT_RATIO_KEEP_BY_EXPANDING)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_VERT_IGNORE", OF_ALIGN_VERT_IGNORE)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_VERT_TOP", OF_ALIGN_VERT_TOP)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_VERT_BOTTOM", OF_ALIGN_VERT_BOTTOM)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_VERT_CENTER", OF_ALIGN_VERT_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_HORZ_IGNORE", OF_ALIGN_HORZ_IGNORE)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_HORZ_LEFT", OF_ALIGN_HORZ_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_HORZ_RIGHT", OF_ALIGN_HORZ_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_HORZ_CENTER", OF_ALIGN_HORZ_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("OF_RECTMODE_CORNER", OF_RECTMODE_CORNER)},
    {SWIG_LUA_CONSTTAB_INT("OF_RECTMODE_CENTER", OF_RECTMODE_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("OF_SCALEMODE_FIT", OF_SCALEMODE_FIT)},
    {SWIG_LUA_CONSTTAB_INT("OF_SCALEMODE_FILL", OF_SCALEMODE_FILL)},
    {SWIG_LUA_CONSTTAB_INT("OF_SCALEMODE_CENTER", OF_SCALEMODE_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("OF_SCALEMODE_STRETCH_TO_FILL", OF_SCALEMODE_STRETCH_TO_FILL)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_GRAYSCALE", OF_IMAGE_GRAYSCALE)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_COLOR", OF_IMAGE_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_COLOR_ALPHA", OF_IMAGE_COLOR_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_UNDEFINED", OF_IMAGE_UNDEFINED)},
    {SWIG_LUA_CONSTTAB_INT("OF_MAX_STYLE_HISTORY", 32)},
    {SWIG_LUA_CONSTTAB_INT("OF_MAX_VIEWPORT_HISTORY", 32)},
    {SWIG_LUA_CONSTTAB_INT("OF_MAX_CIRCLE_PTS", 1024)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_DISABLED", OF_BLENDMODE_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_ALPHA", OF_BLENDMODE_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_ADD", OF_BLENDMODE_ADD)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_SUBTRACT", OF_BLENDMODE_SUBTRACT)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_MULTIPLY", OF_BLENDMODE_MULTIPLY)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_SCREEN", OF_BLENDMODE_SCREEN)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_DEFAULT", OF_ORIENTATION_DEFAULT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_180", OF_ORIENTATION_180)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_90_LEFT", OF_ORIENTATION_90_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_90_RIGHT", OF_ORIENTATION_90_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_UNKNOWN", OF_ORIENTATION_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("OF_GRADIENT_LINEAR", OF_GRADIENT_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("OF_GRADIENT_CIRCULAR", OF_GRADIENT_CIRCULAR)},
    {SWIG_LUA_CONSTTAB_INT("OF_GRADIENT_BAR", OF_GRADIENT_BAR)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_ODD", OF_POLY_WINDING_ODD)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_NONZERO", OF_POLY_WINDING_NONZERO)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_POSITIVE", OF_POLY_WINDING_POSITIVE)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_NEGATIVE", OF_POLY_WINDING_NEGATIVE)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_ABS_GEQ_TWO", OF_POLY_WINDING_ABS_GEQ_TWO)},
    {SWIG_LUA_CONSTTAB_INT("OF_CLOSE", (true))},
    {SWIG_LUA_CONSTTAB_INT("OF_LEFT_HANDED", OF_LEFT_HANDED)},
    {SWIG_LUA_CONSTTAB_INT("OF_RIGHT_HANDED", OF_RIGHT_HANDED)},
    {SWIG_LUA_CONSTTAB_INT("OF_MATRIX_MODELVIEW", OF_MATRIX_MODELVIEW)},
    {SWIG_LUA_CONSTTAB_INT("OF_MATRIX_PROJECTION", OF_MATRIX_PROJECTION)},
    {SWIG_LUA_CONSTTAB_INT("OF_MATRIX_TEXTURE", OF_MATRIX_TEXTURE)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_MODIFIER", 0x0100)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RETURN", 13)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_ESC", 27)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_TAB", 9)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_BACKSPACE", 8)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_DEL", 127)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F1", (1|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F2", (2|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F3", (3|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F4", (4|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F5", (5|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F6", (6|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F7", (7|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F8", (8|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F9", (9|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F10", (10|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F11", (11|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F12", (12|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT", (100|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_UP", (101|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT", (102|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_DOWN", (103|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_PAGE_UP", (104|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_PAGE_DOWN", (105|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_HOME", (106|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_END", (107|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_INSERT", (108|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_CONTROL", (0x200|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_ALT", (0x400|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_SHIFT", (0x800|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_SUPER", (0x1000|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_SHIFT", (0x1|(0x800|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_SHIFT", (0x2|(0x800|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_CONTROL", (0x1|(0x200|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_CONTROL", (0x2|(0x200|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_ALT", (0x1|(0x400|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_ALT", (0x2|(0x400|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_SUPER", (0x1|(0x1000|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_SUPER", (0x2|(0x1000|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_COMMAND", (0x1|(0x1000|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_COMMAND", (0x2|(0x1000|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_1", 0)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_2", 1)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_3", 2)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_4", 3)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_5", 4)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_6", 5)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_7", 6)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_8", 7)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_LAST", 7)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_LEFT", 0)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_MIDDLE", 1)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_RIGHT", 2)},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_RESTORE", (0))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_BLACK", (30))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_RED", (31))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_GREEN", (32))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_YELLOW", (33))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_BLUE", (34))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_PURPLE", (35))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_CYAN", (36))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_WHITE", (37))},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_GRAY", OF_PIXELS_GRAY)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_GRAY_ALPHA", OF_PIXELS_GRAY_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_RGB", OF_PIXELS_RGB)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_BGR", OF_PIXELS_BGR)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_RGBA", OF_PIXELS_RGBA)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_BGRA", OF_PIXELS_BGRA)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_RGB565", OF_PIXELS_RGB565)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_NV12", OF_PIXELS_NV12)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_NV21", OF_PIXELS_NV21)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_YV12", OF_PIXELS_YV12)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_I420", OF_PIXELS_I420)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_YUY2", OF_PIXELS_YUY2)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_UYVY", OF_PIXELS_UYVY)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_Y", OF_PIXELS_Y)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_U", OF_PIXELS_U)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_V", OF_PIXELS_V)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_UV", OF_PIXELS_UV)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_VU", OF_PIXELS_VU)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_UNKNOWN", OF_PIXELS_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_NATIVE", OF_PIXELS_NATIVE)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_SIMPLE", OF_BITMAPMODE_SIMPLE)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_SCREEN", OF_BITMAPMODE_SCREEN)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_VIEWPORT", OF_BITMAPMODE_VIEWPORT)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_MODEL", OF_BITMAPMODE_MODEL)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_MODEL_BILLBOARD", OF_BITMAPMODE_MODEL_BILLBOARD)},
    {SWIG_LUA_CONSTTAB_INT("OF_ENCODING_UTF8", OF_ENCODING_UTF8)},
    {SWIG_LUA_CONSTTAB_INT("OF_ENCODING_ISO_8859_15", OF_ENCODING_ISO_8859_15)},
    {SWIG_LUA_CONSTTAB_INT("OF_COMPRESS_NONE", OF_COMPRESS_NONE)},
    {SWIG_LUA_CONSTTAB_INT("OF_COMPRESS_SRGB", OF_COMPRESS_SRGB)},
    {SWIG_LUA_CONSTTAB_INT("OF_COMPRESS_ARB", OF_COMPRESS_ARB)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_BEST", OF_IMAGE_QUALITY_BEST)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_HIGH", OF_IMAGE_QUALITY_HIGH)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_MEDIUM", OF_IMAGE_QUALITY_MEDIUM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_LOW", OF_IMAGE_QUALITY_LOW)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_WORST", OF_IMAGE_QUALITY_WORST)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_BMP", OF_IMAGE_FORMAT_BMP)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_ICO", OF_IMAGE_FORMAT_ICO)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_JPEG", OF_IMAGE_FORMAT_JPEG)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_JNG", OF_IMAGE_FORMAT_JNG)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_KOALA", OF_IMAGE_FORMAT_KOALA)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_LBM", OF_IMAGE_FORMAT_LBM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_IFF", OF_IMAGE_FORMAT_IFF)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_MNG", OF_IMAGE_FORMAT_MNG)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PBM", OF_IMAGE_FORMAT_PBM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PBMRAW", OF_IMAGE_FORMAT_PBMRAW)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PCD", OF_IMAGE_FORMAT_PCD)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PCX", OF_IMAGE_FORMAT_PCX)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PGM", OF_IMAGE_FORMAT_PGM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PGMRAW", OF_IMAGE_FORMAT_PGMRAW)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PNG", OF_IMAGE_FORMAT_PNG)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PPM", OF_IMAGE_FORMAT_PPM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PPMRAW", OF_IMAGE_FORMAT_PPMRAW)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_RAS", OF_IMAGE_FORMAT_RAS)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_TARGA", OF_IMAGE_FORMAT_TARGA)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_TIFF", OF_IMAGE_FORMAT_TIFF)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_WBMP", OF_IMAGE_FORMAT_WBMP)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PSD", OF_IMAGE_FORMAT_PSD)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_CUT", OF_IMAGE_FORMAT_CUT)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_XBM", OF_IMAGE_FORMAT_XBM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_XPM", OF_IMAGE_FORMAT_XPM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_DDS", OF_IMAGE_FORMAT_DDS)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_GIF", OF_IMAGE_FORMAT_GIF)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_HDR", OF_IMAGE_FORMAT_HDR)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_FAXG3", OF_IMAGE_FORMAT_FAXG3)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_SGI", OF_IMAGE_FORMAT_SGI)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_EXR", OF_IMAGE_FORMAT_EXR)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_J2K", OF_IMAGE_FORMAT_J2K)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_JP2", OF_IMAGE_FORMAT_JP2)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PFM", OF_IMAGE_FORMAT_PFM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PICT", OF_IMAGE_FORMAT_PICT)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_RAW", OF_IMAGE_FORMAT_RAW)},
    {SWIG_LUA_CONSTTAB_INT("ofFile_Reference", ofFile::Reference)},
    {SWIG_LUA_CONSTTAB_INT("ofFile_ReadOnly", ofFile::ReadOnly)},
    {SWIG_LUA_CONSTTAB_INT("ofFile_WriteOnly", ofFile::WriteOnly)},
    {SWIG_LUA_CONSTTAB_INT("ofFile_ReadWrite", ofFile::ReadWrite)},
    {SWIG_LUA_CONSTTAB_INT("ofFile_Append", ofFile::Append)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOG_VERBOSE", OF_LOG_VERBOSE)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOG_NOTICE", OF_LOG_NOTICE)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOG_WARNING", OF_LOG_WARNING)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOG_ERROR", OF_LOG_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOG_FATAL_ERROR", OF_LOG_FATAL_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOG_SILENT", OF_LOG_SILENT)},
    {SWIG_LUA_CONSTTAB_INT("ofBoxPrimitive_SIDE_FRONT", ofBoxPrimitive::SIDE_FRONT)},
    {SWIG_LUA_CONSTTAB_INT("ofBoxPrimitive_SIDE_RIGHT", ofBoxPrimitive::SIDE_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("ofBoxPrimitive_SIDE_LEFT", ofBoxPrimitive::SIDE_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("ofBoxPrimitive_SIDE_BACK", ofBoxPrimitive::SIDE_BACK)},
    {SWIG_LUA_CONSTTAB_INT("ofBoxPrimitive_SIDE_TOP", ofBoxPrimitive::SIDE_TOP)},
    {SWIG_LUA_CONSTTAB_INT("ofBoxPrimitive_SIDE_BOTTOM", ofBoxPrimitive::SIDE_BOTTOM)},
    {SWIG_LUA_CONSTTAB_INT("ofBoxPrimitive_SIDES_TOTAL", ofBoxPrimitive::SIDES_TOTAL)},
    {SWIG_LUA_CONSTTAB_INT("OF_LIGHT_POINT", OF_LIGHT_POINT)},
    {SWIG_LUA_CONSTTAB_INT("OF_LIGHT_DIRECTIONAL", OF_LIGHT_DIRECTIONAL)},
    {SWIG_LUA_CONSTTAB_INT("OF_LIGHT_SPOT", OF_LIGHT_SPOT)},
    {SWIG_LUA_CONSTTAB_INT("OF_LIGHT_AREA", OF_LIGHT_AREA)},
    {SWIG_LUA_CONSTTAB_INT("ofShader_POSITION_ATTRIBUTE", ofShader::POSITION_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("ofShader_COLOR_ATTRIBUTE", ofShader::COLOR_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("ofShader_NORMAL_ATTRIBUTE", ofShader::NORMAL_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("ofShader_TEXCOORD_ATTRIBUTE", ofShader::TEXCOORD_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("ofShader_INDEX_ATTRIBUTE", ofShader::INDEX_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("OF_INTERPOLATE_NEAREST_NEIGHBOR", OF_INTERPOLATE_NEAREST_NEIGHBOR)},
    {SWIG_LUA_CONSTTAB_INT("OF_INTERPOLATE_BILINEAR", OF_INTERPOLATE_BILINEAR)},
    {SWIG_LUA_CONSTTAB_INT("OF_INTERPOLATE_BICUBIC", OF_INTERPOLATE_BICUBIC)},
    {SWIG_LUA_CONSTTAB_INT("ofPath_COMMANDS", ofPath::COMMANDS)},
    {SWIG_LUA_CONSTTAB_INT("ofPath_POLYLINES", ofPath::POLYLINES)},
    {SWIG_LUA_CONSTTAB_INT("CIRC_RESOLUTION", 22)},
    {SWIG_LUA_CONSTTAB_INT("ofVec2f_DIM", ofVec2f::DIM)},
    {SWIG_LUA_CONSTTAB_INT("ofVec3f_DIM", ofVec3f::DIM)},
    {SWIG_LUA_CONSTTAB_INT("ofVec4f_DIM", ofVec4f::DIM)},
    {SWIG_LUA_CONSTTAB_INT("ofTouchEventArgs_down", ofTouchEventArgs::down)},
    {SWIG_LUA_CONSTTAB_INT("ofTouchEventArgs_up", ofTouchEventArgs::up)},
    {SWIG_LUA_CONSTTAB_INT("ofTouchEventArgs_move", ofTouchEventArgs::move)},
    {SWIG_LUA_CONSTTAB_INT("ofTouchEventArgs_doubleTap", ofTouchEventArgs::doubleTap)},
    {SWIG_LUA_CONSTTAB_INT("ofTouchEventArgs_cancel", ofTouchEventArgs::cancel)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "ofFbo_checkGLSupport", _wrap_ofFbo_checkGLSupport},
    { "ofFbo_maxColorAttachments", _wrap_ofFbo_maxColorAttachments},
    { "ofFbo_maxDrawBuffers", _wrap_ofFbo_maxDrawBuffers},
    { "ofFbo_maxSamples", _wrap_ofFbo_maxSamples},
    { "ofGetUsingArbTex", _wrap_ofGetUsingArbTex},
    { "ofEnableArbTex", _wrap_ofEnableArbTex},
    { "ofDisableArbTex", _wrap_ofDisableArbTex},
    { "ofGetUsingNormalizedTexCoords", _wrap_ofGetUsingNormalizedTexCoords},
    { "ofEnableNormalizedTexCoords", _wrap_ofEnableNormalizedTexCoords},
    { "ofDisableNormalizedTexCoords", _wrap_ofDisableNormalizedTexCoords},
    { "ofEnableTextureEdgeHack", _wrap_ofEnableTextureEdgeHack},
    { "ofDisableTextureEdgeHack", _wrap_ofDisableTextureEdgeHack},
    { "ofIsTextureEdgeHackEnabled", _wrap_ofIsTextureEdgeHackEnabled},
    { "ofSoundStreamSetup", _wrap_ofSoundStreamSetup},
    { "ofSoundStreamStop", _wrap_ofSoundStreamStop},
    { "ofSoundStreamStart", _wrap_ofSoundStreamStart},
    { "ofSoundStreamClose", _wrap_ofSoundStreamClose},
    { "ofSoundStreamListDevices", _wrap_ofSoundStreamListDevices},
    { "ofColor_fromHsb", _wrap_ofColor_fromHsb},
    { "ofColor_fromHex", _wrap_ofColor_fromHex},
    { "ofColor_limit", _wrap_ofColor_limit},
    { "ofFloatColor_fromHsb", _wrap_ofFloatColor_fromHsb},
    { "ofFloatColor_fromHex", _wrap_ofFloatColor_fromHex},
    { "ofFloatColor_limit", _wrap_ofFloatColor_limit},
    { "ofShortColor_fromHsb", _wrap_ofShortColor_fromHsb},
    { "ofShortColor_fromHex", _wrap_ofShortColor_fromHex},
    { "ofShortColor_limit", _wrap_ofShortColor_limit},
    { "ofIsVFlipped", _wrap_ofIsVFlipped},
    { "ofResetElapsedTimeCounter", _wrap_ofResetElapsedTimeCounter},
    { "ofGetElapsedTimef", _wrap_ofGetElapsedTimef},
    { "ofGetElapsedTimeMillis", _wrap_ofGetElapsedTimeMillis},
    { "ofGetElapsedTimeMicros", _wrap_ofGetElapsedTimeMicros},
    { "ofGetFrameNum", _wrap_ofGetFrameNum},
    { "ofGetSeconds", _wrap_ofGetSeconds},
    { "ofGetMinutes", _wrap_ofGetMinutes},
    { "ofGetHours", _wrap_ofGetHours},
    { "ofGetUnixTime", _wrap_ofGetUnixTime},
    { "ofGetSystemTime", _wrap_ofGetSystemTime},
    { "ofGetSystemTimeMicros", _wrap_ofGetSystemTimeMicros},
    { "ofSleepMillis", _wrap_ofSleepMillis},
    { "ofGetTimestampString", _wrap_ofGetTimestampString},
    { "ofGetYear", _wrap_ofGetYear},
    { "ofGetMonth", _wrap_ofGetMonth},
    { "ofGetDay", _wrap_ofGetDay},
    { "ofGetWeekday", _wrap_ofGetWeekday},
    { "ofEnableDataPath", _wrap_ofEnableDataPath},
    { "ofDisableDataPath", _wrap_ofDisableDataPath},
    { "ofToDataPath", _wrap_ofToDataPath},
    { "ofSetWorkingDirectoryToDefault", _wrap_ofSetWorkingDirectoryToDefault},
    { "ofSetDataPathRoot", _wrap_ofSetDataPathRoot},
    { "ofSplitString", _wrap_ofSplitString},
    { "ofJoinString", _wrap_ofJoinString},
    { "ofStringReplace", _wrap_ofStringReplace},
    { "ofIsStringInString", _wrap_ofIsStringInString},
    { "ofStringTimesInString", _wrap_ofStringTimesInString},
    { "ofToLower", _wrap_ofToLower},
    { "ofToUpper", _wrap_ofToUpper},
    { "ofTrimFront", _wrap_ofTrimFront},
    { "ofTrimBack", _wrap_ofTrimBack},
    { "ofTrim", _wrap_ofTrim},
    { "ofAppendUTF8", _wrap_ofAppendUTF8},
    { "ofToInt", _wrap_ofToInt},
    { "ofToFloat", _wrap_ofToFloat},
    { "ofToDouble", _wrap_ofToDouble},
    { "ofToBool", _wrap_ofToBool},
    { "ofToHex", _wrap_ofToHex},
    { "ofHexToInt", _wrap_ofHexToInt},
    { "ofHexToChar", _wrap_ofHexToChar},
    { "ofHexToFloat", _wrap_ofHexToFloat},
    { "ofHexToString", _wrap_ofHexToString},
    { "ofToChar", _wrap_ofToChar},
    { "ofToBinary", _wrap_ofToBinary},
    { "ofBinaryToInt", _wrap_ofBinaryToInt},
    { "ofBinaryToChar", _wrap_ofBinaryToChar},
    { "ofBinaryToFloat", _wrap_ofBinaryToFloat},
    { "ofBinaryToString", _wrap_ofBinaryToString},
    { "ofGetVersionInfo", _wrap_ofGetVersionInfo},
    { "ofGetVersionMajor", _wrap_ofGetVersionMajor},
    { "ofGetVersionMinor", _wrap_ofGetVersionMinor},
    { "ofGetVersionPatch", _wrap_ofGetVersionPatch},
    { "ofGetVersionPreRelease", _wrap_ofGetVersionPreRelease},
    { "ofSaveScreen", _wrap_ofSaveScreen},
    { "ofSaveFrame", _wrap_ofSaveFrame},
    { "ofSaveViewport", _wrap_ofSaveViewport},
    { "ofSystem", _wrap_ofSystem},
    { "ofGetTargetPlatform", _wrap_ofGetTargetPlatform},
    { "ofBuffer_setIOBufferSize", _wrap_ofBuffer_setIOBufferSize},
    { "ofBufferFromFile", _wrap_ofBufferFromFile},
    { "ofBufferToFile", _wrap_ofBufferToFile},
    { "ofFilePath_getFileExt", _wrap_ofFilePath_getFileExt},
    { "ofFilePath_removeExt", _wrap_ofFilePath_removeExt},
    { "ofFilePath_addLeadingSlash", _wrap_ofFilePath_addLeadingSlash},
    { "ofFilePath_addTrailingSlash", _wrap_ofFilePath_addTrailingSlash},
    { "ofFilePath_removeTrailingSlash", _wrap_ofFilePath_removeTrailingSlash},
    { "ofFilePath_getPathForDirectory", _wrap_ofFilePath_getPathForDirectory},
    { "ofFilePath_getAbsolutePath", _wrap_ofFilePath_getAbsolutePath},
    { "ofFilePath_isAbsolute", _wrap_ofFilePath_isAbsolute},
    { "ofFilePath_getFileName", _wrap_ofFilePath_getFileName},
    { "ofFilePath_getBaseName", _wrap_ofFilePath_getBaseName},
    { "ofFilePath_getEnclosingDirectory", _wrap_ofFilePath_getEnclosingDirectory},
    { "ofFilePath_createEnclosingDirectory", _wrap_ofFilePath_createEnclosingDirectory},
    { "ofFilePath_getCurrentWorkingDirectory", _wrap_ofFilePath_getCurrentWorkingDirectory},
    { "ofFilePath_join", _wrap_ofFilePath_join},
    { "ofFilePath_getCurrentExePath", _wrap_ofFilePath_getCurrentExePath},
    { "ofFilePath_getCurrentExeDir", _wrap_ofFilePath_getCurrentExeDir},
    { "ofFilePath_getUserHomeDir", _wrap_ofFilePath_getUserHomeDir},
    { "ofFile_copyFromTo", _wrap_ofFile_copyFromTo},
    { "ofFile_moveFromTo", _wrap_ofFile_moveFromTo},
    { "ofFile_doesFileExist", _wrap_ofFile_doesFileExist},
    { "ofFile_removeFile", _wrap_ofFile_removeFile},
    { "ofDirectory_createDirectory", _wrap_ofDirectory_createDirectory},
    { "ofDirectory_isDirectoryEmpty", _wrap_ofDirectory_isDirectoryEmpty},
    { "ofDirectory_doesDirectoryExist", _wrap_ofDirectory_doesDirectoryExist},
    { "ofDirectory_removeDirectory", _wrap_ofDirectory_removeDirectory},
    { "log", _wrap_log},
    { "ofSetLogLevel", _wrap_ofSetLogLevel},
    { "ofGetLogLevel", _wrap_ofGetLogLevel},
    { "ofGetLogLevelName", _wrap_ofGetLogLevelName},
    { "ofLogToFile", _wrap_ofLogToFile},
    { "ofLogToConsole", _wrap_ofLogToConsole},
    { "ofSystemAlertDialog", _wrap_ofSystemAlertDialog},
    { "ofSystemLoadDialog", _wrap_ofSystemLoadDialog},
    { "ofSystemSaveDialog", _wrap_ofSystemSaveDialog},
    { "ofSystemTextBoxDialog", _wrap_ofSystemTextBoxDialog},
    { "ofLoadURL", _wrap_ofLoadURL},
    { "ofLoadURLAsync", _wrap_ofLoadURLAsync},
    { "ofSaveURLTo", _wrap_ofSaveURLTo},
    { "ofSaveURLAsync", _wrap_ofSaveURLAsync},
    { "ofRemoveURLRequest", _wrap_ofRemoveURLRequest},
    { "ofRemoveAllURLRequests", _wrap_ofRemoveAllURLRequests},
    { "ofStopURLLoader", _wrap_ofStopURLLoader},
    { "ofURLResponseEvent", _wrap_ofURLResponseEvent},
    { "ofDrawAxis", _wrap_ofDrawAxis},
    { "ofDrawGrid", _wrap_ofDrawGrid},
    { "ofDrawGridPlane", _wrap_ofDrawGridPlane},
    { "ofDrawArrow", _wrap_ofDrawArrow},
    { "ofDrawRotationAxes", _wrap_ofDrawRotationAxes},
    { "ofMesh_plane", _wrap_ofMesh_plane},
    { "ofMesh_sphere", _wrap_ofMesh_sphere},
    { "ofMesh_icosahedron", _wrap_ofMesh_icosahedron},
    { "ofMesh_icosphere", _wrap_ofMesh_icosphere},
    { "ofMesh_cylinder", _wrap_ofMesh_cylinder},
    { "ofMesh_cone", _wrap_ofMesh_cone},
    { "ofMesh_box", _wrap_ofMesh_box},
    { "ofMesh_axis", _wrap_ofMesh_axis},
    { "ofInit", _wrap_ofInit},
    { "ofSetupOpenGL", _wrap_ofSetupOpenGL},
    { "ofCreateWindow", _wrap_ofCreateWindow},
    { "ofGetMainLoop", _wrap_ofGetMainLoop},
    { "ofSetMainLoop", _wrap_ofSetMainLoop},
    { "ofRunApp", _wrap_ofRunApp},
    { "ofRunMainLoop", _wrap_ofRunMainLoop},
    { "ofGetAppPtr", _wrap_ofGetAppPtr},
    { "ofExit", _wrap_ofExit},
    { "ofGetFrameRate", _wrap_ofGetFrameRate},
    { "ofGetTargetFrameRate", _wrap_ofGetTargetFrameRate},
    { "ofSetFrameRate", _wrap_ofSetFrameRate},
    { "ofGetLastFrameTime", _wrap_ofGetLastFrameTime},
    { "ofSetOrientation", _wrap_ofSetOrientation},
    { "ofGetOrientation", _wrap_ofGetOrientation},
    { "ofHideCursor", _wrap_ofHideCursor},
    { "ofShowCursor", _wrap_ofShowCursor},
    { "ofGetWindowPositionX", _wrap_ofGetWindowPositionX},
    { "ofGetWindowPositionY", _wrap_ofGetWindowPositionY},
    { "ofGetScreenWidth", _wrap_ofGetScreenWidth},
    { "ofGetScreenHeight", _wrap_ofGetScreenHeight},
    { "ofGetWindowMode", _wrap_ofGetWindowMode},
    { "ofGetWidth", _wrap_ofGetWidth},
    { "ofGetHeight", _wrap_ofGetHeight},
    { "ofGetWindowWidth", _wrap_ofGetWindowWidth},
    { "ofGetWindowHeight", _wrap_ofGetWindowHeight},
    { "ofRandomWidth", _wrap_ofRandomWidth},
    { "ofRandomHeight", _wrap_ofRandomHeight},
    { "ofDoesHWOrientation", _wrap_ofDoesHWOrientation},
    { "ofGetWindowSize", _wrap_ofGetWindowSize},
    { "ofGetWindowRect", _wrap_ofGetWindowRect},
    { "ofGetWindowPtr", _wrap_ofGetWindowPtr},
    { "ofSetWindowPosition", _wrap_ofSetWindowPosition},
    { "ofSetWindowShape", _wrap_ofSetWindowShape},
    { "ofSetWindowTitle", _wrap_ofSetWindowTitle},
    { "ofEnableSetupScreen", _wrap_ofEnableSetupScreen},
    { "ofDisableSetupScreen", _wrap_ofDisableSetupScreen},
    { "ofSetFullscreen", _wrap_ofSetFullscreen},
    { "ofToggleFullscreen", _wrap_ofToggleFullscreen},
    { "ofSetVerticalSync", _wrap_ofSetVerticalSync},
    { "ofEvents", _wrap_ofEvents},
    { "ofSetCurrentRenderer", _wrap_ofSetCurrentRenderer},
    { "ofGetCurrentRenderer", _wrap_ofGetCurrentRenderer},
    { "ofSetEscapeQuitsApp", _wrap_ofSetEscapeQuitsApp},
    { "ofEnableLighting", _wrap_ofEnableLighting},
    { "ofDisableLighting", _wrap_ofDisableLighting},
    { "ofEnableSeparateSpecularLight", _wrap_ofEnableSeparateSpecularLight},
    { "ofDisableSeparateSpecularLight", _wrap_ofDisableSeparateSpecularLight},
    { "ofGetLightingEnabled", _wrap_ofGetLightingEnabled},
    { "ofSetSmoothLighting", _wrap_ofSetSmoothLighting},
    { "ofSetGlobalAmbientColor", _wrap_ofSetGlobalAmbientColor},
    { "ofGetGlobalAmbientColor", _wrap_ofGetGlobalAmbientColor},
    { "ofLightsData", _wrap_ofLightsData},
    { "ofPolyline_fromRectangle", _wrap_ofPolyline_fromRectangle},
    { "ofSetColor", _wrap_ofSetColor},
    { "ofSetHexColor", _wrap_ofSetHexColor},
    { "ofNoFill", _wrap_ofNoFill},
    { "ofFill", _wrap_ofFill},
    { "ofGetFill", _wrap_ofGetFill},
    { "ofGetBackgroundColor", _wrap_ofGetBackgroundColor},
    { "ofGetBackground", _wrap_ofGetBackground},
    { "ofBackground", _wrap_ofBackground},
    { "ofBackgroundHex", _wrap_ofBackgroundHex},
    { "ofBackgroundGradient", _wrap_ofBackgroundGradient},
    { "ofSetBackgroundColor", _wrap_ofSetBackgroundColor},
    { "ofSetBackgroundColorHex", _wrap_ofSetBackgroundColorHex},
    { "ofSetBackgroundAuto", _wrap_ofSetBackgroundAuto},
    { "ofGetBackgroundAuto", _wrap_ofGetBackgroundAuto},
    { "ofClear", _wrap_ofClear},
    { "ofClearAlpha", _wrap_ofClearAlpha},
    { "ofDrawTriangle", _wrap_ofDrawTriangle},
    { "ofDrawCircle", _wrap_ofDrawCircle},
    { "ofDrawEllipse", _wrap_ofDrawEllipse},
    { "ofDrawLine", _wrap_ofDrawLine},
    { "ofDrawRectangle", _wrap_ofDrawRectangle},
    { "ofDrawRectRounded", _wrap_ofDrawRectRounded},
    { "ofDrawCurve", _wrap_ofDrawCurve},
    { "ofDrawBezier", _wrap_ofDrawBezier},
    { "ofTriangle", _wrap_ofTriangle},
    { "ofCircle", _wrap_ofCircle},
    { "ofEllipse", _wrap_ofEllipse},
    { "ofLine", _wrap_ofLine},
    { "ofRect", _wrap_ofRect},
    { "ofRectRounded", _wrap_ofRectRounded},
    { "ofCurve", _wrap_ofCurve},
    { "ofBezier", _wrap_ofBezier},
    { "ofBeginShape", _wrap_ofBeginShape},
    { "ofVertex", _wrap_ofVertex},
    { "ofVertices", _wrap_ofVertices},
    { "ofCurveVertex", _wrap_ofCurveVertex},
    { "ofCurveVertices", _wrap_ofCurveVertices},
    { "ofBezierVertex", _wrap_ofBezierVertex},
    { "ofEndShape", _wrap_ofEndShape},
    { "ofNextContour", _wrap_ofNextContour},
    { "ofSetDrawBitmapMode", _wrap_ofSetDrawBitmapMode},
    { "ofDrawBitmapStringHighlight", _wrap_ofDrawBitmapStringHighlight},
    { "ofSetupGraphicDefaults", _wrap_ofSetupGraphicDefaults},
    { "ofSetupScreen", _wrap_ofSetupScreen},
    { "ofGetRectMode", _wrap_ofGetRectMode},
    { "ofSetCircleResolution", _wrap_ofSetCircleResolution},
    { "ofSetCurveResolution", _wrap_ofSetCurveResolution},
    { "ofSetLineWidth", _wrap_ofSetLineWidth},
    { "ofSetDepthTest", _wrap_ofSetDepthTest},
    { "ofEnableDepthTest", _wrap_ofEnableDepthTest},
    { "ofDisableDepthTest", _wrap_ofDisableDepthTest},
    { "ofEnableBlendMode", _wrap_ofEnableBlendMode},
    { "ofDisableBlendMode", _wrap_ofDisableBlendMode},
    { "ofEnablePointSprites", _wrap_ofEnablePointSprites},
    { "ofDisablePointSprites", _wrap_ofDisablePointSprites},
    { "ofEnableAlphaBlending", _wrap_ofEnableAlphaBlending},
    { "ofDisableAlphaBlending", _wrap_ofDisableAlphaBlending},
    { "ofEnableSmoothing", _wrap_ofEnableSmoothing},
    { "ofDisableSmoothing", _wrap_ofDisableSmoothing},
    { "ofEnableAntiAliasing", _wrap_ofEnableAntiAliasing},
    { "ofDisableAntiAliasing", _wrap_ofDisableAntiAliasing},
    { "ofGetStyle", _wrap_ofGetStyle},
    { "ofSetStyle", _wrap_ofSetStyle},
    { "ofPushStyle", _wrap_ofPushStyle},
    { "ofPopStyle", _wrap_ofPopStyle},
    { "ofSetPolyMode", _wrap_ofSetPolyMode},
    { "ofSetRectMode", _wrap_ofSetRectMode},
    { "ofPushMatrix", _wrap_ofPushMatrix},
    { "ofPopMatrix", _wrap_ofPopMatrix},
    { "ofGetCurrentMatrix", _wrap_ofGetCurrentMatrix},
    { "ofGetCurrentOrientationMatrix", _wrap_ofGetCurrentOrientationMatrix},
    { "ofGetCurrentNormalMatrix", _wrap_ofGetCurrentNormalMatrix},
    { "ofTranslate", _wrap_ofTranslate},
    { "ofScale", _wrap_ofScale},
    { "ofRotate", _wrap_ofRotate},
    { "ofRotateX", _wrap_ofRotateX},
    { "ofRotateY", _wrap_ofRotateY},
    { "ofRotateZ", _wrap_ofRotateZ},
    { "ofLoadIdentityMatrix", _wrap_ofLoadIdentityMatrix},
    { "ofLoadMatrix", _wrap_ofLoadMatrix},
    { "ofMultMatrix", _wrap_ofMultMatrix},
    { "ofSetMatrixMode", _wrap_ofSetMatrixMode},
    { "ofLoadViewMatrix", _wrap_ofLoadViewMatrix},
    { "ofMultViewMatrix", _wrap_ofMultViewMatrix},
    { "ofGetCurrentViewMatrix", _wrap_ofGetCurrentViewMatrix},
    { "ofPushView", _wrap_ofPushView},
    { "ofPopView", _wrap_ofPopView},
    { "ofViewport", _wrap_ofViewport},
    { "ofGetCurrentViewport", _wrap_ofGetCurrentViewport},
    { "ofGetNativeViewport", _wrap_ofGetNativeViewport},
    { "ofGetViewportWidth", _wrap_ofGetViewportWidth},
    { "ofGetViewportHeight", _wrap_ofGetViewportHeight},
    { "ofSetupScreenPerspective", _wrap_ofSetupScreenPerspective},
    { "ofSetupScreenOrtho", _wrap_ofSetupScreenOrtho},
    { "ofOrientationToDegrees", _wrap_ofOrientationToDegrees},
    { "ofSetCoordHandedness", _wrap_ofSetCoordHandedness},
    { "ofGetCoordHandedness", _wrap_ofGetCoordHandedness},
    { "ofBeginSaveScreenAsPDF", _wrap_ofBeginSaveScreenAsPDF},
    { "ofEndSaveScreenAsPDF", _wrap_ofEndSaveScreenAsPDF},
    { "ofBeginSaveScreenAsSVG", _wrap_ofBeginSaveScreenAsSVG},
    { "ofEndSaveScreenAsSVG", _wrap_ofEndSaveScreenAsSVG},
    { "ofSetPlaneResolution", _wrap_ofSetPlaneResolution},
    { "ofGetPlaneResolution", _wrap_ofGetPlaneResolution},
    { "ofDrawPlane", _wrap_ofDrawPlane},
    { "ofSetSphereResolution", _wrap_ofSetSphereResolution},
    { "ofGetSphereResolution", _wrap_ofGetSphereResolution},
    { "ofDrawSphere", _wrap_ofDrawSphere},
    { "ofSetIcoSphereResolution", _wrap_ofSetIcoSphereResolution},
    { "ofGetIcoSphereResolution", _wrap_ofGetIcoSphereResolution},
    { "ofDrawIcoSphere", _wrap_ofDrawIcoSphere},
    { "ofSetCylinderResolution", _wrap_ofSetCylinderResolution},
    { "ofGetCylinderResolution", _wrap_ofGetCylinderResolution},
    { "ofDrawCylinder", _wrap_ofDrawCylinder},
    { "ofSetConeResolution", _wrap_ofSetConeResolution},
    { "ofGetConeResolution", _wrap_ofGetConeResolution},
    { "ofDrawCone", _wrap_ofDrawCone},
    { "ofSetBoxResolution", _wrap_ofSetBoxResolution},
    { "ofGetBoxResolution", _wrap_ofGetBoxResolution},
    { "ofDrawBox", _wrap_ofDrawBox},
    { "ofTrueTypeFont_setGlobalDpi", _wrap_ofTrueTypeFont_setGlobalDpi},
    { "ofMatrix4x4_newIdentityMatrix", _wrap_ofMatrix4x4_newIdentityMatrix},
    { "ofMatrix4x4_newScaleMatrix", _wrap_ofMatrix4x4_newScaleMatrix},
    { "ofMatrix4x4_newTranslationMatrix", _wrap_ofMatrix4x4_newTranslationMatrix},
    { "ofMatrix4x4_newRotationMatrix", _wrap_ofMatrix4x4_newRotationMatrix},
    { "ofMatrix4x4_newOrthoMatrix", _wrap_ofMatrix4x4_newOrthoMatrix},
    { "ofMatrix4x4_newOrtho2DMatrix", _wrap_ofMatrix4x4_newOrtho2DMatrix},
    { "ofMatrix4x4_newFrustumMatrix", _wrap_ofMatrix4x4_newFrustumMatrix},
    { "ofMatrix4x4_newPerspectiveMatrix", _wrap_ofMatrix4x4_newPerspectiveMatrix},
    { "ofMatrix4x4_newLookAtMatrix", _wrap_ofMatrix4x4_newLookAtMatrix},
    { "ofMatrix4x4_getInverseOf", _wrap_ofMatrix4x4_getInverseOf},
    { "ofMatrix4x4_getTransposedOf", _wrap_ofMatrix4x4_getTransposedOf},
    { "ofMatrix4x4_getOrthoNormalOf", _wrap_ofMatrix4x4_getOrthoNormalOf},
    { "ofMatrix4x4_transform3x3", _wrap_ofMatrix4x4_transform3x3},
    { "ofVec2f_zero", _wrap_ofVec2f_zero},
    { "ofVec2f_one", _wrap_ofVec2f_one},
    { "ofVec3f_zero", _wrap_ofVec3f_zero},
    { "ofVec3f_one", _wrap_ofVec3f_one},
    { "ofVec4f_zero", _wrap_ofVec4f_zero},
    { "ofVec4f_one", _wrap_ofVec4f_one},
    { "ofRandom", _wrap_ofRandom},
    { "ofRandomf", _wrap_ofRandomf},
    { "ofRandomuf", _wrap_ofRandomuf},
    { "ofSeedRandom", _wrap_ofSeedRandom},
    { "ofNormalize", _wrap_ofNormalize},
    { "ofMap", _wrap_ofMap},
    { "ofClamp", _wrap_ofClamp},
    { "ofInRange", _wrap_ofInRange},
    { "ofLerp", _wrap_ofLerp},
    { "ofDist", _wrap_ofDist},
    { "ofDistSquared", _wrap_ofDistSquared},
    { "ofRadToDeg", _wrap_ofRadToDeg},
    { "ofDegToRad", _wrap_ofDegToRad},
    { "ofLerpDegrees", _wrap_ofLerpDegrees},
    { "ofLerpRadians", _wrap_ofLerpRadians},
    { "ofAngleDifferenceDegrees", _wrap_ofAngleDifferenceDegrees},
    { "ofAngleDifferenceRadians", _wrap_ofAngleDifferenceRadians},
    { "ofWrap", _wrap_ofWrap},
    { "ofWrapRadians", _wrap_ofWrapRadians},
    { "ofWrapDegrees", _wrap_ofWrapDegrees},
    { "ofNoise", _wrap_ofNoise},
    { "ofSignedNoise", _wrap_ofSignedNoise},
    { "ofInsidePoly", _wrap_ofInsidePoly},
    { "ofLineSegmentIntersection", _wrap_ofLineSegmentIntersection},
    { "ofBezierPoint", _wrap_ofBezierPoint},
    { "ofCurvePoint", _wrap_ofCurvePoint},
    { "ofBezierTangent", _wrap_ofBezierTangent},
    { "ofCurveTangent", _wrap_ofCurveTangent},
    { "ofNextPow2", _wrap_ofNextPow2},
    { "ofSign", _wrap_ofSign},
    { "ofGetMousePressed", _wrap_ofGetMousePressed},
    { "ofGetKeyPressed", _wrap_ofGetKeyPressed},
    { "ofGetMouseX", _wrap_ofGetMouseX},
    { "ofGetMouseY", _wrap_ofGetMouseY},
    { "ofGetPreviousMouseX", _wrap_ofGetPreviousMouseX},
    { "ofGetPreviousMouseY", _wrap_ofGetPreviousMouseY},
    { "ofSendMessage", _wrap_ofSendMessage},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_IntVector,
&_wrap_class_FloatVector,
&_wrap_class_StringVector,
&_wrap_class_ofFbo,
&_wrap_class_ofTextureData,
&_wrap_class_ofTexture,
&_wrap_class_ofImage,
&_wrap_class_ofFloatImage,
&_wrap_class_ofShortImage,
&_wrap_class_ofSoundStream,
&_wrap_class_ofSoundPlayer,
&_wrap_class_ofColor,
&_wrap_class_ofFloatColor,
&_wrap_class_ofShortColor,
&_wrap_class_ofBaseHasTexturePlanes,
&_wrap_class_ofBaseURLFileLoader,
&_wrap_class_ofBaseMaterial,
&_wrap_class_ofSerialDeviceInfo,
&_wrap_class_ofStyle,
&_wrap_class_ofUTF8Iterator,
&_wrap_class_ofBuffer,
&_wrap_class_ofFilePath,
&_wrap_class_ofFile,
&_wrap_class_ofDirectory,
&_wrap_class_ofFileDialogResult,
&_wrap_class_ofHttpRequest,
&_wrap_class_ofHttpResponse,
&_wrap_class_ofURLFileLoader,
&_wrap_class_ofRectangle,
&_wrap_class_ofNode,
&_wrap_class_ofCamera,
&_wrap_class_ofEasyCam,
&_wrap_class_ofMesh,
&_wrap_class_ofMeshFace,
&_wrap_class_ofPlanePrimitive,
&_wrap_class_ofSpherePrimitive,
&_wrap_class_ofIcoSpherePrimitive,
&_wrap_class_ofCylinderPrimitive,
&_wrap_class_ofConePrimitive,
&_wrap_class_ofBoxPrimitive,
&_wrap_class_ofLight,
&_wrap_class_ofMaterial,
&_wrap_class_ofShader,
&_wrap_class_ofVbo,
&_wrap_class_ofVboMesh,
&_wrap_class_ofPixels,
&_wrap_class_ofFloatPixels,
&_wrap_class_ofShortPixels,
&_wrap_class_ofPath,
&_wrap_class_ofPolyline,
&_wrap_class_of3dGraphics,
&_wrap_class_ofTrueTypeFont,
&_wrap_class_ofMatrix3x3,
&_wrap_class_ofMatrix4x4,
&_wrap_class_ofQuaternion,
&_wrap_class_ofVec2f,
&_wrap_class_ofVec3f,
&_wrap_class_ofVec4f,
&_wrap_class_ofMatrixStack,
&_wrap_class_ofVideoGrabber,
&_wrap_class_ofVideoPlayer,
&_wrap_class_ofDragInfo,
&_wrap_class_ofTouchEventArgs,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "of",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ofImage_T_unsigned_char_tTo_p_ofBaseImage_T_unsigned_char_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned char > *)  ((ofImage_< unsigned char > *) x));
}
static void *_p_ofImage_T_float_tTo_p_ofBaseImage_T_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< float > *)  ((ofImage_< float > *) x));
}
static void *_p_ofMaterialTo_p_ofBaseMaterial(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseMaterial *)  ((ofMaterial *) x));
}
static void *_p_ofSoundPlayerTo_p_ofBaseSoundPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseSoundPlayer *)  ((ofSoundPlayer *) x));
}
static void *_p_ofEasyCamTo_p_ofCamera(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofCamera *)  ((ofEasyCam *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseHasTexturePlanes(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexturePlanes *)  ((ofBaseVideoDraws *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseHasTexturePlanes(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexturePlanes *) (ofBaseVideoDraws *) ((ofVideoGrabber *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseHasTexturePlanes(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexturePlanes *) (ofBaseVideoDraws *) ((ofVideoPlayer *) x));
}
static void *_p_ofMouseEventArgsTo_p_ofVec2f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofVec2f *)  ((ofMouseEventArgs *) x));
}
static void *_p_ofTouchEventArgsTo_p_ofVec2f(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofVec2f *)  ((ofTouchEventArgs *) x));
}
static void *_p_ofPlanePrimitiveTo_p_of3dPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((of3dPrimitive *)  ((ofPlanePrimitive *) x));
}
static void *_p_ofSpherePrimitiveTo_p_of3dPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((of3dPrimitive *)  ((ofSpherePrimitive *) x));
}
static void *_p_ofIcoSpherePrimitiveTo_p_of3dPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((of3dPrimitive *)  ((ofIcoSpherePrimitive *) x));
}
static void *_p_ofCylinderPrimitiveTo_p_of3dPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((of3dPrimitive *)  ((ofCylinderPrimitive *) x));
}
static void *_p_ofConePrimitiveTo_p_of3dPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((of3dPrimitive *)  ((ofConePrimitive *) x));
}
static void *_p_ofBoxPrimitiveTo_p_of3dPrimitive(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((of3dPrimitive *)  ((ofBoxPrimitive *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseVideoPlayer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideoPlayer *)  ((ofVideoPlayer *) x));
}
static void *_p_of3dPrimitiveTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *)  ((of3dPrimitive *) x));
}
static void *_p_ofPlanePrimitiveTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *) (of3dPrimitive *) ((ofPlanePrimitive *) x));
}
static void *_p_ofSpherePrimitiveTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *) (of3dPrimitive *) ((ofSpherePrimitive *) x));
}
static void *_p_ofIcoSpherePrimitiveTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *) (of3dPrimitive *) ((ofIcoSpherePrimitive *) x));
}
static void *_p_ofCylinderPrimitiveTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *) (of3dPrimitive *) ((ofCylinderPrimitive *) x));
}
static void *_p_ofConePrimitiveTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *) (of3dPrimitive *) ((ofConePrimitive *) x));
}
static void *_p_ofBoxPrimitiveTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *) (of3dPrimitive *) ((ofBoxPrimitive *) x));
}
static void *_p_ofEasyCamTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *) (ofCamera *) ((ofEasyCam *) x));
}
static void *_p_ofLightTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *)  ((ofLight *) x));
}
static void *_p_ofCameraTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *)  ((ofCamera *) x));
}
static void *_p_ofConsoleLoggerChannelTo_p_ofBaseLoggerChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseLoggerChannel *)  ((ofConsoleLoggerChannel *) x));
}
static void *_p_ofFileLoggerChannelTo_p_ofBaseLoggerChannel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseLoggerChannel *)  ((ofFileLoggerChannel *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseVideo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideo *)  ((ofBaseVideoDraws *) x));
}
static void *_p_ofBaseVideoGrabberTo_p_ofBaseVideo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideo *)  ((ofBaseVideoGrabber *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseVideo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideo *) (ofBaseVideoGrabber *) ((ofVideoGrabber *) x));
}
static void *_p_ofBaseVideoPlayerTo_p_ofBaseVideo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideo *)  ((ofBaseVideoPlayer *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseVideo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideo *) (ofBaseVideoPlayer *) ((ofVideoPlayer *) x));
}
static void *_p_ofVboMeshTo_p_ofMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofMesh *)  ((ofVboMesh *) x));
}
static void *_p_ofFileTo_p_fstream(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fstream *)  ((ofFile *) x));
}
static void *_p_ofAbstractImageTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *)  ((ofAbstractImage *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *) (ofBaseHasTexturePlanes *) ((ofBaseVideoDraws *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *) (ofBaseHasTexturePlanes *)(ofBaseVideoDraws *) ((ofVideoGrabber *) x));
}
static void *_p_ofFboTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *)  ((ofFbo *) x));
}
static void *_p_ofBaseHasTexturePlanesTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *)  ((ofBaseHasTexturePlanes *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *) (ofBaseHasTexturePlanes *)(ofBaseVideoDraws *) ((ofVideoPlayer *) x));
}
static void *_p_ofBaseFileSerializerTo_p_ofBaseSerializer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseSerializer *)  ((ofBaseFileSerializer *) x));
}
static void *_p_ofBaseGLRendererTo_p_ofBaseRenderer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseRenderer *)  ((ofBaseGLRenderer *) x));
}
static void *_p_ofKeyEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofKeyEventArgs *) x));
}
static void *_p_ofMouseEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofMouseEventArgs *) x));
}
static void *_p_ofTouchEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofTouchEventArgs *) x));
}
static void *_p_ofResizeEventArgsTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofResizeEventArgs *) x));
}
static void *_p_ofMessageTo_p_ofEventArgs(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofEventArgs *)  ((ofMessage *) x));
}
static void *_p_ofAbstractImageTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofAbstractImage *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofBaseVideoDraws *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *) (ofBaseVideoDraws *) ((ofVideoGrabber *) x));
}
static void *_p_ofTextureTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofTexture *) x));
}
static void *_p_ofFboTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofFbo *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *) (ofBaseVideoDraws *) ((ofVideoPlayer *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseVideoGrabber(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideoGrabber *)  ((ofVideoGrabber *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseVideoDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideoDraws *)  ((ofVideoGrabber *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseVideoDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideoDraws *)  ((ofVideoPlayer *) x));
}
static void *_p_ofLogErrorTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogError *) x));
}
static void *_p_ofLogNoticeTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogNotice *) x));
}
static void *_p_ofLogFatalErrorTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogFatalError *) x));
}
static void *_p_ofLogVerboseTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogVerbose *) x));
}
static void *_p_ofLogWarningTo_p_ofLog(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofLog *)  ((ofLogWarning *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseHasPixels(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasPixels *) (ofBaseVideo *) ((ofBaseVideoDraws *) x));
}
static void *_p_ofBaseVideoGrabberTo_p_ofBaseHasPixels(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasPixels *) (ofBaseVideo *) ((ofBaseVideoGrabber *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseHasPixels(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasPixels *) (ofBaseVideo *)(ofBaseVideoGrabber *) ((ofVideoGrabber *) x));
}
static void *_p_ofBaseVideoTo_p_ofBaseHasPixels(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasPixels *)  ((ofBaseVideo *) x));
}
static void *_p_ofBaseVideoPlayerTo_p_ofBaseHasPixels(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasPixels *) (ofBaseVideo *) ((ofBaseVideoPlayer *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseHasPixels(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasPixels *) (ofBaseVideo *)(ofBaseVideoPlayer *) ((ofVideoPlayer *) x));
}
static void *_p_ofImage_T_unsigned_short_tTo_p_ofBaseImage_T_unsigned_short_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage_< unsigned short > *)  ((ofImage_< unsigned short > *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *) (ofBaseVideo *) ((ofBaseVideoDraws *) x));
}
static void *_p_ofBaseVideoGrabberTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *) (ofBaseVideo *) ((ofBaseVideoGrabber *) x));
}
static void *_p_ofVideoGrabberTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *) (ofBaseVideo *)(ofBaseVideoGrabber *) ((ofVideoGrabber *) x));
}
static void *_p_ofBaseVideoTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *)  ((ofBaseVideo *) x));
}
static void *_p_ofBaseVideoPlayerTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *) (ofBaseVideo *) ((ofBaseVideoPlayer *) x));
}
static void *_p_ofVideoPlayerTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *) (ofBaseVideo *)(ofBaseVideoPlayer *) ((ofVideoPlayer *) x));
}
static swig_type_info _swigt__p_GLenum = {"_p_GLenum", "GLenum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLsizei = {"_p_GLsizei", "GLsizei *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLuint = {"_p_GLuint", "GLuint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_filebuf = {"_p_filebuf", "filebuf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|GLfloat *|ofPixels_< float >::iterator|ofPixels_< float >::const_iterator|ofPixels_< float >::reverse_iterator|ofPixels_< float >::const_reverse_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fstream = {"_p_fstream", "fstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|GLint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_istream = {"_p_istream", "istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_of3dGraphics = {"_p_of3dGraphics", "of3dGraphics *", 0, 0, (void*)&_wrap_class_of3dGraphics, 0};
static swig_type_info _swigt__p_of3dPrimitive = {"_p_of3dPrimitive", "of3dPrimitive *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofAppBaseWindow = {"_p_ofAppBaseWindow", "ofAppBaseWindow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseApp = {"_p_ofBaseApp", "ofSimpleApp *|ofBaseApp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseDraws = {"_p_ofBaseDraws", "ofBaseDraws *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofAbstractImage = {"_p_ofAbstractImage", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseHasPixels = {"_p_ofBaseHasPixels", "ofBaseHasPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseHasTexture = {"_p_ofBaseHasTexture", "ofBaseHasTexture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseHasTexturePlanes = {"_p_ofBaseHasTexturePlanes", "ofBaseHasTexturePlanes *", 0, 0, (void*)&_wrap_class_ofBaseHasTexturePlanes, 0};
static swig_type_info _swigt__p_ofBaseImage_T_float_t = {"_p_ofBaseImage_T_float_t", "ofBaseImage_< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseImage_T_unsigned_char_t = {"_p_ofBaseImage_T_unsigned_char_t", "ofBaseImage_< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseImage_T_unsigned_short_t = {"_p_ofBaseImage_T_unsigned_short_t", "ofBaseImage_< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseLoggerChannel = {"_p_ofBaseLoggerChannel", "ofBaseLoggerChannel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofConsoleLoggerChannel = {"_p_ofConsoleLoggerChannel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofFileLoggerChannel = {"_p_ofFileLoggerChannel", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseMaterial = {"_p_ofBaseMaterial", "ofBaseMaterial *", 0, 0, (void*)&_wrap_class_ofBaseMaterial, 0};
static swig_type_info _swigt__p_ofBaseRenderer = {"_p_ofBaseRenderer", "ofBaseRenderer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseGLRenderer = {"_p_ofBaseGLRenderer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseSerializer = {"_p_ofBaseSerializer", "ofBaseSerializer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseFileSerializer = {"_p_ofBaseFileSerializer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseSoundInput = {"_p_ofBaseSoundInput", "ofBaseSoundInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseSoundOutput = {"_p_ofBaseSoundOutput", "ofBaseSoundOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseSoundPlayer = {"_p_ofBaseSoundPlayer", "ofBaseSoundPlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseURLFileLoader = {"_p_ofBaseURLFileLoader", "ofBaseURLFileLoader *", 0, 0, (void*)&_wrap_class_ofBaseURLFileLoader, 0};
static swig_type_info _swigt__p_ofBaseUpdates = {"_p_ofBaseUpdates", "ofBaseUpdates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseVideo = {"_p_ofBaseVideo", "ofBaseVideo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseVideoDraws = {"_p_ofBaseVideoDraws", "ofBaseVideoDraws *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseVideoGrabber = {"_p_ofBaseVideoGrabber", "ofBaseVideoGrabber *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseVideoPlayer = {"_p_ofBaseVideoPlayer", "ofBaseVideoPlayer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBoxPrimitive = {"_p_ofBoxPrimitive", "ofBoxPrimitive *", 0, 0, (void*)&_wrap_class_ofBoxPrimitive, 0};
static swig_type_info _swigt__p_ofBuffer = {"_p_ofBuffer", "ofBuffer *", 0, 0, (void*)&_wrap_class_ofBuffer, 0};
static swig_type_info _swigt__p_ofBufferObject = {"_p_ofBufferObject", "ofBufferObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofCamera = {"_p_ofCamera", "ofCamera *", 0, 0, (void*)&_wrap_class_ofCamera, 0};
static swig_type_info _swigt__p_ofColor_T_float_t = {"_p_ofColor_T_float_t", "ofColor_< float > *|ofFloatColor *", 0, 0, (void*)&_wrap_class_ofFloatColor, 0};
static swig_type_info _swigt__p_ofColor_T_unsigned_char_t = {"_p_ofColor_T_unsigned_char_t", "ofColor_< unsigned char > *|ofColor *", 0, 0, (void*)&_wrap_class_ofColor, 0};
static swig_type_info _swigt__p_ofColor_T_unsigned_short_t = {"_p_ofColor_T_unsigned_short_t", "ofColor_< unsigned short > *|ofShortColor *", 0, 0, (void*)&_wrap_class_ofShortColor, 0};
static swig_type_info _swigt__p_ofConePrimitive = {"_p_ofConePrimitive", "ofConePrimitive *", 0, 0, (void*)&_wrap_class_ofConePrimitive, 0};
static swig_type_info _swigt__p_ofCoreEvents = {"_p_ofCoreEvents", "ofCoreEvents *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofCylinderPrimitive = {"_p_ofCylinderPrimitive", "ofCylinderPrimitive *", 0, 0, (void*)&_wrap_class_ofCylinderPrimitive, 0};
static swig_type_info _swigt__p_ofDirectory = {"_p_ofDirectory", "ofDirectory *", 0, 0, (void*)&_wrap_class_ofDirectory, 0};
static swig_type_info _swigt__p_ofDragInfo = {"_p_ofDragInfo", "ofDragInfo *", 0, 0, (void*)&_wrap_class_ofDragInfo, 0};
static swig_type_info _swigt__p_ofEasyCam = {"_p_ofEasyCam", "ofEasyCam *", 0, 0, (void*)&_wrap_class_ofEasyCam, 0};
static swig_type_info _swigt__p_ofEventArgs = {"_p_ofEventArgs", "ofEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofKeyEventArgs = {"_p_ofKeyEventArgs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofMouseEventArgs = {"_p_ofMouseEventArgs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofResizeEventArgs = {"_p_ofResizeEventArgs", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofEventT_ofHttpResponse_t = {"_p_ofEventT_ofHttpResponse_t", "ofEvent< ofHttpResponse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofFbo = {"_p_ofFbo", "ofFbo *", 0, 0, (void*)&_wrap_class_ofFbo, 0};
static swig_type_info _swigt__p_ofFbo__Settings = {"_p_ofFbo__Settings", "ofFbo::Settings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofFile = {"_p_ofFile", "ofFile *", 0, 0, (void*)&_wrap_class_ofFile, 0};
static swig_type_info _swigt__p_ofFileDialogResult = {"_p_ofFileDialogResult", "ofFileDialogResult *", 0, 0, (void*)&_wrap_class_ofFileDialogResult, 0};
static swig_type_info _swigt__p_ofFilePath = {"_p_ofFilePath", "ofFilePath *", 0, 0, (void*)&_wrap_class_ofFilePath, 0};
static swig_type_info _swigt__p_ofGLProgrammableRenderer = {"_p_ofGLProgrammableRenderer", "ofGLProgrammableRenderer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofHttpRequest = {"_p_ofHttpRequest", "ofHttpRequest *", 0, 0, (void*)&_wrap_class_ofHttpRequest, 0};
static swig_type_info _swigt__p_ofHttpResponse = {"_p_ofHttpResponse", "ofHttpResponse *", 0, 0, (void*)&_wrap_class_ofHttpResponse, 0};
static swig_type_info _swigt__p_ofIcoSpherePrimitive = {"_p_ofIcoSpherePrimitive", "ofIcoSpherePrimitive *", 0, 0, (void*)&_wrap_class_ofIcoSpherePrimitive, 0};
static swig_type_info _swigt__p_ofImage_T_float_t = {"_p_ofImage_T_float_t", "ofFloatImage *|ofImage_< float > *", 0, 0, (void*)&_wrap_class_ofFloatImage, 0};
static swig_type_info _swigt__p_ofImage_T_unsigned_char_t = {"_p_ofImage_T_unsigned_char_t", "ofImage *|ofImage_< unsigned char > *", 0, 0, (void*)&_wrap_class_ofImage, 0};
static swig_type_info _swigt__p_ofImage_T_unsigned_short_t = {"_p_ofImage_T_unsigned_short_t", "ofImage_< unsigned short > *|ofShortImage *", 0, 0, (void*)&_wrap_class_ofShortImage, 0};
static swig_type_info _swigt__p_ofLight = {"_p_ofLight", "ofLight *", 0, 0, (void*)&_wrap_class_ofLight, 0};
static swig_type_info _swigt__p_ofLog = {"_p_ofLog", "ofLog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofLogError = {"_p_ofLogError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofLogNotice = {"_p_ofLogNotice", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofLogFatalError = {"_p_ofLogFatalError", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofLogVerbose = {"_p_ofLogVerbose", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofLogWarning = {"_p_ofLogWarning", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofMaterial = {"_p_ofMaterial", "ofMaterial *", 0, 0, (void*)&_wrap_class_ofMaterial, 0};
static swig_type_info _swigt__p_ofMaterial__Data = {"_p_ofMaterial__Data", "ofMaterial::Data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMatrix3x3 = {"_p_ofMatrix3x3", "ofMatrix3x3 *", 0, 0, (void*)&_wrap_class_ofMatrix3x3, 0};
static swig_type_info _swigt__p_ofMatrix4x4 = {"_p_ofMatrix4x4", "ofMatrix4x4 *", 0, 0, (void*)&_wrap_class_ofMatrix4x4, 0};
static swig_type_info _swigt__p_ofMatrixStack = {"_p_ofMatrixStack", "ofMatrixStack *", 0, 0, (void*)&_wrap_class_ofMatrixStack, 0};
static swig_type_info _swigt__p_ofMesh = {"_p_ofMesh", "ofMesh *", 0, 0, (void*)&_wrap_class_ofMesh, 0};
static swig_type_info _swigt__p_ofMeshFace = {"_p_ofMeshFace", "ofMeshFace *", 0, 0, (void*)&_wrap_class_ofMeshFace, 0};
static swig_type_info _swigt__p_ofMessage = {"_p_ofMessage", "ofMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofNode = {"_p_ofNode", "ofNode *", 0, 0, (void*)&_wrap_class_ofNode, 0};
static swig_type_info _swigt__p_ofParameterGroup = {"_p_ofParameterGroup", "ofParameterGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPath = {"_p_ofPath", "ofPath *", 0, 0, (void*)&_wrap_class_ofPath, 0};
static swig_type_info _swigt__p_ofPixels_T_float_t = {"_p_ofPixels_T_float_t", "ofPixels_< float > *|ofFloatPixels *", 0, 0, (void*)&_wrap_class_ofFloatPixels, 0};
static swig_type_info _swigt__p_ofPixels_T_unsigned_char_t = {"_p_ofPixels_T_unsigned_char_t", "ofPixels_< unsigned char > *|ofPixels *", 0, 0, (void*)&_wrap_class_ofPixels, 0};
static swig_type_info _swigt__p_ofPixels_T_unsigned_short_t = {"_p_ofPixels_T_unsigned_short_t", "ofPixels_< unsigned short > *|ofShortPixels *", 0, 0, (void*)&_wrap_class_ofShortPixels, 0};
static swig_type_info _swigt__p_ofPlanePrimitive = {"_p_ofPlanePrimitive", "ofPlanePrimitive *", 0, 0, (void*)&_wrap_class_ofPlanePrimitive, 0};
static swig_type_info _swigt__p_ofPolyRenderMode = {"_p_ofPolyRenderMode", "ofPolyRenderMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPolyline = {"_p_ofPolyline", "ofPolyline *", 0, 0, (void*)&_wrap_class_ofPolyline, 0};
static swig_type_info _swigt__p_ofPrimitiveMode = {"_p_ofPrimitiveMode", "ofPrimitiveMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofQuaternion = {"_p_ofQuaternion", "ofQuaternion *", 0, 0, (void*)&_wrap_class_ofQuaternion, 0};
static swig_type_info _swigt__p_ofRectangle = {"_p_ofRectangle", "ofRectangle *", 0, 0, (void*)&_wrap_class_ofRectangle, 0};
static swig_type_info _swigt__p_ofSerialDeviceInfo = {"_p_ofSerialDeviceInfo", "ofSerialDeviceInfo *", 0, 0, (void*)&_wrap_class_ofSerialDeviceInfo, 0};
static swig_type_info _swigt__p_ofShader = {"_p_ofShader", "ofShader *", 0, 0, (void*)&_wrap_class_ofShader, 0};
static swig_type_info _swigt__p_ofSoundDevice = {"_p_ofSoundDevice", "ofSoundDevice *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofSoundPlayer = {"_p_ofSoundPlayer", "ofSoundPlayer *", 0, 0, (void*)&_wrap_class_ofSoundPlayer, 0};
static swig_type_info _swigt__p_ofSoundStream = {"_p_ofSoundStream", "ofSoundStream *", 0, 0, (void*)&_wrap_class_ofSoundStream, 0};
static swig_type_info _swigt__p_ofSpherePrimitive = {"_p_ofSpherePrimitive", "ofSpherePrimitive *", 0, 0, (void*)&_wrap_class_ofSpherePrimitive, 0};
static swig_type_info _swigt__p_ofStyle = {"_p_ofStyle", "ofStyle *", 0, 0, (void*)&_wrap_class_ofStyle, 0};
static swig_type_info _swigt__p_ofTTFCharacter = {"_p_ofTTFCharacter", "ofTTFCharacter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofTexture = {"_p_ofTexture", "ofTexture *", 0, 0, (void*)&_wrap_class_ofTexture, 0};
static swig_type_info _swigt__p_ofTextureData = {"_p_ofTextureData", "ofTextureData *", 0, 0, (void*)&_wrap_class_ofTextureData, 0};
static swig_type_info _swigt__p_ofTouchEventArgs = {"_p_ofTouchEventArgs", "ofTouchEventArgs *", 0, 0, (void*)&_wrap_class_ofTouchEventArgs, 0};
static swig_type_info _swigt__p_ofTrueTypeFont = {"_p_ofTrueTypeFont", "ofTrueTypeFont *", 0, 0, (void*)&_wrap_class_ofTrueTypeFont, 0};
static swig_type_info _swigt__p_ofURLFileLoader = {"_p_ofURLFileLoader", "ofURLFileLoader *", 0, 0, (void*)&_wrap_class_ofURLFileLoader, 0};
static swig_type_info _swigt__p_ofUTF8Iterator = {"_p_ofUTF8Iterator", "ofUTF8Iterator *", 0, 0, (void*)&_wrap_class_ofUTF8Iterator, 0};
static swig_type_info _swigt__p_ofVbo = {"_p_ofVbo", "ofVbo *", 0, 0, (void*)&_wrap_class_ofVbo, 0};
static swig_type_info _swigt__p_ofVboMesh = {"_p_ofVboMesh", "ofVboMesh *", 0, 0, (void*)&_wrap_class_ofVboMesh, 0};
static swig_type_info _swigt__p_ofVec2f = {"_p_ofVec2f", "ofVec2f *", 0, 0, (void*)&_wrap_class_ofVec2f, 0};
static swig_type_info _swigt__p_ofVec3f = {"_p_ofVec3f", "ofPoint *|ofVec3f *", 0, 0, (void*)&_wrap_class_ofVec3f, 0};
static swig_type_info _swigt__p_ofVec4f = {"_p_ofVec4f", "ofVec4f *", 0, 0, (void*)&_wrap_class_ofVec4f, 0};
static swig_type_info _swigt__p_ofVideoGrabber = {"_p_ofVideoGrabber", "ofVideoGrabber *", 0, 0, (void*)&_wrap_class_ofVideoGrabber, 0};
static swig_type_info _swigt__p_ofVideoPlayer = {"_p_ofVideoPlayer", "ofVideoPlayer *", 0, 0, (void*)&_wrap_class_ofVideoPlayer, 0};
static swig_type_info _swigt__p_ofWindowSettings = {"_p_ofWindowSettings", "ofWindowSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ostream = {"_p_ostream", "ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_ofAppBaseWindow_t = {"_p_shared_ptrT_ofAppBaseWindow_t", "shared_ptr< ofAppBaseWindow > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_ofBaseApp_t = {"_p_shared_ptrT_ofBaseApp_t", "shared_ptr< ofBaseApp > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_ofBaseRenderer_t = {"_p_shared_ptrT_ofBaseRenderer_t", "shared_ptr< ofBaseRenderer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_ofBaseSoundPlayer_t = {"_p_shared_ptrT_ofBaseSoundPlayer_t", "shared_ptr< ofBaseSoundPlayer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_ofBaseSoundStream_t = {"_p_shared_ptrT_ofBaseSoundStream_t", "shared_ptr< ofBaseSoundStream > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_ofBaseVideoGrabber_t = {"_p_shared_ptrT_ofBaseVideoGrabber_t", "shared_ptr< ofBaseVideoGrabber > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_ofBaseVideoPlayer_t = {"_p_shared_ptrT_ofBaseVideoPlayer_t", "shared_ptr< ofBaseVideoPlayer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_shared_ptrT_ofMainLoop_t = {"_p_shared_ptrT_ofMainLoop_t", "shared_ptr< ofMainLoop > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__filesystem__path = {"_p_std__filesystem__path", "std::filesystem::path *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_char_t__const_iterator = {"_p_std__vectorT_char_t__const_iterator", "std::vector< char >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_t__const_reverse_iterator = {"_p_std__vectorT_char_t__const_reverse_iterator", "std::vector< char >::const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_t__iterator = {"_p_std__vectorT_char_t__iterator", "std::vector< char >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_t__reverse_iterator = {"_p_std__vectorT_char_t__reverse_iterator", "std::vector< char >::reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_FloatVector, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_IntVector, 0};
static swig_type_info _swigt__p_std__vectorT_ofColor_T_float_t_t = {"_p_std__vectorT_ofColor_T_float_t_t", "std::vector< ofColor_< float > > *|std::vector< ofFloatColor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofFile_t = {"_p_std__vectorT_ofFile_t", "std::vector< ofFile > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofFile_t__const_iterator = {"_p_std__vectorT_ofFile_t__const_iterator", "std::vector< ofFile >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofFile_t__const_reverse_iterator = {"_p_std__vectorT_ofFile_t__const_reverse_iterator", "std::vector< ofFile >::const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofMeshFace_t = {"_p_std__vectorT_ofMeshFace_t", "std::vector< ofMeshFace > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofPath__Command_t = {"_p_std__vectorT_ofPath__Command_t", "std::vector< ofPath::Command > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofPolyline_t = {"_p_std__vectorT_ofPolyline_t", "std::vector< ofPolyline > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofSoundDevice_t = {"_p_std__vectorT_ofSoundDevice_t", "std::vector< ofSoundDevice > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofTTFCharacter_t = {"_p_std__vectorT_ofTTFCharacter_t", "std::vector< ofTTFCharacter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofTexture_t = {"_p_std__vectorT_ofTexture_t", "std::vector< ofTexture > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec2f_t = {"_p_std__vectorT_ofVec2f_t", "std::vector< ofVec2f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec3f_t = {"_p_std__vectorT_ofVec3f_t", "std::vector< ofVec3f > *|std::vector< ofPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec3f_t__const_iterator = {"_p_std__vectorT_ofVec3f_t__const_iterator", "std::vector< ofVec3f >::const_iterator *|std::vector< ofPoint >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec3f_t__const_reverse_iterator = {"_p_std__vectorT_ofVec3f_t__const_reverse_iterator", "std::vector< ofVec3f >::const_reverse_iterator *|std::vector< ofPoint >::const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec3f_t__iterator = {"_p_std__vectorT_ofVec3f_t__iterator", "std::vector< ofVec3f >::iterator *|std::vector< ofPoint >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec3f_t__reverse_iterator = {"_p_std__vectorT_ofVec3f_t__reverse_iterator", "std::vector< ofVec3f >::reverse_iterator *|std::vector< ofPoint >::reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVideoDevice_t = {"_p_std__vectorT_ofVideoDevice_t", "std::vector< ofVideoDevice > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)&_wrap_class_StringVector, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *|std::vector< ofIndexType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_weak_ptrT_ofLight__Data_t_t = {"_p_std__vectorT_weak_ptrT_ofLight__Data_t_t", "std::vector< weak_ptr< ofLight::Data > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|ofPixels_< unsigned char >::iterator|ofPixels_< unsigned char >::const_iterator|ofPixels_< unsigned char >::reverse_iterator|ofPixels_< unsigned char >::const_reverse_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "ofIndexType *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|ofPixels_< unsigned short >::iterator|ofPixels_< unsigned short >::const_iterator|ofPixels_< unsigned short >::reverse_iterator|ofPixels_< unsigned short >::const_reverse_iterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_utf8__iteratorT_std__string__const_iterator_t = {"_p_utf8__iteratorT_std__string__const_iterator_t", "utf8::iterator< std::string::const_iterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_utf8__iteratorT_std__string__const_reverse_iterator_t = {"_p_utf8__iteratorT_std__string__const_reverse_iterator_t", "utf8::iterator< std::string::const_reverse_iterator > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GLenum,
  &_swigt__p_GLsizei,
  &_swigt__p_GLuint,
  &_swigt__p_double,
  &_swigt__p_filebuf,
  &_swigt__p_float,
  &_swigt__p_fstream,
  &_swigt__p_int,
  &_swigt__p_istream,
  &_swigt__p_of3dGraphics,
  &_swigt__p_of3dPrimitive,
  &_swigt__p_ofAbstractImage,
  &_swigt__p_ofAppBaseWindow,
  &_swigt__p_ofBaseApp,
  &_swigt__p_ofBaseDraws,
  &_swigt__p_ofBaseFileSerializer,
  &_swigt__p_ofBaseGLRenderer,
  &_swigt__p_ofBaseHasPixels,
  &_swigt__p_ofBaseHasTexture,
  &_swigt__p_ofBaseHasTexturePlanes,
  &_swigt__p_ofBaseImage_T_float_t,
  &_swigt__p_ofBaseImage_T_unsigned_char_t,
  &_swigt__p_ofBaseImage_T_unsigned_short_t,
  &_swigt__p_ofBaseLoggerChannel,
  &_swigt__p_ofBaseMaterial,
  &_swigt__p_ofBaseRenderer,
  &_swigt__p_ofBaseSerializer,
  &_swigt__p_ofBaseSoundInput,
  &_swigt__p_ofBaseSoundOutput,
  &_swigt__p_ofBaseSoundPlayer,
  &_swigt__p_ofBaseURLFileLoader,
  &_swigt__p_ofBaseUpdates,
  &_swigt__p_ofBaseVideo,
  &_swigt__p_ofBaseVideoDraws,
  &_swigt__p_ofBaseVideoGrabber,
  &_swigt__p_ofBaseVideoPlayer,
  &_swigt__p_ofBoxPrimitive,
  &_swigt__p_ofBuffer,
  &_swigt__p_ofBufferObject,
  &_swigt__p_ofCamera,
  &_swigt__p_ofColor_T_float_t,
  &_swigt__p_ofColor_T_unsigned_char_t,
  &_swigt__p_ofColor_T_unsigned_short_t,
  &_swigt__p_ofConePrimitive,
  &_swigt__p_ofConsoleLoggerChannel,
  &_swigt__p_ofCoreEvents,
  &_swigt__p_ofCylinderPrimitive,
  &_swigt__p_ofDirectory,
  &_swigt__p_ofDragInfo,
  &_swigt__p_ofEasyCam,
  &_swigt__p_ofEventArgs,
  &_swigt__p_ofEventT_ofHttpResponse_t,
  &_swigt__p_ofFbo,
  &_swigt__p_ofFbo__Settings,
  &_swigt__p_ofFile,
  &_swigt__p_ofFileDialogResult,
  &_swigt__p_ofFileLoggerChannel,
  &_swigt__p_ofFilePath,
  &_swigt__p_ofGLProgrammableRenderer,
  &_swigt__p_ofHttpRequest,
  &_swigt__p_ofHttpResponse,
  &_swigt__p_ofIcoSpherePrimitive,
  &_swigt__p_ofImage_T_float_t,
  &_swigt__p_ofImage_T_unsigned_char_t,
  &_swigt__p_ofImage_T_unsigned_short_t,
  &_swigt__p_ofKeyEventArgs,
  &_swigt__p_ofLight,
  &_swigt__p_ofLog,
  &_swigt__p_ofLogError,
  &_swigt__p_ofLogFatalError,
  &_swigt__p_ofLogNotice,
  &_swigt__p_ofLogVerbose,
  &_swigt__p_ofLogWarning,
  &_swigt__p_ofMaterial,
  &_swigt__p_ofMaterial__Data,
  &_swigt__p_ofMatrix3x3,
  &_swigt__p_ofMatrix4x4,
  &_swigt__p_ofMatrixStack,
  &_swigt__p_ofMesh,
  &_swigt__p_ofMeshFace,
  &_swigt__p_ofMessage,
  &_swigt__p_ofMouseEventArgs,
  &_swigt__p_ofNode,
  &_swigt__p_ofParameterGroup,
  &_swigt__p_ofPath,
  &_swigt__p_ofPixels_T_float_t,
  &_swigt__p_ofPixels_T_unsigned_char_t,
  &_swigt__p_ofPixels_T_unsigned_short_t,
  &_swigt__p_ofPlanePrimitive,
  &_swigt__p_ofPolyRenderMode,
  &_swigt__p_ofPolyline,
  &_swigt__p_ofPrimitiveMode,
  &_swigt__p_ofQuaternion,
  &_swigt__p_ofRectangle,
  &_swigt__p_ofResizeEventArgs,
  &_swigt__p_ofSerialDeviceInfo,
  &_swigt__p_ofShader,
  &_swigt__p_ofSoundDevice,
  &_swigt__p_ofSoundPlayer,
  &_swigt__p_ofSoundStream,
  &_swigt__p_ofSpherePrimitive,
  &_swigt__p_ofStyle,
  &_swigt__p_ofTTFCharacter,
  &_swigt__p_ofTexture,
  &_swigt__p_ofTextureData,
  &_swigt__p_ofTouchEventArgs,
  &_swigt__p_ofTrueTypeFont,
  &_swigt__p_ofURLFileLoader,
  &_swigt__p_ofUTF8Iterator,
  &_swigt__p_ofVbo,
  &_swigt__p_ofVboMesh,
  &_swigt__p_ofVec2f,
  &_swigt__p_ofVec3f,
  &_swigt__p_ofVec4f,
  &_swigt__p_ofVideoGrabber,
  &_swigt__p_ofVideoPlayer,
  &_swigt__p_ofWindowSettings,
  &_swigt__p_ostream,
  &_swigt__p_shared_ptrT_ofAppBaseWindow_t,
  &_swigt__p_shared_ptrT_ofBaseApp_t,
  &_swigt__p_shared_ptrT_ofBaseRenderer_t,
  &_swigt__p_shared_ptrT_ofBaseSoundPlayer_t,
  &_swigt__p_shared_ptrT_ofBaseSoundStream_t,
  &_swigt__p_shared_ptrT_ofBaseVideoGrabber_t,
  &_swigt__p_shared_ptrT_ofBaseVideoPlayer_t,
  &_swigt__p_shared_ptrT_ofMainLoop_t,
  &_swigt__p_std__filesystem__path,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_char_t__const_iterator,
  &_swigt__p_std__vectorT_char_t__const_reverse_iterator,
  &_swigt__p_std__vectorT_char_t__iterator,
  &_swigt__p_std__vectorT_char_t__reverse_iterator,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_ofColor_T_float_t_t,
  &_swigt__p_std__vectorT_ofFile_t,
  &_swigt__p_std__vectorT_ofFile_t__const_iterator,
  &_swigt__p_std__vectorT_ofFile_t__const_reverse_iterator,
  &_swigt__p_std__vectorT_ofMeshFace_t,
  &_swigt__p_std__vectorT_ofPath__Command_t,
  &_swigt__p_std__vectorT_ofPolyline_t,
  &_swigt__p_std__vectorT_ofSoundDevice_t,
  &_swigt__p_std__vectorT_ofTTFCharacter_t,
  &_swigt__p_std__vectorT_ofTexture_t,
  &_swigt__p_std__vectorT_ofVec2f_t,
  &_swigt__p_std__vectorT_ofVec3f_t,
  &_swigt__p_std__vectorT_ofVec3f_t__const_iterator,
  &_swigt__p_std__vectorT_ofVec3f_t__const_reverse_iterator,
  &_swigt__p_std__vectorT_ofVec3f_t__iterator,
  &_swigt__p_std__vectorT_ofVec3f_t__reverse_iterator,
  &_swigt__p_std__vectorT_ofVideoDevice_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_weak_ptrT_ofLight__Data_t_t,
  &_swigt__p_uint64_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_utf8__iteratorT_std__string__const_iterator_t,
  &_swigt__p_utf8__iteratorT_std__string__const_reverse_iterator_t,
};

static swig_cast_info _swigc__p_GLenum[] = {  {&_swigt__p_GLenum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLsizei[] = {  {&_swigt__p_GLsizei, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLuint[] = {  {&_swigt__p_GLuint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_filebuf[] = {  {&_swigt__p_filebuf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fstream[] = {  {&_swigt__p_fstream, 0, 0, 0},  {&_swigt__p_ofFile, _p_ofFileTo_p_fstream, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_istream[] = {  {&_swigt__p_istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_of3dGraphics[] = {  {&_swigt__p_of3dGraphics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_of3dPrimitive[] = {  {&_swigt__p_of3dPrimitive, 0, 0, 0},  {&_swigt__p_ofPlanePrimitive, _p_ofPlanePrimitiveTo_p_of3dPrimitive, 0, 0},  {&_swigt__p_ofSpherePrimitive, _p_ofSpherePrimitiveTo_p_of3dPrimitive, 0, 0},  {&_swigt__p_ofIcoSpherePrimitive, _p_ofIcoSpherePrimitiveTo_p_of3dPrimitive, 0, 0},  {&_swigt__p_ofCylinderPrimitive, _p_ofCylinderPrimitiveTo_p_of3dPrimitive, 0, 0},  {&_swigt__p_ofConePrimitive, _p_ofConePrimitiveTo_p_of3dPrimitive, 0, 0},  {&_swigt__p_ofBoxPrimitive, _p_ofBoxPrimitiveTo_p_of3dPrimitive, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofAppBaseWindow[] = {  {&_swigt__p_ofAppBaseWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseApp[] = {  {&_swigt__p_ofBaseApp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofAbstractImage[] = {{&_swigt__p_ofAbstractImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseDraws[] = {  {&_swigt__p_ofAbstractImage, _p_ofAbstractImageTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofBaseDraws, 0, 0, 0},  {&_swigt__p_ofTexture, _p_ofTextureTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofFbo, _p_ofFboTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseDraws, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseHasPixels[] = {  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseHasPixels, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseHasPixels, 0, 0},  {&_swigt__p_ofBaseVideoGrabber, _p_ofBaseVideoGrabberTo_p_ofBaseHasPixels, 0, 0},  {&_swigt__p_ofBaseVideo, _p_ofBaseVideoTo_p_ofBaseHasPixels, 0, 0},  {&_swigt__p_ofBaseHasPixels, 0, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseHasPixels, 0, 0},  {&_swigt__p_ofBaseVideoPlayer, _p_ofBaseVideoPlayerTo_p_ofBaseHasPixels, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseHasTexture[] = {  {&_swigt__p_ofAbstractImage, _p_ofAbstractImageTo_p_ofBaseHasTexture, 0, 0},  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseHasTexture, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseHasTexture, 0, 0},  {&_swigt__p_ofBaseHasTexture, 0, 0, 0},  {&_swigt__p_ofFbo, _p_ofFboTo_p_ofBaseHasTexture, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseHasTexture, 0, 0},  {&_swigt__p_ofBaseHasTexturePlanes, _p_ofBaseHasTexturePlanesTo_p_ofBaseHasTexture, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseHasTexturePlanes[] = {  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseHasTexturePlanes, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseHasTexturePlanes, 0, 0},  {&_swigt__p_ofBaseHasTexturePlanes, 0, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseHasTexturePlanes, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseImage_T_float_t[] = {  {&_swigt__p_ofBaseImage_T_float_t, 0, 0, 0},  {&_swigt__p_ofImage_T_float_t, _p_ofImage_T_float_tTo_p_ofBaseImage_T_float_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseImage_T_unsigned_char_t[] = {  {&_swigt__p_ofBaseImage_T_unsigned_char_t, 0, 0, 0},  {&_swigt__p_ofImage_T_unsigned_char_t, _p_ofImage_T_unsigned_char_tTo_p_ofBaseImage_T_unsigned_char_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseImage_T_unsigned_short_t[] = {  {&_swigt__p_ofBaseImage_T_unsigned_short_t, 0, 0, 0},  {&_swigt__p_ofImage_T_unsigned_short_t, _p_ofImage_T_unsigned_short_tTo_p_ofBaseImage_T_unsigned_short_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofConsoleLoggerChannel[] = {{&_swigt__p_ofConsoleLoggerChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFileLoggerChannel[] = {{&_swigt__p_ofFileLoggerChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseLoggerChannel[] = {  {&_swigt__p_ofBaseLoggerChannel, 0, 0, 0},  {&_swigt__p_ofConsoleLoggerChannel, _p_ofConsoleLoggerChannelTo_p_ofBaseLoggerChannel, 0, 0},  {&_swigt__p_ofFileLoggerChannel, _p_ofFileLoggerChannelTo_p_ofBaseLoggerChannel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseMaterial[] = {  {&_swigt__p_ofBaseMaterial, 0, 0, 0},  {&_swigt__p_ofMaterial, _p_ofMaterialTo_p_ofBaseMaterial, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseGLRenderer[] = {{&_swigt__p_ofBaseGLRenderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseRenderer[] = {  {&_swigt__p_ofBaseRenderer, 0, 0, 0},  {&_swigt__p_ofBaseGLRenderer, _p_ofBaseGLRendererTo_p_ofBaseRenderer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseFileSerializer[] = {{&_swigt__p_ofBaseFileSerializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseSerializer[] = {  {&_swigt__p_ofBaseSerializer, 0, 0, 0},  {&_swigt__p_ofBaseFileSerializer, _p_ofBaseFileSerializerTo_p_ofBaseSerializer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseSoundInput[] = {  {&_swigt__p_ofBaseSoundInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseSoundOutput[] = {  {&_swigt__p_ofBaseSoundOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseSoundPlayer[] = {  {&_swigt__p_ofBaseSoundPlayer, 0, 0, 0},  {&_swigt__p_ofSoundPlayer, _p_ofSoundPlayerTo_p_ofBaseSoundPlayer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseURLFileLoader[] = {  {&_swigt__p_ofBaseURLFileLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseUpdates[] = {  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseUpdates, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseUpdates, 0, 0},  {&_swigt__p_ofBaseVideoGrabber, _p_ofBaseVideoGrabberTo_p_ofBaseUpdates, 0, 0},  {&_swigt__p_ofBaseVideo, _p_ofBaseVideoTo_p_ofBaseUpdates, 0, 0},  {&_swigt__p_ofBaseUpdates, 0, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseUpdates, 0, 0},  {&_swigt__p_ofBaseVideoPlayer, _p_ofBaseVideoPlayerTo_p_ofBaseUpdates, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideo[] = {  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseVideo, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseVideo, 0, 0},  {&_swigt__p_ofBaseVideoGrabber, _p_ofBaseVideoGrabberTo_p_ofBaseVideo, 0, 0},  {&_swigt__p_ofBaseVideo, 0, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseVideo, 0, 0},  {&_swigt__p_ofBaseVideoPlayer, _p_ofBaseVideoPlayerTo_p_ofBaseVideo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideoDraws[] = {  {&_swigt__p_ofBaseVideoDraws, 0, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseVideoDraws, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseVideoDraws, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideoGrabber[] = {  {&_swigt__p_ofBaseVideoGrabber, 0, 0, 0},  {&_swigt__p_ofVideoGrabber, _p_ofVideoGrabberTo_p_ofBaseVideoGrabber, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideoPlayer[] = {  {&_swigt__p_ofBaseVideoPlayer, 0, 0, 0},  {&_swigt__p_ofVideoPlayer, _p_ofVideoPlayerTo_p_ofBaseVideoPlayer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBoxPrimitive[] = {  {&_swigt__p_ofBoxPrimitive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBuffer[] = {  {&_swigt__p_ofBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBufferObject[] = {  {&_swigt__p_ofBufferObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofCamera[] = {  {&_swigt__p_ofEasyCam, _p_ofEasyCamTo_p_ofCamera, 0, 0},  {&_swigt__p_ofCamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_float_t[] = {  {&_swigt__p_ofColor_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_unsigned_char_t[] = {  {&_swigt__p_ofColor_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_unsigned_short_t[] = {  {&_swigt__p_ofColor_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofConePrimitive[] = {  {&_swigt__p_ofConePrimitive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofCoreEvents[] = {  {&_swigt__p_ofCoreEvents, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofCylinderPrimitive[] = {  {&_swigt__p_ofCylinderPrimitive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofDirectory[] = {  {&_swigt__p_ofDirectory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofDragInfo[] = {  {&_swigt__p_ofDragInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEasyCam[] = {  {&_swigt__p_ofEasyCam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofKeyEventArgs[] = {{&_swigt__p_ofKeyEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMouseEventArgs[] = {{&_swigt__p_ofMouseEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofResizeEventArgs[] = {{&_swigt__p_ofResizeEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventArgs[] = {  {&_swigt__p_ofEventArgs, 0, 0, 0},  {&_swigt__p_ofKeyEventArgs, _p_ofKeyEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofMouseEventArgs, _p_ofMouseEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofTouchEventArgs, _p_ofTouchEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofResizeEventArgs, _p_ofResizeEventArgsTo_p_ofEventArgs, 0, 0},  {&_swigt__p_ofMessage, _p_ofMessageTo_p_ofEventArgs, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_ofHttpResponse_t[] = {  {&_swigt__p_ofEventT_ofHttpResponse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFbo[] = {  {&_swigt__p_ofFbo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFbo__Settings[] = {  {&_swigt__p_ofFbo__Settings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFile[] = {  {&_swigt__p_ofFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFileDialogResult[] = {  {&_swigt__p_ofFileDialogResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFilePath[] = {  {&_swigt__p_ofFilePath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofGLProgrammableRenderer[] = {  {&_swigt__p_ofGLProgrammableRenderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofHttpRequest[] = {  {&_swigt__p_ofHttpRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofHttpResponse[] = {  {&_swigt__p_ofHttpResponse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofIcoSpherePrimitive[] = {  {&_swigt__p_ofIcoSpherePrimitive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_float_t[] = {  {&_swigt__p_ofImage_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_unsigned_char_t[] = {  {&_swigt__p_ofImage_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_unsigned_short_t[] = {  {&_swigt__p_ofImage_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLight[] = {  {&_swigt__p_ofLight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogError[] = {{&_swigt__p_ofLogError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogNotice[] = {{&_swigt__p_ofLogNotice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogFatalError[] = {{&_swigt__p_ofLogFatalError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogVerbose[] = {{&_swigt__p_ofLogVerbose, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLogWarning[] = {{&_swigt__p_ofLogWarning, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLog[] = {  {&_swigt__p_ofLogError, _p_ofLogErrorTo_p_ofLog, 0, 0},  {&_swigt__p_ofLogNotice, _p_ofLogNoticeTo_p_ofLog, 0, 0},  {&_swigt__p_ofLogFatalError, _p_ofLogFatalErrorTo_p_ofLog, 0, 0},  {&_swigt__p_ofLogVerbose, _p_ofLogVerboseTo_p_ofLog, 0, 0},  {&_swigt__p_ofLog, 0, 0, 0},  {&_swigt__p_ofLogWarning, _p_ofLogWarningTo_p_ofLog, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMaterial[] = {  {&_swigt__p_ofMaterial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMaterial__Data[] = {  {&_swigt__p_ofMaterial__Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMatrix3x3[] = {  {&_swigt__p_ofMatrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMatrix4x4[] = {  {&_swigt__p_ofMatrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMatrixStack[] = {  {&_swigt__p_ofMatrixStack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMesh[] = {  {&_swigt__p_ofMesh, 0, 0, 0},  {&_swigt__p_ofVboMesh, _p_ofVboMeshTo_p_ofMesh, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMeshFace[] = {  {&_swigt__p_ofMeshFace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMessage[] = {  {&_swigt__p_ofMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofNode[] = {  {&_swigt__p_ofNode, 0, 0, 0},  {&_swigt__p_of3dPrimitive, _p_of3dPrimitiveTo_p_ofNode, 0, 0},  {&_swigt__p_ofPlanePrimitive, _p_ofPlanePrimitiveTo_p_ofNode, 0, 0},  {&_swigt__p_ofSpherePrimitive, _p_ofSpherePrimitiveTo_p_ofNode, 0, 0},  {&_swigt__p_ofIcoSpherePrimitive, _p_ofIcoSpherePrimitiveTo_p_ofNode, 0, 0},  {&_swigt__p_ofCylinderPrimitive, _p_ofCylinderPrimitiveTo_p_ofNode, 0, 0},  {&_swigt__p_ofConePrimitive, _p_ofConePrimitiveTo_p_ofNode, 0, 0},  {&_swigt__p_ofBoxPrimitive, _p_ofBoxPrimitiveTo_p_ofNode, 0, 0},  {&_swigt__p_ofEasyCam, _p_ofEasyCamTo_p_ofNode, 0, 0},  {&_swigt__p_ofLight, _p_ofLightTo_p_ofNode, 0, 0},  {&_swigt__p_ofCamera, _p_ofCameraTo_p_ofNode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofParameterGroup[] = {  {&_swigt__p_ofParameterGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPath[] = {  {&_swigt__p_ofPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_float_t[] = {  {&_swigt__p_ofPixels_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_unsigned_char_t[] = {  {&_swigt__p_ofPixels_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_unsigned_short_t[] = {  {&_swigt__p_ofPixels_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPlanePrimitive[] = {  {&_swigt__p_ofPlanePrimitive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPolyRenderMode[] = {  {&_swigt__p_ofPolyRenderMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPolyline[] = {  {&_swigt__p_ofPolyline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPrimitiveMode[] = {  {&_swigt__p_ofPrimitiveMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofQuaternion[] = {  {&_swigt__p_ofQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofRectangle[] = {  {&_swigt__p_ofRectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSerialDeviceInfo[] = {  {&_swigt__p_ofSerialDeviceInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofShader[] = {  {&_swigt__p_ofShader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSoundDevice[] = {  {&_swigt__p_ofSoundDevice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSoundPlayer[] = {  {&_swigt__p_ofSoundPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSoundStream[] = {  {&_swigt__p_ofSoundStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSpherePrimitive[] = {  {&_swigt__p_ofSpherePrimitive, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofStyle[] = {  {&_swigt__p_ofStyle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTTFCharacter[] = {  {&_swigt__p_ofTTFCharacter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTexture[] = {  {&_swigt__p_ofTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTextureData[] = {  {&_swigt__p_ofTextureData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTouchEventArgs[] = {  {&_swigt__p_ofTouchEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTrueTypeFont[] = {  {&_swigt__p_ofTrueTypeFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofURLFileLoader[] = {  {&_swigt__p_ofURLFileLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofUTF8Iterator[] = {  {&_swigt__p_ofUTF8Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVbo[] = {  {&_swigt__p_ofVbo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVboMesh[] = {  {&_swigt__p_ofVboMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec2f[] = {  {&_swigt__p_ofMouseEventArgs, _p_ofMouseEventArgsTo_p_ofVec2f, 0, 0},  {&_swigt__p_ofTouchEventArgs, _p_ofTouchEventArgsTo_p_ofVec2f, 0, 0},  {&_swigt__p_ofVec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec3f[] = {  {&_swigt__p_ofVec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec4f[] = {  {&_swigt__p_ofVec4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVideoGrabber[] = {  {&_swigt__p_ofVideoGrabber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVideoPlayer[] = {  {&_swigt__p_ofVideoPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofWindowSettings[] = {  {&_swigt__p_ofWindowSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ostream[] = {  {&_swigt__p_ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_ofAppBaseWindow_t[] = {  {&_swigt__p_shared_ptrT_ofAppBaseWindow_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_ofBaseApp_t[] = {  {&_swigt__p_shared_ptrT_ofBaseApp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_ofBaseRenderer_t[] = {  {&_swigt__p_shared_ptrT_ofBaseRenderer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_ofBaseSoundPlayer_t[] = {  {&_swigt__p_shared_ptrT_ofBaseSoundPlayer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_ofBaseSoundStream_t[] = {  {&_swigt__p_shared_ptrT_ofBaseSoundStream_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_ofBaseVideoGrabber_t[] = {  {&_swigt__p_shared_ptrT_ofBaseVideoGrabber_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_ofBaseVideoPlayer_t[] = {  {&_swigt__p_shared_ptrT_ofBaseVideoPlayer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_shared_ptrT_ofMainLoop_t[] = {  {&_swigt__p_shared_ptrT_ofMainLoop_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__filesystem__path[] = {  {&_swigt__p_std__filesystem__path, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t__const_iterator[] = {  {&_swigt__p_std__vectorT_char_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t__const_reverse_iterator[] = {  {&_swigt__p_std__vectorT_char_t__const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t__iterator[] = {  {&_swigt__p_std__vectorT_char_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t__reverse_iterator[] = {  {&_swigt__p_std__vectorT_char_t__reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofColor_T_float_t_t[] = {  {&_swigt__p_std__vectorT_ofColor_T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofFile_t[] = {  {&_swigt__p_std__vectorT_ofFile_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofFile_t__const_iterator[] = {  {&_swigt__p_std__vectorT_ofFile_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofFile_t__const_reverse_iterator[] = {  {&_swigt__p_std__vectorT_ofFile_t__const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofMeshFace_t[] = {  {&_swigt__p_std__vectorT_ofMeshFace_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofPath__Command_t[] = {  {&_swigt__p_std__vectorT_ofPath__Command_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofPolyline_t[] = {  {&_swigt__p_std__vectorT_ofPolyline_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofSoundDevice_t[] = {  {&_swigt__p_std__vectorT_ofSoundDevice_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofTTFCharacter_t[] = {  {&_swigt__p_std__vectorT_ofTTFCharacter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofTexture_t[] = {  {&_swigt__p_std__vectorT_ofTexture_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec2f_t[] = {  {&_swigt__p_std__vectorT_ofVec2f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec3f_t[] = {  {&_swigt__p_std__vectorT_ofVec3f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec3f_t__const_iterator[] = {  {&_swigt__p_std__vectorT_ofVec3f_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec3f_t__const_reverse_iterator[] = {  {&_swigt__p_std__vectorT_ofVec3f_t__const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec3f_t__iterator[] = {  {&_swigt__p_std__vectorT_ofVec3f_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec3f_t__reverse_iterator[] = {  {&_swigt__p_std__vectorT_ofVec3f_t__reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVideoDevice_t[] = {  {&_swigt__p_std__vectorT_ofVideoDevice_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_weak_ptrT_ofLight__Data_t_t[] = {  {&_swigt__p_std__vectorT_weak_ptrT_ofLight__Data_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utf8__iteratorT_std__string__const_iterator_t[] = {  {&_swigt__p_utf8__iteratorT_std__string__const_iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_utf8__iteratorT_std__string__const_reverse_iterator_t[] = {  {&_swigt__p_utf8__iteratorT_std__string__const_reverse_iterator_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GLenum,
  _swigc__p_GLsizei,
  _swigc__p_GLuint,
  _swigc__p_double,
  _swigc__p_filebuf,
  _swigc__p_float,
  _swigc__p_fstream,
  _swigc__p_int,
  _swigc__p_istream,
  _swigc__p_of3dGraphics,
  _swigc__p_of3dPrimitive,
  _swigc__p_ofAbstractImage,
  _swigc__p_ofAppBaseWindow,
  _swigc__p_ofBaseApp,
  _swigc__p_ofBaseDraws,
  _swigc__p_ofBaseFileSerializer,
  _swigc__p_ofBaseGLRenderer,
  _swigc__p_ofBaseHasPixels,
  _swigc__p_ofBaseHasTexture,
  _swigc__p_ofBaseHasTexturePlanes,
  _swigc__p_ofBaseImage_T_float_t,
  _swigc__p_ofBaseImage_T_unsigned_char_t,
  _swigc__p_ofBaseImage_T_unsigned_short_t,
  _swigc__p_ofBaseLoggerChannel,
  _swigc__p_ofBaseMaterial,
  _swigc__p_ofBaseRenderer,
  _swigc__p_ofBaseSerializer,
  _swigc__p_ofBaseSoundInput,
  _swigc__p_ofBaseSoundOutput,
  _swigc__p_ofBaseSoundPlayer,
  _swigc__p_ofBaseURLFileLoader,
  _swigc__p_ofBaseUpdates,
  _swigc__p_ofBaseVideo,
  _swigc__p_ofBaseVideoDraws,
  _swigc__p_ofBaseVideoGrabber,
  _swigc__p_ofBaseVideoPlayer,
  _swigc__p_ofBoxPrimitive,
  _swigc__p_ofBuffer,
  _swigc__p_ofBufferObject,
  _swigc__p_ofCamera,
  _swigc__p_ofColor_T_float_t,
  _swigc__p_ofColor_T_unsigned_char_t,
  _swigc__p_ofColor_T_unsigned_short_t,
  _swigc__p_ofConePrimitive,
  _swigc__p_ofConsoleLoggerChannel,
  _swigc__p_ofCoreEvents,
  _swigc__p_ofCylinderPrimitive,
  _swigc__p_ofDirectory,
  _swigc__p_ofDragInfo,
  _swigc__p_ofEasyCam,
  _swigc__p_ofEventArgs,
  _swigc__p_ofEventT_ofHttpResponse_t,
  _swigc__p_ofFbo,
  _swigc__p_ofFbo__Settings,
  _swigc__p_ofFile,
  _swigc__p_ofFileDialogResult,
  _swigc__p_ofFileLoggerChannel,
  _swigc__p_ofFilePath,
  _swigc__p_ofGLProgrammableRenderer,
  _swigc__p_ofHttpRequest,
  _swigc__p_ofHttpResponse,
  _swigc__p_ofIcoSpherePrimitive,
  _swigc__p_ofImage_T_float_t,
  _swigc__p_ofImage_T_unsigned_char_t,
  _swigc__p_ofImage_T_unsigned_short_t,
  _swigc__p_ofKeyEventArgs,
  _swigc__p_ofLight,
  _swigc__p_ofLog,
  _swigc__p_ofLogError,
  _swigc__p_ofLogFatalError,
  _swigc__p_ofLogNotice,
  _swigc__p_ofLogVerbose,
  _swigc__p_ofLogWarning,
  _swigc__p_ofMaterial,
  _swigc__p_ofMaterial__Data,
  _swigc__p_ofMatrix3x3,
  _swigc__p_ofMatrix4x4,
  _swigc__p_ofMatrixStack,
  _swigc__p_ofMesh,
  _swigc__p_ofMeshFace,
  _swigc__p_ofMessage,
  _swigc__p_ofMouseEventArgs,
  _swigc__p_ofNode,
  _swigc__p_ofParameterGroup,
  _swigc__p_ofPath,
  _swigc__p_ofPixels_T_float_t,
  _swigc__p_ofPixels_T_unsigned_char_t,
  _swigc__p_ofPixels_T_unsigned_short_t,
  _swigc__p_ofPlanePrimitive,
  _swigc__p_ofPolyRenderMode,
  _swigc__p_ofPolyline,
  _swigc__p_ofPrimitiveMode,
  _swigc__p_ofQuaternion,
  _swigc__p_ofRectangle,
  _swigc__p_ofResizeEventArgs,
  _swigc__p_ofSerialDeviceInfo,
  _swigc__p_ofShader,
  _swigc__p_ofSoundDevice,
  _swigc__p_ofSoundPlayer,
  _swigc__p_ofSoundStream,
  _swigc__p_ofSpherePrimitive,
  _swigc__p_ofStyle,
  _swigc__p_ofTTFCharacter,
  _swigc__p_ofTexture,
  _swigc__p_ofTextureData,
  _swigc__p_ofTouchEventArgs,
  _swigc__p_ofTrueTypeFont,
  _swigc__p_ofURLFileLoader,
  _swigc__p_ofUTF8Iterator,
  _swigc__p_ofVbo,
  _swigc__p_ofVboMesh,
  _swigc__p_ofVec2f,
  _swigc__p_ofVec3f,
  _swigc__p_ofVec4f,
  _swigc__p_ofVideoGrabber,
  _swigc__p_ofVideoPlayer,
  _swigc__p_ofWindowSettings,
  _swigc__p_ostream,
  _swigc__p_shared_ptrT_ofAppBaseWindow_t,
  _swigc__p_shared_ptrT_ofBaseApp_t,
  _swigc__p_shared_ptrT_ofBaseRenderer_t,
  _swigc__p_shared_ptrT_ofBaseSoundPlayer_t,
  _swigc__p_shared_ptrT_ofBaseSoundStream_t,
  _swigc__p_shared_ptrT_ofBaseVideoGrabber_t,
  _swigc__p_shared_ptrT_ofBaseVideoPlayer_t,
  _swigc__p_shared_ptrT_ofMainLoop_t,
  _swigc__p_std__filesystem__path,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_char_t__const_iterator,
  _swigc__p_std__vectorT_char_t__const_reverse_iterator,
  _swigc__p_std__vectorT_char_t__iterator,
  _swigc__p_std__vectorT_char_t__reverse_iterator,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_ofColor_T_float_t_t,
  _swigc__p_std__vectorT_ofFile_t,
  _swigc__p_std__vectorT_ofFile_t__const_iterator,
  _swigc__p_std__vectorT_ofFile_t__const_reverse_iterator,
  _swigc__p_std__vectorT_ofMeshFace_t,
  _swigc__p_std__vectorT_ofPath__Command_t,
  _swigc__p_std__vectorT_ofPolyline_t,
  _swigc__p_std__vectorT_ofSoundDevice_t,
  _swigc__p_std__vectorT_ofTTFCharacter_t,
  _swigc__p_std__vectorT_ofTexture_t,
  _swigc__p_std__vectorT_ofVec2f_t,
  _swigc__p_std__vectorT_ofVec3f_t,
  _swigc__p_std__vectorT_ofVec3f_t__const_iterator,
  _swigc__p_std__vectorT_ofVec3f_t__const_reverse_iterator,
  _swigc__p_std__vectorT_ofVec3f_t__iterator,
  _swigc__p_std__vectorT_ofVec3f_t__reverse_iterator,
  _swigc__p_std__vectorT_ofVideoDevice_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_weak_ptrT_ofLight__Data_t_t,
  _swigc__p_uint64_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_utf8__iteratorT_std__string__const_iterator_t,
  _swigc__p_utf8__iteratorT_std__string__const_reverse_iterator_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "\n"
  "\n"
  "-- this isnt wrapped correctly, so set it here\n"
  "of.CLOSE = true\n"
  "\n"
  "-- handle typedefs which swig doesnt wrap\n"
  "of.Point = of.Vec3f\n"
  "\n"
  "-- class.lua\n"
  "-- Compatible with Lua 5.1 (not 5.0).\n"
  "function class(base, __init)\n"
  "   local c = {}    -- a new class instance\n"
  "   if not __init and type(base) == 'function' then\n"
  "	  __init = base\n"
  "	  base = nil\n"
  "   elseif type(base) == 'table' then\n"
  "	-- our new class is a shallow copy of the base class!\n"
  "	  for i,v in pairs(base) do\n"
  "		 c[i] = v\n"
  "	  end\n"
  "	  c._base = base\n"
  "   end\n"
  "   -- the class will be the metatable for all its objects,\n"
  "   -- and they will look up their methods in it.\n"
  "   c.__index = c\n"
  "\n"
  "   -- expose a constructor which can be called by <classname>(<args>)\n"
  "   local mt = {}\n"
  "   mt.__call = function(class_tbl, ...)\n"
  "   local obj = {}\n"
  "   setmetatable(obj,c)\n"
  "   if class_tbl.__init then\n"
  "	  class_tbl.__init(obj,...)\n"
  "   else\n"
  "	  -- make sure that any stuff from the base class is initialized!\n"
  "	  if base and base.__init then\n"
  "	  base.__init(obj, ...)\n"
  "	  end\n"
  "   end\n"
  "   return obj\n"
  "   end\n"
  "   c.__init = __init\n"
  "   c.is_a = function(self, klass)\n"
  "	  local m = getmetatable(self)\n"
  "	  while m do\n"
  "		 if m == klass then return true end\n"
  "		 m = m._base\n"
  "	  end\n"
  "	  return false\n"
  "   end\n"
  "   setmetatable(c, mt)\n"
  "   return c\n"
  "end";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

